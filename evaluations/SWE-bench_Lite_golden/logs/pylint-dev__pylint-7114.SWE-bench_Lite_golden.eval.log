[pylint-dev__pylint__2.15] [pylint-dev__pylint-7114] Task Metadata:
	- Instance ID: pylint-dev__pylint-7114
	- Testbed: pylint-dev__pylint__2.15
	- 
	- Evaluation Model: SWE-bench_Lite_golden 
[pylint-dev__pylint__2.15] [pylint-dev__pylint-7114] Command: git status --porcelain 
[pylint-dev__pylint__2.15] [pylint-dev__pylint-7114] Subprocess args: {"cwd": "/home/swe-bench/pylint-dev__pylint", "check": true, "shell": false, "capture_output": false, "text": true, "stdout": -1, "stderr": -2} 
[pylint-dev__pylint__2.15] [pylint-dev__pylint-7114] Std. Output:
 
[pylint-dev__pylint__2.15] [pylint-dev__pylint-7114] Return Code: 0 
[pylint-dev__pylint__2.15] [pylint-dev__pylint-7114] Command: git -c advice.detachedHead=false checkout 397c1703e8ae6349d33f7b99f45b2ccaf581e666 
[pylint-dev__pylint__2.15] [pylint-dev__pylint-7114] Subprocess args: {"cwd": "/home/swe-bench/pylint-dev__pylint", "check": true, "shell": false, "capture_output": false, "text": true, "stdout": -1, "stderr": -2} 
[pylint-dev__pylint__2.15] [pylint-dev__pylint-7114] Std. Output:
Previous HEAD position was e90702074 Fix `use-sequence-for-iteration` when unpacking a set with `*` (#7975) (#7988)
HEAD is now at 397c1703e Don't emit ``super-init-not-called`` for abstract ``__init__`` methods (#7227)
 
[pylint-dev__pylint__2.15] [pylint-dev__pylint-7114] Return Code: 0 
[pylint-dev__pylint__2.15] [pylint-dev__pylint-7114] Command: git apply -v /home/swe-bench/temp_pylint-dev__pylint-7114_pred_try.patch 
[pylint-dev__pylint__2.15] [pylint-dev__pylint-7114] Subprocess args: {"cwd": "/home/swe-bench/pylint-dev__pylint", "check": false, "shell": false, "capture_output": false, "text": true, "stdout": -1, "stderr": -2} 
[pylint-dev__pylint__2.15] [pylint-dev__pylint-7114] Std. Output:
Checking patch pylint/lint/expand_modules.py...
Applied patch pylint/lint/expand_modules.py cleanly.
 
[pylint-dev__pylint__2.15] [pylint-dev__pylint-7114] Return Code: 0 
[pylint-dev__pylint__2.15] [pylint-dev__pylint-7114] Apply patch successful (pred_try) 
>>>>> Applied Patch (pred_try)
[pylint-dev__pylint__2.15] [pylint-dev__pylint-7114] Command: git apply -v -R /home/swe-bench/temp_pylint-dev__pylint-7114_pred_try.patch 
[pylint-dev__pylint__2.15] [pylint-dev__pylint-7114] Subprocess args: {"cwd": "/home/swe-bench/pylint-dev__pylint", "check": false, "shell": false, "capture_output": false, "text": true, "stdout": -1, "stderr": -2} 
[pylint-dev__pylint__2.15] [pylint-dev__pylint-7114] Std. Output:
Checking patch pylint/lint/expand_modules.py...
Applied patch pylint/lint/expand_modules.py cleanly.
 
[pylint-dev__pylint__2.15] [pylint-dev__pylint-7114] Return Code: 0 
[pylint-dev__pylint__2.15] [pylint-dev__pylint-7114] Revert patch successful (pred_try) 
>>>>> Applied Patch (pred_try)
[pylint-dev__pylint__2.15] [pylint-dev__pylint-7114] Command: git apply -v /home/swe-bench/temp_pylint-dev__pylint-7114_pred.patch 
[pylint-dev__pylint__2.15] [pylint-dev__pylint-7114] Subprocess args: {"cwd": "/home/swe-bench/pylint-dev__pylint", "check": false, "shell": false, "capture_output": false, "text": true, "stdout": -1, "stderr": -2} 
[pylint-dev__pylint__2.15] [pylint-dev__pylint-7114] Std. Output:
Checking patch pylint/lint/expand_modules.py...
Applied patch pylint/lint/expand_modules.py cleanly.
 
[pylint-dev__pylint__2.15] [pylint-dev__pylint-7114] Return Code: 0 
[pylint-dev__pylint__2.15] [pylint-dev__pylint-7114] Apply patch successful (pred) 
>>>>> Applied Patch (pred)
[pylint-dev__pylint__2.15] [pylint-dev__pylint-7114] Command: git restore tests/checkers/unittest_imports.py 
[pylint-dev__pylint__2.15] [pylint-dev__pylint-7114] Subprocess args: {"cwd": "/home/swe-bench/pylint-dev__pylint", "check": true, "shell": false, "capture_output": false, "text": true, "stdout": -1, "stderr": -2} 
[pylint-dev__pylint__2.15] [pylint-dev__pylint-7114] Std. Output:
 
[pylint-dev__pylint__2.15] [pylint-dev__pylint-7114] Return Code: 0 
[pylint-dev__pylint__2.15] [pylint-dev__pylint-7114] Command: git restore tests/lint/unittest_lint.py 
[pylint-dev__pylint__2.15] [pylint-dev__pylint-7114] Subprocess args: {"cwd": "/home/swe-bench/pylint-dev__pylint", "check": true, "shell": false, "capture_output": false, "text": true, "stdout": -1, "stderr": -2} 
[pylint-dev__pylint__2.15] [pylint-dev__pylint-7114] Std. Output:
 
[pylint-dev__pylint__2.15] [pylint-dev__pylint-7114] Return Code: 0 
[pylint-dev__pylint__2.15] [pylint-dev__pylint-7114] Command: git apply -v /home/swe-bench/temp_pylint-dev__pylint-7114_test.patch 
[pylint-dev__pylint__2.15] [pylint-dev__pylint-7114] Subprocess args: {"cwd": "/home/swe-bench/pylint-dev__pylint", "check": false, "shell": false, "capture_output": false, "text": true, "stdout": -1, "stderr": -2} 
[pylint-dev__pylint__2.15] [pylint-dev__pylint-7114] Std. Output:
Checking patch tests/checkers/unittest_imports.py...
Checking patch tests/lint/unittest_lint.py...
Applied patch tests/checkers/unittest_imports.py cleanly.
Applied patch tests/lint/unittest_lint.py cleanly.
 
[pylint-dev__pylint__2.15] [pylint-dev__pylint-7114] Return Code: 0 
[pylint-dev__pylint__2.15] [pylint-dev__pylint-7114] Apply patch successful (test) 
>>>>> Applied Patch (test)
Test Script: conda run -n pylint-dev__pylint__2.15 pytest --no-header -rA -p no:cacheprovider tests/checkers/unittest_imports.py tests/lint/unittest_lint.py;
[pylint-dev__pylint__2.15] [pylint-dev__pylint-7114] Command: conda run -n pylint-dev__pylint__2.15 pytest --no-header -rA -p no:cacheprovider tests/checkers/unittest_imports.py tests/lint/unittest_lint.py 
[pylint-dev__pylint__2.15] [pylint-dev__pylint-7114] Subprocess args: {"cwd": "/home/swe-bench/pylint-dev__pylint", "check": false, "shell": false, "capture_output": false, "text": true, "stdout": -1, "stderr": -2, "timeout": 900} 
[pylint-dev__pylint__2.15] [pylint-dev__pylint-7114] Std. Output:
============================= test session starts ==============================
collected 63 items

tests/checkers/unittest_imports.py .x..FF                                [  9%]
tests/lint/unittest_lint.py ............................................ [ 79%]
.............                                                            [100%]

=================================== FAILURES ===================================
_________________ TestImportsChecker.test_wildcard_import_init _________________

self = <checkers.unittest_imports.TestImportsChecker object at 0x7eaff9e13cd0>

    def test_wildcard_import_init(self) -> None:
        module = astroid.MANAGER.ast_from_module_name("init_wildcard", REGR_DATA)
        import_from = module.body[0]
    
        with self.assertNoMessages():
>           self.checker.visit_importfrom(import_from)

tests/checkers/unittest_imports.py:86: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../miniconda3/envs/pylint-dev__pylint__2.15/lib/python3.9/contextlib.py:126: in __exit__
    next(self.gen)
pylint/testutils/checker_test_case.py:40: in assertNoMessages
    yield
../miniconda3/envs/pylint-dev__pylint__2.15/lib/python3.9/contextlib.py:126: in __exit__
    next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <checkers.unittest_imports.TestImportsChecker object at 0x7eaff9e13cd0>
ignore_position = False, messages = ()
got = [MessageTest(msg_id='import-error', line=1, node=<ImportFrom l.1 at 0x7eaff9c2b760>, args="'empty'", confidence=Confid...EFINED', description='Warning without any associated confidence level.'), col_offset=0, end_line=1, end_col_offset=19)]
no_msg = 'No message.'

    @contextlib.contextmanager
    def assertAddsMessages(
        self, *messages: MessageTest, ignore_position: bool = False
    ) -> Generator[None, None, None]:
        """Assert that exactly the given method adds the given messages.
    
        The list of messages must exactly match *all* the messages added by the
        method. Additionally, we check to see whether the args in each message can
        actually be substituted into the message string.
    
        Using the keyword argument `ignore_position`, all checks for position
        arguments (line, col_offset, ...) will be skipped. This can be used to
        just test messages for the correct node.
        """
        yield
        got = self.linter.release_messages()
        no_msg = "No message."
        expected = "\n".join(repr(m) for m in messages) or no_msg
        got_str = "\n".join(repr(m) for m in got) or no_msg
        msg = (
            "Expected messages did not match actual.\n"
            f"\nExpected:\n{expected}\n\nGot:\n{got_str}\n"
        )
    
>       assert len(messages) == len(got), msg
E       AssertionError: Expected messages did not match actual.
E         
E         Expected:
E         No message.
E         
E         Got:
E         MessageTest(msg_id='import-error', line=1, node=<ImportFrom l.1 at 0x7eaff9c2b760>, args="'empty'", confidence=Confidence(name='UNDEFINED', description='Warning without any associated confidence level.'), col_offset=0, end_line=1, end_col_offset=19)
E         
E       assert 0 == 1
E        +  where 0 = len(())
E        +  and   1 = len([MessageTest(msg_id='import-error', line=1, node=<ImportFrom l.1 at 0x7eaff9c2b760>, args="'empty'", confidence=Confid...EFINED', description='Warning without any associated confidence level.'), col_offset=0, end_line=1, end_col_offset=19)])

pylint/testutils/checker_test_case.py:66: AssertionError
_______________ TestImportsChecker.test_wildcard_import_non_init _______________

self = <checkers.unittest_imports.TestImportsChecker object at 0x7eaff9e139a0>

    def test_wildcard_import_non_init(self) -> None:
        module = astroid.MANAGER.ast_from_module_name("wildcard", REGR_DATA)
        import_from = module.body[0]
    
        msg = MessageTest(
            msg_id="wildcard-import",
            node=import_from,
            args="empty",
            confidence=UNDEFINED,
            line=1,
            col_offset=0,
            end_line=1,
            end_col_offset=19,
        )
        with self.assertAddsMessages(msg):
>           self.checker.visit_importfrom(import_from)

tests/checkers/unittest_imports.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../miniconda3/envs/pylint-dev__pylint__2.15/lib/python3.9/contextlib.py:126: in __exit__
    next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <checkers.unittest_imports.TestImportsChecker object at 0x7eaff9e139a0>
ignore_position = False
messages = (MessageTest(msg_id='wildcard-import', line=1, node=<ImportFrom l.1 at 0x7eaff9e99880>, args='empty', confidence=Confi...FINED', description='Warning without any associated confidence level.'), col_offset=0, end_line=1, end_col_offset=19),)
got = [MessageTest(msg_id='import-error', line=1, node=<ImportFrom l.1 at 0x7eaff9e99880>, args="'empty'", confidence=Confid...EFINED', description='Warning without any associated confidence level.'), col_offset=0, end_line=1, end_col_offset=19)]
no_msg = 'No message.'

    @contextlib.contextmanager
    def assertAddsMessages(
        self, *messages: MessageTest, ignore_position: bool = False
    ) -> Generator[None, None, None]:
        """Assert that exactly the given method adds the given messages.
    
        The list of messages must exactly match *all* the messages added by the
        method. Additionally, we check to see whether the args in each message can
        actually be substituted into the message string.
    
        Using the keyword argument `ignore_position`, all checks for position
        arguments (line, col_offset, ...) will be skipped. This can be used to
        just test messages for the correct node.
        """
        yield
        got = self.linter.release_messages()
        no_msg = "No message."
        expected = "\n".join(repr(m) for m in messages) or no_msg
        got_str = "\n".join(repr(m) for m in got) or no_msg
        msg = (
            "Expected messages did not match actual.\n"
            f"\nExpected:\n{expected}\n\nGot:\n{got_str}\n"
        )
    
>       assert len(messages) == len(got), msg
E       AssertionError: Expected messages did not match actual.
E         
E         Expected:
E         MessageTest(msg_id='wildcard-import', line=1, node=<ImportFrom l.1 at 0x7eaff9e99880>, args='empty', confidence=Confidence(name='UNDEFINED', description='Warning without any associated confidence level.'), col_offset=0, end_line=1, end_col_offset=19)
E         
E         Got:
E         MessageTest(msg_id='import-error', line=1, node=<ImportFrom l.1 at 0x7eaff9e99880>, args="'empty'", confidence=Confidence(name='UNDEFINED', description='Warning without any associated confidence level.'), col_offset=0, end_line=1, end_col_offset=19)
E         MessageTest(msg_id='wildcard-import', line=1, node=<ImportFrom l.1 at 0x7eaff9e99880>, args='empty', confidence=Confidence(name='UNDEFINED', description='Warning without any associated confidence level.'), col_offset=0, end_line=1, end_col_offset=19)
E         
E       assert 1 == 2
E        +  where 1 = len((MessageTest(msg_id='wildcard-import', line=1, node=<ImportFrom l.1 at 0x7eaff9e99880>, args='empty', confidence=Confi...FINED', description='Warning without any associated confidence level.'), col_offset=0, end_line=1, end_col_offset=19),))
E        +  and   2 = len([MessageTest(msg_id='import-error', line=1, node=<ImportFrom l.1 at 0x7eaff9e99880>, args="'empty'", confidence=Confid...EFINED', description='Warning without any associated confidence level.'), col_offset=0, end_line=1, end_col_offset=19)])

pylint/testutils/checker_test_case.py:66: AssertionError
==================================== PASSES ====================================
__________________ test_init_hooks_called_before_load_plugins __________________
----------------------------- Captured stderr call -----------------------------
Option --init-hook expects a value
=========================== short test summary info ============================
PASSED tests/checkers/unittest_imports.py::TestImportsChecker::test_relative_beyond_top_level
PASSED tests/checkers/unittest_imports.py::TestImportsChecker::test_relative_beyond_top_level_three
PASSED tests/checkers/unittest_imports.py::TestImportsChecker::test_relative_beyond_top_level_four
PASSED tests/lint/unittest_lint.py::test_no_args
PASSED tests/lint/unittest_lint.py::test_one_arg[case0]
PASSED tests/lint/unittest_lint.py::test_one_arg[case1]
PASSED tests/lint/unittest_lint.py::test_one_arg[case2]
PASSED tests/lint/unittest_lint.py::test_one_arg[case3]
PASSED tests/lint/unittest_lint.py::test_one_arg[case4]
PASSED tests/lint/unittest_lint.py::test_two_similar_args[case0]
PASSED tests/lint/unittest_lint.py::test_two_similar_args[case1]
PASSED tests/lint/unittest_lint.py::test_two_similar_args[case2]
PASSED tests/lint/unittest_lint.py::test_two_similar_args[case3]
PASSED tests/lint/unittest_lint.py::test_more_args[case0]
PASSED tests/lint/unittest_lint.py::test_more_args[case1]
PASSED tests/lint/unittest_lint.py::test_more_args[case2]
PASSED tests/lint/unittest_lint.py::test_pylint_visit_method_taken_in_account
PASSED tests/lint/unittest_lint.py::test_enable_message
PASSED tests/lint/unittest_lint.py::test_enable_message_category
PASSED tests/lint/unittest_lint.py::test_message_state_scope
PASSED tests/lint/unittest_lint.py::test_enable_message_block
PASSED tests/lint/unittest_lint.py::test_enable_by_symbol
PASSED tests/lint/unittest_lint.py::test_enable_report
PASSED tests/lint/unittest_lint.py::test_report_output_format_aliased
PASSED tests/lint/unittest_lint.py::test_set_unsupported_reporter
PASSED tests/lint/unittest_lint.py::test_set_option_1
PASSED tests/lint/unittest_lint.py::test_set_option_2
PASSED tests/lint/unittest_lint.py::test_enable_checkers
PASSED tests/lint/unittest_lint.py::test_errors_only
PASSED tests/lint/unittest_lint.py::test_disable_similar
PASSED tests/lint/unittest_lint.py::test_disable_alot
PASSED tests/lint/unittest_lint.py::test_addmessage
PASSED tests/lint/unittest_lint.py::test_addmessage_invalid
PASSED tests/lint/unittest_lint.py::test_load_plugin_command_line
PASSED tests/lint/unittest_lint.py::test_load_plugin_config_file
PASSED tests/lint/unittest_lint.py::test_load_plugin_configuration
PASSED tests/lint/unittest_lint.py::test_init_hooks_called_before_load_plugins
PASSED tests/lint/unittest_lint.py::test_analyze_explicit_script
PASSED tests/lint/unittest_lint.py::test_full_documentation
PASSED tests/lint/unittest_lint.py::test_list_msgs_enabled
PASSED tests/lint/unittest_lint.py::test_pylint_home
PASSED tests/lint/unittest_lint.py::test_pylint_home_from_environ
PASSED tests/lint/unittest_lint.py::test_warn_about_old_home
PASSED tests/lint/unittest_lint.py::test_pylintrc
PASSED tests/lint/unittest_lint.py::test_pylintrc_parentdir
PASSED tests/lint/unittest_lint.py::test_pylintrc_parentdir_no_package
PASSED tests/lint/unittest_lint.py::test_custom_should_analyze_file
PASSED tests/lint/unittest_lint.py::test_multiprocessing[1]
PASSED tests/lint/unittest_lint.py::test_multiprocessing[2]
PASSED tests/lint/unittest_lint.py::test_filename_with__init__
PASSED tests/lint/unittest_lint.py::test_by_module_statement_value
PASSED tests/lint/unittest_lint.py::test_recursive_ignore[--ignore-failing.py]
PASSED tests/lint/unittest_lint.py::test_recursive_ignore[--ignore-ignored_subdirectory]
PASSED tests/lint/unittest_lint.py::test_recursive_ignore[--ignore-patterns-failing.*]
PASSED tests/lint/unittest_lint.py::test_recursive_ignore[--ignore-patterns-ignored_*]
PASSED tests/lint/unittest_lint.py::test_recursive_ignore[--ignore-paths-.*directory/ignored.*]
PASSED tests/lint/unittest_lint.py::test_recursive_ignore[--ignore-paths-.*ignored.*/failing.*]
PASSED tests/lint/unittest_lint.py::test_import_sibling_module_from_namespace
PASSED tests/lint/unittest_lint.py::test_lint_namespace_package_under_dir
PASSED tests/lint/unittest_lint.py::test_identically_named_nested_module
XFAIL tests/checkers/unittest_imports.py::TestImportsChecker::test_relative_beyond_top_level_two - epylint manipulates cwd; these tests should not be using epylint
FAILED tests/checkers/unittest_imports.py::TestImportsChecker::test_wildcard_import_init
FAILED tests/checkers/unittest_imports.py::TestImportsChecker::test_wildcard_import_non_init
=================== 2 failed, 60 passed, 1 xfailed in 3.08s ====================
ERROR conda.cli.main_run:execute(124): `conda run pytest --no-header -rA -p no:cacheprovider tests/checkers/unittest_imports.py tests/lint/unittest_lint.py` failed. (See above for error)

 
[pylint-dev__pylint__2.15] [pylint-dev__pylint-7114] Return Code: 1 

>>>>> Some Tests Failed
[pylint-dev__pylint__2.15] [pylint-dev__pylint-7114] Test script run successful 
