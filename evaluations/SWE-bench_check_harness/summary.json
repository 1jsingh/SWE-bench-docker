{
    "repo": "all",
    "total_predictions": 126,
    "Patch Apply Success": {
        "f2p_weighted": 99.5,
        "p2p_weighted": 98.72,
        "f2p_unweighted": 99.18,
        "p2p_unweighted": 98.79,
        "cases": [
            {
                "psf__requests-4106.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "tests/test_packages.py::test_can_access_urllib3_attribute",
                            "tests/test_packages.py::test_can_access_idna_attribute",
                            "tests/test_packages.py::test_can_access_chardet_attribute"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "matplotlib__matplotlib-19763.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "lib/matplotlib/tests/test_widgets.py::test_MultiCursor[False-False]",
                            "lib/matplotlib/tests/test_widgets.py::test_MultiCursor[False-True]",
                            "lib/matplotlib/tests/test_widgets.py::test_MultiCursor[True-False]",
                            "lib/matplotlib/tests/test_widgets.py::test_MultiCursor[True-True]"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_selector[kwargs0-None]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_selector[kwargs2-None]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_selector[kwargs4-None]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_selector[kwargs5-None]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[0-10-0-10-data]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[0-10-0-10-pixels]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[0-10-1-10.5-data]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[0-10-1-10.5-pixels]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[0-10-1-11-data]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[0-10-1-11-pixels]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-10.5-0-10-data]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-10.5-0-10-pixels]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-10.5-1-10.5-data]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-10.5-1-10.5-pixels]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-10.5-1-11-data]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-10.5-1-11-pixels]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-11-0-10-data]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-11-0-10-pixels]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-11-1-10.5-data]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-11-1-10.5-pixels]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-11-1-11-data]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-11-1-11-pixels]",
                            "lib/matplotlib/tests/test_widgets.py::test_deprecation_selector_visible_attribute",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_drag[True-new_center0]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_drag[False-new_center1]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_selector_set_props_handle_props",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_resize",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_add_state",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_resize_center[True]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_resize_center[False]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_resize_square[True]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_resize_square[False]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_resize_square_center",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_rotate[RectangleSelector]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_rotate[EllipseSelector]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_add_remove_set",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_resize_square_center_aspect[False]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_resize_square_center_aspect[True]",
                            "lib/matplotlib/tests/test_widgets.py::test_ellipse",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_handles",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_selector_onselect[True]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_selector_onselect[False]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_selector_ignore_outside[True]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_selector_ignore_outside[False]",
                            "lib/matplotlib/tests/test_widgets.py::test_span_selector[horizontal-False-kwargs0]",
                            "lib/matplotlib/tests/test_widgets.py::test_span_selector[vertical-True-kwargs1]",
                            "lib/matplotlib/tests/test_widgets.py::test_span_selector[horizontal-False-kwargs2]",
                            "lib/matplotlib/tests/test_widgets.py::test_span_selector[horizontal-False-kwargs3]",
                            "lib/matplotlib/tests/test_widgets.py::test_span_selector_onselect[True]",
                            "lib/matplotlib/tests/test_widgets.py::test_span_selector_onselect[False]",
                            "lib/matplotlib/tests/test_widgets.py::test_span_selector_ignore_outside[True]",
                            "lib/matplotlib/tests/test_widgets.py::test_span_selector_ignore_outside[False]",
                            "lib/matplotlib/tests/test_widgets.py::test_span_selector_drag[True]",
                            "lib/matplotlib/tests/test_widgets.py::test_span_selector_drag[False]",
                            "lib/matplotlib/tests/test_widgets.py::test_span_selector_direction",
                            "lib/matplotlib/tests/test_widgets.py::test_span_selector_set_props_handle_props",
                            "lib/matplotlib/tests/test_widgets.py::test_selector_clear[span]",
                            "lib/matplotlib/tests/test_widgets.py::test_selector_clear[rectangle]",
                            "lib/matplotlib/tests/test_widgets.py::test_selector_clear_method[span]",
                            "lib/matplotlib/tests/test_widgets.py::test_selector_clear_method[rectangle]",
                            "lib/matplotlib/tests/test_widgets.py::test_span_selector_add_state",
                            "lib/matplotlib/tests/test_widgets.py::test_tool_line_handle",
                            "lib/matplotlib/tests/test_widgets.py::test_span_selector_bound[horizontal]",
                            "lib/matplotlib/tests/test_widgets.py::test_span_selector_bound[vertical]",
                            "lib/matplotlib/tests/test_widgets.py::test_snapping_values_span_selector",
                            "lib/matplotlib/tests/test_widgets.py::test_span_selector_snap",
                            "lib/matplotlib/tests/test_widgets.py::test_lasso_selector[kwargs0]",
                            "lib/matplotlib/tests/test_widgets.py::test_lasso_selector[kwargs1]",
                            "lib/matplotlib/tests/test_widgets.py::test_lasso_selector[kwargs2]",
                            "lib/matplotlib/tests/test_widgets.py::test_CheckButtons",
                            "lib/matplotlib/tests/test_widgets.py::test_TextBox[none]",
                            "lib/matplotlib/tests/test_widgets.py::test_TextBox[toolbar2]",
                            "lib/matplotlib/tests/test_widgets.py::test_TextBox[toolmanager]",
                            "lib/matplotlib/tests/test_widgets.py::test_check_radio_buttons_image[png]",
                            "lib/matplotlib/tests/test_widgets.py::test_radio_buttons[png]",
                            "lib/matplotlib/tests/test_widgets.py::test_slider_slidermin_slidermax_invalid",
                            "lib/matplotlib/tests/test_widgets.py::test_slider_slidermin_slidermax",
                            "lib/matplotlib/tests/test_widgets.py::test_slider_valmin_valmax",
                            "lib/matplotlib/tests/test_widgets.py::test_slider_valstep_snapping",
                            "lib/matplotlib/tests/test_widgets.py::test_slider_horizontal_vertical",
                            "lib/matplotlib/tests/test_widgets.py::test_slider_reset",
                            "lib/matplotlib/tests/test_widgets.py::test_range_slider[horizontal]",
                            "lib/matplotlib/tests/test_widgets.py::test_range_slider[vertical]",
                            "lib/matplotlib/tests/test_widgets.py::test_range_slider_same_init_values[horizontal]",
                            "lib/matplotlib/tests/test_widgets.py::test_range_slider_same_init_values[vertical]",
                            "lib/matplotlib/tests/test_widgets.py::test_polygon_selector[False]",
                            "lib/matplotlib/tests/test_widgets.py::test_polygon_selector[True]",
                            "lib/matplotlib/tests/test_widgets.py::test_polygon_selector_set_props_handle_props[False]",
                            "lib/matplotlib/tests/test_widgets.py::test_polygon_selector_set_props_handle_props[True]",
                            "lib/matplotlib/tests/test_widgets.py::test_rect_visibility[png]",
                            "lib/matplotlib/tests/test_widgets.py::test_rect_visibility[pdf]",
                            "lib/matplotlib/tests/test_widgets.py::test_polygon_selector_remove[False-1]",
                            "lib/matplotlib/tests/test_widgets.py::test_polygon_selector_remove[False-2]",
                            "lib/matplotlib/tests/test_widgets.py::test_polygon_selector_remove[False-3]",
                            "lib/matplotlib/tests/test_widgets.py::test_polygon_selector_remove[True-1]",
                            "lib/matplotlib/tests/test_widgets.py::test_polygon_selector_remove[True-2]",
                            "lib/matplotlib/tests/test_widgets.py::test_polygon_selector_remove[True-3]",
                            "lib/matplotlib/tests/test_widgets.py::test_polygon_selector_remove_first_point[False]",
                            "lib/matplotlib/tests/test_widgets.py::test_polygon_selector_remove_first_point[True]",
                            "lib/matplotlib/tests/test_widgets.py::test_polygon_selector_redraw[False]",
                            "lib/matplotlib/tests/test_widgets.py::test_polygon_selector_redraw[True]",
                            "lib/matplotlib/tests/test_widgets.py::test_polygon_selector_verts_setter[png-False]",
                            "lib/matplotlib/tests/test_widgets.py::test_polygon_selector_verts_setter[png-True]",
                            "lib/matplotlib/tests/test_widgets.py::test_polygon_selector_box"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "pytest-dev__pytest-5227.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "testing/logging/test_reporting.py::test_log_cli_enabled_disabled[True]",
                            "testing/logging/test_reporting.py::test_log_cli_default_level",
                            "testing/logging/test_reporting.py::test_sections_single_new_line_after_test_outcome"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "[100%]",
                            "[",
                            "[100%]------------------------------",
                            "testing/logging/test_reporting.py::test_live_logging_suspends_capture[True]",
                            "testing/logging/test_reporting.py::test_live_logging_suspends_capture[False]",
                            "testing/logging/test_reporting.py::test_nothing_logged",
                            "testing/logging/test_reporting.py::test_messages_logged",
                            "testing/logging/test_reporting.py::test_root_logger_affected",
                            "testing/logging/test_reporting.py::test_log_cli_level_log_level_interaction",
                            "testing/logging/test_reporting.py::test_setup_logging",
                            "testing/logging/test_reporting.py::test_teardown_logging",
                            "testing/logging/test_reporting.py::test_disable_log_capturing",
                            "testing/logging/test_reporting.py::test_disable_log_capturing_ini",
                            "testing/logging/test_reporting.py::test_log_cli_enabled_disabled[False]",
                            "testing/logging/test_reporting.py::test_log_cli_default_level_multiple_tests",
                            "testing/logging/test_reporting.py::test_log_cli_default_level_sections",
                            "testing/logging/test_reporting.py::test_live_logs_unknown_sections",
                            "testing/logging/test_reporting.py::test_log_cli_level",
                            "testing/logging/test_reporting.py::test_log_cli_ini_level",
                            "testing/logging/test_reporting.py::test_log_cli_auto_enable[]",
                            "testing/logging/test_reporting.py::test_log_cli_auto_enable[--log-level=WARNING]",
                            "testing/logging/test_reporting.py::test_log_cli_auto_enable[--log-file-level=WARNING]",
                            "testing/logging/test_reporting.py::test_log_cli_auto_enable[--log-cli-level=WARNING]",
                            "testing/logging/test_reporting.py::test_log_file_cli",
                            "testing/logging/test_reporting.py::test_log_file_cli_level",
                            "testing/logging/test_reporting.py::test_log_level_not_changed_by_default",
                            "testing/logging/test_reporting.py::test_log_file_ini",
                            "testing/logging/test_reporting.py::test_log_file_ini_level",
                            "testing/logging/test_reporting.py::test_log_file_unicode",
                            "testing/logging/test_reporting.py::test_collection_live_logging",
                            "testing/logging/test_reporting.py::test_collection_logging_to_file",
                            "testing/logging/test_reporting.py::test_log_in_hooks",
                            "testing/logging/test_reporting.py::test_log_in_runtest_logreport",
                            "testing/logging/test_reporting.py::test_log_set_path"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "psf__requests-863.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "tests/test_requests.py::RequestsTestSuite::test_POSTBIN_GET_POST_FILES_WITH_HEADERS",
                            "tests/test_requests.py::RequestsTestSuite::test_nonurlencoded_postdata",
                            "tests/test_requests.py::RequestsTestSuite::test_prefetch_redirect_bug",
                            "tests/test_requests.py::RequestsTestSuite::test_urlencoded_post_data"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "tests/test_requests.py::RequestsTestSuite::test_BASICAUTH_HTTP_200_OK_GET",
                            "tests/test_requests.py::RequestsTestSuite::test_BASICAUTH_TUPLE_HTTP_200_OK_GET",
                            "tests/test_requests.py::RequestsTestSuite::test_GET_no_redirect",
                            "tests/test_requests.py::RequestsTestSuite::test_HEAD_no_redirect",
                            "tests/test_requests.py::RequestsTestSuite::test_HTTP_200_OK_GET",
                            "tests/test_requests.py::RequestsTestSuite::test_HTTP_200_OK_GET_WITH_MIXED_PARAMS",
                            "tests/test_requests.py::RequestsTestSuite::test_HTTP_200_OK_GET_WITH_PARAMS",
                            "tests/test_requests.py::RequestsTestSuite::test_HTTP_200_OK_HEAD",
                            "tests/test_requests.py::RequestsTestSuite::test_HTTP_200_OK_PUT",
                            "tests/test_requests.py::RequestsTestSuite::test_HTTP_302_ALLOW_REDIRECT_GET",
                            "tests/test_requests.py::RequestsTestSuite::test_HTTP_302_GET",
                            "tests/test_requests.py::RequestsTestSuite::test_POSTBIN_GET_POST_FILES",
                            "tests/test_requests.py::RequestsTestSuite::test_POSTBIN_GET_POST_FILES_WITH_PARAMS",
                            "tests/test_requests.py::RequestsTestSuite::test_accept_objects_with_string_representations_as_urls",
                            "tests/test_requests.py::RequestsTestSuite::test_bytes_files",
                            "tests/test_requests.py::RequestsTestSuite::test_cached_response",
                            "tests/test_requests.py::RequestsTestSuite::test_can_have_none_in_header_values",
                            "tests/test_requests.py::RequestsTestSuite::test_connection_error",
                            "tests/test_requests.py::RequestsTestSuite::test_connection_error_with_safe_mode",
                            "tests/test_requests.py::RequestsTestSuite::test_connection_keepalive_and_close",
                            "tests/test_requests.py::RequestsTestSuite::test_danger_mode_redirects",
                            "tests/test_requests.py::RequestsTestSuite::test_decompress_gzip",
                            "tests/test_requests.py::RequestsTestSuite::test_default_status_raising",
                            "tests/test_requests.py::RequestsTestSuite::test_empty_response",
                            "tests/test_requests.py::RequestsTestSuite::test_entry_points",
                            "tests/test_requests.py::RequestsTestSuite::test_file_post_data",
                            "tests/test_requests.py::RequestsTestSuite::test_head_content",
                            "tests/test_requests.py::RequestsTestSuite::test_httpauth_recursion",
                            "tests/test_requests.py::RequestsTestSuite::test_invalid_url",
                            "tests/test_requests.py::RequestsTestSuite::test_invalid_urls_throw_requests_exception",
                            "tests/test_requests.py::RequestsTestSuite::test_iter_lines",
                            "tests/test_requests.py::RequestsTestSuite::test_max_redirects",
                            "tests/test_requests.py::RequestsTestSuite::test_multiple_hooks",
                            "tests/test_requests.py::RequestsTestSuite::test_nonurlencoded_post_data",
                            "tests/test_requests.py::RequestsTestSuite::test_nonzero_evaluation",
                            "tests/test_requests.py::RequestsTestSuite::test_params_accepts_kv_list",
                            "tests/test_requests.py::RequestsTestSuite::test_params_are_added_before_fragment",
                            "tests/test_requests.py::RequestsTestSuite::test_path_is_not_double_encoded",
                            "tests/test_requests.py::RequestsTestSuite::test_post_fields_with_multiple_values_and_files",
                            "tests/test_requests.py::RequestsTestSuite::test_post_fields_with_multiple_values_and_files_as_tuples",
                            "tests/test_requests.py::RequestsTestSuite::test_prefetch_return_response_interaction",
                            "tests/test_requests.py::RequestsTestSuite::test_redirect_history",
                            "tests/test_requests.py::RequestsTestSuite::test_relative_redirect_history",
                            "tests/test_requests.py::RequestsTestSuite::test_request_ok_set",
                            "tests/test_requests.py::RequestsTestSuite::test_response_has_unicode_url",
                            "tests/test_requests.py::RequestsTestSuite::test_response_sent",
                            "tests/test_requests.py::RequestsTestSuite::test_session_HTTP_200_OK_GET",
                            "tests/test_requests.py::RequestsTestSuite::test_session_persistent_headers",
                            "tests/test_requests.py::RequestsTestSuite::test_session_pickling",
                            "tests/test_requests.py::RequestsTestSuite::test_status_raising",
                            "tests/test_requests.py::RequestsTestSuite::test_unicode_get",
                            "tests/test_requests.py::RequestsTestSuite::test_upload_binary_data",
                            "tests/test_requests.py::RequestsTestSuite::test_urlencoded_get_query_multivalued_param",
                            "tests/test_requests.py::RequestsTestSuite::test_urlencoded_post_query_and_data",
                            "tests/test_requests.py::RequestsTestSuite::test_urlencoded_post_query_multivalued_and_data",
                            "tests/test_requests.py::RequestsTestSuite::test_urlencoded_post_querystring",
                            "tests/test_requests.py::RequestsTestSuite::test_urlencoded_post_querystring_multivalued",
                            "tests/test_requests.py::RequestsTestSuite::test_useful_exception_for_invalid_port",
                            "tests/test_requests.py::RequestsTestSuite::test_useful_exception_for_invalid_scheme",
                            "tests/test_requests.py::RequestsTestSuite::test_user_agent_transfers"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "pydata__xarray-6135.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_like[year]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_like[month]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_like[month-dash]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_like[day]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_like[day-dash]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_like[hour]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_like[hour-dash]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_like[hour-space-separator]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_like[minute]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_like[minute-dash]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_like[minute-space-separator]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_like[second]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_like[second-dash]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_like[second-space-separator]"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "xarray/tests/test_cftime_offsets.py::test_cftime_offset_constructor_valid_n[<BaseCFTimeOffset:",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_offset_constructor_valid_n[<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_offset_constructor_valid_n[<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_offset_constructor_valid_n[<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_offset_constructor_valid_n[<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_offset_constructor_valid_n[<Tick:",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_offset_constructor_valid_n[<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_offset_constructor_valid_n[<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_offset_constructor_valid_n[<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_offset_constructor_valid_n[<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_offset_constructor_valid_n[<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_offset_constructor_valid_n[<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_offset_constructor_invalid_n[<class",
                            "xarray/tests/test_cftime_offsets.py::test_year_offset_constructor_valid_month[<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_year_offset_constructor_valid_month[<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_year_offset_constructor_valid_month[<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_year_offset_constructor_valid_month[<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_year_offset_constructor_invalid_month[<class",
                            "xarray/tests/test_cftime_offsets.py::test_rule_code[<BaseCFTimeOffset:",
                            "xarray/tests/test_cftime_offsets.py::test_rule_code[<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rule_code[<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rule_code[<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_str_and_repr[<BaseCFTimeOffset:",
                            "xarray/tests/test_cftime_offsets.py::test_str_and_repr[<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_str_and_repr[<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_offset_input[<BaseCFTimeOffset:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_offset_input[<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_offset_input[<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_offset_input[<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_sub_annual[M-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_sub_annual[2M-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_sub_annual[MS-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_sub_annual[2MS-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_sub_annual[D-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_sub_annual[2D-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_sub_annual[H-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_sub_annual[2H-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_sub_annual[T-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_sub_annual[2T-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_sub_annual[min-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_sub_annual[2min-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_sub_annual[S-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_sub_annual[2S-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_sub_annual[L-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_sub_annual[2L-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_sub_annual[ms-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_sub_annual[2ms-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_sub_annual[U-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_sub_annual[2U-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_sub_annual[us-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_sub_annual[2us-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-None-1-JAN]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-None-2-FEB]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-None-3-MAR]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-None-4-APR]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-None-5-MAY]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-None-6-JUN]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-None-7-JUL]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-None-8-AUG]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-None-9-SEP]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-None-10-OCT]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-None-11-NOV]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-None-12-DEC]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-None-0-]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-2-1-JAN]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-2-2-FEB]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-2-3-MAR]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-2-4-APR]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-2-5-MAY]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-2-6-JUN]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-2-7-JUL]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-2-8-AUG]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-2-9-SEP]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-2-10-OCT]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-2-11-NOV]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-2-12-DEC]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-2-0-]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-None-1-JAN]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-None-2-FEB]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-None-3-MAR]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-None-4-APR]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-None-5-MAY]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-None-6-JUN]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-None-7-JUL]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-None-8-AUG]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-None-9-SEP]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-None-10-OCT]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-None-11-NOV]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-None-12-DEC]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-None-0-]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-2-1-JAN]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-2-2-FEB]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-2-3-MAR]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-2-4-APR]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-2-5-MAY]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-2-6-JUN]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-2-7-JUL]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-2-8-AUG]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-2-9-SEP]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-2-10-OCT]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-2-11-NOV]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-2-12-DEC]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-2-0-]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-None-1-JAN]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-None-2-FEB]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-None-3-MAR]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-None-4-APR]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-None-5-MAY]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-None-6-JUN]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-None-7-JUL]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-None-8-AUG]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-None-9-SEP]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-None-10-OCT]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-None-11-NOV]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-None-12-DEC]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-None-0-]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-2-1-JAN]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-2-2-FEB]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-2-3-MAR]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-2-4-APR]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-2-5-MAY]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-2-6-JUN]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-2-7-JUL]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-2-8-AUG]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-2-9-SEP]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-2-10-OCT]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-2-11-NOV]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-2-12-DEC]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-2-0-]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-None-1-JAN]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-None-2-FEB]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-None-3-MAR]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-None-4-APR]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-None-5-MAY]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-None-6-JUN]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-None-7-JUL]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-None-8-AUG]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-None-9-SEP]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-None-10-OCT]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-None-11-NOV]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-None-12-DEC]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-None-0-]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-2-1-JAN]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-2-2-FEB]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-2-3-MAR]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-2-4-APR]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-2-5-MAY]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-2-6-JUN]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-2-7-JUL]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-2-8-AUG]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-2-9-SEP]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-2-10-OCT]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-2-11-NOV]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-2-12-DEC]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-2-0-]",
                            "xarray/tests/test_cftime_offsets.py::test_invalid_to_offset_str[Z]",
                            "xarray/tests/test_cftime_offsets.py::test_invalid_to_offset_str[7min2]",
                            "xarray/tests/test_cftime_offsets.py::test_invalid_to_offset_str[AM]",
                            "xarray/tests/test_cftime_offsets.py::test_invalid_to_offset_str[M-]",
                            "xarray/tests/test_cftime_offsets.py::test_invalid_to_offset_str[AS-]",
                            "xarray/tests/test_cftime_offsets.py::test_invalid_to_offset_str[QS-]",
                            "xarray/tests/test_cftime_offsets.py::test_invalid_to_offset_str[1H1min]",
                            "xarray/tests/test_cftime_offsets.py::test_to_cftime_datetime[365_day-2000-01-01-(2000,",
                            "xarray/tests/test_cftime_offsets.py::test_to_cftime_datetime[365_day-(2000,",
                            "xarray/tests/test_cftime_offsets.py::test_to_cftime_datetime[360_day-2000-01-01-(2000,",
                            "xarray/tests/test_cftime_offsets.py::test_to_cftime_datetime[360_day-(2000,",
                            "xarray/tests/test_cftime_offsets.py::test_to_cftime_datetime[julian-2000-01-01-(2000,",
                            "xarray/tests/test_cftime_offsets.py::test_to_cftime_datetime[julian-(2000,",
                            "xarray/tests/test_cftime_offsets.py::test_to_cftime_datetime[all_leap-2000-01-01-(2000,",
                            "xarray/tests/test_cftime_offsets.py::test_to_cftime_datetime[all_leap-(2000,",
                            "xarray/tests/test_cftime_offsets.py::test_to_cftime_datetime[366_day-2000-01-01-(2000,",
                            "xarray/tests/test_cftime_offsets.py::test_to_cftime_datetime[366_day-(2000,",
                            "xarray/tests/test_cftime_offsets.py::test_to_cftime_datetime[gregorian-2000-01-01-(2000,",
                            "xarray/tests/test_cftime_offsets.py::test_to_cftime_datetime[gregorian-(2000,",
                            "xarray/tests/test_cftime_offsets.py::test_to_cftime_datetime[proleptic_gregorian-2000-01-01-(2000,",
                            "xarray/tests/test_cftime_offsets.py::test_to_cftime_datetime[proleptic_gregorian-(2000,",
                            "xarray/tests/test_cftime_offsets.py::test_to_cftime_datetime[standard-2000-01-01-(2000,",
                            "xarray/tests/test_cftime_offsets.py::test_to_cftime_datetime[standard-(2000,",
                            "xarray/tests/test_cftime_offsets.py::test_to_cftime_datetime_error_no_calendar",
                            "xarray/tests/test_cftime_offsets.py::test_to_cftime_datetime_error_type_error",
                            "xarray/tests/test_cftime_offsets.py::test_neq[<BaseCFTimeOffset:",
                            "xarray/tests/test_cftime_offsets.py::test_neq[<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_neq[<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_neq[<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_neq[<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_neq[<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_neq[<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_neq[<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_neq[<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_neq[<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_neq[<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_neq[<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_neq[<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_eq[<BaseCFTimeOffset:",
                            "xarray/tests/test_cftime_offsets.py::test_eq[<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_eq[<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_eq[<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_eq[<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_eq[<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_eq[<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_eq[<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_eq[<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_eq[<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_eq[<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_eq[<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_eq[<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_mul[<BaseCFTimeOffset:",
                            "xarray/tests/test_cftime_offsets.py::test_mul[<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_mul[<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_mul[<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_mul[<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_mul[<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_mul[<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_mul[<Tick:",
                            "xarray/tests/test_cftime_offsets.py::test_mul[<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_mul[<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_mul[<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_mul[<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_mul[<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_mul[<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rmul[<BaseCFTimeOffset:",
                            "xarray/tests/test_cftime_offsets.py::test_rmul[<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rmul[<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rmul[<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rmul[<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rmul[<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rmul[<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rmul[<Tick:",
                            "xarray/tests/test_cftime_offsets.py::test_rmul[<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rmul[<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rmul[<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rmul[<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rmul[<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rmul[<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_mul_float_multiple_next_higher_resolution",
                            "xarray/tests/test_cftime_offsets.py::test_nonTick_offset_multiplied_float_error[<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_nonTick_offset_multiplied_float_error[<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_nonTick_offset_multiplied_float_error[<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_nonTick_offset_multiplied_float_error[<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_nonTick_offset_multiplied_float_error[<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_nonTick_offset_multiplied_float_error[<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_Microsecond_multiplied_float_error",
                            "xarray/tests/test_cftime_offsets.py::test_neg[<BaseCFTimeOffset:",
                            "xarray/tests/test_cftime_offsets.py::test_neg[<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_neg[<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_neg[<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_neg[<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_neg[<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_neg[<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_neg[<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_neg[<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_neg[<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_neg[<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_neg[<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_neg[<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[365_day-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[365_day-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[365_day-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[365_day-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[365_day-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[365_day-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[360_day-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[360_day-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[360_day-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[360_day-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[360_day-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[360_day-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[julian-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[julian-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[julian-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[julian-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[julian-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[julian-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[all_leap-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[all_leap-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[all_leap-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[all_leap-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[all_leap-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[all_leap-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[366_day-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[366_day-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[366_day-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[366_day-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[366_day-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[366_day-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[gregorian-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[gregorian-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[gregorian-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[gregorian-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[gregorian-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[gregorian-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[proleptic_gregorian-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[proleptic_gregorian-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[proleptic_gregorian-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[proleptic_gregorian-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[proleptic_gregorian-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[proleptic_gregorian-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[standard-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[standard-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[standard-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[standard-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[standard-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[standard-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[365_day-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[365_day-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[365_day-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[365_day-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[365_day-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[365_day-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[360_day-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[360_day-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[360_day-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[360_day-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[360_day-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[360_day-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[julian-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[julian-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[julian-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[julian-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[julian-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[julian-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[all_leap-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[all_leap-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[all_leap-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[all_leap-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[all_leap-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[all_leap-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[366_day-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[366_day-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[366_day-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[366_day-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[366_day-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[366_day-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[gregorian-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[gregorian-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[gregorian-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[gregorian-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[gregorian-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[gregorian-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[proleptic_gregorian-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[proleptic_gregorian-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[proleptic_gregorian-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[proleptic_gregorian-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[proleptic_gregorian-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[proleptic_gregorian-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[standard-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[standard-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[standard-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[standard-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[standard-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[standard-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[365_day-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[365_day-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[365_day-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[365_day-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[365_day-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[365_day-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[360_day-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[360_day-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[360_day-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[360_day-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[360_day-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[360_day-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[julian-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[julian-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[julian-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[julian-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[julian-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[julian-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[all_leap-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[all_leap-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[all_leap-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[all_leap-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[all_leap-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[all_leap-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[366_day-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[366_day-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[366_day-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[366_day-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[366_day-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[366_day-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[gregorian-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[gregorian-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[gregorian-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[gregorian-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[gregorian-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[gregorian-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[proleptic_gregorian-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[proleptic_gregorian-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[proleptic_gregorian-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[proleptic_gregorian-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[proleptic_gregorian-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[proleptic_gregorian-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[standard-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[standard-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[standard-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[standard-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[standard-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[standard-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[365_day-<BaseCFTimeOffset:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[365_day-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[365_day-<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[365_day-<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[365_day-<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[365_day-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[365_day-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[365_day-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[365_day-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[365_day-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[365_day-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[365_day-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[365_day-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[360_day-<BaseCFTimeOffset:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[360_day-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[360_day-<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[360_day-<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[360_day-<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[360_day-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[360_day-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[360_day-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[360_day-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[360_day-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[360_day-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[360_day-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[360_day-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[julian-<BaseCFTimeOffset:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[julian-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[julian-<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[julian-<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[julian-<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[julian-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[julian-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[julian-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[julian-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[julian-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[julian-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[julian-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[julian-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[all_leap-<BaseCFTimeOffset:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[all_leap-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[all_leap-<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[all_leap-<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[all_leap-<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[all_leap-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[all_leap-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[all_leap-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[all_leap-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[all_leap-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[all_leap-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[all_leap-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[all_leap-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[366_day-<BaseCFTimeOffset:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[366_day-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[366_day-<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[366_day-<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[366_day-<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[366_day-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[366_day-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[366_day-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[366_day-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[366_day-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[366_day-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[366_day-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[366_day-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[gregorian-<BaseCFTimeOffset:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[gregorian-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[gregorian-<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[gregorian-<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[gregorian-<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[gregorian-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[gregorian-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[gregorian-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[gregorian-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[gregorian-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[gregorian-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[gregorian-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[gregorian-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[proleptic_gregorian-<BaseCFTimeOffset:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[proleptic_gregorian-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[proleptic_gregorian-<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[proleptic_gregorian-<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[proleptic_gregorian-<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[proleptic_gregorian-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[proleptic_gregorian-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[proleptic_gregorian-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[proleptic_gregorian-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[proleptic_gregorian-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[proleptic_gregorian-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[proleptic_gregorian-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[proleptic_gregorian-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[standard-<BaseCFTimeOffset:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[standard-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[standard-<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[standard-<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[standard-<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[standard-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[standard-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[standard-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[standard-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[standard-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[standard-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[standard-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[standard-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset[<BaseCFTimeOffset:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset[<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset[<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset[<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset[<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset[<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset[<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset[<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset[<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset[<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset[<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset[<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset[<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset_error[<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset_error[<BaseCFTimeOffset:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset_error[<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset_error[<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset_error[<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset_error[<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset_error[<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset_error[<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset_error[<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset_error[<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset_error[<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset_error[<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset_error[<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_days_in_month_non_december[365_day]",
                            "xarray/tests/test_cftime_offsets.py::test_days_in_month_non_december[360_day]",
                            "xarray/tests/test_cftime_offsets.py::test_days_in_month_non_december[julian]",
                            "xarray/tests/test_cftime_offsets.py::test_days_in_month_non_december[all_leap]",
                            "xarray/tests/test_cftime_offsets.py::test_days_in_month_non_december[366_day]",
                            "xarray/tests/test_cftime_offsets.py::test_days_in_month_non_december[gregorian]",
                            "xarray/tests/test_cftime_offsets.py::test_days_in_month_non_december[proleptic_gregorian]",
                            "xarray/tests/test_cftime_offsets.py::test_days_in_month_non_december[standard]",
                            "xarray/tests/test_cftime_offsets.py::test_days_in_month_december[365_day]",
                            "xarray/tests/test_cftime_offsets.py::test_days_in_month_december[360_day]",
                            "xarray/tests/test_cftime_offsets.py::test_days_in_month_december[julian]",
                            "xarray/tests/test_cftime_offsets.py::test_days_in_month_december[all_leap]",
                            "xarray/tests/test_cftime_offsets.py::test_days_in_month_december[366_day]",
                            "xarray/tests/test_cftime_offsets.py::test_days_in_month_december[gregorian]",
                            "xarray/tests/test_cftime_offsets.py::test_days_in_month_december[proleptic_gregorian]",
                            "xarray/tests/test_cftime_offsets.py::test_days_in_month_december[standard]",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_begin[365_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_begin[365_day-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_begin[360_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_begin[360_day-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_begin[julian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_begin[julian-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_begin[all_leap-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_begin[all_leap-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_begin[366_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_begin[366_day-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_begin[gregorian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_begin[gregorian-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_begin[proleptic_gregorian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_begin[proleptic_gregorian-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_begin[standard-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_begin[standard-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end[365_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end[365_day-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end[360_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end[360_day-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end[julian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end[julian-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end[all_leap-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end[all_leap-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end[366_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end[366_day-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end[gregorian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end[gregorian-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end[proleptic_gregorian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end[proleptic_gregorian-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end[standard-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end[standard-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end_onOffset[365_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end_onOffset[365_day-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end_onOffset[360_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end_onOffset[360_day-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end_onOffset[julian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end_onOffset[julian-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end_onOffset[all_leap-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end_onOffset[all_leap-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end_onOffset[366_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end_onOffset[366_day-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end_onOffset[gregorian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end_onOffset[gregorian-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end_onOffset[proleptic_gregorian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end_onOffset[proleptic_gregorian-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end_onOffset[standard-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end_onOffset[standard-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_begin[365_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_begin[365_day-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_begin[360_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_begin[360_day-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_begin[julian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_begin[julian-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_begin[all_leap-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_begin[all_leap-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_begin[366_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_begin[366_day-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_begin[gregorian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_begin[gregorian-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_begin[proleptic_gregorian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_begin[proleptic_gregorian-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_begin[standard-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_begin[standard-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end[365_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end[365_day-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end[360_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end[360_day-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end[julian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end[julian-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end[all_leap-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end[all_leap-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end[366_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end[366_day-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end[gregorian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end[gregorian-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end[proleptic_gregorian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end[proleptic_gregorian-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end[standard-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end[standard-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end_onOffset[365_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end_onOffset[365_day-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end_onOffset[365_day-(3,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end_onOffset[360_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end_onOffset[360_day-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end_onOffset[360_day-(3,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end_onOffset[julian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end_onOffset[julian-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end_onOffset[julian-(3,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end_onOffset[all_leap-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end_onOffset[all_leap-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end_onOffset[all_leap-(3,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end_onOffset[366_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end_onOffset[366_day-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end_onOffset[366_day-(3,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end_onOffset[gregorian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end_onOffset[gregorian-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end_onOffset[gregorian-(3,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end_onOffset[proleptic_gregorian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end_onOffset[proleptic_gregorian-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end_onOffset[proleptic_gregorian-(3,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end_onOffset[standard-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end_onOffset[standard-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end_onOffset[standard-(3,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_begin[365_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_begin[365_day-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_begin[360_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_begin[360_day-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_begin[julian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_begin[julian-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_begin[all_leap-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_begin[all_leap-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_begin[366_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_begin[366_day-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_begin[gregorian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_begin[gregorian-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_begin[proleptic_gregorian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_begin[proleptic_gregorian-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_begin[standard-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_begin[standard-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_end[365_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_end[365_day-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_end[360_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_end[360_day-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_end[julian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_end[julian-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_end[all_leap-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_end[all_leap-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_end[366_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_end[366_day-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_end[gregorian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_end[gregorian-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_end[proleptic_gregorian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_end[proleptic_gregorian-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_end[standard-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_end[standard-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_end_onOffset[365_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_end_onOffset[360_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_end_onOffset[julian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_end_onOffset[all_leap-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_end_onOffset[366_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_end_onOffset[gregorian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_end_onOffset[proleptic_gregorian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_end_onOffset[standard-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_onOffset[365_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_onOffset[360_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_onOffset[julian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_onOffset[all_leap-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_onOffset[366_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_onOffset[gregorian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_onOffset[proleptic_gregorian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_onOffset[standard-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_onOffset_month_or_quarter_or_year_end[365_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_onOffset_month_or_quarter_or_year_end[360_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_onOffset_month_or_quarter_or_year_end[julian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_onOffset_month_or_quarter_or_year_end[all_leap-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_onOffset_month_or_quarter_or_year_end[366_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_onOffset_month_or_quarter_or_year_end[gregorian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_onOffset_month_or_quarter_or_year_end[proleptic_gregorian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_onOffset_month_or_quarter_or_year_end[standard-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[365_day-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[365_day-<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[365_day-<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[365_day-<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[365_day-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[365_day-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[365_day-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[365_day-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[365_day-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[365_day-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[365_day-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[365_day-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[360_day-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[360_day-<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[360_day-<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[360_day-<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[360_day-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[360_day-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[360_day-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[360_day-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[360_day-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[360_day-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[360_day-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[360_day-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[julian-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[julian-<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[julian-<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[julian-<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[julian-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[julian-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[julian-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[julian-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[julian-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[julian-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[julian-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[julian-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[all_leap-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[all_leap-<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[all_leap-<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[all_leap-<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[all_leap-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[all_leap-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[all_leap-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[all_leap-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[all_leap-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[all_leap-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[all_leap-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[all_leap-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[366_day-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[366_day-<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[366_day-<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[366_day-<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[366_day-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[366_day-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[366_day-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[366_day-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[366_day-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[366_day-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[366_day-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[366_day-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[gregorian-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[gregorian-<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[gregorian-<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[gregorian-<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[gregorian-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[gregorian-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[gregorian-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[gregorian-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[gregorian-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[gregorian-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[gregorian-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[gregorian-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[proleptic_gregorian-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[proleptic_gregorian-<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[proleptic_gregorian-<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[proleptic_gregorian-<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[proleptic_gregorian-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[proleptic_gregorian-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[proleptic_gregorian-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[proleptic_gregorian-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[proleptic_gregorian-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[proleptic_gregorian-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[proleptic_gregorian-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[proleptic_gregorian-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[standard-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[standard-<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[standard-<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[standard-<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[standard-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[standard-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[standard-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[standard-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[standard-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[standard-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[standard-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[standard-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[365_day-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[365_day-<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[365_day-<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[365_day-<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[365_day-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[365_day-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[365_day-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[365_day-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[365_day-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[365_day-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[365_day-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[365_day-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[360_day-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[360_day-<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[360_day-<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[360_day-<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[360_day-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[360_day-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[360_day-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[360_day-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[360_day-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[360_day-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[360_day-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[360_day-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[julian-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[julian-<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[julian-<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[julian-<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[julian-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[julian-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[julian-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[julian-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[julian-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[julian-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[julian-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[julian-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[all_leap-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[all_leap-<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[all_leap-<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[all_leap-<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[all_leap-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[all_leap-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[all_leap-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[all_leap-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[all_leap-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[all_leap-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[all_leap-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[all_leap-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[366_day-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[366_day-<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[366_day-<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[366_day-<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[366_day-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[366_day-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[366_day-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[366_day-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[366_day-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[366_day-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[366_day-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[366_day-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[gregorian-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[gregorian-<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[gregorian-<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[gregorian-<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[gregorian-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[gregorian-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[gregorian-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[gregorian-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[gregorian-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[gregorian-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[gregorian-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[gregorian-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[proleptic_gregorian-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[proleptic_gregorian-<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[proleptic_gregorian-<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[proleptic_gregorian-<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[proleptic_gregorian-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[proleptic_gregorian-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[proleptic_gregorian-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[proleptic_gregorian-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[proleptic_gregorian-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[proleptic_gregorian-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[proleptic_gregorian-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[proleptic_gregorian-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[standard-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[standard-<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[standard-<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[standard-<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[standard-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[standard-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[standard-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[standard-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[standard-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[standard-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[standard-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[standard-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[365_day-0001-01-01-0001-01-04-None-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[365_day-0001-01-01-0001-01-04-None-D-left-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[365_day-0001-01-01-0001-01-04-None-D-right-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[365_day-0001-01-01T01:00:00-0001-01-04-None-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[365_day-0001-01-01",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[365_day-0001-01-01T01:00:00-0001-01-04-None-D-None-True-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[365_day-0001-01-01-None-4-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[365_day-None-0001-01-04-4-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[365_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[365_day-0001-01-30-0011-02-01-None-3AS-JUN-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[365_day-0001-01-04-0001-01-01-None-D-None-False-[]]",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[365_day-0010-None-4-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[365_day-0001-01-01-0001-01-04-4-None-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[365_day-0001-06-01-None-4-3QS-JUN-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[360_day-0001-01-01-0001-01-04-None-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[360_day-0001-01-01-0001-01-04-None-D-left-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[360_day-0001-01-01-0001-01-04-None-D-right-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[360_day-0001-01-01T01:00:00-0001-01-04-None-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[360_day-0001-01-01",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[360_day-0001-01-01T01:00:00-0001-01-04-None-D-None-True-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[360_day-0001-01-01-None-4-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[360_day-None-0001-01-04-4-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[360_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[360_day-0001-01-30-0011-02-01-None-3AS-JUN-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[360_day-0001-01-04-0001-01-01-None-D-None-False-[]]",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[360_day-0010-None-4-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[360_day-0001-01-01-0001-01-04-4-None-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[360_day-0001-06-01-None-4-3QS-JUN-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[julian-0001-01-01-0001-01-04-None-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[julian-0001-01-01-0001-01-04-None-D-left-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[julian-0001-01-01-0001-01-04-None-D-right-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[julian-0001-01-01T01:00:00-0001-01-04-None-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[julian-0001-01-01",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[julian-0001-01-01T01:00:00-0001-01-04-None-D-None-True-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[julian-0001-01-01-None-4-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[julian-None-0001-01-04-4-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[julian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[julian-0001-01-30-0011-02-01-None-3AS-JUN-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[julian-0001-01-04-0001-01-01-None-D-None-False-[]]",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[julian-0010-None-4-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[julian-0001-01-01-0001-01-04-4-None-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[julian-0001-06-01-None-4-3QS-JUN-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[all_leap-0001-01-01-0001-01-04-None-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[all_leap-0001-01-01-0001-01-04-None-D-left-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[all_leap-0001-01-01-0001-01-04-None-D-right-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[all_leap-0001-01-01T01:00:00-0001-01-04-None-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[all_leap-0001-01-01",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[all_leap-0001-01-01T01:00:00-0001-01-04-None-D-None-True-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[all_leap-0001-01-01-None-4-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[all_leap-None-0001-01-04-4-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[all_leap-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[all_leap-0001-01-30-0011-02-01-None-3AS-JUN-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[all_leap-0001-01-04-0001-01-01-None-D-None-False-[]]",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[all_leap-0010-None-4-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[all_leap-0001-01-01-0001-01-04-4-None-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[all_leap-0001-06-01-None-4-3QS-JUN-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[366_day-0001-01-01-0001-01-04-None-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[366_day-0001-01-01-0001-01-04-None-D-left-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[366_day-0001-01-01-0001-01-04-None-D-right-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[366_day-0001-01-01T01:00:00-0001-01-04-None-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[366_day-0001-01-01",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[366_day-0001-01-01T01:00:00-0001-01-04-None-D-None-True-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[366_day-0001-01-01-None-4-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[366_day-None-0001-01-04-4-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[366_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[366_day-0001-01-30-0011-02-01-None-3AS-JUN-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[366_day-0001-01-04-0001-01-01-None-D-None-False-[]]",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[366_day-0010-None-4-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[366_day-0001-01-01-0001-01-04-4-None-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[366_day-0001-06-01-None-4-3QS-JUN-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[gregorian-0001-01-01-0001-01-04-None-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[gregorian-0001-01-01-0001-01-04-None-D-left-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[gregorian-0001-01-01-0001-01-04-None-D-right-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[gregorian-0001-01-01T01:00:00-0001-01-04-None-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[gregorian-0001-01-01",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[gregorian-0001-01-01T01:00:00-0001-01-04-None-D-None-True-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[gregorian-0001-01-01-None-4-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[gregorian-None-0001-01-04-4-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[gregorian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[gregorian-0001-01-30-0011-02-01-None-3AS-JUN-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[gregorian-0001-01-04-0001-01-01-None-D-None-False-[]]",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[gregorian-0010-None-4-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[gregorian-0001-01-01-0001-01-04-4-None-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[gregorian-0001-06-01-None-4-3QS-JUN-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[proleptic_gregorian-0001-01-01-0001-01-04-None-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[proleptic_gregorian-0001-01-01-0001-01-04-None-D-left-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[proleptic_gregorian-0001-01-01-0001-01-04-None-D-right-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[proleptic_gregorian-0001-01-01T01:00:00-0001-01-04-None-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[proleptic_gregorian-0001-01-01",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[proleptic_gregorian-0001-01-01T01:00:00-0001-01-04-None-D-None-True-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[proleptic_gregorian-0001-01-01-None-4-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[proleptic_gregorian-None-0001-01-04-4-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[proleptic_gregorian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[proleptic_gregorian-0001-01-30-0011-02-01-None-3AS-JUN-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[proleptic_gregorian-0001-01-04-0001-01-01-None-D-None-False-[]]",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[proleptic_gregorian-0010-None-4-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[proleptic_gregorian-0001-01-01-0001-01-04-4-None-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[proleptic_gregorian-0001-06-01-None-4-3QS-JUN-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[standard-0001-01-01-0001-01-04-None-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[standard-0001-01-01-0001-01-04-None-D-left-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[standard-0001-01-01-0001-01-04-None-D-right-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[standard-0001-01-01T01:00:00-0001-01-04-None-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[standard-0001-01-01",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[standard-0001-01-01T01:00:00-0001-01-04-None-D-None-True-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[standard-0001-01-01-None-4-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[standard-None-0001-01-04-4-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[standard-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[standard-0001-01-30-0011-02-01-None-3AS-JUN-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[standard-0001-01-04-0001-01-01-None-D-None-False-[]]",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[standard-0010-None-4-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[standard-0001-01-01-0001-01-04-4-None-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[standard-0001-06-01-None-4-3QS-JUN-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range_name",
                            "xarray/tests/test_cftime_offsets.py::test_invalid_cftime_range_inputs[None-None-5-A-None]",
                            "xarray/tests/test_cftime_offsets.py::test_invalid_cftime_range_inputs[2000-None-None-A-None]",
                            "xarray/tests/test_cftime_offsets.py::test_invalid_cftime_range_inputs[None-2000-None-A-None]",
                            "xarray/tests/test_cftime_offsets.py::test_invalid_cftime_range_inputs[2000-2001-None-None-None]",
                            "xarray/tests/test_cftime_offsets.py::test_invalid_cftime_range_inputs[None-None-None-None-None]",
                            "xarray/tests/test_cftime_offsets.py::test_invalid_cftime_range_inputs[2000-2001-None-A-up]",
                            "xarray/tests/test_cftime_offsets.py::test_invalid_cftime_range_inputs[2000-2001-5-A-None]",
                            "xarray/tests/test_cftime_offsets.py::test_calendar_specific_month_end[2M-noleap-[(2,",
                            "xarray/tests/test_cftime_offsets.py::test_calendar_specific_month_end[2M-all_leap-[(2,",
                            "xarray/tests/test_cftime_offsets.py::test_calendar_specific_month_end[2M-360_day-[(2,",
                            "xarray/tests/test_cftime_offsets.py::test_calendar_specific_month_end[2M-standard-[(2,",
                            "xarray/tests/test_cftime_offsets.py::test_calendar_specific_month_end[2M-gregorian-[(2,",
                            "xarray/tests/test_cftime_offsets.py::test_calendar_specific_month_end[2M-julian-[(2,",
                            "xarray/tests/test_cftime_offsets.py::test_calendar_year_length[noleap-2000-2001-365]",
                            "xarray/tests/test_cftime_offsets.py::test_calendar_year_length[all_leap-2000-2001-366]",
                            "xarray/tests/test_cftime_offsets.py::test_calendar_year_length[360_day-2000-2001-360]",
                            "xarray/tests/test_cftime_offsets.py::test_calendar_year_length[standard-2000-2001-366]",
                            "xarray/tests/test_cftime_offsets.py::test_calendar_year_length[gregorian-2000-2001-366]",
                            "xarray/tests/test_cftime_offsets.py::test_calendar_year_length[julian-2000-2001-366]",
                            "xarray/tests/test_cftime_offsets.py::test_calendar_year_length[noleap-2001-2002-365]",
                            "xarray/tests/test_cftime_offsets.py::test_calendar_year_length[all_leap-2001-2002-366]",
                            "xarray/tests/test_cftime_offsets.py::test_calendar_year_length[360_day-2001-2002-360]",
                            "xarray/tests/test_cftime_offsets.py::test_calendar_year_length[standard-2001-2002-365]",
                            "xarray/tests/test_cftime_offsets.py::test_calendar_year_length[gregorian-2001-2002-365]",
                            "xarray/tests/test_cftime_offsets.py::test_calendar_year_length[julian-2001-2002-365]",
                            "xarray/tests/test_cftime_offsets.py::test_dayofweek_after_cftime_range[A]",
                            "xarray/tests/test_cftime_offsets.py::test_dayofweek_after_cftime_range[M]",
                            "xarray/tests/test_cftime_offsets.py::test_dayofweek_after_cftime_range[D]",
                            "xarray/tests/test_cftime_offsets.py::test_dayofyear_after_cftime_range[A]",
                            "xarray/tests/test_cftime_offsets.py::test_dayofyear_after_cftime_range[M]",
                            "xarray/tests/test_cftime_offsets.py::test_dayofyear_after_cftime_range[D]",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range_standard_calendar_refers_to_gregorian",
                            "xarray/tests/test_cftime_offsets.py::test_date_range[1990-01-01-standard-None-DatetimeIndex]",
                            "xarray/tests/test_cftime_offsets.py::test_date_range[1990-01-01-proleptic_gregorian-True-CFTimeIndex]",
                            "xarray/tests/test_cftime_offsets.py::test_date_range[1990-01-01-noleap-None-CFTimeIndex]",
                            "xarray/tests/test_cftime_offsets.py::test_date_range[1990-01-01-gregorian-False-DatetimeIndex]",
                            "xarray/tests/test_cftime_offsets.py::test_date_range[1400-01-01-standard-None-CFTimeIndex]",
                            "xarray/tests/test_cftime_offsets.py::test_date_range[3400-01-01-standard-None-CFTimeIndex]",
                            "xarray/tests/test_cftime_offsets.py::test_date_range_errors",
                            "xarray/tests/test_cftime_offsets.py::test_date_range_like[2020-02-01-4M-standard-noleap-None-2020-02-28-False]",
                            "xarray/tests/test_cftime_offsets.py::test_date_range_like[2020-02-01-M-noleap-gregorian-True-2020-02-29-True]",
                            "xarray/tests/test_cftime_offsets.py::test_date_range_like[2020-02-28-3H-all_leap-gregorian-False-2020-02-28-True]",
                            "xarray/tests/test_cftime_offsets.py::test_date_range_like[2020-03-30-M-360_day-gregorian-False-2020-03-31-True]",
                            "xarray/tests/test_cftime_offsets.py::test_date_range_like[2020-03-31-M-gregorian-360_day-None-2020-03-30-False]",
                            "xarray/tests/test_cftime_offsets.py::test_date_range_like_same_calendar",
                            "xarray/tests/test_cftime_offsets.py::test_date_range_like_errors",
                            "xarray/tests/test_cftimeindex.py::test_constructor_with_name[365_day-bar-bar]",
                            "xarray/tests/test_cftimeindex.py::test_constructor_with_name[365_day-None-foo]",
                            "xarray/tests/test_cftimeindex.py::test_constructor_with_name[360_day-bar-bar]",
                            "xarray/tests/test_cftimeindex.py::test_constructor_with_name[360_day-None-foo]",
                            "xarray/tests/test_cftimeindex.py::test_constructor_with_name[julian-bar-bar]",
                            "xarray/tests/test_cftimeindex.py::test_constructor_with_name[julian-None-foo]",
                            "xarray/tests/test_cftimeindex.py::test_constructor_with_name[all_leap-bar-bar]",
                            "xarray/tests/test_cftimeindex.py::test_constructor_with_name[all_leap-None-foo]",
                            "xarray/tests/test_cftimeindex.py::test_constructor_with_name[366_day-bar-bar]",
                            "xarray/tests/test_cftimeindex.py::test_constructor_with_name[366_day-None-foo]",
                            "xarray/tests/test_cftimeindex.py::test_constructor_with_name[gregorian-bar-bar]",
                            "xarray/tests/test_cftimeindex.py::test_constructor_with_name[gregorian-None-foo]",
                            "xarray/tests/test_cftimeindex.py::test_constructor_with_name[proleptic_gregorian-bar-bar]",
                            "xarray/tests/test_cftimeindex.py::test_constructor_with_name[proleptic_gregorian-None-foo]",
                            "xarray/tests/test_cftimeindex.py::test_assert_all_valid_date_type[365_day]",
                            "xarray/tests/test_cftimeindex.py::test_assert_all_valid_date_type[360_day]",
                            "xarray/tests/test_cftimeindex.py::test_assert_all_valid_date_type[julian]",
                            "xarray/tests/test_cftimeindex.py::test_assert_all_valid_date_type[all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_assert_all_valid_date_type[366_day]",
                            "xarray/tests/test_cftimeindex.py::test_assert_all_valid_date_type[gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_assert_all_valid_date_type[proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[365_day-year-expected0]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[365_day-month-expected1]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[365_day-day-expected2]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[365_day-hour-expected3]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[365_day-minute-expected4]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[365_day-second-expected5]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[365_day-microsecond-expected6]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[360_day-year-expected0]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[360_day-month-expected1]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[360_day-day-expected2]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[360_day-hour-expected3]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[360_day-minute-expected4]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[360_day-second-expected5]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[360_day-microsecond-expected6]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[julian-year-expected0]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[julian-month-expected1]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[julian-day-expected2]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[julian-hour-expected3]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[julian-minute-expected4]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[julian-second-expected5]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[julian-microsecond-expected6]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[all_leap-year-expected0]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[all_leap-month-expected1]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[all_leap-day-expected2]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[all_leap-hour-expected3]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[all_leap-minute-expected4]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[all_leap-second-expected5]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[all_leap-microsecond-expected6]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[366_day-year-expected0]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[366_day-month-expected1]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[366_day-day-expected2]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[366_day-hour-expected3]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[366_day-minute-expected4]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[366_day-second-expected5]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[366_day-microsecond-expected6]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[gregorian-year-expected0]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[gregorian-month-expected1]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[gregorian-day-expected2]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[gregorian-hour-expected3]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[gregorian-minute-expected4]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[gregorian-second-expected5]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[gregorian-microsecond-expected6]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[proleptic_gregorian-year-expected0]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[proleptic_gregorian-month-expected1]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[proleptic_gregorian-day-expected2]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[proleptic_gregorian-hour-expected3]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[proleptic_gregorian-minute-expected4]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[proleptic_gregorian-second-expected5]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[proleptic_gregorian-microsecond-expected6]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_dayofyear_accessor[365_day]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_dayofyear_accessor[360_day]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_dayofyear_accessor[julian]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_dayofyear_accessor[all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_dayofyear_accessor[366_day]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_dayofyear_accessor[gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_dayofyear_accessor[proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_dayofweek_accessor[365_day]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_dayofweek_accessor[360_day]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_dayofweek_accessor[julian]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_dayofweek_accessor[all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_dayofweek_accessor[366_day]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_dayofweek_accessor[gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_dayofweek_accessor[proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_days_in_month_accessor[365_day]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_days_in_month_accessor[360_day]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_days_in_month_accessor[julian]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_days_in_month_accessor[all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_days_in_month_accessor[366_day]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_days_in_month_accessor[gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_days_in_month_accessor[proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_with_reso[365_day-1999-date_args0-year]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_with_reso[365_day-199902-date_args1-month]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_with_reso[365_day-19990202-date_args2-day]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_with_reso[365_day-19990202T01-date_args3-hour]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_with_reso[365_day-19990202T0101-date_args4-minute]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_with_reso[365_day-19990202T010156-date_args5-second]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_with_reso[360_day-1999-date_args0-year]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_with_reso[360_day-199902-date_args1-month]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_with_reso[360_day-19990202-date_args2-day]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_with_reso[360_day-19990202T01-date_args3-hour]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_with_reso[360_day-19990202T0101-date_args4-minute]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_with_reso[360_day-19990202T010156-date_args5-second]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_with_reso[julian-1999-date_args0-year]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_with_reso[julian-199902-date_args1-month]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_with_reso[julian-19990202-date_args2-day]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_with_reso[julian-19990202T01-date_args3-hour]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_with_reso[julian-19990202T0101-date_args4-minute]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_with_reso[julian-19990202T010156-date_args5-second]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_with_reso[all_leap-1999-date_args0-year]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_with_reso[all_leap-199902-date_args1-month]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_with_reso[all_leap-19990202-date_args2-day]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_with_reso[all_leap-19990202T01-date_args3-hour]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_with_reso[all_leap-19990202T0101-date_args4-minute]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_with_reso[all_leap-19990202T010156-date_args5-second]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_with_reso[366_day-1999-date_args0-year]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_with_reso[366_day-199902-date_args1-month]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_with_reso[366_day-19990202-date_args2-day]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_with_reso[366_day-19990202T01-date_args3-hour]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_with_reso[366_day-19990202T0101-date_args4-minute]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_with_reso[366_day-19990202T010156-date_args5-second]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_with_reso[gregorian-1999-date_args0-year]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_with_reso[gregorian-199902-date_args1-month]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_with_reso[gregorian-19990202-date_args2-day]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_with_reso[gregorian-19990202T01-date_args3-hour]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_with_reso[gregorian-19990202T0101-date_args4-minute]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_with_reso[gregorian-19990202T010156-date_args5-second]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_with_reso[proleptic_gregorian-1999-date_args0-year]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_with_reso[proleptic_gregorian-199902-date_args1-month]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_with_reso[proleptic_gregorian-19990202-date_args2-day]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_with_reso[proleptic_gregorian-19990202T01-date_args3-hour]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_with_reso[proleptic_gregorian-19990202T0101-date_args4-minute]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_with_reso[proleptic_gregorian-19990202T010156-date_args5-second]",
                            "xarray/tests/test_cftimeindex.py::test_parse_string_to_bounds_year[365_day]",
                            "xarray/tests/test_cftimeindex.py::test_parse_string_to_bounds_year[360_day]",
                            "xarray/tests/test_cftimeindex.py::test_parse_string_to_bounds_year[julian]",
                            "xarray/tests/test_cftimeindex.py::test_parse_string_to_bounds_year[all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_parse_string_to_bounds_year[366_day]",
                            "xarray/tests/test_cftimeindex.py::test_parse_string_to_bounds_year[gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_parse_string_to_bounds_year[proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_parse_string_to_bounds_month_feb[365_day]",
                            "xarray/tests/test_cftimeindex.py::test_parse_string_to_bounds_month_feb[360_day]",
                            "xarray/tests/test_cftimeindex.py::test_parse_string_to_bounds_month_feb[julian]",
                            "xarray/tests/test_cftimeindex.py::test_parse_string_to_bounds_month_feb[all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_parse_string_to_bounds_month_feb[366_day]",
                            "xarray/tests/test_cftimeindex.py::test_parse_string_to_bounds_month_feb[gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_parse_string_to_bounds_month_feb[proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_parse_string_to_bounds_month_dec[365_day]",
                            "xarray/tests/test_cftimeindex.py::test_parse_string_to_bounds_month_dec[360_day]",
                            "xarray/tests/test_cftimeindex.py::test_parse_string_to_bounds_month_dec[julian]",
                            "xarray/tests/test_cftimeindex.py::test_parse_string_to_bounds_month_dec[all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_parse_string_to_bounds_month_dec[366_day]",
                            "xarray/tests/test_cftimeindex.py::test_parse_string_to_bounds_month_dec[gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_parse_string_to_bounds_month_dec[proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_parsed_string_to_bounds_sub_monthly[365_day-day-ex_start_args0-ex_end_args0]",
                            "xarray/tests/test_cftimeindex.py::test_parsed_string_to_bounds_sub_monthly[365_day-hour-ex_start_args1-ex_end_args1]",
                            "xarray/tests/test_cftimeindex.py::test_parsed_string_to_bounds_sub_monthly[365_day-minute-ex_start_args2-ex_end_args2]",
                            "xarray/tests/test_cftimeindex.py::test_parsed_string_to_bounds_sub_monthly[365_day-second-ex_start_args3-ex_end_args3]",
                            "xarray/tests/test_cftimeindex.py::test_parsed_string_to_bounds_sub_monthly[360_day-day-ex_start_args0-ex_end_args0]",
                            "xarray/tests/test_cftimeindex.py::test_parsed_string_to_bounds_sub_monthly[360_day-hour-ex_start_args1-ex_end_args1]",
                            "xarray/tests/test_cftimeindex.py::test_parsed_string_to_bounds_sub_monthly[360_day-minute-ex_start_args2-ex_end_args2]",
                            "xarray/tests/test_cftimeindex.py::test_parsed_string_to_bounds_sub_monthly[360_day-second-ex_start_args3-ex_end_args3]",
                            "xarray/tests/test_cftimeindex.py::test_parsed_string_to_bounds_sub_monthly[julian-day-ex_start_args0-ex_end_args0]",
                            "xarray/tests/test_cftimeindex.py::test_parsed_string_to_bounds_sub_monthly[julian-hour-ex_start_args1-ex_end_args1]",
                            "xarray/tests/test_cftimeindex.py::test_parsed_string_to_bounds_sub_monthly[julian-minute-ex_start_args2-ex_end_args2]",
                            "xarray/tests/test_cftimeindex.py::test_parsed_string_to_bounds_sub_monthly[julian-second-ex_start_args3-ex_end_args3]",
                            "xarray/tests/test_cftimeindex.py::test_parsed_string_to_bounds_sub_monthly[all_leap-day-ex_start_args0-ex_end_args0]",
                            "xarray/tests/test_cftimeindex.py::test_parsed_string_to_bounds_sub_monthly[all_leap-hour-ex_start_args1-ex_end_args1]",
                            "xarray/tests/test_cftimeindex.py::test_parsed_string_to_bounds_sub_monthly[all_leap-minute-ex_start_args2-ex_end_args2]",
                            "xarray/tests/test_cftimeindex.py::test_parsed_string_to_bounds_sub_monthly[all_leap-second-ex_start_args3-ex_end_args3]",
                            "xarray/tests/test_cftimeindex.py::test_parsed_string_to_bounds_sub_monthly[366_day-day-ex_start_args0-ex_end_args0]",
                            "xarray/tests/test_cftimeindex.py::test_parsed_string_to_bounds_sub_monthly[366_day-hour-ex_start_args1-ex_end_args1]",
                            "xarray/tests/test_cftimeindex.py::test_parsed_string_to_bounds_sub_monthly[366_day-minute-ex_start_args2-ex_end_args2]",
                            "xarray/tests/test_cftimeindex.py::test_parsed_string_to_bounds_sub_monthly[366_day-second-ex_start_args3-ex_end_args3]",
                            "xarray/tests/test_cftimeindex.py::test_parsed_string_to_bounds_sub_monthly[gregorian-day-ex_start_args0-ex_end_args0]",
                            "xarray/tests/test_cftimeindex.py::test_parsed_string_to_bounds_sub_monthly[gregorian-hour-ex_start_args1-ex_end_args1]",
                            "xarray/tests/test_cftimeindex.py::test_parsed_string_to_bounds_sub_monthly[gregorian-minute-ex_start_args2-ex_end_args2]",
                            "xarray/tests/test_cftimeindex.py::test_parsed_string_to_bounds_sub_monthly[gregorian-second-ex_start_args3-ex_end_args3]",
                            "xarray/tests/test_cftimeindex.py::test_parsed_string_to_bounds_sub_monthly[proleptic_gregorian-day-ex_start_args0-ex_end_args0]",
                            "xarray/tests/test_cftimeindex.py::test_parsed_string_to_bounds_sub_monthly[proleptic_gregorian-hour-ex_start_args1-ex_end_args1]",
                            "xarray/tests/test_cftimeindex.py::test_parsed_string_to_bounds_sub_monthly[proleptic_gregorian-minute-ex_start_args2-ex_end_args2]",
                            "xarray/tests/test_cftimeindex.py::test_parsed_string_to_bounds_sub_monthly[proleptic_gregorian-second-ex_start_args3-ex_end_args3]",
                            "xarray/tests/test_cftimeindex.py::test_parsed_string_to_bounds_raises[365_day]",
                            "xarray/tests/test_cftimeindex.py::test_parsed_string_to_bounds_raises[360_day]",
                            "xarray/tests/test_cftimeindex.py::test_parsed_string_to_bounds_raises[julian]",
                            "xarray/tests/test_cftimeindex.py::test_parsed_string_to_bounds_raises[all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_parsed_string_to_bounds_raises[366_day]",
                            "xarray/tests/test_cftimeindex.py::test_parsed_string_to_bounds_raises[gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_parsed_string_to_bounds_raises[proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_get_loc[365_day]",
                            "xarray/tests/test_cftimeindex.py::test_get_loc[360_day]",
                            "xarray/tests/test_cftimeindex.py::test_get_loc[julian]",
                            "xarray/tests/test_cftimeindex.py::test_get_loc[all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_get_loc[366_day]",
                            "xarray/tests/test_cftimeindex.py::test_get_loc[gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_get_loc[proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_get_slice_bound[365_day]",
                            "xarray/tests/test_cftimeindex.py::test_get_slice_bound[360_day]",
                            "xarray/tests/test_cftimeindex.py::test_get_slice_bound[julian]",
                            "xarray/tests/test_cftimeindex.py::test_get_slice_bound[all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_get_slice_bound[366_day]",
                            "xarray/tests/test_cftimeindex.py::test_get_slice_bound[gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_get_slice_bound[proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_get_slice_bound_decreasing_index[365_day]",
                            "xarray/tests/test_cftimeindex.py::test_get_slice_bound_decreasing_index[360_day]",
                            "xarray/tests/test_cftimeindex.py::test_get_slice_bound_decreasing_index[julian]",
                            "xarray/tests/test_cftimeindex.py::test_get_slice_bound_decreasing_index[all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_get_slice_bound_decreasing_index[366_day]",
                            "xarray/tests/test_cftimeindex.py::test_get_slice_bound_decreasing_index[gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_get_slice_bound_decreasing_index[proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_get_slice_bound_length_one_index[365_day]",
                            "xarray/tests/test_cftimeindex.py::test_get_slice_bound_length_one_index[360_day]",
                            "xarray/tests/test_cftimeindex.py::test_get_slice_bound_length_one_index[julian]",
                            "xarray/tests/test_cftimeindex.py::test_get_slice_bound_length_one_index[all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_get_slice_bound_length_one_index[366_day]",
                            "xarray/tests/test_cftimeindex.py::test_get_slice_bound_length_one_index[gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_get_slice_bound_length_one_index[proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_string_slice_length_one_index[365_day]",
                            "xarray/tests/test_cftimeindex.py::test_string_slice_length_one_index[360_day]",
                            "xarray/tests/test_cftimeindex.py::test_string_slice_length_one_index[julian]",
                            "xarray/tests/test_cftimeindex.py::test_string_slice_length_one_index[all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_string_slice_length_one_index[366_day]",
                            "xarray/tests/test_cftimeindex.py::test_string_slice_length_one_index[gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_string_slice_length_one_index[proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_date_type_property[365_day]",
                            "xarray/tests/test_cftimeindex.py::test_date_type_property[360_day]",
                            "xarray/tests/test_cftimeindex.py::test_date_type_property[julian]",
                            "xarray/tests/test_cftimeindex.py::test_date_type_property[all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_date_type_property[366_day]",
                            "xarray/tests/test_cftimeindex.py::test_date_type_property[gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_date_type_property[proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_contains[365_day]",
                            "xarray/tests/test_cftimeindex.py::test_contains[360_day]",
                            "xarray/tests/test_cftimeindex.py::test_contains[julian]",
                            "xarray/tests/test_cftimeindex.py::test_contains[all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_contains[366_day]",
                            "xarray/tests/test_cftimeindex.py::test_contains[gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_contains[proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_groupby[365_day]",
                            "xarray/tests/test_cftimeindex.py::test_groupby[360_day]",
                            "xarray/tests/test_cftimeindex.py::test_groupby[julian]",
                            "xarray/tests/test_cftimeindex.py::test_groupby[all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_groupby[366_day]",
                            "xarray/tests/test_cftimeindex.py::test_groupby[gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_groupby[proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_sel_string_or_list[365_day-string]",
                            "xarray/tests/test_cftimeindex.py::test_sel_string_or_list[365_day-string-slice]",
                            "xarray/tests/test_cftimeindex.py::test_sel_string_or_list[365_day-bool-list]",
                            "xarray/tests/test_cftimeindex.py::test_sel_string_or_list[360_day-string]",
                            "xarray/tests/test_cftimeindex.py::test_sel_string_or_list[360_day-string-slice]",
                            "xarray/tests/test_cftimeindex.py::test_sel_string_or_list[360_day-bool-list]",
                            "xarray/tests/test_cftimeindex.py::test_sel_string_or_list[julian-string]",
                            "xarray/tests/test_cftimeindex.py::test_sel_string_or_list[julian-string-slice]",
                            "xarray/tests/test_cftimeindex.py::test_sel_string_or_list[julian-bool-list]",
                            "xarray/tests/test_cftimeindex.py::test_sel_string_or_list[all_leap-string]",
                            "xarray/tests/test_cftimeindex.py::test_sel_string_or_list[all_leap-string-slice]",
                            "xarray/tests/test_cftimeindex.py::test_sel_string_or_list[all_leap-bool-list]",
                            "xarray/tests/test_cftimeindex.py::test_sel_string_or_list[366_day-string]",
                            "xarray/tests/test_cftimeindex.py::test_sel_string_or_list[366_day-string-slice]",
                            "xarray/tests/test_cftimeindex.py::test_sel_string_or_list[366_day-bool-list]",
                            "xarray/tests/test_cftimeindex.py::test_sel_string_or_list[gregorian-string]",
                            "xarray/tests/test_cftimeindex.py::test_sel_string_or_list[gregorian-string-slice]",
                            "xarray/tests/test_cftimeindex.py::test_sel_string_or_list[gregorian-bool-list]",
                            "xarray/tests/test_cftimeindex.py::test_sel_string_or_list[proleptic_gregorian-string]",
                            "xarray/tests/test_cftimeindex.py::test_sel_string_or_list[proleptic_gregorian-string-slice]",
                            "xarray/tests/test_cftimeindex.py::test_sel_string_or_list[proleptic_gregorian-bool-list]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_slice_or_list[365_day]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_slice_or_list[360_day]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_slice_or_list[julian]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_slice_or_list[all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_slice_or_list[366_day]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_slice_or_list[gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_slice_or_list[proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar[365_day]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar[360_day]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar[julian]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar[all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar[366_day]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar[gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar[proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_distant_date[365_day]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_distant_date[360_day]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_distant_date[julian]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_distant_date[all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_distant_date[366_day]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_distant_date[gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_distant_date[proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_nearest[365_day-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_nearest[365_day-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_nearest[365_day-sel_kwargs2]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_nearest[360_day-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_nearest[360_day-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_nearest[360_day-sel_kwargs2]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_nearest[julian-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_nearest[julian-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_nearest[julian-sel_kwargs2]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_nearest[all_leap-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_nearest[all_leap-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_nearest[all_leap-sel_kwargs2]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_nearest[366_day-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_nearest[366_day-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_nearest[366_day-sel_kwargs2]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_nearest[gregorian-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_nearest[gregorian-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_nearest[gregorian-sel_kwargs2]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_nearest[proleptic_gregorian-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_nearest[proleptic_gregorian-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_nearest[proleptic_gregorian-sel_kwargs2]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_pad[365_day-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_pad[365_day-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_pad[360_day-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_pad[360_day-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_pad[julian-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_pad[julian-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_pad[all_leap-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_pad[all_leap-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_pad[366_day-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_pad[366_day-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_pad[gregorian-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_pad[gregorian-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_pad[proleptic_gregorian-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_pad[proleptic_gregorian-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_backfill[365_day-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_backfill[365_day-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_backfill[360_day-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_backfill[360_day-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_backfill[julian-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_backfill[julian-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_backfill[all_leap-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_backfill[all_leap-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_backfill[366_day-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_backfill[366_day-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_backfill[gregorian-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_backfill[gregorian-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_backfill[proleptic_gregorian-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_backfill[proleptic_gregorian-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_tolerance_raises[365_day-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_tolerance_raises[365_day-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_tolerance_raises[365_day-sel_kwargs2]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_tolerance_raises[360_day-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_tolerance_raises[360_day-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_tolerance_raises[360_day-sel_kwargs2]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_tolerance_raises[julian-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_tolerance_raises[julian-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_tolerance_raises[julian-sel_kwargs2]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_tolerance_raises[all_leap-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_tolerance_raises[all_leap-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_tolerance_raises[all_leap-sel_kwargs2]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_tolerance_raises[366_day-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_tolerance_raises[366_day-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_tolerance_raises[366_day-sel_kwargs2]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_tolerance_raises[gregorian-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_tolerance_raises[gregorian-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_tolerance_raises[gregorian-sel_kwargs2]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_tolerance_raises[proleptic_gregorian-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_tolerance_raises[proleptic_gregorian-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_tolerance_raises[proleptic_gregorian-sel_kwargs2]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_nearest[365_day-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_nearest[365_day-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_nearest[360_day-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_nearest[360_day-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_nearest[julian-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_nearest[julian-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_nearest[all_leap-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_nearest[all_leap-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_nearest[366_day-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_nearest[366_day-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_nearest[gregorian-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_nearest[gregorian-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_nearest[proleptic_gregorian-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_nearest[proleptic_gregorian-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_pad[365_day-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_pad[365_day-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_pad[360_day-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_pad[360_day-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_pad[julian-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_pad[julian-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_pad[all_leap-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_pad[all_leap-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_pad[366_day-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_pad[366_day-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_pad[gregorian-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_pad[gregorian-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_pad[proleptic_gregorian-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_pad[proleptic_gregorian-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_backfill[365_day-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_backfill[365_day-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_backfill[360_day-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_backfill[360_day-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_backfill[julian-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_backfill[julian-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_backfill[all_leap-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_backfill[all_leap-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_backfill[366_day-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_backfill[366_day-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_backfill[gregorian-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_backfill[gregorian-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_backfill[proleptic_gregorian-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_backfill[proleptic_gregorian-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_tolerance_raises[365_day-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_tolerance_raises[365_day-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_tolerance_raises[365_day-sel_kwargs2]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_tolerance_raises[360_day-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_tolerance_raises[360_day-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_tolerance_raises[360_day-sel_kwargs2]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_tolerance_raises[julian-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_tolerance_raises[julian-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_tolerance_raises[julian-sel_kwargs2]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_tolerance_raises[all_leap-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_tolerance_raises[all_leap-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_tolerance_raises[all_leap-sel_kwargs2]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_tolerance_raises[366_day-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_tolerance_raises[366_day-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_tolerance_raises[366_day-sel_kwargs2]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_tolerance_raises[gregorian-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_tolerance_raises[gregorian-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_tolerance_raises[gregorian-sel_kwargs2]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_tolerance_raises[proleptic_gregorian-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_tolerance_raises[proleptic_gregorian-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_tolerance_raises[proleptic_gregorian-sel_kwargs2]",
                            "xarray/tests/test_cftimeindex.py::test_isel[365_day]",
                            "xarray/tests/test_cftimeindex.py::test_isel[360_day]",
                            "xarray/tests/test_cftimeindex.py::test_isel[julian]",
                            "xarray/tests/test_cftimeindex.py::test_isel[all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_isel[366_day]",
                            "xarray/tests/test_cftimeindex.py::test_isel[gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_isel[proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_indexing_in_series_getitem[365_day]",
                            "xarray/tests/test_cftimeindex.py::test_indexing_in_series_getitem[360_day]",
                            "xarray/tests/test_cftimeindex.py::test_indexing_in_series_getitem[julian]",
                            "xarray/tests/test_cftimeindex.py::test_indexing_in_series_getitem[all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_indexing_in_series_getitem[366_day]",
                            "xarray/tests/test_cftimeindex.py::test_indexing_in_series_getitem[gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_indexing_in_series_getitem[proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_indexing_in_series_loc[365_day]",
                            "xarray/tests/test_cftimeindex.py::test_indexing_in_series_loc[360_day]",
                            "xarray/tests/test_cftimeindex.py::test_indexing_in_series_loc[julian]",
                            "xarray/tests/test_cftimeindex.py::test_indexing_in_series_loc[all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_indexing_in_series_loc[366_day]",
                            "xarray/tests/test_cftimeindex.py::test_indexing_in_series_loc[gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_indexing_in_series_loc[proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_indexing_in_series_iloc[365_day]",
                            "xarray/tests/test_cftimeindex.py::test_indexing_in_series_iloc[360_day]",
                            "xarray/tests/test_cftimeindex.py::test_indexing_in_series_iloc[julian]",
                            "xarray/tests/test_cftimeindex.py::test_indexing_in_series_iloc[all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_indexing_in_series_iloc[366_day]",
                            "xarray/tests/test_cftimeindex.py::test_indexing_in_series_iloc[gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_indexing_in_series_iloc[proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_series_dropna[365_day]",
                            "xarray/tests/test_cftimeindex.py::test_series_dropna[360_day]",
                            "xarray/tests/test_cftimeindex.py::test_series_dropna[julian]",
                            "xarray/tests/test_cftimeindex.py::test_series_dropna[all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_series_dropna[366_day]",
                            "xarray/tests/test_cftimeindex.py::test_series_dropna[gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_series_dropna[proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_indexing_in_dataframe_loc[365_day]",
                            "xarray/tests/test_cftimeindex.py::test_indexing_in_dataframe_loc[360_day]",
                            "xarray/tests/test_cftimeindex.py::test_indexing_in_dataframe_loc[julian]",
                            "xarray/tests/test_cftimeindex.py::test_indexing_in_dataframe_loc[all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_indexing_in_dataframe_loc[366_day]",
                            "xarray/tests/test_cftimeindex.py::test_indexing_in_dataframe_loc[gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_indexing_in_dataframe_loc[proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_indexing_in_dataframe_iloc[365_day]",
                            "xarray/tests/test_cftimeindex.py::test_indexing_in_dataframe_iloc[360_day]",
                            "xarray/tests/test_cftimeindex.py::test_indexing_in_dataframe_iloc[julian]",
                            "xarray/tests/test_cftimeindex.py::test_indexing_in_dataframe_iloc[all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_indexing_in_dataframe_iloc[366_day]",
                            "xarray/tests/test_cftimeindex.py::test_indexing_in_dataframe_iloc[gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_indexing_in_dataframe_iloc[proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_concat_cftimeindex[365_day]",
                            "xarray/tests/test_cftimeindex.py::test_concat_cftimeindex[360_day]",
                            "xarray/tests/test_cftimeindex.py::test_concat_cftimeindex[julian]",
                            "xarray/tests/test_cftimeindex.py::test_concat_cftimeindex[all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_concat_cftimeindex[366_day]",
                            "xarray/tests/test_cftimeindex.py::test_concat_cftimeindex[gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_concat_cftimeindex[proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_empty_cftimeindex",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_add[365_day]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_add[360_day]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_add[julian]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_add[all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_add[366_day]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_add[gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_add[proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_add_timedeltaindex[365_day]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_add_timedeltaindex[360_day]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_add_timedeltaindex[julian]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_add_timedeltaindex[all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_add_timedeltaindex[366_day]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_add_timedeltaindex[gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_add_timedeltaindex[proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[365_day-D-D-2.0]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[365_day-D-D-1.5]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[365_day-H-H-2.0]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[365_day-H-H-1.5]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[365_day-T-min-2.0]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[365_day-T-min-1.5]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[365_day-S-S-2.0]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[365_day-S-S-1.5]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[365_day-L-ms-2.0]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[365_day-L-ms-1.5]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[360_day-D-D-2.0]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[360_day-D-D-1.5]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[360_day-H-H-2.0]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[360_day-H-H-1.5]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[360_day-T-min-2.0]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[360_day-T-min-1.5]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[360_day-S-S-2.0]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[360_day-S-S-1.5]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[360_day-L-ms-2.0]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[360_day-L-ms-1.5]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[julian-D-D-2.0]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[julian-D-D-1.5]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[julian-H-H-2.0]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[julian-H-H-1.5]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[julian-T-min-2.0]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[julian-T-min-1.5]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[julian-S-S-2.0]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[julian-S-S-1.5]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[julian-L-ms-2.0]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[julian-L-ms-1.5]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[all_leap-D-D-2.0]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[all_leap-D-D-1.5]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[all_leap-H-H-2.0]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[all_leap-H-H-1.5]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[all_leap-T-min-2.0]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[all_leap-T-min-1.5]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[all_leap-S-S-2.0]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[all_leap-S-S-1.5]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[all_leap-L-ms-2.0]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[all_leap-L-ms-1.5]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[366_day-D-D-2.0]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[366_day-D-D-1.5]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[366_day-H-H-2.0]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[366_day-H-H-1.5]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[366_day-T-min-2.0]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[366_day-T-min-1.5]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[366_day-S-S-2.0]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[366_day-S-S-1.5]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[366_day-L-ms-2.0]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[366_day-L-ms-1.5]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[gregorian-D-D-2.0]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[gregorian-D-D-1.5]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[gregorian-H-H-2.0]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[gregorian-H-H-1.5]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[gregorian-T-min-2.0]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[gregorian-T-min-1.5]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[gregorian-S-S-2.0]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[gregorian-S-S-1.5]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[gregorian-L-ms-2.0]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[gregorian-L-ms-1.5]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[proleptic_gregorian-D-D-2.0]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[proleptic_gregorian-D-D-1.5]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[proleptic_gregorian-H-H-2.0]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[proleptic_gregorian-H-H-1.5]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[proleptic_gregorian-T-min-2.0]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[proleptic_gregorian-T-min-1.5]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[proleptic_gregorian-S-S-2.0]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[proleptic_gregorian-S-S-1.5]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[proleptic_gregorian-L-ms-2.0]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[proleptic_gregorian-L-ms-1.5]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float_us",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float_fails_for_non_tick_freqs[AS]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float_fails_for_non_tick_freqs[A]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float_fails_for_non_tick_freqs[YS]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float_fails_for_non_tick_freqs[Y]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float_fails_for_non_tick_freqs[QS]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float_fails_for_non_tick_freqs[Q]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float_fails_for_non_tick_freqs[MS]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float_fails_for_non_tick_freqs[M]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_radd[365_day]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_radd[360_day]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_radd[julian]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_radd[all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_radd[366_day]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_radd[gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_radd[proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_timedeltaindex_add_cftimeindex[365_day]",
                            "xarray/tests/test_cftimeindex.py::test_timedeltaindex_add_cftimeindex[360_day]",
                            "xarray/tests/test_cftimeindex.py::test_timedeltaindex_add_cftimeindex[julian]",
                            "xarray/tests/test_cftimeindex.py::test_timedeltaindex_add_cftimeindex[all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_timedeltaindex_add_cftimeindex[366_day]",
                            "xarray/tests/test_cftimeindex.py::test_timedeltaindex_add_cftimeindex[gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_timedeltaindex_add_cftimeindex[proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_timedelta[365_day]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_timedelta[360_day]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_timedelta[julian]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_timedelta[all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_timedelta[366_day]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_timedelta[gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_timedelta[proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_timedelta_array[365_day-1d-array]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_timedelta_array[365_day-scalar-array]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_timedelta_array[360_day-1d-array]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_timedelta_array[360_day-scalar-array]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_timedelta_array[julian-1d-array]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_timedelta_array[julian-scalar-array]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_timedelta_array[all_leap-1d-array]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_timedelta_array[all_leap-scalar-array]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_timedelta_array[366_day-1d-array]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_timedelta_array[366_day-scalar-array]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_timedelta_array[gregorian-1d-array]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_timedelta_array[gregorian-scalar-array]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_timedelta_array[proleptic_gregorian-1d-array]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_timedelta_array[proleptic_gregorian-scalar-array]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_cftimeindex[365_day]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_cftimeindex[360_day]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_cftimeindex[julian]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_cftimeindex[all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_cftimeindex[366_day]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_cftimeindex[gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_cftimeindex[proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_cftime_datetime[365_day]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_cftime_datetime[360_day]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_cftime_datetime[julian]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_cftime_datetime[all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_cftime_datetime[366_day]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_cftime_datetime[gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_cftime_datetime[proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_cftime_datetime_sub_cftimeindex[365_day]",
                            "xarray/tests/test_cftimeindex.py::test_cftime_datetime_sub_cftimeindex[360_day]",
                            "xarray/tests/test_cftimeindex.py::test_cftime_datetime_sub_cftimeindex[julian]",
                            "xarray/tests/test_cftimeindex.py::test_cftime_datetime_sub_cftimeindex[all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_cftime_datetime_sub_cftimeindex[366_day]",
                            "xarray/tests/test_cftimeindex.py::test_cftime_datetime_sub_cftimeindex[gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_cftime_datetime_sub_cftimeindex[proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_distant_cftime_datetime_sub_cftimeindex[365_day]",
                            "xarray/tests/test_cftimeindex.py::test_distant_cftime_datetime_sub_cftimeindex[360_day]",
                            "xarray/tests/test_cftimeindex.py::test_distant_cftime_datetime_sub_cftimeindex[julian]",
                            "xarray/tests/test_cftimeindex.py::test_distant_cftime_datetime_sub_cftimeindex[all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_distant_cftime_datetime_sub_cftimeindex[366_day]",
                            "xarray/tests/test_cftimeindex.py::test_distant_cftime_datetime_sub_cftimeindex[gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_distant_cftime_datetime_sub_cftimeindex[proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_timedeltaindex[365_day]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_timedeltaindex[360_day]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_timedeltaindex[julian]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_timedeltaindex[all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_timedeltaindex[366_day]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_timedeltaindex[gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_timedeltaindex[proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_index_of_cftime_datetimes[365_day]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_index_of_cftime_datetimes[360_day]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_index_of_cftime_datetimes[julian]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_index_of_cftime_datetimes[all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_index_of_cftime_datetimes[366_day]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_index_of_cftime_datetimes[gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_index_of_cftime_datetimes[proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_not_implemented[365_day]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_not_implemented[360_day]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_not_implemented[julian]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_not_implemented[all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_not_implemented[366_day]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_not_implemented[gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_not_implemented[proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_rsub[365_day]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_rsub[360_day]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_rsub[julian]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_rsub[all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_rsub[366_day]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_rsub[gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_rsub[proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift[365_day-D]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift[365_day-freq1]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift[360_day-D]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift[360_day-freq1]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift[julian-D]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift[julian-freq1]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift[all_leap-D]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift[all_leap-freq1]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift[366_day-D]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift[366_day-freq1]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift[gregorian-D]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift[gregorian-freq1]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift[proleptic_gregorian-D]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift[proleptic_gregorian-freq1]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_invalid_n",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_invalid_freq",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_calendar_property[noleap-noleap]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_calendar_property[365_day-noleap]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_calendar_property[360_day-360_day]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_calendar_property[julian-julian]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_calendar_property[gregorian-standard]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_calendar_property[standard-standard]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_calendar_property[proleptic_gregorian-proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_calendar_repr[noleap-noleap]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_calendar_repr[365_day-noleap]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_calendar_repr[360_day-360_day]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_calendar_repr[julian-julian]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_calendar_repr[gregorian-standard]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_calendar_repr[standard-standard]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_calendar_repr[proleptic_gregorian-proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_periods_repr[2]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_periods_repr[40]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_freq_in_repr[D-noleap]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_freq_in_repr[D-360_day]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_freq_in_repr[D-standard]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_freq_in_repr[H-noleap]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_freq_in_repr[H-360_day]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_freq_in_repr[H-standard]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_repr_formatting[2-CFTimeIndex([2000-01-01",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_repr_formatting[4-CFTimeIndex([2000-01-01",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_repr_formatting[101-CFTimeIndex([2000-01-01",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_repr_formatting_width[2-40]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_repr_formatting_width[2-80]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_repr_formatting_width[2-100]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_repr_formatting_width[3-40]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_repr_formatting_width[3-80]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_repr_formatting_width[3-100]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_repr_formatting_width[4-40]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_repr_formatting_width[4-80]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_repr_formatting_width[4-100]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_repr_formatting_width[100-40]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_repr_formatting_width[100-80]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_repr_formatting_width[100-100]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_repr_formatting_width[101-40]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_repr_formatting_width[101-80]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_repr_formatting_width[101-100]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_repr_101_shorter[22]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_repr_101_shorter[50]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_repr_101_shorter[100]",
                            "xarray/tests/test_cftimeindex.py::test_parse_array_of_cftime_strings",
                            "xarray/tests/test_cftimeindex.py::test_strftime_of_cftime_array[360_day]",
                            "xarray/tests/test_cftimeindex.py::test_strftime_of_cftime_array[365_day]",
                            "xarray/tests/test_cftimeindex.py::test_strftime_of_cftime_array[366_day]",
                            "xarray/tests/test_cftimeindex.py::test_strftime_of_cftime_array[all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_strftime_of_cftime_array[gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_strftime_of_cftime_array[julian]",
                            "xarray/tests/test_cftimeindex.py::test_strftime_of_cftime_array[noleap]",
                            "xarray/tests/test_cftimeindex.py::test_strftime_of_cftime_array[proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_strftime_of_cftime_array[standard]",
                            "xarray/tests/test_cftimeindex.py::test_to_datetimeindex[False-360_day]",
                            "xarray/tests/test_cftimeindex.py::test_to_datetimeindex[False-365_day]",
                            "xarray/tests/test_cftimeindex.py::test_to_datetimeindex[False-366_day]",
                            "xarray/tests/test_cftimeindex.py::test_to_datetimeindex[False-all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_to_datetimeindex[False-gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_to_datetimeindex[False-julian]",
                            "xarray/tests/test_cftimeindex.py::test_to_datetimeindex[False-noleap]",
                            "xarray/tests/test_cftimeindex.py::test_to_datetimeindex[False-proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_to_datetimeindex[False-standard]",
                            "xarray/tests/test_cftimeindex.py::test_to_datetimeindex[True-360_day]",
                            "xarray/tests/test_cftimeindex.py::test_to_datetimeindex[True-365_day]",
                            "xarray/tests/test_cftimeindex.py::test_to_datetimeindex[True-366_day]",
                            "xarray/tests/test_cftimeindex.py::test_to_datetimeindex[True-all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_to_datetimeindex[True-gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_to_datetimeindex[True-julian]",
                            "xarray/tests/test_cftimeindex.py::test_to_datetimeindex[True-noleap]",
                            "xarray/tests/test_cftimeindex.py::test_to_datetimeindex[True-proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_to_datetimeindex[True-standard]",
                            "xarray/tests/test_cftimeindex.py::test_to_datetimeindex_out_of_range[360_day]",
                            "xarray/tests/test_cftimeindex.py::test_to_datetimeindex_out_of_range[365_day]",
                            "xarray/tests/test_cftimeindex.py::test_to_datetimeindex_out_of_range[366_day]",
                            "xarray/tests/test_cftimeindex.py::test_to_datetimeindex_out_of_range[all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_to_datetimeindex_out_of_range[gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_to_datetimeindex_out_of_range[julian]",
                            "xarray/tests/test_cftimeindex.py::test_to_datetimeindex_out_of_range[noleap]",
                            "xarray/tests/test_cftimeindex.py::test_to_datetimeindex_out_of_range[proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_to_datetimeindex_out_of_range[standard]",
                            "xarray/tests/test_cftimeindex.py::test_to_datetimeindex_feb_29[all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_to_datetimeindex_feb_29[360_day]",
                            "xarray/tests/test_cftimeindex.py::test_rounding_methods_against_datetimeindex[floor-3663S]",
                            "xarray/tests/test_cftimeindex.py::test_rounding_methods_against_datetimeindex[floor-33T]",
                            "xarray/tests/test_cftimeindex.py::test_rounding_methods_against_datetimeindex[floor-2H]",
                            "xarray/tests/test_cftimeindex.py::test_rounding_methods_against_datetimeindex[ceil-3663S]",
                            "xarray/tests/test_cftimeindex.py::test_rounding_methods_against_datetimeindex[ceil-33T]",
                            "xarray/tests/test_cftimeindex.py::test_rounding_methods_against_datetimeindex[ceil-2H]",
                            "xarray/tests/test_cftimeindex.py::test_rounding_methods_against_datetimeindex[round-3663S]",
                            "xarray/tests/test_cftimeindex.py::test_rounding_methods_against_datetimeindex[round-33T]",
                            "xarray/tests/test_cftimeindex.py::test_rounding_methods_against_datetimeindex[round-2H]",
                            "xarray/tests/test_cftimeindex.py::test_rounding_methods_invalid_freq[floor]",
                            "xarray/tests/test_cftimeindex.py::test_rounding_methods_invalid_freq[ceil]",
                            "xarray/tests/test_cftimeindex.py::test_rounding_methods_invalid_freq[round]",
                            "xarray/tests/test_cftimeindex.py::test_ceil[365_day]",
                            "xarray/tests/test_cftimeindex.py::test_ceil[360_day]",
                            "xarray/tests/test_cftimeindex.py::test_ceil[julian]",
                            "xarray/tests/test_cftimeindex.py::test_ceil[all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_ceil[366_day]",
                            "xarray/tests/test_cftimeindex.py::test_ceil[gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_ceil[proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_floor[365_day]",
                            "xarray/tests/test_cftimeindex.py::test_floor[360_day]",
                            "xarray/tests/test_cftimeindex.py::test_floor[julian]",
                            "xarray/tests/test_cftimeindex.py::test_floor[all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_floor[366_day]",
                            "xarray/tests/test_cftimeindex.py::test_floor[gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_floor[proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_round[365_day]",
                            "xarray/tests/test_cftimeindex.py::test_round[360_day]",
                            "xarray/tests/test_cftimeindex.py::test_round[julian]",
                            "xarray/tests/test_cftimeindex.py::test_round[all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_round[366_day]",
                            "xarray/tests/test_cftimeindex.py::test_round[gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_round[proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_asi8[365_day]",
                            "xarray/tests/test_cftimeindex.py::test_asi8[360_day]",
                            "xarray/tests/test_cftimeindex.py::test_asi8[julian]",
                            "xarray/tests/test_cftimeindex.py::test_asi8[all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_asi8[366_day]",
                            "xarray/tests/test_cftimeindex.py::test_asi8[gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_asi8[proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_asi8_distant_date",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq_valid_types",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq_invalid_inputs",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[365_day-300AS-JAN]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[365_day-A-DEC]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[365_day-AS-JUL]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[365_day-2AS-FEB]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[365_day-Q-NOV]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[365_day-3QS-DEC]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[365_day-MS]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[365_day-4M]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[365_day-7D]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[365_day-D]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[365_day-30H]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[365_day-5T]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[365_day-40S]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[360_day-300AS-JAN]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[360_day-A-DEC]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[360_day-AS-JUL]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[360_day-2AS-FEB]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[360_day-Q-NOV]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[360_day-3QS-DEC]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[360_day-MS]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[360_day-4M]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[360_day-7D]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[360_day-D]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[360_day-30H]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[360_day-5T]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[360_day-40S]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[julian-300AS-JAN]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[julian-A-DEC]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[julian-AS-JUL]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[julian-2AS-FEB]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[julian-Q-NOV]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[julian-3QS-DEC]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[julian-MS]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[julian-4M]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[julian-7D]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[julian-D]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[julian-30H]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[julian-5T]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[julian-40S]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[all_leap-300AS-JAN]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[all_leap-A-DEC]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[all_leap-AS-JUL]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[all_leap-2AS-FEB]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[all_leap-Q-NOV]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[all_leap-3QS-DEC]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[all_leap-MS]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[all_leap-4M]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[all_leap-7D]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[all_leap-D]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[all_leap-30H]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[all_leap-5T]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[all_leap-40S]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[366_day-300AS-JAN]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[366_day-A-DEC]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[366_day-AS-JUL]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[366_day-2AS-FEB]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[366_day-Q-NOV]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[366_day-3QS-DEC]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[366_day-MS]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[366_day-4M]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[366_day-7D]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[366_day-D]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[366_day-30H]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[366_day-5T]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[366_day-40S]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[gregorian-300AS-JAN]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[gregorian-A-DEC]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[gregorian-AS-JUL]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[gregorian-2AS-FEB]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[gregorian-Q-NOV]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[gregorian-3QS-DEC]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[gregorian-MS]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[gregorian-4M]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[gregorian-7D]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[gregorian-D]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[gregorian-30H]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[gregorian-5T]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[gregorian-40S]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[proleptic_gregorian-300AS-JAN]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[proleptic_gregorian-A-DEC]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[proleptic_gregorian-AS-JUL]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[proleptic_gregorian-2AS-FEB]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[proleptic_gregorian-Q-NOV]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[proleptic_gregorian-3QS-DEC]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[proleptic_gregorian-MS]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[proleptic_gregorian-4M]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[proleptic_gregorian-7D]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[proleptic_gregorian-D]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[proleptic_gregorian-30H]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[proleptic_gregorian-5T]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[proleptic_gregorian-40S]"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "django__django-8961.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "test_program_name_in_help (admin_scripts.tests.MainModule)"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "test_testserver_handle_params (admin_scripts.tests.ManageTestserver)",
                            "test_no_database (admin_scripts.tests.ManageRunserver)",
                            "test_readonly_database (admin_scripts.tests.ManageRunserver)",
                            "test_runner_addrport_ipv6 (admin_scripts.tests.ManageRunserver)",
                            "test_runner_ambiguous (admin_scripts.tests.ManageRunserver)",
                            "test_runner_custom_defaults (admin_scripts.tests.ManageRunserver)",
                            "test_runner_custom_defaults_ipv6 (admin_scripts.tests.ManageRunserver)",
                            "test_runner_hostname (admin_scripts.tests.ManageRunserver)",
                            "test_runner_hostname_ipv6 (admin_scripts.tests.ManageRunserver)",
                            "test_runserver_addrport (admin_scripts.tests.ManageRunserver)",
                            "test_migration_warning_multiple_apps (admin_scripts.tests.ManageRunserverMigrationWarning)",
                            "test_migration_warning_one_app (admin_scripts.tests.ManageRunserverMigrationWarning)",
                            "test_precedence (admin_scripts.tests.Discovery)",
                            "test_runs_django_admin (admin_scripts.tests.MainModule)",
                            "no settings: manage.py builtin commands fail with an error when no settings provided",
                            "no settings: manage.py builtin commands fail if settings file (from environment) doesn't exist",
                            "no settings: manage.py builtin commands fail if settings file (from argument) doesn't exist",
                            "no settings: django-admin builtin commands fail with an error when no settings provided",
                            "no settings: django-admin builtin commands fail if settings file (from environment) doesn't exist",
                            "no settings: django-admin builtin commands fail if settings file (from argument) doesn't exist",
                            "test_attribute_error (admin_scripts.tests.ManageSettingsWithSettingsErrors)",
                            "test_help (admin_scripts.tests.ManageSettingsWithSettingsErrors)",
                            "test_import_error (admin_scripts.tests.ManageSettingsWithSettingsErrors)",
                            "test_key_error (admin_scripts.tests.ManageSettingsWithSettingsErrors)",
                            "test_importable_name (admin_scripts.tests.StartApp)",
                            "startapp validates that app name is a valid Python identifier.",
                            "Regression for #20509",
                            "test_empty_allowed_hosts_error (admin_scripts.tests.ManageRunserverEmptyAllowedHosts)",
                            "alternate: django-admin builtin commands fail with an error when no settings provided",
                            "alternate: django-admin builtin commands fail if settings file (from environment) doesn't exist",
                            "alternate: django-admin builtin commands fail if settings file (from argument) doesn't exist",
                            "alternate: django-admin builtin commands succeed if settings are provided in the environment",
                            "alternate: django-admin builtin commands succeed if settings are provided as argument",
                            "alternate: django-admin can't execute user commands unless settings are provided",
                            "alternate: django-admin can execute user commands if settings are provided in environment",
                            "alternate: django-admin can execute user commands if settings are provided as argument",
                            "default: django-admin builtin commands fail with an error when no settings provided",
                            "default: django-admin builtin commands fail if settings file (from environment) doesn't exist",
                            "default: django-admin builtin commands fail if settings file (from argument) doesn't exist",
                            "default: django-admin builtin commands succeed if settings are provided in the environment",
                            "default: django-admin builtin commands succeed if settings are provided as argument",
                            "default: django-admin can't execute user commands if it isn't provided settings",
                            "default: django-admin can execute user commands if settings are provided in environment",
                            "default: django-admin can execute user commands if settings are provided as argument",
                            "directory: django-admin builtin commands fail with an error when no settings provided",
                            "directory: django-admin builtin commands fail if settings file (from environment) doesn't exist",
                            "directory: django-admin builtin commands fail if settings file (from argument) doesn't exist",
                            "directory: django-admin builtin commands succeed if settings are provided in the environment",
                            "directory: django-admin builtin commands succeed if settings are provided as argument",
                            "directory: django-admin can't execute user commands unless settings are provided",
                            "directory: startapp creates the correct directory",
                            "directory: startapp creates the correct directory with a custom template",
                            "minimal: django-admin builtin commands fail with an error when no settings provided",
                            "minimal: django-admin builtin commands fail if settings file (from environment) doesn't exist",
                            "minimal: django-admin builtin commands fail if settings file (from argument) doesn't exist",
                            "minimal: django-admin builtin commands fail if settings are provided in the environment",
                            "minimal: django-admin builtin commands fail if settings are provided as argument",
                            "minimal: django-admin can't execute user commands unless settings are provided",
                            "minimal: django-admin can't execute user commands, even if settings are provided in environment",
                            "minimal: django-admin can't execute user commands, even if settings are provided as argument",
                            "fulldefault: django-admin builtin commands fail with an error when no settings provided",
                            "fulldefault: django-admin builtin commands fail if settings file (from environment) doesn't exist",
                            "fulldefault: django-admin builtin commands fail if settings file (from argument) doesn't exist",
                            "fulldefault: django-admin builtin commands succeed if the environment contains settings",
                            "fulldefault: django-admin builtin commands succeed if a settings file is provided",
                            "fulldefault: django-admin can't execute user commands unless settings are provided",
                            "fulldefault: django-admin can execute user commands if settings are provided in environment",
                            "fulldefault: django-admin can execute user commands if settings are provided as argument",
                            "Runs without error and emits settings diff.",
                            "test_custom_default (admin_scripts.tests.DiffSettings)",
                            "--output=unified emits settings diff in unified mode.",
                            "Options passed before settings are correctly handled.",
                            "Options are correctly handled when they are passed before and after",
                            "Options passed after settings are correctly handled.",
                            "Short options passed after settings are correctly handled.",
                            "Short options passed before settings are correctly handled.",
                            "alternate: manage.py builtin commands fail with an error when no default settings provided",
                            "alternate: manage.py builtin commands fail if settings file (from environment) doesn't exist",
                            "alternate: manage.py builtin commands fail if settings file (from argument) doesn't exist",
                            "alternate: manage.py builtin commands work if settings are provided in the environment",
                            "alternate: manage.py builtin commands work with settings provided as argument",
                            "alternate: manage.py can't execute user commands without settings",
                            "alternate: manage.py output syntax color can be deactivated with the `--no-color` option",
                            "alternate: manage.py can execute user commands if settings are provided in environment",
                            "alternate: manage.py can execute user commands if settings are provided as argument",
                            "manage.py check does not raise errors when an app imports a base",
                            "manage.py check reports an ImportError if an app's models.py",
                            "manage.py check does not raise an ImportError validating a",
                            "check reports an error on a nonexistent app in INSTALLED_APPS.",
                            "All errors/warnings should be sorted by level and by message.",
                            "test_warning_does_not_halt (admin_scripts.tests.ManageCheck)",
                            "default: manage.py builtin commands succeed when default settings are appropriate",
                            "default: manage.py builtin commands fail if settings file (from environment) doesn't exist",
                            "default: manage.py builtin commands succeed if settings file (from argument) doesn't exist",
                            "default: manage.py builtin commands succeed if settings are provided in the environment",
                            "default: manage.py builtin commands succeed if settings are provided as argument",
                            "default: manage.py can execute user commands when default settings are appropriate",
                            "default: manage.py can execute user commands when settings are provided in environment",
                            "default: manage.py can execute user commands when settings are provided as argument",
                            "fulldefault: manage.py builtin commands succeed when default settings are appropriate",
                            "fulldefault: manage.py builtin commands fail if settings file (from environment) doesn't exist",
                            "fulldefault: manage.py builtin commands succeed if settings file (from argument) doesn't exist",
                            "fulldefault: manage.py builtin commands succeed if settings are provided in the environment",
                            "fulldefault: manage.py builtin commands succeed if settings are provided as argument",
                            "fulldefault: manage.py can execute user commands when default settings are appropriate",
                            "fulldefault: manage.py can execute user commands when settings are provided in environment",
                            "fulldefault: manage.py can execute user commands when settings are provided as argument",
                            "minimal: manage.py builtin commands fail with an error when no settings provided",
                            "minimal: manage.py builtin commands fail if settings file (from environment) doesn't exist",
                            "minimal: manage.py builtin commands fail if settings file (from argument) doesn't exist",
                            "minimal: manage.py builtin commands fail if settings are provided in the environment",
                            "minimal: manage.py builtin commands fail if settings are provided as argument",
                            "minimal: manage.py can't execute user commands without appropriate settings",
                            "minimal: manage.py can't execute user commands, even if settings are provided in environment",
                            "minimal: manage.py can't execute user commands, even if settings are provided as argument",
                            "multiple: manage.py builtin commands fail with an error when no settings provided",
                            "multiple: manage.py builtin commands fail if settings file (from environment) doesn't exist",
                            "multiple: manage.py builtin commands fail if settings file (from argument) doesn't exist",
                            "multiple: manage.py can execute builtin commands if settings are provided in the environment",
                            "multiple: manage.py builtin commands succeed if settings are provided as argument",
                            "multiple: manage.py can't execute user commands using default settings",
                            "multiple: manage.py can execute user commands if settings are provided in environment",
                            "multiple: manage.py can execute user commands if settings are provided as argument",
                            "test_custom_project_destination_missing (admin_scripts.tests.StartProject)",
                            "Make sure the startproject management command is able to use a different project template",
                            "Make sure template context variables are rendered with proper values",
                            "Make sure the startproject management command is able to use a different project template from a tarball",
                            "test_custom_project_template_from_tarball_by_url (admin_scripts.tests.StartProject)",
                            "Startproject can use a project template from a tarball and create it in a specified location",
                            "test_custom_project_template_with_non_ascii_templates (admin_scripts.tests.StartProject)",
                            "Make sure the startproject management command is able to render custom files",
                            "test_importable_project_name (admin_scripts.tests.StartProject)",
                            "Make sure the startproject management command validates a project name",
                            "Make sure template context variables are not html escaped",
                            "Startproject management command handles project template tar/zip balls from non-canonical urls",
                            "Make sure the startproject management command creates a project",
                            "Make sure the startproject management command creates a project in a specific directory",
                            "Ticket 17475: Template dir passed has a trailing path separator",
                            "Make sure passing the wrong kinds of arguments outputs an error and prints usage",
                            "User AppCommands can execute when a single app name is provided",
                            "User AppCommands raise an error when multiple app names are provided",
                            "User AppCommands raise an error when no app name is provided",
                            "User AppCommands can execute when some of the provided app names are invalid",
                            "User BaseCommands can execute when a label is provided",
                            "User BaseCommands can execute when no labels are provided",
                            "User BaseCommands can execute with options when a label is provided",
                            "User BaseCommands can execute with multiple options when a label is provided",
                            "User BaseCommands outputs command usage when wrong option is specified",
                            "test_base_run_from_argv (admin_scripts.tests.CommandTypes)",
                            "test_color_style (admin_scripts.tests.CommandTypes)",
                            "test_command_color (admin_scripts.tests.CommandTypes)",
                            "--no-color prevent colorization of the output",
                            "test_custom_stderr (admin_scripts.tests.CommandTypes)",
                            "test_custom_stdout (admin_scripts.tests.CommandTypes)",
                            "help is handled as a special case",
                            "--help is equivalent to help",
                            "help --commands shows the list of all available commands",
                            "-h is handled as a short form of --help",
                            "User LabelCommands can execute when a label is provided",
                            "User LabelCommands are executed multiple times if multiple labels are provided",
                            "User LabelCommands raise an error if no label is provided",
                            "NoArg Commands can be executed",
                            "NoArg Commands raise an error if an argument is provided",
                            "test_run_from_argv_closes_connections (admin_scripts.tests.CommandTypes)",
                            "test_run_from_argv_non_ascii_error (admin_scripts.tests.CommandTypes)",
                            "--help can be used on a specific command",
                            "version is handled as a special case",
                            "--version is equivalent to version"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "sympy__sympy-23729.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "test_Rational",
                            "test_Function",
                            "test_Pow",
                            "test_basic_ops",
                            "test_1_over_x_and_sqrt",
                            "test_mix_number_mult_symbols",
                            "test_mix_number_pow_symbols",
                            "test_imag",
                            "test_constants_other",
                            "test_Matrices",
                            "test_vector_entries_hadamard",
                            "test_MatrixSymbol",
                            "test_special_matrices",
                            "test_containers",
                            "test_julia_noninline",
                            "test_julia_piecewise",
                            "test_julia_piecewise_times_const",
                            "test_julia_matrix_elements",
                            "test_haramard",
                            "test_sparse",
                            "test_specfun",
                            "test_jl_simple_code",
                            "test_jl_simple_code_with_header",
                            "test_jl_numbersymbol",
                            "test_multiple_results_m",
                            "test_results_named_unordered",
                            "test_results_named_ordered",
                            "test_complicated_jl_codegen",
                            "test_jl_output_arg_mixed_unordered",
                            "test_jl_piecewise_",
                            "test_jl_multifcns_per_file",
                            "test_jl_multifcns_per_file_w_header",
                            "test_jl_matrix_named",
                            "test_jl_matrix_named_matsym",
                            "test_jl_matrix_output_autoname_2",
                            "test_jl_results_matrix_named_ordered",
                            "test_jl_loops",
                            "test_jl_tensor_loops_multiple_contractions",
                            "test_jl_InOutArgument",
                            "test_jl_InOutArgument_order"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "test_Integer",
                            "test_Relational",
                            "test_constants",
                            "test_boolean",
                            "test_julia_matrix_assign_to",
                            "test_julia_matrix_assign_to_more",
                            "test_julia_matrix_1x1",
                            "test_julia_boolean",
                            "test_julia_not_supported",
                            "test_trick_indent_with_end_else_words",
                            "test_empty_jl_code",
                            "test_jl_simple_code_nameout",
                            "test_jl_code_argument_order",
                            "test_jl_filename_match_prefix",
                            "test_jl_matrix_output_autoname",
                            "test_jl_matrixsymbol_slice",
                            "test_jl_matrixsymbol_slice2",
                            "test_jl_matrixsymbol_slice3",
                            "test_jl_matrixsymbol_slice_autoname",
                            "test_jl_not_supported"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "mwaskom__seaborn-3202.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "tests/_core/test_plot.py::TestPlotting::test_empty",
                            "tests/_core/test_scales.py::TestNominal::test_empty_data"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "tests/_core/test_plot.py::TestInit::test_empty",
                            "tests/_core/test_plot.py::TestInit::test_data_only",
                            "tests/_core/test_plot.py::TestInit::test_df_and_named_variables",
                            "tests/_core/test_plot.py::TestInit::test_df_and_mixed_variables",
                            "tests/_core/test_plot.py::TestInit::test_vector_variables_only",
                            "tests/_core/test_plot.py::TestInit::test_vector_variables_no_index",
                            "tests/_core/test_plot.py::TestInit::test_data_only_named",
                            "tests/_core/test_plot.py::TestInit::test_positional_and_named_data",
                            "tests/_core/test_plot.py::TestInit::test_positional_and_named_xy[x]",
                            "tests/_core/test_plot.py::TestInit::test_positional_and_named_xy[y]",
                            "tests/_core/test_plot.py::TestInit::test_positional_data_x_y",
                            "tests/_core/test_plot.py::TestInit::test_positional_x_y",
                            "tests/_core/test_plot.py::TestInit::test_positional_data_x",
                            "tests/_core/test_plot.py::TestInit::test_positional_x",
                            "tests/_core/test_plot.py::TestInit::test_positional_too_many",
                            "tests/_core/test_plot.py::TestInit::test_unknown_keywords",
                            "tests/_core/test_plot.py::TestLayerAddition::test_without_data",
                            "tests/_core/test_plot.py::TestLayerAddition::test_with_new_variable_by_name",
                            "tests/_core/test_plot.py::TestLayerAddition::test_with_new_variable_by_vector",
                            "tests/_core/test_plot.py::TestLayerAddition::test_with_late_data_definition",
                            "tests/_core/test_plot.py::TestLayerAddition::test_with_new_data_definition",
                            "tests/_core/test_plot.py::TestLayerAddition::test_drop_variable",
                            "tests/_core/test_plot.py::TestLayerAddition::test_stat_nondefault",
                            "tests/_core/test_plot.py::TestLayerAddition::test_orient[x-x]",
                            "tests/_core/test_plot.py::TestLayerAddition::test_orient[y-y]",
                            "tests/_core/test_plot.py::TestLayerAddition::test_orient[v-x]",
                            "tests/_core/test_plot.py::TestLayerAddition::test_orient[h-y]",
                            "tests/_core/test_plot.py::TestLayerAddition::test_variable_list",
                            "tests/_core/test_plot.py::TestLayerAddition::test_type_checks",
                            "tests/_core/test_plot.py::TestScaling::test_inference",
                            "tests/_core/test_plot.py::TestScaling::test_inference_from_layer_data",
                            "tests/_core/test_plot.py::TestScaling::test_inference_joins",
                            "tests/_core/test_plot.py::TestScaling::test_inferred_categorical_converter",
                            "tests/_core/test_plot.py::TestScaling::test_explicit_categorical_converter",
                            "tests/_core/test_plot.py::TestScaling::test_faceted_log_scale",
                            "tests/_core/test_plot.py::TestScaling::test_paired_single_log_scale",
                            "tests/_core/test_plot.py::TestScaling::test_mark_data_log_transform_is_inverted",
                            "tests/_core/test_plot.py::TestScaling::test_mark_data_log_transfrom_with_stat",
                            "tests/_core/test_plot.py::TestScaling::test_mark_data_from_categorical",
                            "tests/_core/test_plot.py::TestScaling::test_mark_data_from_datetime",
                            "tests/_core/test_plot.py::TestScaling::test_computed_var_ticks",
                            "tests/_core/test_plot.py::TestScaling::test_computed_var_transform",
                            "tests/_core/test_plot.py::TestScaling::test_explicit_range_with_axis_scaling",
                            "tests/_core/test_plot.py::TestScaling::test_derived_range_with_axis_scaling",
                            "tests/_core/test_plot.py::TestScaling::test_facet_categories",
                            "tests/_core/test_plot.py::TestScaling::test_facet_categories_unshared",
                            "tests/_core/test_plot.py::TestScaling::test_facet_categories_single_dim_shared",
                            "tests/_core/test_plot.py::TestScaling::test_pair_categories",
                            "tests/_core/test_plot.py::TestScaling::test_pair_categories_shared",
                            "tests/_core/test_plot.py::TestScaling::test_identity_mapping_linewidth",
                            "tests/_core/test_plot.py::TestScaling::test_pair_single_coordinate_stat_orient",
                            "tests/_core/test_plot.py::TestScaling::test_inferred_nominal_passed_to_stat",
                            "tests/_core/test_plot.py::TestScaling::test_identity_mapping_color_tuples",
                            "tests/_core/test_plot.py::TestScaling::test_nominal_x_axis_tweaks",
                            "tests/_core/test_plot.py::TestScaling::test_nominal_y_axis_tweaks",
                            "tests/_core/test_plot.py::TestPlotting::test_matplotlib_object_creation",
                            "tests/_core/test_plot.py::TestPlotting::test_no_orient_variance",
                            "tests/_core/test_plot.py::TestPlotting::test_single_split_single_layer",
                            "tests/_core/test_plot.py::TestPlotting::test_single_split_multi_layer",
                            "tests/_core/test_plot.py::TestPlotting::test_one_grouping_variable[color]",
                            "tests/_core/test_plot.py::TestPlotting::test_one_grouping_variable[group]",
                            "tests/_core/test_plot.py::TestPlotting::test_two_grouping_variables",
                            "tests/_core/test_plot.py::TestPlotting::test_specified_width",
                            "tests/_core/test_plot.py::TestPlotting::test_facets_no_subgroups",
                            "tests/_core/test_plot.py::TestPlotting::test_facets_one_subgroup",
                            "tests/_core/test_plot.py::TestPlotting::test_layer_specific_facet_disabling",
                            "tests/_core/test_plot.py::TestPlotting::test_paired_variables",
                            "tests/_core/test_plot.py::TestPlotting::test_paired_one_dimension",
                            "tests/_core/test_plot.py::TestPlotting::test_paired_variables_one_subset",
                            "tests/_core/test_plot.py::TestPlotting::test_paired_and_faceted",
                            "tests/_core/test_plot.py::TestPlotting::test_theme_default",
                            "tests/_core/test_plot.py::TestPlotting::test_theme_params",
                            "tests/_core/test_plot.py::TestPlotting::test_theme_error",
                            "tests/_core/test_plot.py::TestPlotting::test_stat",
                            "tests/_core/test_plot.py::TestPlotting::test_move",
                            "tests/_core/test_plot.py::TestPlotting::test_stat_and_move",
                            "tests/_core/test_plot.py::TestPlotting::test_stat_log_scale",
                            "tests/_core/test_plot.py::TestPlotting::test_move_log_scale",
                            "tests/_core/test_plot.py::TestPlotting::test_multi_move",
                            "tests/_core/test_plot.py::TestPlotting::test_multi_move_with_pairing",
                            "tests/_core/test_plot.py::TestPlotting::test_move_with_range",
                            "tests/_core/test_plot.py::TestPlotting::test_methods_clone",
                            "tests/_core/test_plot.py::TestPlotting::test_default_is_no_pyplot",
                            "tests/_core/test_plot.py::TestPlotting::test_with_pyplot",
                            "tests/_core/test_plot.py::TestPlotting::test_show",
                            "tests/_core/test_plot.py::TestPlotting::test_png_repr",
                            "tests/_core/test_plot.py::TestPlotting::test_save",
                            "tests/_core/test_plot.py::TestPlotting::test_layout_size",
                            "tests/_core/test_plot.py::TestPlotting::test_on_axes",
                            "tests/_core/test_plot.py::TestPlotting::test_on_figure[True]",
                            "tests/_core/test_plot.py::TestPlotting::test_on_figure[False]",
                            "tests/_core/test_plot.py::TestPlotting::test_on_subfigure[True]",
                            "tests/_core/test_plot.py::TestPlotting::test_on_subfigure[False]",
                            "tests/_core/test_plot.py::TestPlotting::test_on_type_check",
                            "tests/_core/test_plot.py::TestPlotting::test_on_axes_with_subplots_error",
                            "tests/_core/test_plot.py::TestPlotting::test_on_disables_layout_algo",
                            "tests/_core/test_plot.py::TestPlotting::test_axis_labels_from_constructor",
                            "tests/_core/test_plot.py::TestPlotting::test_axis_labels_from_layer",
                            "tests/_core/test_plot.py::TestPlotting::test_axis_labels_are_first_name",
                            "tests/_core/test_plot.py::TestPlotting::test_limits",
                            "tests/_core/test_plot.py::TestPlotting::test_labels_axis",
                            "tests/_core/test_plot.py::TestPlotting::test_labels_legend",
                            "tests/_core/test_plot.py::TestPlotting::test_labels_facets",
                            "tests/_core/test_plot.py::TestPlotting::test_title_single",
                            "tests/_core/test_plot.py::TestPlotting::test_title_facet_function",
                            "tests/_core/test_plot.py::TestFacetInterface::test_1d[row]",
                            "tests/_core/test_plot.py::TestFacetInterface::test_1d_as_vector[row]",
                            "tests/_core/test_plot.py::TestFacetInterface::test_1d_with_order[row-reverse]",
                            "tests/_core/test_plot.py::TestFacetInterface::test_1d_with_order[col-reverse]",
                            "tests/_core/test_plot.py::TestFacetInterface::test_1d[col]",
                            "tests/_core/test_plot.py::TestFacetInterface::test_1d_as_vector[col]",
                            "tests/_core/test_plot.py::TestFacetInterface::test_1d_with_order[col-subset]",
                            "tests/_core/test_plot.py::TestFacetInterface::test_1d_with_order[row-subset]",
                            "tests/_core/test_plot.py::TestFacetInterface::test_2d_with_order[subset]",
                            "tests/_core/test_plot.py::TestFacetInterface::test_1d_with_order[col-expand]",
                            "tests/_core/test_plot.py::TestFacetInterface::test_1d_with_order[row-expand]",
                            "tests/_core/test_plot.py::TestFacetInterface::test_2d_with_order[expand]",
                            "tests/_core/test_plot.py::TestFacetInterface::test_2d_with_order[reverse]",
                            "tests/_core/test_plot.py::TestFacetInterface::test_2d",
                            "tests/_core/test_plot.py::TestFacetInterface::test_layout_algo[tight]",
                            "tests/_core/test_plot.py::TestFacetInterface::test_layout_algo[constrained]",
                            "tests/_core/test_plot.py::TestFacetInterface::test_axis_sharing",
                            "tests/_core/test_plot.py::TestFacetInterface::test_unshared_spacing",
                            "tests/_core/test_plot.py::TestFacetInterface::test_col_wrapping",
                            "tests/_core/test_plot.py::TestFacetInterface::test_row_wrapping",
                            "tests/_core/test_plot.py::TestPairInterface::test_all_numeric[list]",
                            "tests/_core/test_plot.py::TestPairInterface::test_all_numeric[Index]",
                            "tests/_core/test_plot.py::TestPairInterface::test_single_variable_key_raises",
                            "tests/_core/test_plot.py::TestPairInterface::test_single_dimension[x]",
                            "tests/_core/test_plot.py::TestPairInterface::test_single_dimension[y]",
                            "tests/_core/test_plot.py::TestPairInterface::test_non_cross",
                            "tests/_core/test_plot.py::TestPairInterface::test_list_of_vectors",
                            "tests/_core/test_plot.py::TestPairInterface::test_with_no_variables",
                            "tests/_core/test_plot.py::TestPairInterface::test_with_facets",
                            "tests/_core/test_plot.py::TestPairInterface::test_error_on_facet_overlap[variables0]",
                            "tests/_core/test_plot.py::TestPairInterface::test_error_on_facet_overlap[variables1]",
                            "tests/_core/test_plot.py::TestPairInterface::test_error_on_wrap_overlap[variables0]",
                            "tests/_core/test_plot.py::TestPairInterface::test_error_on_wrap_overlap[variables1]",
                            "tests/_core/test_plot.py::TestPairInterface::test_axis_sharing",
                            "tests/_core/test_plot.py::TestPairInterface::test_axis_sharing_with_facets",
                            "tests/_core/test_plot.py::TestPairInterface::test_x_wrapping",
                            "tests/_core/test_plot.py::TestPairInterface::test_y_wrapping",
                            "tests/_core/test_plot.py::TestPairInterface::test_non_cross_wrapping",
                            "tests/_core/test_plot.py::TestPairInterface::test_cross_mismatched_lengths",
                            "tests/_core/test_plot.py::TestPairInterface::test_orient_inference",
                            "tests/_core/test_plot.py::TestPairInterface::test_computed_coordinate_orient_inference",
                            "tests/_core/test_plot.py::TestPairInterface::test_two_variables_single_order_error",
                            "tests/_core/test_plot.py::TestPairInterface::test_limits",
                            "tests/_core/test_plot.py::TestPairInterface::test_labels",
                            "tests/_core/test_plot.py::TestLabelVisibility::test_single_subplot",
                            "tests/_core/test_plot.py::TestLabelVisibility::test_1d_column[facet_kws0-pair_kws0]",
                            "tests/_core/test_plot.py::TestLabelVisibility::test_1d_column[facet_kws1-pair_kws1]",
                            "tests/_core/test_plot.py::TestLabelVisibility::test_1d_row[facet_kws0-pair_kws0]",
                            "tests/_core/test_plot.py::TestLabelVisibility::test_1d_row[facet_kws1-pair_kws1]",
                            "tests/_core/test_plot.py::TestLabelVisibility::test_1d_column_wrapped",
                            "tests/_core/test_plot.py::TestLabelVisibility::test_1d_row_wrapped",
                            "tests/_core/test_plot.py::TestLabelVisibility::test_1d_column_wrapped_non_cross",
                            "tests/_core/test_plot.py::TestLabelVisibility::test_2d",
                            "tests/_core/test_plot.py::TestLabelVisibility::test_2d_unshared",
                            "tests/_core/test_plot.py::TestLegend::test_single_layer_single_variable",
                            "tests/_core/test_plot.py::TestLegend::test_single_layer_common_variable",
                            "tests/_core/test_plot.py::TestLegend::test_single_layer_common_unnamed_variable",
                            "tests/_core/test_plot.py::TestLegend::test_single_layer_multi_variable",
                            "tests/_core/test_plot.py::TestLegend::test_multi_layer_single_variable",
                            "tests/_core/test_plot.py::TestLegend::test_multi_layer_multi_variable",
                            "tests/_core/test_plot.py::TestLegend::test_multi_layer_different_artists",
                            "tests/_core/test_plot.py::TestLegend::test_three_layers",
                            "tests/_core/test_plot.py::TestLegend::test_identity_scale_ignored",
                            "tests/_core/test_plot.py::TestLegend::test_suppression_in_add_method",
                            "tests/_core/test_plot.py::TestLegend::test_anonymous_title",
                            "tests/_core/test_plot.py::TestLegend::test_legendless_mark",
                            "tests/_core/test_plot.py::TestLegend::test_legend_has_no_offset",
                            "tests/_core/test_plot.py::TestDefaultObject::test_default_repr",
                            "tests/_core/test_scales.py::TestContinuous::test_coordinate_defaults",
                            "tests/_core/test_scales.py::TestContinuous::test_coordinate_transform",
                            "tests/_core/test_scales.py::TestContinuous::test_coordinate_transform_with_parameter",
                            "tests/_core/test_scales.py::TestContinuous::test_coordinate_transform_error",
                            "tests/_core/test_scales.py::TestContinuous::test_interval_defaults",
                            "tests/_core/test_scales.py::TestContinuous::test_interval_with_range",
                            "tests/_core/test_scales.py::TestContinuous::test_interval_with_norm",
                            "tests/_core/test_scales.py::TestContinuous::test_interval_with_range_norm_and_transform",
                            "tests/_core/test_scales.py::TestContinuous::test_color_defaults",
                            "tests/_core/test_scales.py::TestContinuous::test_color_named_values",
                            "tests/_core/test_scales.py::TestContinuous::test_color_tuple_values",
                            "tests/_core/test_scales.py::TestContinuous::test_color_callable_values",
                            "tests/_core/test_scales.py::TestContinuous::test_color_with_norm",
                            "tests/_core/test_scales.py::TestContinuous::test_color_with_transform",
                            "tests/_core/test_scales.py::TestContinuous::test_tick_locator",
                            "tests/_core/test_scales.py::TestContinuous::test_tick_locator_input_check",
                            "tests/_core/test_scales.py::TestContinuous::test_tick_upto",
                            "tests/_core/test_scales.py::TestContinuous::test_tick_every",
                            "tests/_core/test_scales.py::TestContinuous::test_tick_every_between",
                            "tests/_core/test_scales.py::TestContinuous::test_tick_at",
                            "tests/_core/test_scales.py::TestContinuous::test_tick_count",
                            "tests/_core/test_scales.py::TestContinuous::test_tick_count_between",
                            "tests/_core/test_scales.py::TestContinuous::test_tick_minor",
                            "tests/_core/test_scales.py::TestContinuous::test_log_tick_default",
                            "tests/_core/test_scales.py::TestContinuous::test_log_tick_upto",
                            "tests/_core/test_scales.py::TestContinuous::test_log_tick_count",
                            "tests/_core/test_scales.py::TestContinuous::test_log_tick_format_disabled",
                            "tests/_core/test_scales.py::TestContinuous::test_log_tick_every",
                            "tests/_core/test_scales.py::TestContinuous::test_symlog_tick_default",
                            "tests/_core/test_scales.py::TestContinuous::test_label_formatter",
                            "tests/_core/test_scales.py::TestContinuous::test_label_like_pattern",
                            "tests/_core/test_scales.py::TestContinuous::test_label_like_string",
                            "tests/_core/test_scales.py::TestContinuous::test_label_like_function",
                            "tests/_core/test_scales.py::TestContinuous::test_label_base",
                            "tests/_core/test_scales.py::TestContinuous::test_label_unit",
                            "tests/_core/test_scales.py::TestContinuous::test_label_unit_with_sep",
                            "tests/_core/test_scales.py::TestContinuous::test_label_empty_unit",
                            "tests/_core/test_scales.py::TestContinuous::test_label_base_from_transform",
                            "tests/_core/test_scales.py::TestContinuous::test_label_type_checks",
                            "tests/_core/test_scales.py::TestNominal::test_coordinate_defaults",
                            "tests/_core/test_scales.py::TestNominal::test_coordinate_with_order",
                            "tests/_core/test_scales.py::TestNominal::test_coordinate_with_subset_order",
                            "tests/_core/test_scales.py::TestNominal::test_coordinate_axis",
                            "tests/_core/test_scales.py::TestNominal::test_coordinate_axis_with_order",
                            "tests/_core/test_scales.py::TestNominal::test_coordinate_axis_with_subset_order",
                            "tests/_core/test_scales.py::TestNominal::test_coordinate_axis_with_category_dtype",
                            "tests/_core/test_scales.py::TestNominal::test_coordinate_numeric_data",
                            "tests/_core/test_scales.py::TestNominal::test_coordinate_numeric_data_with_order",
                            "tests/_core/test_scales.py::TestNominal::test_color_defaults",
                            "tests/_core/test_scales.py::TestNominal::test_color_named_palette",
                            "tests/_core/test_scales.py::TestNominal::test_color_list_palette",
                            "tests/_core/test_scales.py::TestNominal::test_color_dict_palette",
                            "tests/_core/test_scales.py::TestNominal::test_color_numeric_data",
                            "tests/_core/test_scales.py::TestNominal::test_color_numeric_with_order_subset",
                            "tests/_core/test_scales.py::TestNominal::test_color_alpha_in_palette",
                            "tests/_core/test_scales.py::TestNominal::test_color_unknown_palette",
                            "tests/_core/test_scales.py::TestNominal::test_object_defaults",
                            "tests/_core/test_scales.py::TestNominal::test_object_list",
                            "tests/_core/test_scales.py::TestNominal::test_object_dict",
                            "tests/_core/test_scales.py::TestNominal::test_object_order",
                            "tests/_core/test_scales.py::TestNominal::test_object_order_subset",
                            "tests/_core/test_scales.py::TestNominal::test_objects_that_are_weird",
                            "tests/_core/test_scales.py::TestNominal::test_alpha_default",
                            "tests/_core/test_scales.py::TestNominal::test_fill",
                            "tests/_core/test_scales.py::TestNominal::test_fill_dict",
                            "tests/_core/test_scales.py::TestNominal::test_fill_nunique_warning",
                            "tests/_core/test_scales.py::TestNominal::test_interval_defaults",
                            "tests/_core/test_scales.py::TestNominal::test_interval_tuple",
                            "tests/_core/test_scales.py::TestNominal::test_interval_tuple_numeric",
                            "tests/_core/test_scales.py::TestNominal::test_interval_list",
                            "tests/_core/test_scales.py::TestNominal::test_interval_dict",
                            "tests/_core/test_scales.py::TestNominal::test_interval_with_transform",
                            "tests/_core/test_scales.py::TestTemporal::test_coordinate_defaults",
                            "tests/_core/test_scales.py::TestTemporal::test_interval_defaults",
                            "tests/_core/test_scales.py::TestTemporal::test_interval_with_range",
                            "tests/_core/test_scales.py::TestTemporal::test_interval_with_norm",
                            "tests/_core/test_scales.py::TestTemporal::test_color_defaults",
                            "tests/_core/test_scales.py::TestTemporal::test_color_named_values",
                            "tests/_core/test_scales.py::TestTemporal::test_coordinate_axis",
                            "tests/_core/test_scales.py::TestTemporal::test_tick_locator",
                            "tests/_core/test_scales.py::TestTemporal::test_tick_upto",
                            "tests/_core/test_scales.py::TestTemporal::test_label_formatter",
                            "tests/_core/test_scales.py::TestTemporal::test_label_concise"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "pylint-dev__pylint-4970.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "tests/checkers/unittest_similar.py::test_set_duplicate_lines_to_zero"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "tests/checkers/unittest_similar.py::test_ignore_comments",
                            "tests/checkers/unittest_similar.py::test_ignore_docstrings",
                            "tests/checkers/unittest_similar.py::test_ignore_imports",
                            "tests/checkers/unittest_similar.py::test_multiline_imports",
                            "tests/checkers/unittest_similar.py::test_ignore_multiline_imports",
                            "tests/checkers/unittest_similar.py::test_ignore_signatures_fail",
                            "tests/checkers/unittest_similar.py::test_ignore_signatures_pass",
                            "tests/checkers/unittest_similar.py::test_ignore_signatures_class_methods_fail",
                            "tests/checkers/unittest_similar.py::test_ignore_signatures_class_methods_pass",
                            "tests/checkers/unittest_similar.py::test_ignore_signatures_empty_functions_fail",
                            "tests/checkers/unittest_similar.py::test_ignore_signatures_empty_functions_pass",
                            "tests/checkers/unittest_similar.py::test_no_hide_code_with_imports",
                            "tests/checkers/unittest_similar.py::test_ignore_nothing",
                            "tests/checkers/unittest_similar.py::test_lines_without_meaningful_content_do_not_trigger_similarity",
                            "tests/checkers/unittest_similar.py::test_help",
                            "tests/checkers/unittest_similar.py::test_no_args",
                            "tests/checkers/unittest_similar.py::test_get_map_data"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "pytest-dev__pytest-6680.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "testing/deprecated_test.py::test_node_direct_ctor_warning"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "testing/deprecated_test.py::test_terminal_reporter_writer_attr",
                            "testing/deprecated_test.py::test_resultlog_is_deprecated",
                            "testing/deprecated_test.py::test_external_plugins_integrated[pytest_capturelog]",
                            "testing/deprecated_test.py::test_external_plugins_integrated[pytest_catchlog]",
                            "testing/deprecated_test.py::test_external_plugins_integrated[pytest_faulthandler]",
                            "testing/deprecated_test.py::test_warn_about_imminent_junit_family_default_change[None]",
                            "testing/deprecated_test.py::test_warn_about_imminent_junit_family_default_change[legacy]",
                            "testing/deprecated_test.py::test_warn_about_imminent_junit_family_default_change[xunit2]",
                            "testing/deprecated_test.py::test_noprintlogs_is_deprecated_cmdline",
                            "testing/deprecated_test.py::test_noprintlogs_is_deprecated_ini"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "pylint-dev__pylint-4703.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "tests/test_func.py::test_functionality[func_noerror_cycle]"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "tests/test_func.py::test_functionality[func_w0401_disabled_in_func.py]",
                            "tests/test_func.py::test_functionality[func_i0022.py]",
                            "tests/test_func.py::test_functionality[func_w0401.py]",
                            "tests/test_func.py::test_functionality[func_w0801.py]",
                            "tests/test_func.py::test_functionality[func_w0401_package]",
                            "tests/test_func.py::test_functionality[func_w0401_disabled.py]",
                            "tests/test_func.py::test_functionality[func_i0014.py]",
                            "tests/test_func.py::test_functionality[func_i0013.py]",
                            "tests/test_func.py::test_functionality[func_i0020.py]",
                            "tests/test_func.py::test_functionality[func_i0011.py]",
                            "tests/test_func.py::test_functionality[func_i0012.py]"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "sympy__sympy-15151.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "test_latex_indexed"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "test_printmethod",
                            "test_latex_basic",
                            "test_latex_builtins",
                            "test_latex_SingularityFunction",
                            "test_latex_cycle",
                            "test_latex_permutation",
                            "test_latex_Float",
                            "test_latex_vector_expressions",
                            "test_latex_symbols",
                            "test_latex_functions",
                            "test_function_subclass_different_name",
                            "test_hyper_printing",
                            "test_latex_bessel",
                            "test_latex_fresnel",
                            "test_latex_brackets",
                            "test_latex_derivatives",
                            "test_latex_subs",
                            "test_latex_integrals",
                            "test_latex_sets",
                            "test_latex_SetExpr",
                            "test_latex_Range",
                            "test_latex_sequences",
                            "test_latex_FourierSeries",
                            "test_latex_FormalPowerSeries",
                            "test_latex_intervals",
                            "test_latex_AccumuBounds",
                            "test_latex_emptyset",
                            "test_latex_commutator",
                            "test_latex_union",
                            "test_latex_symmetric_difference",
                            "test_latex_Complement",
                            "test_latex_Complexes",
                            "test_latex_productset",
                            "test_latex_Naturals",
                            "test_latex_Naturals0",
                            "test_latex_Integers",
                            "test_latex_ImageSet",
                            "test_latex_ConditionSet",
                            "test_latex_ComplexRegion",
                            "test_latex_Contains",
                            "test_latex_sum",
                            "test_latex_product",
                            "test_latex_limits",
                            "test_latex_log",
                            "test_issue_3568",
                            "test_latex",
                            "test_latex_dict",
                            "test_latex_list",
                            "test_latex_rational",
                            "test_latex_inverse",
                            "test_latex_DiracDelta",
                            "test_latex_Heaviside",
                            "test_latex_KroneckerDelta",
                            "test_latex_LeviCivita",
                            "test_mode",
                            "test_latex_Piecewise",
                            "test_latex_Matrix",
                            "test_latex_matrix_with_functions",
                            "test_latex_NDimArray",
                            "test_latex_mul_symbol",
                            "test_latex_issue_4381",
                            "test_latex_issue_4576",
                            "test_latex_pow_fraction",
                            "test_noncommutative",
                            "test_latex_order",
                            "test_latex_Lambda",
                            "test_latex_PolyElement",
                            "test_latex_FracElement",
                            "test_latex_Poly",
                            "test_latex_Poly_order",
                            "test_latex_ComplexRootOf",
                            "test_latex_RootSum",
                            "test_settings",
                            "test_latex_numbers",
                            "test_latex_euler",
                            "test_lamda",
                            "test_custom_symbol_names",
                            "test_matAdd",
                            "test_matMul",
                            "test_latex_MatrixSlice",
                            "test_latex_RandomDomain",
                            "test_PrettyPoly",
                            "test_integral_transforms",
                            "test_PolynomialRingBase",
                            "test_categories",
                            "test_Modules",
                            "test_QuotientRing",
                            "test_Tr",
                            "test_Adjoint",
                            "test_Hadamard",
                            "test_ZeroMatrix",
                            "test_boolean_args_order",
                            "test_imaginary",
                            "test_builtins_without_args",
                            "test_latex_greek_functions",
                            "test_translate",
                            "test_other_symbols",
                            "test_modifiers",
                            "test_greek_symbols",
                            "test_builtin_no_args",
                            "test_issue_6853",
                            "test_Mul",
                            "test_Pow",
                            "test_issue_7180",
                            "test_issue_8409",
                            "test_issue_7117",
                            "test_issue_2934",
                            "test_issue_10489",
                            "test_issue_12886",
                            "test_issue_13651",
                            "test_latex_UnevaluatedExpr",
                            "test_MatrixElement_printing",
                            "test_MatrixSymbol_printing",
                            "test_Quaternion_latex_printing",
                            "test_TensorProduct_printing",
                            "test_WedgeProduct_printing",
                            "test_issue_14041"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "matplotlib__matplotlib-26532.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_Poly3DCollection_init_value_error"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_invisible_axes[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_grid_off[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_invisible_ticks_axis[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_axis_positions[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_aspects[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_aspects_adjust_box[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_axes3d_repr",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_axes3d_primary_views[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_bar3d[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_bar3d_colors",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_bar3d_shaded[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_bar3d_notshaded[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_bar3d_lightsource",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_contour3d[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_contour3d_extend3d[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_contourf3d[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_contourf3d_fill[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_contourf3d_extend[png-both-levels0]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_contourf3d_extend[png-min-levels1]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_contourf3d_extend[png-max-levels2]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_tricontour[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_contour3d_1d_input",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_lines3d[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_plot_scalar[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_invalid_line_data",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_mixedsubplots[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_tight_layout_text[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_scatter3d[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_scatter3d_color[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_scatter3d_linewidth[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_scatter3d_linewidth_modification[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_scatter3d_modification[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_scatter3d_sorting[png-True]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_scatter3d_sorting[png-False]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_marker_draw_order_data_reversed[png--50]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_marker_draw_order_data_reversed[png-130]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_marker_draw_order_view_rotated[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_plot_3d_from_2d[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_surface3d[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_surface3d_label_offset_tick_position[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_surface3d_shaded[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_surface3d_masked[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_plot_surface_None_arg[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_surface3d_masked_strides[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_text3d[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_text3d_modification[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_trisurf3d[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_trisurf3d_shaded[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_wireframe3d[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_wireframe3dzerocstride[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_wireframe3dzerorstride[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_wireframe3dzerostrideraises",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_mixedsamplesraises",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_quiver3d[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_quiver3d_empty[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_quiver3d_masked[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_patch_modification",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_patch_collection_modification[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_poly3dcollection_verts_validation",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_poly3dcollection_closed[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_poly_collection_2d_to_3d_empty",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_poly3dcollection_alpha[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_add_collection3d_zs_array[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_add_collection3d_zs_scalar[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_axes3d_labelpad[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_axes3d_cla[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_axes3d_rotated[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_plotsurface_1d_raises",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_proj_transform",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_proj_axes_cube[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_proj_axes_cube_ortho[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_world",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_autoscale",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_unautoscale[True-x]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_unautoscale[True-y]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_unautoscale[True-z]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_unautoscale[False-x]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_unautoscale[False-y]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_unautoscale[False-z]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_unautoscale[None-x]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_unautoscale[None-y]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_unautoscale[None-z]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_axes3d_focal_length_checks",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_axes3d_focal_length[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_axes3d_ortho[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_axes3d_isometric[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_invalid_axes_limits[set_xlim3d-left-inf]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_invalid_axes_limits[set_xlim3d-left-nan]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_invalid_axes_limits[set_xlim3d-right-inf]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_invalid_axes_limits[set_xlim3d-right-nan]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_invalid_axes_limits[set_ylim3d-bottom-inf]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_invalid_axes_limits[set_ylim3d-bottom-nan]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_invalid_axes_limits[set_ylim3d-top-inf]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_invalid_axes_limits[set_ylim3d-top-nan]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_invalid_axes_limits[set_zlim3d-bottom-inf]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_invalid_axes_limits[set_zlim3d-bottom-nan]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_invalid_axes_limits[set_zlim3d-top-inf]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_invalid_axes_limits[set_zlim3d-top-nan]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::TestVoxels::test_simple[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::TestVoxels::test_edge_style[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::TestVoxels::test_named_colors[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::TestVoxels::test_rgb_data[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::TestVoxels::test_alpha[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::TestVoxels::test_xyz[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::TestVoxels::test_calling_conventions",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_line3d_set_get_data_3d",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_inverted[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_inverted_cla",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_ax3d_tickcolour",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_ticklabel_format[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_quiver3D_smoke[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_minor_ticks[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_errorbar3d_errorevery[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_errorbar3d[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_stem3d[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_equal_box_aspect[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_colorbar_pos",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_inverted_zaxis",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_set_zlim",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_shared_view[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_shared_axes_retick",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_pan",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_toolbar_zoom_pan[zoom-1-None-expected0]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_toolbar_zoom_pan[zoom-1-x-expected1]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_toolbar_zoom_pan[zoom-1-y-expected2]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_toolbar_zoom_pan[zoom-3-None-expected3]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_toolbar_zoom_pan[pan-1-None-expected4]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_toolbar_zoom_pan[pan-1-x-expected5]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_toolbar_zoom_pan[pan-1-y-expected6]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_scalarmap_update[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_subfigure_simple",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_computed_zorder[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_format_coord",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_get_axis_position",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_margins",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_margins_errors[ValueError-args0-kwargs0-margin",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_margins_errors[ValueError-args1-kwargs1-margin",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_margins_errors[ValueError-args2-kwargs2-margin",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_margins_errors[ValueError-args3-kwargs3-margin",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_margins_errors[ValueError-args4-kwargs4-margin",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_margins_errors[ValueError-args5-kwargs5-margin",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_margins_errors[TypeError-args6-kwargs6-Cannot",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_margins_errors[TypeError-args7-kwargs7-Cannot",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_margins_errors[TypeError-args8-kwargs8-Cannot",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_margins_errors[TypeError-args9-kwargs9-Must",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_text_3d[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_draw_single_lines_from_Nx1",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_pathpatch_3d[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_scatter_spiral[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_Poly3DCollection_get_facecolor",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_Poly3DCollection_get_edgecolor",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_view_init_vertical_axis[z-proj_expected0-axis_lines_expected0-tickdirs_expected0]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_view_init_vertical_axis[y-proj_expected1-axis_lines_expected1-tickdirs_expected1]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_view_init_vertical_axis[x-proj_expected2-axis_lines_expected2-tickdirs_expected2]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_arc_pathpatch[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_panecolor_rcparams[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_mutating_input_arrays_y_and_z[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_scatter_masked_color",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_surface3d_zsort_inf[png]"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "psf__requests-1142.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "test_requests.py::RequestsTestCase::test_no_content_length"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "test_requests.py::RequestsTestCase::test_basic_building",
                            "test_requests.py::RequestsTestCase::test_entry_points",
                            "test_requests.py::RequestsTestCase::test_invalid_url",
                            "test_requests.py::RequestsTestCase::test_params_are_added_before_fragment",
                            "test_requests.py::RequestsTestCase::test_path_is_not_double_encoded"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "matplotlib__matplotlib-21617.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "lib/matplotlib/tests/test_backend_ps.py::test_no_duplicate_definition"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "lib/matplotlib/tests/test_backend_ps.py::test_savefig_to_stringio[ps-portrait]",
                            "lib/matplotlib/tests/test_backend_ps.py::test_savefig_to_stringio[ps-landscape]",
                            "lib/matplotlib/tests/test_backend_ps.py::test_savefig_to_stringio[ps",
                            "lib/matplotlib/tests/test_backend_ps.py::test_savefig_to_stringio[eps-portrait]",
                            "lib/matplotlib/tests/test_backend_ps.py::test_savefig_to_stringio[eps-landscape]",
                            "lib/matplotlib/tests/test_backend_ps.py::test_patheffects",
                            "lib/matplotlib/tests/test_backend_ps.py::test_transparency[eps]",
                            "lib/matplotlib/tests/test_backend_ps.py::test_bbox",
                            "lib/matplotlib/tests/test_backend_ps.py::test_failing_latex",
                            "lib/matplotlib/tests/test_backend_ps.py::test_text_clip[eps]",
                            "lib/matplotlib/tests/test_backend_ps.py::test_d_glyph",
                            "lib/matplotlib/tests/test_backend_ps.py::test_fonttype[3]",
                            "lib/matplotlib/tests/test_backend_ps.py::test_fonttype[42]",
                            "lib/matplotlib/tests/test_backend_ps.py::test_linedash"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "pallets__flask-4169.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "tests/test_cli.py::test_lazy_load_error"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "tests/test_cli.py::test_prepare_import[test-path0-test]",
                            "tests/test_cli.py::test_prepare_import[test.py-path1-test]",
                            "tests/test_cli.py::test_prepare_import[a/test-path2-test]",
                            "tests/test_cli.py::test_prepare_import[test/__init__.py-path3-test]",
                            "tests/test_cli.py::test_prepare_import[test/__init__-path4-test]",
                            "tests/test_cli.py::test_prepare_import[value5-path5-cliapp.inner1]",
                            "tests/test_cli.py::test_prepare_import[value6-path6-cliapp.inner1.inner2]",
                            "tests/test_cli.py::test_prepare_import[test.a.b-path7-test.a.b]",
                            "tests/test_cli.py::test_prepare_import[value8-path8-cliapp.app]",
                            "tests/test_cli.py::test_prepare_import[value9-path9-cliapp.message.txt]",
                            "tests/test_cli.py::test_with_appcontext",
                            "tests/test_cli.py::test_appgroup",
                            "tests/test_cli.py::TestRoutes::test_sort",
                            "tests/test_cli.py::test_load_dotenv",
                            "tests/test_cli.py::test_dotenv_path",
                            "tests/test_cli.py::test_dotenv_optional",
                            "tests/test_cli.py::test_disable_dotenv_from_env",
                            "tests/test_cli.py::test_run_cert_path",
                            "tests/test_cli.py::test_run_cert_adhoc",
                            "tests/test_cli.py::test_run_cert_import",
                            "tests/test_cli.py::test_run_cert_no_ssl",
                            "tests/test_cli.py::test_cli_blueprints",
                            "tests/test_cli.py::test_cli_empty",
                            "tests/test_cli.py::test_click_7_deprecated"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "pylint-dev__pylint-5951.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "tests/pyreverse/test_main.py::test_graphviz_supported_image_format",
                            "tests/pyreverse/test_main.py::test_graphviz_cant_determine_supported_formats",
                            "tests/pyreverse/test_main.py::test_graphviz_unsupported_image_format"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "tests/pyreverse/test_main.py::test_project_root_in_sys_path[/tests]",
                            "tests/pyreverse/test_main.py::test_project_root_in_sys_path[/data]"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "psf__requests-2153.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "test_requests.py::RequestsTestCase::test_HTTP_200_OK_HEAD",
                            "test_requests.py::RequestsTestCase::test_cookie_sent_on_redirect",
                            "test_requests.py::RequestsTestCase::test_different_encodings_dont_break_post",
                            "test_requests.py::RequestsTestCase::test_manual_redirect_with_partial_body_read",
                            "test_requests.py::RequestsTestCase::test_prepared_from_session",
                            "test_requests.py::RequestsTestCase::test_request_cookie_overrides_session_cookie",
                            "test_requests.py::RequestsTestCase::test_set_cookie_on_301",
                            "test_requests.py::RequestsTestCase::test_unicode_multipart_post"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "test_requests.py::RequestsTestCase::test_BASICAUTH_TUPLE_HTTP_200_OK_GET",
                            "test_requests.py::RequestsTestCase::test_DIGESTAUTH_QUOTES_QOP_VALUE",
                            "test_requests.py::RequestsTestCase::test_DIGEST_AUTH_RETURNS_COOKIE",
                            "test_requests.py::RequestsTestCase::test_DIGEST_AUTH_SETS_SESSION_COOKIES",
                            "test_requests.py::RequestsTestCase::test_DIGEST_STREAM",
                            "test_requests.py::RequestsTestCase::test_HTTP_200_OK_GET_ALTERNATIVE",
                            "test_requests.py::RequestsTestCase::test_HTTP_200_OK_GET_WITH_MIXED_PARAMS",
                            "test_requests.py::RequestsTestCase::test_HTTP_200_OK_GET_WITH_PARAMS",
                            "test_requests.py::RequestsTestCase::test_HTTP_200_OK_PUT",
                            "test_requests.py::RequestsTestCase::test_HTTP_302_ALLOW_REDIRECT_GET",
                            "test_requests.py::RequestsTestCase::test_POSTBIN_GET_POST_FILES",
                            "test_requests.py::RequestsTestCase::test_POSTBIN_GET_POST_FILES_WITH_DATA",
                            "test_requests.py::RequestsTestCase::test_auth_is_retained_for_redirect_on_host",
                            "test_requests.py::RequestsTestCase::test_auth_is_stripped_on_redirect_off_host",
                            "test_requests.py::RequestsTestCase::test_autoset_header_values_are_native",
                            "test_requests.py::RequestsTestCase::test_basic_auth_str_is_always_native",
                            "test_requests.py::RequestsTestCase::test_basic_building",
                            "test_requests.py::RequestsTestCase::test_basicauth_with_netrc",
                            "test_requests.py::RequestsTestCase::test_can_send_nonstring_objects_with_files",
                            "test_requests.py::RequestsTestCase::test_cannot_send_unprepared_requests",
                            "test_requests.py::RequestsTestCase::test_cookie_as_dict_items",
                            "test_requests.py::RequestsTestCase::test_cookie_as_dict_keeps_items",
                            "test_requests.py::RequestsTestCase::test_cookie_as_dict_keeps_len",
                            "test_requests.py::RequestsTestCase::test_cookie_as_dict_keys",
                            "test_requests.py::RequestsTestCase::test_cookie_as_dict_values",
                            "test_requests.py::RequestsTestCase::test_cookie_parameters",
                            "test_requests.py::RequestsTestCase::test_cookie_persists_via_api",
                            "test_requests.py::RequestsTestCase::test_cookie_quote_wrapped",
                            "test_requests.py::RequestsTestCase::test_cookie_removed_on_expire",
                            "test_requests.py::RequestsTestCase::test_custom_content_type",
                            "test_requests.py::RequestsTestCase::test_decompress_gzip",
                            "test_requests.py::RequestsTestCase::test_entry_points",
                            "test_requests.py::RequestsTestCase::test_fixes_1329",
                            "test_requests.py::RequestsTestCase::test_generic_cookiejar_works",
                            "test_requests.py::RequestsTestCase::test_get_auth_from_url",
                            "test_requests.py::RequestsTestCase::test_get_auth_from_url_encoded_hashes",
                            "test_requests.py::RequestsTestCase::test_get_auth_from_url_encoded_spaces",
                            "test_requests.py::RequestsTestCase::test_get_auth_from_url_not_encoded_spaces",
                            "test_requests.py::RequestsTestCase::test_get_auth_from_url_percent_chars",
                            "test_requests.py::RequestsTestCase::test_header_keys_are_native",
                            "test_requests.py::RequestsTestCase::test_header_remove_is_case_insensitive",
                            "test_requests.py::RequestsTestCase::test_headers_on_session_with_None_are_not_sent",
                            "test_requests.py::RequestsTestCase::test_history_is_always_a_list",
                            "test_requests.py::RequestsTestCase::test_hook_receives_request_arguments",
                            "test_requests.py::RequestsTestCase::test_http_error",
                            "test_requests.py::RequestsTestCase::test_invalid_url",
                            "test_requests.py::RequestsTestCase::test_links",
                            "test_requests.py::RequestsTestCase::test_long_authinfo_in_url",
                            "test_requests.py::RequestsTestCase::test_no_content_length",
                            "test_requests.py::RequestsTestCase::test_oddball_schemes_dont_check_URLs",
                            "test_requests.py::RequestsTestCase::test_param_cookiejar_works",
                            "test_requests.py::RequestsTestCase::test_params_are_added_before_fragment",
                            "test_requests.py::RequestsTestCase::test_path_is_not_double_encoded",
                            "test_requests.py::RequestsTestCase::test_prepared_request_hook",
                            "test_requests.py::RequestsTestCase::test_pyopenssl_redirect",
                            "test_requests.py::RequestsTestCase::test_redirect_with_wrong_gzipped_header",
                            "test_requests.py::RequestsTestCase::test_request_and_response_are_pickleable",
                            "test_requests.py::RequestsTestCase::test_request_cookies_not_persisted",
                            "test_requests.py::RequestsTestCase::test_request_ok_set",
                            "test_requests.py::RequestsTestCase::test_requests_in_history_are_not_overridden",
                            "test_requests.py::RequestsTestCase::test_response_decode_unicode",
                            "test_requests.py::RequestsTestCase::test_response_is_iterable",
                            "test_requests.py::RequestsTestCase::test_session_hooks_are_overriden_by_request_hooks",
                            "test_requests.py::RequestsTestCase::test_session_hooks_are_used_with_no_request_hooks",
                            "test_requests.py::RequestsTestCase::test_session_pickling",
                            "test_requests.py::RequestsTestCase::test_status_raising",
                            "test_requests.py::RequestsTestCase::test_time_elapsed_blank",
                            "test_requests.py::RequestsTestCase::test_transport_adapter_ordering",
                            "test_requests.py::RequestsTestCase::test_unicode_get",
                            "test_requests.py::RequestsTestCase::test_unicode_header_name",
                            "test_requests.py::RequestsTestCase::test_unicode_method_name",
                            "test_requests.py::RequestsTestCase::test_unicode_multipart_post_fieldnames",
                            "test_requests.py::RequestsTestCase::test_user_agent_transfers",
                            "test_requests.py::TestContentEncodingDetection::test_html4_pragma",
                            "test_requests.py::TestContentEncodingDetection::test_html_charset",
                            "test_requests.py::TestContentEncodingDetection::test_none",
                            "test_requests.py::TestContentEncodingDetection::test_precedence",
                            "test_requests.py::TestContentEncodingDetection::test_xhtml_pragma",
                            "test_requests.py::TestContentEncodingDetection::test_xml",
                            "test_requests.py::TestCaseInsensitiveDict::test_contains",
                            "test_requests.py::TestCaseInsensitiveDict::test_delitem",
                            "test_requests.py::TestCaseInsensitiveDict::test_docstring_example",
                            "test_requests.py::TestCaseInsensitiveDict::test_equality",
                            "test_requests.py::TestCaseInsensitiveDict::test_fixes_649",
                            "test_requests.py::TestCaseInsensitiveDict::test_get",
                            "test_requests.py::TestCaseInsensitiveDict::test_getitem",
                            "test_requests.py::TestCaseInsensitiveDict::test_iter",
                            "test_requests.py::TestCaseInsensitiveDict::test_iterable_init",
                            "test_requests.py::TestCaseInsensitiveDict::test_kwargs_init",
                            "test_requests.py::TestCaseInsensitiveDict::test_len",
                            "test_requests.py::TestCaseInsensitiveDict::test_lower_items",
                            "test_requests.py::TestCaseInsensitiveDict::test_mapping_init",
                            "test_requests.py::TestCaseInsensitiveDict::test_preserve_key_case",
                            "test_requests.py::TestCaseInsensitiveDict::test_preserve_last_key_case",
                            "test_requests.py::TestCaseInsensitiveDict::test_setdefault",
                            "test_requests.py::TestCaseInsensitiveDict::test_update",
                            "test_requests.py::TestCaseInsensitiveDict::test_update_retains_unchanged",
                            "test_requests.py::UtilsTestCase::test_address_in_network",
                            "test_requests.py::UtilsTestCase::test_dotted_netmask",
                            "test_requests.py::UtilsTestCase::test_get_auth_from_url",
                            "test_requests.py::UtilsTestCase::test_get_environ_proxies",
                            "test_requests.py::UtilsTestCase::test_get_environ_proxies_ip_ranges",
                            "test_requests.py::UtilsTestCase::test_is_ipv4_address",
                            "test_requests.py::UtilsTestCase::test_is_valid_cidr",
                            "test_requests.py::UtilsTestCase::test_super_len_io_streams",
                            "test_requests.py::TestMorselToCookieExpires::test_expires_invalid_int",
                            "test_requests.py::TestMorselToCookieExpires::test_expires_invalid_str",
                            "test_requests.py::TestMorselToCookieExpires::test_expires_none",
                            "test_requests.py::TestMorselToCookieExpires::test_expires_valid_str",
                            "test_requests.py::TestMorselToCookieMaxAge::test_max_age_invalid_str",
                            "test_requests.py::TestMorselToCookieMaxAge::test_max_age_valid_int",
                            "test_requests.py::TestTimeout::test_stream_timeout",
                            "test_requests.py::TestRedirects::test_requests_are_updated_each_time",
                            "test_requests.py::test_data_argument_accepts_tuples",
                            "test_requests.py::test_prepared_request_empty_copy",
                            "test_requests.py::test_prepared_request_no_cookies_copy",
                            "test_requests.py::test_prepared_request_complete_copy"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "astropy__astropy-8339.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "astropy/stats/tests/test_bayesian_blocks.py::test_fitness_function_results"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "astropy/stats/tests/test_bayesian_blocks.py::test_single_change_point",
                            "astropy/stats/tests/test_bayesian_blocks.py::test_duplicate_events",
                            "astropy/stats/tests/test_bayesian_blocks.py::test_measures_fitness_homoscedastic",
                            "astropy/stats/tests/test_bayesian_blocks.py::test_measures_fitness_heteroscedastic",
                            "astropy/stats/tests/test_bayesian_blocks.py::test_regular_events",
                            "astropy/stats/tests/test_bayesian_blocks.py::test_errors"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "django__django-9871.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "--help can be used on a specific command"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "test_params_to_runserver (admin_scripts.tests.ManageTestserver)",
                            "test_testserver_handle_params (admin_scripts.tests.ManageTestserver)",
                            "test_no_database (admin_scripts.tests.ManageRunserver)",
                            "test_readonly_database (admin_scripts.tests.ManageRunserver)",
                            "test_runner_addrport_ipv6 (admin_scripts.tests.ManageRunserver)",
                            "test_runner_ambiguous (admin_scripts.tests.ManageRunserver)",
                            "test_runner_custom_defaults (admin_scripts.tests.ManageRunserver)",
                            "test_runner_custom_defaults_ipv6 (admin_scripts.tests.ManageRunserver)",
                            "test_runner_hostname (admin_scripts.tests.ManageRunserver)",
                            "test_runner_hostname_ipv6 (admin_scripts.tests.ManageRunserver)",
                            "test_runserver_addrport (admin_scripts.tests.ManageRunserver)",
                            "test_migration_warning_multiple_apps (admin_scripts.tests.ManageRunserverMigrationWarning)",
                            "test_migration_warning_one_app (admin_scripts.tests.ManageRunserverMigrationWarning)",
                            "test_precedence (admin_scripts.tests.Discovery)",
                            "test_program_name_in_help (admin_scripts.tests.MainModule)",
                            "test_runs_django_admin (admin_scripts.tests.MainModule)",
                            "no settings: manage.py builtin commands fail with an error when no settings provided",
                            "no settings: manage.py builtin commands fail if settings file (from environment) doesn't exist",
                            "no settings: manage.py builtin commands fail if settings file (from argument) doesn't exist",
                            "test_attribute_error (admin_scripts.tests.ManageSettingsWithSettingsErrors)",
                            "test_help (admin_scripts.tests.ManageSettingsWithSettingsErrors)",
                            "test_import_error (admin_scripts.tests.ManageSettingsWithSettingsErrors)",
                            "test_key_error (admin_scripts.tests.ManageSettingsWithSettingsErrors)",
                            "no settings: django-admin builtin commands fail with an error when no settings provided",
                            "no settings: django-admin builtin commands fail if settings file (from environment) doesn't exist",
                            "no settings: django-admin builtin commands fail if settings file (from argument) doesn't exist",
                            "\"",
                            "test_importable_name (admin_scripts.tests.StartApp)",
                            "startapp validates that app name is a valid Python identifier.",
                            "Regression for #20509",
                            "test_empty_allowed_hosts_error (admin_scripts.tests.ManageRunserverEmptyAllowedHosts)",
                            "test_no_suggestions (admin_scripts.tests.DjangoAdminSuggestions)",
                            "test_suggestions (admin_scripts.tests.DjangoAdminSuggestions)",
                            "alternate: django-admin builtin commands fail with an error when no settings provided",
                            "alternate: django-admin builtin commands fail if settings file (from environment) doesn't exist",
                            "alternate: django-admin builtin commands fail if settings file (from argument) doesn't exist",
                            "alternate: django-admin builtin commands succeed if settings are provided in the environment",
                            "alternate: django-admin builtin commands succeed if settings are provided as argument",
                            "alternate: django-admin can't execute user commands unless settings are provided",
                            "alternate: django-admin can execute user commands if settings are provided in environment",
                            "alternate: django-admin can execute user commands if settings are provided as argument",
                            "minimal: django-admin builtin commands fail with an error when no settings provided",
                            "minimal: django-admin builtin commands fail if settings file (from environment) doesn't exist",
                            "minimal: django-admin builtin commands fail if settings file (from argument) doesn't exist",
                            "minimal: django-admin builtin commands fail if settings are provided in the environment",
                            "minimal: django-admin builtin commands fail if settings are provided as argument",
                            "minimal: django-admin can't execute user commands unless settings are provided",
                            "minimal: django-admin can't execute user commands, even if settings are provided in environment",
                            "minimal: django-admin can't execute user commands, even if settings are provided as argument",
                            "fulldefault: django-admin builtin commands fail with an error when no settings provided",
                            "fulldefault: django-admin builtin commands fail if settings file (from environment) doesn't exist",
                            "fulldefault: django-admin builtin commands fail if settings file (from argument) doesn't exist",
                            "fulldefault: django-admin builtin commands succeed if the environment contains settings",
                            "fulldefault: django-admin builtin commands succeed if a settings file is provided",
                            "fulldefault: django-admin can't execute user commands unless settings are provided",
                            "fulldefault: django-admin can execute user commands if settings are provided in environment",
                            "fulldefault: django-admin can execute user commands if settings are provided as argument",
                            "default: django-admin builtin commands fail with an error when no settings provided",
                            "default: django-admin builtin commands fail if settings file (from environment) doesn't exist",
                            "default: django-admin builtin commands fail if settings file (from argument) doesn't exist",
                            "default: django-admin builtin commands succeed if settings are provided in the environment",
                            "default: django-admin builtin commands succeed if settings are provided as argument",
                            "default: django-admin can't execute user commands if it isn't provided settings",
                            "default: django-admin can execute user commands if settings are provided in environment",
                            "default: django-admin can execute user commands if settings are provided as argument",
                            "directory: django-admin builtin commands fail with an error when no settings provided",
                            "directory: django-admin builtin commands fail if settings file (from environment) doesn't exist",
                            "directory: django-admin builtin commands fail if settings file (from argument) doesn't exist",
                            "directory: django-admin builtin commands succeed if settings are provided in the environment",
                            "directory: django-admin builtin commands succeed if settings are provided as argument",
                            "directory: django-admin can't execute user commands unless settings are provided",
                            "directory: startapp creates the correct directory",
                            "directory: startapp creates the correct directory with a custom template",
                            "Options passed before settings are correctly handled.",
                            "Options are correctly handled when they are passed before and after",
                            "Options passed after settings are correctly handled.",
                            "Short options passed after settings are correctly handled.",
                            "Short options passed before settings are correctly handled.",
                            "Runs without error and emits settings diff.",
                            "test_custom_default (admin_scripts.tests.DiffSettings)",
                            "--output=unified emits settings diff in unified mode.",
                            "alternate: manage.py builtin commands fail with an error when no default settings provided",
                            "alternate: manage.py builtin commands fail if settings file (from environment) doesn't exist",
                            "alternate: manage.py builtin commands fail if settings file (from argument) doesn't exist",
                            "alternate: manage.py builtin commands work if settings are provided in the environment",
                            "alternate: manage.py builtin commands work with settings provided as argument",
                            "alternate: manage.py can't execute user commands without settings",
                            "alternate: manage.py output syntax color can be deactivated with the `--no-color` option",
                            "alternate: manage.py can execute user commands if settings are provided in environment",
                            "alternate: manage.py can execute user commands if settings are provided as argument",
                            "manage.py check does not raise errors when an app imports a base",
                            "manage.py check reports an ImportError if an app's models.py",
                            "manage.py check does not raise an ImportError validating a",
                            "check reports an error on a nonexistent app in INSTALLED_APPS.",
                            "All errors/warnings should be sorted by level and by message.",
                            "test_warning_does_not_halt (admin_scripts.tests.ManageCheck)",
                            "multiple: manage.py builtin commands fail with an error when no settings provided",
                            "multiple: manage.py builtin commands fail if settings file (from environment) doesn't exist",
                            "multiple: manage.py builtin commands fail if settings file (from argument) doesn't exist",
                            "multiple: manage.py can execute builtin commands if settings are provided in the environment",
                            "multiple: manage.py builtin commands succeed if settings are provided as argument",
                            "multiple: manage.py can't execute user commands using default settings",
                            "multiple: manage.py can execute user commands if settings are provided in environment",
                            "multiple: manage.py can execute user commands if settings are provided as argument",
                            "minimal: manage.py builtin commands fail with an error when no settings provided",
                            "minimal: manage.py builtin commands fail if settings file (from environment) doesn't exist",
                            "minimal: manage.py builtin commands fail if settings file (from argument) doesn't exist",
                            "minimal: manage.py builtin commands fail if settings are provided in the environment",
                            "minimal: manage.py builtin commands fail if settings are provided as argument",
                            "minimal: manage.py can't execute user commands without appropriate settings",
                            "minimal: manage.py can't execute user commands, even if settings are provided in environment",
                            "minimal: manage.py can't execute user commands, even if settings are provided as argument",
                            "default: manage.py builtin commands succeed when default settings are appropriate",
                            "default: manage.py builtin commands fail if settings file (from environment) doesn't exist",
                            "default: manage.py builtin commands succeed if settings file (from argument) doesn't exist",
                            "default: manage.py builtin commands succeed if settings are provided in the environment",
                            "default: manage.py builtin commands succeed if settings are provided as argument",
                            "default: manage.py can execute user commands when default settings are appropriate",
                            "default: manage.py can execute user commands when settings are provided in environment",
                            "default: manage.py can execute user commands when settings are provided as argument",
                            "fulldefault: manage.py builtin commands succeed when default settings are appropriate",
                            "fulldefault: manage.py builtin commands fail if settings file (from environment) doesn't exist",
                            "fulldefault: manage.py builtin commands succeed if settings file (from argument) doesn't exist",
                            "fulldefault: manage.py builtin commands succeed if settings are provided in the environment",
                            "fulldefault: manage.py builtin commands succeed if settings are provided as argument",
                            "fulldefault: manage.py can execute user commands when default settings are appropriate",
                            "fulldefault: manage.py can execute user commands when settings are provided in environment",
                            "fulldefault: manage.py can execute user commands when settings are provided as argument",
                            "test_custom_project_destination_missing (admin_scripts.tests.StartProject)",
                            "Make sure the startproject management command is able to use a different project template",
                            "Make sure template context variables are rendered with proper values",
                            "Make sure the startproject management command is able to use a different project template from a tarball",
                            "test_custom_project_template_from_tarball_by_url (admin_scripts.tests.StartProject)",
                            "Startproject can use a project template from a tarball and create it in a specified location",
                            "test_custom_project_template_with_non_ascii_templates (admin_scripts.tests.StartProject)",
                            "Make sure the startproject management command is able to render custom files",
                            "test_importable_project_name (admin_scripts.tests.StartProject)",
                            "Make sure the startproject management command validates a project name",
                            "Make sure template context variables are not html escaped",
                            "Startproject management command handles project template tar/zip balls from non-canonical urls",
                            "Make sure the startproject management command creates a project",
                            "Make sure the startproject management command creates a project in a specific directory",
                            "Ticket 17475: Template dir passed has a trailing path separator",
                            "Make sure passing the wrong kinds of arguments outputs an error and prints usage",
                            "User AppCommands can execute when a single app name is provided",
                            "User AppCommands raise an error when multiple app names are provided",
                            "User AppCommands raise an error when no app name is provided",
                            "User AppCommands can execute when some of the provided app names are invalid",
                            "User BaseCommands can execute when a label is provided",
                            "User BaseCommands can execute when no labels are provided",
                            "User BaseCommands can execute with options when a label is provided",
                            "User BaseCommands can execute with multiple options when a label is provided",
                            "User BaseCommands outputs command usage when wrong option is specified",
                            "test_base_run_from_argv (admin_scripts.tests.CommandTypes)",
                            "test_color_style (admin_scripts.tests.CommandTypes)",
                            "test_command_color (admin_scripts.tests.CommandTypes)",
                            "--no-color prevent colorization of the output",
                            "test_custom_stderr (admin_scripts.tests.CommandTypes)",
                            "test_custom_stdout (admin_scripts.tests.CommandTypes)",
                            "help is handled as a special case",
                            "--help is equivalent to help",
                            "help --commands shows the list of all available commands",
                            "-h is handled as a short form of --help",
                            "User LabelCommands can execute when a label is provided",
                            "User LabelCommands are executed multiple times if multiple labels are provided",
                            "User LabelCommands raise an error if no label is provided",
                            "NoArg Commands can be executed",
                            "NoArg Commands raise an error if an argument is provided",
                            "test_run_from_argv_closes_connections (admin_scripts.tests.CommandTypes)",
                            "test_run_from_argv_non_ascii_error (admin_scripts.tests.CommandTypes)",
                            "version is handled as a special case",
                            "--version is equivalent to version"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "astropy__astropy-8872.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "astropy/units/tests/test_quantity.py::TestQuantityCreation::test_preserve_dtype"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "astropy/units/tests/test_quantity.py::TestQuantityCreation::test_1",
                            "astropy/units/tests/test_quantity.py::TestQuantityCreation::test_2",
                            "astropy/units/tests/test_quantity.py::TestQuantityCreation::test_3",
                            "astropy/units/tests/test_quantity.py::TestQuantityCreation::test_nan_inf",
                            "astropy/units/tests/test_quantity.py::TestQuantityCreation::test_unit_property",
                            "astropy/units/tests/test_quantity.py::TestQuantityCreation::test_copy",
                            "astropy/units/tests/test_quantity.py::TestQuantityCreation::test_subok",
                            "astropy/units/tests/test_quantity.py::TestQuantityCreation::test_order",
                            "astropy/units/tests/test_quantity.py::TestQuantityCreation::test_ndmin",
                            "astropy/units/tests/test_quantity.py::TestQuantityCreation::test_non_quantity_with_unit",
                            "astropy/units/tests/test_quantity.py::TestQuantityCreation::test_creation_via_view",
                            "astropy/units/tests/test_quantity.py::TestQuantityCreation::test_rshift_warns",
                            "astropy/units/tests/test_quantity.py::TestQuantityOperations::test_addition",
                            "astropy/units/tests/test_quantity.py::TestQuantityOperations::test_subtraction",
                            "astropy/units/tests/test_quantity.py::TestQuantityOperations::test_multiplication",
                            "astropy/units/tests/test_quantity.py::TestQuantityOperations::test_division",
                            "astropy/units/tests/test_quantity.py::TestQuantityOperations::test_commutativity",
                            "astropy/units/tests/test_quantity.py::TestQuantityOperations::test_power",
                            "astropy/units/tests/test_quantity.py::TestQuantityOperations::test_matrix_multiplication",
                            "astropy/units/tests/test_quantity.py::TestQuantityOperations::test_unary",
                            "astropy/units/tests/test_quantity.py::TestQuantityOperations::test_abs",
                            "astropy/units/tests/test_quantity.py::TestQuantityOperations::test_incompatible_units",
                            "astropy/units/tests/test_quantity.py::TestQuantityOperations::test_non_number_type",
                            "astropy/units/tests/test_quantity.py::TestQuantityOperations::test_dimensionless_operations",
                            "astropy/units/tests/test_quantity.py::TestQuantityOperations::test_complicated_operation",
                            "astropy/units/tests/test_quantity.py::TestQuantityOperations::test_comparison",
                            "astropy/units/tests/test_quantity.py::TestQuantityOperations::test_numeric_converters",
                            "astropy/units/tests/test_quantity.py::TestQuantityOperations::test_array_converters",
                            "astropy/units/tests/test_quantity.py::test_quantity_conversion",
                            "astropy/units/tests/test_quantity.py::test_quantity_value_views",
                            "astropy/units/tests/test_quantity.py::test_quantity_conversion_with_equiv",
                            "astropy/units/tests/test_quantity.py::test_quantity_conversion_equivalency_passed_on",
                            "astropy/units/tests/test_quantity.py::test_self_equivalency",
                            "astropy/units/tests/test_quantity.py::test_si",
                            "astropy/units/tests/test_quantity.py::test_cgs",
                            "astropy/units/tests/test_quantity.py::TestQuantityComparison::test_quantity_equality",
                            "astropy/units/tests/test_quantity.py::TestQuantityComparison::test_quantity_equality_array",
                            "astropy/units/tests/test_quantity.py::TestQuantityComparison::test_quantity_comparison",
                            "astropy/units/tests/test_quantity.py::TestQuantityDisplay::test_dimensionless_quantity_repr",
                            "astropy/units/tests/test_quantity.py::TestQuantityDisplay::test_dimensionless_quantity_str",
                            "astropy/units/tests/test_quantity.py::TestQuantityDisplay::test_dimensionless_quantity_format",
                            "astropy/units/tests/test_quantity.py::TestQuantityDisplay::test_scalar_quantity_str",
                            "astropy/units/tests/test_quantity.py::TestQuantityDisplay::test_scalar_quantity_repr",
                            "astropy/units/tests/test_quantity.py::TestQuantityDisplay::test_array_quantity_str",
                            "astropy/units/tests/test_quantity.py::TestQuantityDisplay::test_array_quantity_repr",
                            "astropy/units/tests/test_quantity.py::TestQuantityDisplay::test_scalar_quantity_format",
                            "astropy/units/tests/test_quantity.py::TestQuantityDisplay::test_uninitialized_unit_format",
                            "astropy/units/tests/test_quantity.py::TestQuantityDisplay::test_to_string",
                            "astropy/units/tests/test_quantity.py::TestQuantityDisplay::test_repr_latex",
                            "astropy/units/tests/test_quantity.py::test_decompose",
                            "astropy/units/tests/test_quantity.py::test_decompose_regression",
                            "astropy/units/tests/test_quantity.py::test_arrays",
                            "astropy/units/tests/test_quantity.py::test_array_indexing_slicing",
                            "astropy/units/tests/test_quantity.py::test_array_setslice",
                            "astropy/units/tests/test_quantity.py::test_inverse_quantity",
                            "astropy/units/tests/test_quantity.py::test_quantity_mutability",
                            "astropy/units/tests/test_quantity.py::test_quantity_initialized_with_quantity",
                            "astropy/units/tests/test_quantity.py::test_quantity_string_unit",
                            "astropy/units/tests/test_quantity.py::test_quantity_invalid_unit_string",
                            "astropy/units/tests/test_quantity.py::test_implicit_conversion",
                            "astropy/units/tests/test_quantity.py::test_implicit_conversion_autocomplete",
                            "astropy/units/tests/test_quantity.py::test_quantity_iterability",
                            "astropy/units/tests/test_quantity.py::test_copy",
                            "astropy/units/tests/test_quantity.py::test_deepcopy",
                            "astropy/units/tests/test_quantity.py::test_equality_numpy_scalar",
                            "astropy/units/tests/test_quantity.py::test_quantity_pickelability",
                            "astropy/units/tests/test_quantity.py::test_quantity_initialisation_from_string",
                            "astropy/units/tests/test_quantity.py::test_unsupported",
                            "astropy/units/tests/test_quantity.py::test_unit_identity",
                            "astropy/units/tests/test_quantity.py::test_quantity_to_view",
                            "astropy/units/tests/test_quantity.py::test_quantity_tuple_power",
                            "astropy/units/tests/test_quantity.py::test_quantity_fraction_power",
                            "astropy/units/tests/test_quantity.py::test_inherit_docstrings",
                            "astropy/units/tests/test_quantity.py::test_repr_array_of_quantity",
                            "astropy/units/tests/test_quantity.py::TestQuantityMatplotlib::test_plot",
                            "astropy/units/tests/test_quantity.py::test_unit_class_override",
                            "astropy/units/tests/test_quantity.py::TestQuantityMimics::test_mimic_input[QuantityMimic]",
                            "astropy/units/tests/test_quantity.py::TestQuantityMimics::test_mimic_input[QuantityMimic2]",
                            "astropy/units/tests/test_quantity.py::TestQuantityMimics::test_mimic_setting[QuantityMimic]",
                            "astropy/units/tests/test_quantity.py::TestQuantityMimics::test_mimic_setting[QuantityMimic2]"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "pallets__flask-4544.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "tests/test_cli.py::test_run_cert_path"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "tests/test_cli.py::test_cli_name",
                            "tests/test_cli.py::test_find_best_app",
                            "tests/test_cli.py::test_prepare_import[test-path0-test]",
                            "tests/test_cli.py::test_prepare_import[test.py-path1-test]",
                            "tests/test_cli.py::test_prepare_import[a/test-path2-test]",
                            "tests/test_cli.py::test_prepare_import[test/__init__.py-path3-test]",
                            "tests/test_cli.py::test_prepare_import[test/__init__-path4-test]",
                            "tests/test_cli.py::test_prepare_import[value5-path5-cliapp.inner1]",
                            "tests/test_cli.py::test_prepare_import[value6-path6-cliapp.inner1.inner2]",
                            "tests/test_cli.py::test_prepare_import[test.a.b-path7-test.a.b]",
                            "tests/test_cli.py::test_prepare_import[value8-path8-cliapp.app]",
                            "tests/test_cli.py::test_prepare_import[value9-path9-cliapp.message.txt]",
                            "tests/test_cli.py::test_locate_app[cliapp.app-None-testapp]",
                            "tests/test_cli.py::test_locate_app[cliapp.app-testapp-testapp]",
                            "tests/test_cli.py::test_locate_app[cliapp.factory-None-app]",
                            "tests/test_cli.py::test_locate_app[cliapp.factory-create_app-app]",
                            "tests/test_cli.py::test_locate_app[cliapp.factory-create_app()-app]",
                            "tests/test_cli.py::test_locate_app[cliapp.factory-create_app2(\"foo\",",
                            "tests/test_cli.py::test_locate_app[cliapp.factory-",
                            "tests/test_cli.py::test_locate_app_raises[notanapp.py-None]",
                            "tests/test_cli.py::test_locate_app_raises[cliapp/app-None]",
                            "tests/test_cli.py::test_locate_app_raises[cliapp.app-notanapp]",
                            "tests/test_cli.py::test_locate_app_raises[cliapp.factory-create_app2(\"foo\")]",
                            "tests/test_cli.py::test_locate_app_raises[cliapp.factory-create_app(]",
                            "tests/test_cli.py::test_locate_app_raises[cliapp.factory-no_app]",
                            "tests/test_cli.py::test_locate_app_raises[cliapp.importerrorapp-None]",
                            "tests/test_cli.py::test_locate_app_raises[cliapp.message.txt-None]",
                            "tests/test_cli.py::test_locate_app_suppress_raise",
                            "tests/test_cli.py::test_get_version",
                            "tests/test_cli.py::test_scriptinfo",
                            "tests/test_cli.py::test_lazy_load_error",
                            "tests/test_cli.py::test_with_appcontext",
                            "tests/test_cli.py::test_appgroup",
                            "tests/test_cli.py::test_flaskgroup",
                            "tests/test_cli.py::test_flaskgroup_debug[True]",
                            "tests/test_cli.py::test_flaskgroup_debug[False]",
                            "tests/test_cli.py::test_no_command_echo_loading_error",
                            "tests/test_cli.py::test_help_echo_loading_error",
                            "tests/test_cli.py::test_help_echo_exception",
                            "tests/test_cli.py::TestRoutes::test_simple",
                            "tests/test_cli.py::TestRoutes::test_all_methods",
                            "tests/test_cli.py::TestRoutes::test_no_routes",
                            "tests/test_cli.py::test_load_dotenv",
                            "tests/test_cli.py::test_dotenv_path",
                            "tests/test_cli.py::test_dotenv_optional",
                            "tests/test_cli.py::test_disable_dotenv_from_env",
                            "tests/test_cli.py::test_run_cert_adhoc",
                            "tests/test_cli.py::test_run_cert_import",
                            "tests/test_cli.py::test_run_cert_no_ssl",
                            "tests/test_cli.py::test_cli_blueprints",
                            "tests/test_cli.py::test_cli_empty"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "scikit-learn__scikit-learn-26644.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_partial_dependence_display_with_constant_sample_weight"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence[10]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence[20]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_kind[average-False-None-shape0]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_kind[individual-False-None-shape1]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_kind[both-False-None-shape2]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_kind[individual-False-20-shape3]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_kind[both-False-20-shape4]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_kind[individual-False-0.5-shape5]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_kind[both-False-0.5-shape6]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_kind[average-True-None-shape7]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_kind[individual-True-None-shape8]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_kind[both-True-None-shape9]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_kind[individual-True-20-shape10]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_kind[both-True-20-shape11]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_str_features[dataframe-None]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_str_features[dataframe-list]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_str_features[list-list]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_str_features[array-list]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_str_features[dataframe-array]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_str_features[list-array]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_str_features[array-array]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_str_features[dataframe-series]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_str_features[list-series]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_str_features[array-series]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_str_features[dataframe-index]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_str_features[list-index]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_str_features[array-index]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_custom_axes",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_passing_numpy_axes[average-1]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_passing_numpy_axes[individual-50]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_passing_numpy_axes[both-51]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_incorrent_num_axes[2-2]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_incorrent_num_axes[3-1]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_with_same_axes",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_feature_name_reuse",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_multiclass",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_multioutput[0]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_multioutput[1]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_dataframe",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_error[data0-params0-target",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_error[data1-params1-target",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_error[data2-params2-target",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_error[data3-params3-Feature",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_error[data4-params4-Feature",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_error[data5-params5-Each",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_error[data6-params6-Each",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_error[data7-params7-Each",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_error[data8-params8-All",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_error[data9-params9-feature_names",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_error[data10-params10-When",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_error[data11-params11-When",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_error[data12-params12-When",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_error[data13-params13-Expected",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_error[data14-params14-Two-way",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_error[data15-params15-It",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_multiclass_error[params0-target",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_multiclass_error[params1-target",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_multiclass_error[params2-Each",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_does_not_override_ylabel",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_with_categorical[categorical_features0-dataframe]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_with_categorical[categorical_features1-array]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_with_categorical[categorical_features2-array]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_legend",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_subsampling[average-expected_shape0]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_subsampling[individual-expected_shape1]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_subsampling[both-expected_shape2]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_partial_dependence_overwrite_labels[individual-line_kw0-None]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_partial_dependence_overwrite_labels[individual-line_kw1-None]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_partial_dependence_overwrite_labels[average-line_kw2-None]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_partial_dependence_overwrite_labels[average-line_kw3-xxx]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_partial_dependence_overwrite_labels[both-line_kw4-average]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_partial_dependence_overwrite_labels[both-line_kw5-xxx]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_grid_resolution_with_categorical[categorical_features0-dataframe]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_grid_resolution_with_categorical[categorical_features1-array]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_grid_resolution_with_categorical[categorical_features2-array]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_partial_dependence_plot_limits_one_way[True-individual]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_partial_dependence_plot_limits_one_way[True-average]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_partial_dependence_plot_limits_one_way[True-both]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_partial_dependence_plot_limits_one_way[False-individual]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_partial_dependence_plot_limits_one_way[False-average]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_partial_dependence_plot_limits_one_way[False-both]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_partial_dependence_plot_limits_two_way[True]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_partial_dependence_plot_limits_two_way[False]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_partial_dependence_kind_list",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_partial_dependence_kind_error[features0-individual]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_partial_dependence_kind_error[features1-both]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_partial_dependence_kind_error[features2-individual]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_partial_dependence_kind_error[features3-both]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_partial_dependence_kind_error[features4-kind4]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_partial_dependence_kind_error[features5-kind5]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_lines_kw[line_kw0-pd_line_kw0-ice_lines_kw0-expected_colors0]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_lines_kw[None-pd_line_kw1-ice_lines_kw1-expected_colors1]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_lines_kw[line_kw2-None-ice_lines_kw2-expected_colors2]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_lines_kw[line_kw3-pd_line_kw3-None-expected_colors3]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_lines_kw[line_kw4-None-None-expected_colors4]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_lines_kw[line_kw5-pd_line_kw5-ice_lines_kw5-expected_colors5]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_partial_dependence_display_wrong_len_kind",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_partial_dependence_display_kind_centered_interaction[individual]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_partial_dependence_display_kind_centered_interaction[both]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_partial_dependence_display_kind_centered_interaction[average]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_partial_dependence_display_kind_centered_interaction[kind3]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_partial_dependence_display_kind_centered_interaction[kind4]"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "pylint-dev__pylint-6556.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "tests/lint/unittest_lint.py::test_enable_message_block",
                            "tests/test_deprecation.py::test_collectblocklines"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "tests/lint/unittest_lint.py::test_no_args",
                            "tests/lint/unittest_lint.py::test_one_arg[case0]",
                            "tests/lint/unittest_lint.py::test_one_arg[case1]",
                            "tests/lint/unittest_lint.py::test_one_arg[case2]",
                            "tests/lint/unittest_lint.py::test_one_arg[case3]",
                            "tests/lint/unittest_lint.py::test_one_arg[case4]",
                            "tests/lint/unittest_lint.py::test_two_similar_args[case0]",
                            "tests/lint/unittest_lint.py::test_two_similar_args[case1]",
                            "tests/lint/unittest_lint.py::test_two_similar_args[case2]",
                            "tests/lint/unittest_lint.py::test_two_similar_args[case3]",
                            "tests/lint/unittest_lint.py::test_more_args[case0]",
                            "tests/lint/unittest_lint.py::test_more_args[case1]",
                            "tests/lint/unittest_lint.py::test_more_args[case2]",
                            "tests/lint/unittest_lint.py::test_pylint_visit_method_taken_in_account",
                            "tests/lint/unittest_lint.py::test_enable_message",
                            "tests/lint/unittest_lint.py::test_enable_message_category",
                            "tests/lint/unittest_lint.py::test_message_state_scope",
                            "tests/lint/unittest_lint.py::test_enable_by_symbol",
                            "tests/lint/unittest_lint.py::test_enable_report",
                            "tests/lint/unittest_lint.py::test_report_output_format_aliased",
                            "tests/lint/unittest_lint.py::test_set_unsupported_reporter",
                            "tests/lint/unittest_lint.py::test_set_option_1",
                            "tests/lint/unittest_lint.py::test_set_option_2",
                            "tests/lint/unittest_lint.py::test_enable_checkers",
                            "tests/lint/unittest_lint.py::test_errors_only",
                            "tests/lint/unittest_lint.py::test_disable_similar",
                            "tests/lint/unittest_lint.py::test_disable_alot",
                            "tests/lint/unittest_lint.py::test_addmessage",
                            "tests/lint/unittest_lint.py::test_addmessage_invalid",
                            "tests/lint/unittest_lint.py::test_load_plugin_command_line",
                            "tests/lint/unittest_lint.py::test_load_plugin_config_file",
                            "tests/lint/unittest_lint.py::test_load_plugin_configuration",
                            "tests/lint/unittest_lint.py::test_init_hooks_called_before_load_plugins",
                            "tests/lint/unittest_lint.py::test_analyze_explicit_script",
                            "tests/lint/unittest_lint.py::test_full_documentation",
                            "tests/lint/unittest_lint.py::test_list_msgs_enabled",
                            "tests/lint/unittest_lint.py::test_pylint_home",
                            "tests/lint/unittest_lint.py::test_pylint_home_from_environ",
                            "tests/lint/unittest_lint.py::test_warn_about_old_home",
                            "tests/lint/unittest_lint.py::test_pylintrc",
                            "tests/lint/unittest_lint.py::test_pylintrc_parentdir",
                            "tests/lint/unittest_lint.py::test_pylintrc_parentdir_no_package",
                            "tests/lint/unittest_lint.py::test_custom_should_analyze_file",
                            "tests/lint/unittest_lint.py::test_multiprocessing[1]",
                            "tests/lint/unittest_lint.py::test_multiprocessing[2]",
                            "tests/lint/unittest_lint.py::test_filename_with__init__",
                            "tests/lint/unittest_lint.py::test_by_module_statement_value",
                            "tests/test_deprecation.py::test_mapreducemixin",
                            "tests/test_deprecation.py::test_reporter_implements",
                            "tests/test_deprecation.py::test_checker_implements",
                            "tests/test_deprecation.py::test_interfaces",
                            "tests/test_deprecation.py::test_load_and_save_results",
                            "tests/test_deprecation.py::test_filestate"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "psf__requests-774.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "tests/test_requests.py::RequestsTestSuite::test_GET_no_redirect",
                            "tests/test_requests.py::RequestsTestSuite::test_HTTP_200_OK_GET_WITH_MIXED_PARAMS",
                            "tests/test_requests.py::RequestsTestSuite::test_POSTBIN_GET_POST_FILES_WITH_PARAMS",
                            "tests/test_requests.py::RequestsTestSuite::test_danger_mode_redirects",
                            "tests/test_requests.py::RequestsTestSuite::test_httpauth_recursion",
                            "tests/test_requests.py::RequestsTestSuite::test_iter_lines",
                            "tests/test_requests.py::RequestsTestSuite::test_urlencoded_post_querystring_multivalued"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "tests/test_requests.py::RequestsTestSuite::test_BASICAUTH_TUPLE_HTTP_200_OK_GET",
                            "tests/test_requests.py::RequestsTestSuite::test_HEAD_no_redirect",
                            "tests/test_requests.py::RequestsTestSuite::test_HTTP_200_OK_GET",
                            "tests/test_requests.py::RequestsTestSuite::test_HTTP_200_OK_GET_WITH_PARAMS",
                            "tests/test_requests.py::RequestsTestSuite::test_HTTP_200_OK_HEAD",
                            "tests/test_requests.py::RequestsTestSuite::test_HTTP_200_OK_PUT",
                            "tests/test_requests.py::RequestsTestSuite::test_HTTP_302_ALLOW_REDIRECT_GET",
                            "tests/test_requests.py::RequestsTestSuite::test_HTTP_302_GET",
                            "tests/test_requests.py::RequestsTestSuite::test_POSTBIN_GET_POST_FILES",
                            "tests/test_requests.py::RequestsTestSuite::test_POSTBIN_GET_POST_FILES_STRINGS",
                            "tests/test_requests.py::RequestsTestSuite::test_POSTBIN_GET_POST_FILES_WITH_HEADERS",
                            "tests/test_requests.py::RequestsTestSuite::test_accept_objects_with_string_representations_as_urls",
                            "tests/test_requests.py::RequestsTestSuite::test_bytes_files",
                            "tests/test_requests.py::RequestsTestSuite::test_cached_response",
                            "tests/test_requests.py::RequestsTestSuite::test_can_have_none_in_header_values",
                            "tests/test_requests.py::RequestsTestSuite::test_connection_error",
                            "tests/test_requests.py::RequestsTestSuite::test_connection_error_with_safe_mode",
                            "tests/test_requests.py::RequestsTestSuite::test_connection_keepalive_and_close",
                            "tests/test_requests.py::RequestsTestSuite::test_decompress_gzip",
                            "tests/test_requests.py::RequestsTestSuite::test_default_status_raising",
                            "tests/test_requests.py::RequestsTestSuite::test_empty_response",
                            "tests/test_requests.py::RequestsTestSuite::test_entry_points",
                            "tests/test_requests.py::RequestsTestSuite::test_file_post_data",
                            "tests/test_requests.py::RequestsTestSuite::test_head_content",
                            "tests/test_requests.py::RequestsTestSuite::test_invalid_url",
                            "tests/test_requests.py::RequestsTestSuite::test_max_redirects",
                            "tests/test_requests.py::RequestsTestSuite::test_multiple_hooks",
                            "tests/test_requests.py::RequestsTestSuite::test_nonurlencoded_post_data",
                            "tests/test_requests.py::RequestsTestSuite::test_nonurlencoded_postdata",
                            "tests/test_requests.py::RequestsTestSuite::test_nonzero_evaluation",
                            "tests/test_requests.py::RequestsTestSuite::test_params_are_added_before_fragment",
                            "tests/test_requests.py::RequestsTestSuite::test_path_is_not_double_encoded",
                            "tests/test_requests.py::RequestsTestSuite::test_post_fields_with_multiple_values_and_files",
                            "tests/test_requests.py::RequestsTestSuite::test_post_fields_with_multiple_values_and_files_as_tuples",
                            "tests/test_requests.py::RequestsTestSuite::test_prefetch_redirect_bug",
                            "tests/test_requests.py::RequestsTestSuite::test_prefetch_return_response_interaction",
                            "tests/test_requests.py::RequestsTestSuite::test_redirect_history",
                            "tests/test_requests.py::RequestsTestSuite::test_relative_redirect_history",
                            "tests/test_requests.py::RequestsTestSuite::test_request_ok_set",
                            "tests/test_requests.py::RequestsTestSuite::test_response_has_unicode_url",
                            "tests/test_requests.py::RequestsTestSuite::test_response_sent",
                            "tests/test_requests.py::RequestsTestSuite::test_session_HTTP_200_OK_GET",
                            "tests/test_requests.py::RequestsTestSuite::test_session_persistent_params",
                            "tests/test_requests.py::RequestsTestSuite::test_session_pickling",
                            "tests/test_requests.py::RequestsTestSuite::test_single_hook",
                            "tests/test_requests.py::RequestsTestSuite::test_status_raising",
                            "tests/test_requests.py::RequestsTestSuite::test_unicode_get",
                            "tests/test_requests.py::RequestsTestSuite::test_upload_binary_data",
                            "tests/test_requests.py::RequestsTestSuite::test_urlencoded_get_query_multivalued_param",
                            "tests/test_requests.py::RequestsTestSuite::test_urlencoded_post_data",
                            "tests/test_requests.py::RequestsTestSuite::test_urlencoded_post_query_and_data",
                            "tests/test_requests.py::RequestsTestSuite::test_urlencoded_post_query_multivalued_and_data",
                            "tests/test_requests.py::RequestsTestSuite::test_urlencoded_post_querystring",
                            "tests/test_requests.py::RequestsTestSuite::test_useful_exception_for_invalid_port",
                            "tests/test_requests.py::RequestsTestSuite::test_useful_exception_for_invalid_scheme",
                            "tests/test_requests.py::RequestsTestSuite::test_user_agent_transfers"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "django__django-14267.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "test_deconstruct (queries.test_q.QTests)",
                            "test_deconstruct_boolean_expression (queries.test_q.QTests)",
                            "test_deconstruct_negated (queries.test_q.QTests)",
                            "test_boolean_expression_combined_with_empty_Q (expressions.tests.BasicExpressionsTests)"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "test_and (expressions.tests.CombinableTests)",
                            "test_negation (expressions.tests.CombinableTests)",
                            "test_or (expressions.tests.CombinableTests)",
                            "test_reversed_and (expressions.tests.CombinableTests)",
                            "test_reversed_or (expressions.tests.CombinableTests)",
                            "test_empty_group_by (expressions.tests.ExpressionWrapperTests)",
                            "test_non_empty_group_by (expressions.tests.ExpressionWrapperTests)",
                            "test_aggregates (expressions.tests.ReprTests)",
                            "test_distinct_aggregates (expressions.tests.ReprTests)",
                            "test_expressions (expressions.tests.ReprTests)",
                            "test_filtered_aggregates (expressions.tests.ReprTests)",
                            "test_functions (expressions.tests.ReprTests)",
                            "test_deconstruct (expressions.tests.FTests)",
                            "test_deepcopy (expressions.tests.FTests)",
                            "test_equal (expressions.tests.FTests)",
                            "test_hash (expressions.tests.FTests)",
                            "test_not_equal_Value (expressions.tests.FTests)",
                            "test_resolve_output_field (expressions.tests.CombinedExpressionTests)",
                            "test_combine_and_both_empty (queries.test_q.QTests)",
                            "test_combine_and_empty (queries.test_q.QTests)",
                            "test_combine_not_q_object (queries.test_q.QTests)",
                            "test_combine_or_both_empty (queries.test_q.QTests)",
                            "test_combine_or_empty (queries.test_q.QTests)",
                            "test_deconstruct_and (queries.test_q.QTests)",
                            "test_deconstruct_multiple_kwargs (queries.test_q.QTests)",
                            "test_deconstruct_nested (queries.test_q.QTests)",
                            "test_deconstruct_or (queries.test_q.QTests)",
                            "test_reconstruct (queries.test_q.QTests)",
                            "test_reconstruct_and (queries.test_q.QTests)",
                            "test_reconstruct_negated (queries.test_q.QTests)",
                            "test_reconstruct_or (queries.test_q.QTests)",
                            "test_equal (expressions.tests.SimpleExpressionTests)",
                            "test_hash (expressions.tests.SimpleExpressionTests)",
                            "test_optimizations (expressions.tests.ExistsTests)",
                            "test_month_aggregation (expressions.tests.FieldTransformTests)",
                            "test_multiple_transforms_in_values (expressions.tests.FieldTransformTests)",
                            "test_transform_in_values (expressions.tests.FieldTransformTests)",
                            "test_F_reuse (expressions.tests.ExpressionsTests)",
                            "test_insensitive_patterns_escape (expressions.tests.ExpressionsTests)",
                            "test_patterns_escape (expressions.tests.ExpressionsTests)",
                            "test_compile_unresolved (expressions.tests.ValueTests)",
                            "test_deconstruct (expressions.tests.ValueTests)",
                            "test_deconstruct_output_field (expressions.tests.ValueTests)",
                            "test_equal (expressions.tests.ValueTests)",
                            "test_equal_output_field (expressions.tests.ValueTests)",
                            "test_hash (expressions.tests.ValueTests)",
                            "test_raise_empty_expressionlist (expressions.tests.ValueTests)",
                            "test_resolve_output_field (expressions.tests.ValueTests)",
                            "test_resolve_output_field_failure (expressions.tests.ValueTests)",
                            "test_update_TimeField_using_Value (expressions.tests.ValueTests)",
                            "test_update_UUIDField_using_Value (expressions.tests.ValueTests)",
                            "test_complex_expressions (expressions.tests.ExpressionsNumericTests)",
                            "test_fill_with_value_from_same_object (expressions.tests.ExpressionsNumericTests)",
                            "test_filter_not_equals_other_field (expressions.tests.ExpressionsNumericTests)",
                            "test_increment_value (expressions.tests.ExpressionsNumericTests)",
                            "test_complex_expressions_do_not_introduce_sql_injection_via_untrusted_string_inclusion (expressions.tests.IterableLookupInnerExpressionsTests)",
                            "test_expressions_in_lookups_join_choice (expressions.tests.IterableLookupInnerExpressionsTests)",
                            "test_in_lookup_allows_F_expressions_and_expressions_for_datetimes (expressions.tests.IterableLookupInnerExpressionsTests)",
                            "test_in_lookup_allows_F_expressions_and_expressions_for_integers (expressions.tests.IterableLookupInnerExpressionsTests)",
                            "test_range_lookup_allows_F_expressions_and_expressions_for_integers (expressions.tests.IterableLookupInnerExpressionsTests)",
                            "test_range_lookup_namedtuple (expressions.tests.IterableLookupInnerExpressionsTests)",
                            "test_lefthand_addition (expressions.tests.ExpressionOperatorTests)",
                            "test_lefthand_bitwise_and (expressions.tests.ExpressionOperatorTests)",
                            "test_lefthand_bitwise_left_shift_operator (expressions.tests.ExpressionOperatorTests)",
                            "test_lefthand_bitwise_or (expressions.tests.ExpressionOperatorTests)",
                            "test_lefthand_bitwise_right_shift_operator (expressions.tests.ExpressionOperatorTests)",
                            "test_lefthand_bitwise_xor (expressions.tests.ExpressionOperatorTests)",
                            "test_lefthand_bitwise_xor_null (expressions.tests.ExpressionOperatorTests)",
                            "test_lefthand_division (expressions.tests.ExpressionOperatorTests)",
                            "test_lefthand_modulo (expressions.tests.ExpressionOperatorTests)",
                            "test_lefthand_multiplication (expressions.tests.ExpressionOperatorTests)",
                            "test_lefthand_power (expressions.tests.ExpressionOperatorTests)",
                            "test_lefthand_subtraction (expressions.tests.ExpressionOperatorTests)",
                            "test_lefthand_transformed_field_bitwise_or (expressions.tests.ExpressionOperatorTests)",
                            "test_right_hand_addition (expressions.tests.ExpressionOperatorTests)",
                            "test_right_hand_division (expressions.tests.ExpressionOperatorTests)",
                            "test_right_hand_modulo (expressions.tests.ExpressionOperatorTests)",
                            "test_right_hand_multiplication (expressions.tests.ExpressionOperatorTests)",
                            "test_right_hand_subtraction (expressions.tests.ExpressionOperatorTests)",
                            "test_righthand_power (expressions.tests.ExpressionOperatorTests)",
                            "test_date_case_subtraction (expressions.tests.FTimeDeltaTests)",
                            "test_date_comparison (expressions.tests.FTimeDeltaTests)",
                            "test_date_minus_duration (expressions.tests.FTimeDeltaTests)",
                            "test_date_subquery_subtraction (expressions.tests.FTimeDeltaTests)",
                            "test_date_subtraction (expressions.tests.FTimeDeltaTests)",
                            "test_datetime_subquery_subtraction (expressions.tests.FTimeDeltaTests)",
                            "test_datetime_subtraction (expressions.tests.FTimeDeltaTests)",
                            "test_datetime_subtraction_microseconds (expressions.tests.FTimeDeltaTests)",
                            "test_delta_add (expressions.tests.FTimeDeltaTests)",
                            "test_delta_subtract (expressions.tests.FTimeDeltaTests)",
                            "test_delta_update (expressions.tests.FTimeDeltaTests)",
                            "test_duration_expressions (expressions.tests.FTimeDeltaTests)",
                            "test_duration_with_datetime (expressions.tests.FTimeDeltaTests)",
                            "test_duration_with_datetime_microseconds (expressions.tests.FTimeDeltaTests)",
                            "test_durationfield_add (expressions.tests.FTimeDeltaTests)",
                            "test_exclude (expressions.tests.FTimeDeltaTests)",
                            "test_invalid_operator (expressions.tests.FTimeDeltaTests)",
                            "test_mixed_comparisons2 (expressions.tests.FTimeDeltaTests)",
                            "test_multiple_query_compilation (expressions.tests.FTimeDeltaTests)",
                            "test_negative_timedelta_update (expressions.tests.FTimeDeltaTests)",
                            "test_query_clone (expressions.tests.FTimeDeltaTests)",
                            "test_time_subquery_subtraction (expressions.tests.FTimeDeltaTests)",
                            "test_time_subtraction (expressions.tests.FTimeDeltaTests)",
                            "test_aggregate_subquery_annotation (expressions.tests.BasicExpressionsTests)",
                            "test_annotate_values_aggregate (expressions.tests.BasicExpressionsTests)",
                            "test_annotate_values_count (expressions.tests.BasicExpressionsTests)",
                            "test_annotate_values_filter (expressions.tests.BasicExpressionsTests)",
                            "test_annotation_with_nested_outerref (expressions.tests.BasicExpressionsTests)",
                            "test_annotation_with_outerref (expressions.tests.BasicExpressionsTests)",
                            "test_annotations_within_subquery (expressions.tests.BasicExpressionsTests)",
                            "test_arithmetic (expressions.tests.BasicExpressionsTests)",
                            "test_boolean_expression_combined (expressions.tests.BasicExpressionsTests)",
                            "test_case_in_filter_if_boolean_output_field (expressions.tests.BasicExpressionsTests)",
                            "test_exist_single_field_output_field (expressions.tests.BasicExpressionsTests)",
                            "test_exists_in_filter (expressions.tests.BasicExpressionsTests)",
                            "test_explicit_output_field (expressions.tests.BasicExpressionsTests)",
                            "test_filter_inter_attribute (expressions.tests.BasicExpressionsTests)",
                            "test_filter_with_join (expressions.tests.BasicExpressionsTests)",
                            "test_filtering_on_annotate_that_uses_q (expressions.tests.BasicExpressionsTests)",
                            "test_filtering_on_q_that_is_boolean (expressions.tests.BasicExpressionsTests)",
                            "test_filtering_on_rawsql_that_is_boolean (expressions.tests.BasicExpressionsTests)",
                            "test_in_subquery (expressions.tests.BasicExpressionsTests)",
                            "test_incorrect_field_in_F_expression (expressions.tests.BasicExpressionsTests)",
                            "test_incorrect_joined_field_in_F_expression (expressions.tests.BasicExpressionsTests)",
                            "test_nested_outerref_with_function (expressions.tests.BasicExpressionsTests)",
                            "test_nested_subquery (expressions.tests.BasicExpressionsTests)",
                            "test_nested_subquery_join_outer_ref (expressions.tests.BasicExpressionsTests)",
                            "test_nested_subquery_outer_ref_2 (expressions.tests.BasicExpressionsTests)",
                            "test_nested_subquery_outer_ref_with_autofield (expressions.tests.BasicExpressionsTests)",
                            "test_new_object_create (expressions.tests.BasicExpressionsTests)",
                            "test_new_object_save (expressions.tests.BasicExpressionsTests)",
                            "test_object_create_with_aggregate (expressions.tests.BasicExpressionsTests)",
                            "test_object_update (expressions.tests.BasicExpressionsTests)",
                            "test_object_update_fk (expressions.tests.BasicExpressionsTests)",
                            "test_object_update_unsaved_objects (expressions.tests.BasicExpressionsTests)",
                            "test_order_by_exists (expressions.tests.BasicExpressionsTests)",
                            "test_order_by_multiline_sql (expressions.tests.BasicExpressionsTests)",
                            "test_order_of_operations (expressions.tests.BasicExpressionsTests)",
                            "test_outerref (expressions.tests.BasicExpressionsTests)",
                            "test_outerref_mixed_case_table_name (expressions.tests.BasicExpressionsTests)",
                            "test_outerref_with_operator (expressions.tests.BasicExpressionsTests)",
                            "test_parenthesis_priority (expressions.tests.BasicExpressionsTests)",
                            "test_pickle_expression (expressions.tests.BasicExpressionsTests)",
                            "test_subquery (expressions.tests.BasicExpressionsTests)",
                            "test_subquery_eq (expressions.tests.BasicExpressionsTests)",
                            "test_subquery_filter_by_aggregate (expressions.tests.BasicExpressionsTests)",
                            "test_subquery_filter_by_lazy (expressions.tests.BasicExpressionsTests)",
                            "test_subquery_group_by_outerref_in_filter (expressions.tests.BasicExpressionsTests)",
                            "test_subquery_in_filter (expressions.tests.BasicExpressionsTests)",
                            "test_subquery_references_joined_table_twice (expressions.tests.BasicExpressionsTests)",
                            "test_ticket_11722_iexact_lookup (expressions.tests.BasicExpressionsTests)",
                            "test_ticket_16731_startswith_lookup (expressions.tests.BasicExpressionsTests)",
                            "test_ticket_18375_chained_filters (expressions.tests.BasicExpressionsTests)",
                            "test_ticket_18375_join_reuse (expressions.tests.BasicExpressionsTests)",
                            "test_ticket_18375_kwarg_ordering (expressions.tests.BasicExpressionsTests)",
                            "test_ticket_18375_kwarg_ordering_2 (expressions.tests.BasicExpressionsTests)",
                            "test_update (expressions.tests.BasicExpressionsTests)",
                            "test_update_inherited_field_value (expressions.tests.BasicExpressionsTests)",
                            "test_update_with_fk (expressions.tests.BasicExpressionsTests)",
                            "test_update_with_none (expressions.tests.BasicExpressionsTests)",
                            "test_uuid_pk_subquery (expressions.tests.BasicExpressionsTests)"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "pydata__xarray-7444.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "xarray/tests/test_groupby.py::test_consolidate_slices",
                            "xarray/tests/test_groupby.py::test_groupby_dims_property",
                            "xarray/tests/test_groupby.py::test_multi_index_groupby_map",
                            "xarray/tests/test_groupby.py::test_reduce_numeric_only",
                            "xarray/tests/test_groupby.py::test_multi_index_groupby_sum",
                            "xarray/tests/test_groupby.py::test_groupby_da_datetime",
                            "xarray/tests/test_groupby.py::test_groupby_duplicate_coordinate_labels",
                            "xarray/tests/test_groupby.py::test_groupby_input_mutation",
                            "xarray/tests/test_groupby.py::test_groupby_map_shrink_groups[obj0]",
                            "xarray/tests/test_groupby.py::test_groupby_map_shrink_groups[obj1]",
                            "xarray/tests/test_groupby.py::test_groupby_map_change_group_size[obj0]",
                            "xarray/tests/test_groupby.py::test_groupby_map_change_group_size[obj1]",
                            "xarray/tests/test_groupby.py::test_da_groupby_map_func_args",
                            "xarray/tests/test_groupby.py::test_ds_groupby_map_func_args",
                            "xarray/tests/test_groupby.py::test_da_groupby_empty",
                            "xarray/tests/test_groupby.py::test_da_groupby_quantile",
                            "xarray/tests/test_groupby.py::test_ds_groupby_quantile",
                            "xarray/tests/test_groupby.py::test_groupby_quantile_interpolation_deprecated[False]",
                            "xarray/tests/test_groupby.py::test_groupby_quantile_interpolation_deprecated[True]",
                            "xarray/tests/test_groupby.py::test_da_groupby_assign_coords",
                            "xarray/tests/test_groupby.py::test_groupby_repr[obj0-x]",
                            "xarray/tests/test_groupby.py::test_groupby_repr[obj0-y]",
                            "xarray/tests/test_groupby.py::test_groupby_repr[obj0-z]",
                            "xarray/tests/test_groupby.py::test_groupby_repr[obj0-month]",
                            "xarray/tests/test_groupby.py::test_groupby_repr[obj1-x]",
                            "xarray/tests/test_groupby.py::test_groupby_repr[obj1-y]",
                            "xarray/tests/test_groupby.py::test_groupby_repr[obj1-z]",
                            "xarray/tests/test_groupby.py::test_groupby_repr[obj1-month]",
                            "xarray/tests/test_groupby.py::test_groupby_repr_datetime[obj0]",
                            "xarray/tests/test_groupby.py::test_groupby_repr_datetime[obj1]",
                            "xarray/tests/test_groupby.py::test_groupby_drops_nans",
                            "xarray/tests/test_groupby.py::test_groupby_grouping_errors",
                            "xarray/tests/test_groupby.py::test_groupby_reduce_dimension_error",
                            "xarray/tests/test_groupby.py::test_groupby_multiple_string_args",
                            "xarray/tests/test_groupby.py::test_groupby_bins_timeseries",
                            "xarray/tests/test_groupby.py::test_groupby_none_group_name",
                            "xarray/tests/test_groupby.py::test_groupby_getitem",
                            "xarray/tests/test_groupby.py::test_groupby_dataset",
                            "xarray/tests/test_groupby.py::test_groupby_dataset_returns_new_type",
                            "xarray/tests/test_groupby.py::test_groupby_dataset_iter",
                            "xarray/tests/test_groupby.py::test_groupby_dataset_errors",
                            "xarray/tests/test_groupby.py::test_groupby_dataset_reduce",
                            "xarray/tests/test_groupby.py::test_groupby_dataset_math[True]",
                            "xarray/tests/test_groupby.py::test_groupby_dataset_math[False]",
                            "xarray/tests/test_groupby.py::test_groupby_math_more",
                            "xarray/tests/test_groupby.py::test_groupby_bins_math[True]",
                            "xarray/tests/test_groupby.py::test_groupby_bins_math[False]",
                            "xarray/tests/test_groupby.py::test_groupby_math_nD_group",
                            "xarray/tests/test_groupby.py::test_groupby_dataset_math_virtual",
                            "xarray/tests/test_groupby.py::test_groupby_math_dim_order",
                            "xarray/tests/test_groupby.py::test_groupby_dataset_nan",
                            "xarray/tests/test_groupby.py::test_groupby_dataset_order",
                            "xarray/tests/test_groupby.py::test_groupby_dataset_fillna",
                            "xarray/tests/test_groupby.py::test_groupby_dataset_where",
                            "xarray/tests/test_groupby.py::test_groupby_dataset_assign",
                            "xarray/tests/test_groupby.py::test_groupby_dataset_map_dataarray_func",
                            "xarray/tests/test_groupby.py::test_groupby_dataarray_map_dataset_func",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_stack_groupby_unsorted_coord",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_iter",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_properties",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_map_identity[True-True-x-False]",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_map_identity[True-True-y-False]",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_map_identity[True-True-y-True]",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_map_identity[True-True-abc-False]",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_map_identity[True-False-x-False]",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_map_identity[True-False-y-False]",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_map_identity[True-False-y-True]",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_map_identity[True-False-abc-False]",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_map_identity[False-True-x-False]",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_map_identity[False-True-y-False]",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_map_identity[False-True-y-True]",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_map_identity[False-True-abc-False]",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_map_identity[False-False-x-False]",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_map_identity[False-False-y-False]",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_map_identity[False-False-y-True]",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_map_identity[False-False-abc-False]",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_sum",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_reductions[sum]",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_reductions[mean]",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_reductions[median]",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_count",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_reduce_keep_attrs[None-True]",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_reduce_keep_attrs[None-False]",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_reduce_keep_attrs[True-True]",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_reduce_keep_attrs[True-False]",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_reduce_keep_attrs[False-True]",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_reduce_keep_attrs[False-False]",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_keep_attrs[None]",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_keep_attrs[True]",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_keep_attrs[False]",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_map_center",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_map_ndarray",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_map_changes_metadata",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_math_squeeze[True]",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_math_squeeze[False]",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_math",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_math_not_aligned",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_restore_dim_order",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_restore_coord_dims",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_first_and_last",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_multidim",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_multidim_map",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_bins",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_bins_empty",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_bins_multidim",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_bins_sort",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_assign_coords",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_fillna",
                            "xarray/tests/test_groupby.py::TestDataArrayResample::test_resample",
                            "xarray/tests/test_groupby.py::TestDataArrayResample::test_da_resample_func_args",
                            "xarray/tests/test_groupby.py::TestDataArrayResample::test_resample_first",
                            "xarray/tests/test_groupby.py::TestDataArrayResample::test_resample_bad_resample_dim",
                            "xarray/tests/test_groupby.py::TestDataArrayResample::test_resample_keep_attrs",
                            "xarray/tests/test_groupby.py::TestDataArrayResample::test_resample_skipna",
                            "xarray/tests/test_groupby.py::TestDataArrayResample::test_upsample",
                            "xarray/tests/test_groupby.py::TestDataArrayResample::test_upsample_nd",
                            "xarray/tests/test_groupby.py::TestDataArrayResample::test_upsample_tolerance",
                            "xarray/tests/test_groupby.py::TestDataArrayResample::test_resample_base",
                            "xarray/tests/test_groupby.py::TestDataArrayResample::test_resample_offset",
                            "xarray/tests/test_groupby.py::TestDataArrayResample::test_resample_origin",
                            "xarray/tests/test_groupby.py::TestDataArrayResample::test_resample_loffset[-12H]",
                            "xarray/tests/test_groupby.py::TestDataArrayResample::test_resample_loffset[loffset1]",
                            "xarray/tests/test_groupby.py::TestDataArrayResample::test_resample_loffset[loffset2]",
                            "xarray/tests/test_groupby.py::TestDataArrayResample::test_resample_loffset[loffset3]",
                            "xarray/tests/test_groupby.py::TestDataArrayResample::test_resample_invalid_loffset",
                            "xarray/tests/test_groupby.py::TestDatasetResample::test_resample_and_first",
                            "xarray/tests/test_groupby.py::TestDatasetResample::test_resample_min_count",
                            "xarray/tests/test_groupby.py::TestDatasetResample::test_resample_by_mean_with_keep_attrs",
                            "xarray/tests/test_groupby.py::TestDatasetResample::test_resample_loffset",
                            "xarray/tests/test_groupby.py::TestDatasetResample::test_resample_by_mean_discarding_attrs",
                            "xarray/tests/test_groupby.py::TestDatasetResample::test_resample_by_last_discarding_attrs",
                            "xarray/tests/test_groupby.py::TestDatasetResample::test_resample_old_api",
                            "xarray/tests/test_groupby.py::TestDatasetResample::test_resample_ds_da_are_the_same",
                            "xarray/tests/test_groupby.py::TestDatasetResample::test_ds_resample_apply_func_args",
                            "xarray/tests/test_groupby.py::test_groupby_cumsum",
                            "xarray/tests/test_groupby.py::test_groupby_cumprod",
                            "xarray/tests/test_groupby.py::test_resample_cumsum[cumsum-expected_array0]",
                            "xarray/tests/test_groupby.py::test_resample_cumsum[cumprod-expected_array1]"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-None-8003D->4001D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-None-8003D->16006D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-None-8003D->21AS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-None-6H->3H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-None-6H->12H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-None-6H->400T]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-None-3D->D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-None-3D->6D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-None-11D->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-None-3MS->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-None-3MS->6MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-None-3MS->85D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-None-7M->3M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-None-7M->14M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-None-7M->2QS-APR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-None-43QS-AUG->21QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-None-43QS-AUG->86QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-None-43QS-AUG->11A-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-None-11Q-JUN->5Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-None-11Q-JUN->22Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-None-11Q-JUN->51MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-None-3AS-MAR->AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-None-3AS-MAR->6AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-None-3AS-MAR->14Q-FEB]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-None-7A-MAY->3A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-None-7A-MAY->14A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-None-7A-MAY->85M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-left-8003D->4001D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-left-8003D->16006D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-left-8003D->21AS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-left-6H->3H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-left-6H->12H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-left-6H->400T]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-left-3D->D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-left-3D->6D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-left-11D->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-left-3MS->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-left-3MS->6MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-left-3MS->85D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-left-7M->3M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-left-7M->14M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-left-7M->2QS-APR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-left-43QS-AUG->21QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-left-43QS-AUG->86QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-left-43QS-AUG->11A-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-left-11Q-JUN->5Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-left-11Q-JUN->22Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-left-11Q-JUN->51MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-left-3AS-MAR->AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-left-3AS-MAR->6AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-left-3AS-MAR->14Q-FEB]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-left-7A-MAY->3A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-left-7A-MAY->14A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-left-7A-MAY->85M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-right-8003D->4001D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-right-8003D->16006D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-right-8003D->21AS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-right-6H->3H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-right-6H->12H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-right-6H->400T]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-right-3D->D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-right-3D->6D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-right-11D->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-right-3MS->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-right-3MS->6MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-right-3MS->85D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-right-7M->3M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-right-7M->14M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-right-7M->2QS-APR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-right-43QS-AUG->21QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-right-43QS-AUG->86QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-right-43QS-AUG->11A-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-right-11Q-JUN->5Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-right-11Q-JUN->22Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-right-11Q-JUN->51MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-right-3AS-MAR->AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-right-3AS-MAR->6AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-right-3AS-MAR->14Q-FEB]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-right-7A-MAY->3A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-right-7A-MAY->14A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-right-7A-MAY->85M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-None-8003D->4001D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-None-8003D->16006D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-None-8003D->21AS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-None-6H->3H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-None-6H->12H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-None-6H->400T]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-None-3D->D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-None-3D->6D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-None-11D->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-None-3MS->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-None-3MS->6MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-None-3MS->85D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-None-7M->3M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-None-7M->14M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-None-7M->2QS-APR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-None-43QS-AUG->21QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-None-43QS-AUG->86QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-None-43QS-AUG->11A-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-None-11Q-JUN->5Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-None-11Q-JUN->22Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-None-11Q-JUN->51MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-None-3AS-MAR->AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-None-3AS-MAR->6AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-None-3AS-MAR->14Q-FEB]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-None-7A-MAY->3A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-None-7A-MAY->14A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-None-7A-MAY->85M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-left-8003D->4001D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-left-8003D->16006D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-left-8003D->21AS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-left-6H->3H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-left-6H->12H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-left-6H->400T]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-left-3D->D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-left-3D->6D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-left-11D->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-left-3MS->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-left-3MS->6MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-left-3MS->85D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-left-7M->3M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-left-7M->14M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-left-7M->2QS-APR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-left-43QS-AUG->21QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-left-43QS-AUG->86QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-left-43QS-AUG->11A-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-left-11Q-JUN->5Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-left-11Q-JUN->22Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-left-11Q-JUN->51MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-left-3AS-MAR->AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-left-3AS-MAR->6AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-left-3AS-MAR->14Q-FEB]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-left-7A-MAY->3A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-left-7A-MAY->14A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-left-7A-MAY->85M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-right-8003D->4001D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-right-8003D->16006D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-right-8003D->21AS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-right-6H->3H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-right-6H->12H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-right-6H->400T]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-right-3D->D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-right-3D->6D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-right-11D->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-right-3MS->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-right-3MS->6MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-right-3MS->85D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-right-7M->3M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-right-7M->14M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-right-7M->2QS-APR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-right-43QS-AUG->21QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-right-43QS-AUG->86QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-right-43QS-AUG->11A-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-right-11Q-JUN->5Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-right-11Q-JUN->22Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-right-11Q-JUN->51MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-right-3AS-MAR->AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-right-3AS-MAR->6AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-right-3AS-MAR->14Q-FEB]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-right-7A-MAY->3A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-right-7A-MAY->14A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-right-7A-MAY->85M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-None-8003D->4001D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-None-8003D->16006D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-None-8003D->21AS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-None-6H->3H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-None-6H->12H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-None-6H->400T]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-None-3D->D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-None-3D->6D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-None-11D->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-None-3MS->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-None-3MS->6MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-None-3MS->85D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-None-7M->3M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-None-7M->14M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-None-7M->2QS-APR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-None-43QS-AUG->21QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-None-43QS-AUG->86QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-None-43QS-AUG->11A-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-None-11Q-JUN->5Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-None-11Q-JUN->22Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-None-11Q-JUN->51MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-None-3AS-MAR->AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-None-3AS-MAR->6AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-None-3AS-MAR->14Q-FEB]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-None-7A-MAY->3A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-None-7A-MAY->14A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-None-7A-MAY->85M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-left-8003D->4001D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-left-8003D->16006D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-left-8003D->21AS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-left-6H->3H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-left-6H->12H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-left-6H->400T]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-left-3D->D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-left-3D->6D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-left-11D->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-left-3MS->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-left-3MS->6MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-left-3MS->85D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-left-7M->3M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-left-7M->14M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-left-7M->2QS-APR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-left-43QS-AUG->21QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-left-43QS-AUG->86QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-left-43QS-AUG->11A-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-left-11Q-JUN->5Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-left-11Q-JUN->22Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-left-11Q-JUN->51MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-left-3AS-MAR->AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-left-3AS-MAR->6AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-left-3AS-MAR->14Q-FEB]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-left-7A-MAY->3A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-left-7A-MAY->14A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-left-7A-MAY->85M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-right-8003D->4001D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-right-8003D->16006D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-right-8003D->21AS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-right-6H->3H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-right-6H->12H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-right-6H->400T]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-right-3D->D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-right-3D->6D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-right-11D->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-right-3MS->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-right-3MS->6MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-right-3MS->85D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-right-7M->3M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-right-7M->14M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-right-7M->2QS-APR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-right-43QS-AUG->21QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-right-43QS-AUG->86QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-right-43QS-AUG->11A-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-right-11Q-JUN->5Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-right-11Q-JUN->22Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-right-11Q-JUN->51MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-right-3AS-MAR->AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-right-3AS-MAR->6AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-right-3AS-MAR->14Q-FEB]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-right-7A-MAY->3A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-right-7A-MAY->14A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-right-7A-MAY->85M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-None-8003D->4001D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-None-8003D->16006D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-None-8003D->21AS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-None-6H->3H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-None-6H->12H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-None-6H->400T]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-None-3D->D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-None-3D->6D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-None-11D->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-None-3MS->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-None-3MS->6MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-None-3MS->85D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-None-7M->3M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-None-7M->14M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-None-7M->2QS-APR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-None-43QS-AUG->21QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-None-43QS-AUG->86QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-None-43QS-AUG->11A-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-None-11Q-JUN->5Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-None-11Q-JUN->22Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-None-11Q-JUN->51MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-None-3AS-MAR->AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-None-3AS-MAR->6AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-None-3AS-MAR->14Q-FEB]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-None-7A-MAY->3A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-None-7A-MAY->14A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-None-7A-MAY->85M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-left-8003D->4001D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-left-8003D->16006D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-left-8003D->21AS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-left-6H->3H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-left-6H->12H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-left-6H->400T]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-left-3D->D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-left-3D->6D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-left-11D->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-left-3MS->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-left-3MS->6MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-left-3MS->85D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-left-7M->3M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-left-7M->14M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-left-7M->2QS-APR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-left-43QS-AUG->21QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-left-43QS-AUG->86QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-left-43QS-AUG->11A-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-left-11Q-JUN->5Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-left-11Q-JUN->22Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-left-11Q-JUN->51MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-left-3AS-MAR->AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-left-3AS-MAR->6AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-left-3AS-MAR->14Q-FEB]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-left-7A-MAY->3A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-left-7A-MAY->14A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-left-7A-MAY->85M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-right-8003D->4001D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-right-8003D->16006D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-right-8003D->21AS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-right-6H->3H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-right-6H->12H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-right-6H->400T]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-right-3D->D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-right-3D->6D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-right-11D->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-right-3MS->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-right-3MS->6MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-right-3MS->85D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-right-7M->3M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-right-7M->14M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-right-7M->2QS-APR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-right-43QS-AUG->21QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-right-43QS-AUG->86QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-right-43QS-AUG->11A-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-right-11Q-JUN->5Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-right-11Q-JUN->22Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-right-11Q-JUN->51MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-right-3AS-MAR->AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-right-3AS-MAR->6AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-right-3AS-MAR->14Q-FEB]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-right-7A-MAY->3A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-right-7A-MAY->14A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-right-7A-MAY->85M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-None-8003D->4001D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-None-8003D->16006D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-None-8003D->21AS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-None-6H->3H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-None-6H->12H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-None-6H->400T]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-None-3D->D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-None-3D->6D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-None-11D->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-None-3MS->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-None-3MS->6MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-None-3MS->85D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-None-7M->3M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-None-7M->14M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-None-7M->2QS-APR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-None-43QS-AUG->21QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-None-43QS-AUG->86QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-None-43QS-AUG->11A-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-None-11Q-JUN->5Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-None-11Q-JUN->22Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-None-11Q-JUN->51MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-None-3AS-MAR->AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-None-3AS-MAR->6AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-None-3AS-MAR->14Q-FEB]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-None-7A-MAY->3A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-None-7A-MAY->14A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-None-7A-MAY->85M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-left-8003D->4001D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-left-8003D->16006D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-left-8003D->21AS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-left-6H->3H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-left-6H->12H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-left-6H->400T]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-left-3D->D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-left-3D->6D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-left-11D->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-left-3MS->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-left-3MS->6MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-left-3MS->85D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-left-7M->3M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-left-7M->14M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-left-7M->2QS-APR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-left-43QS-AUG->21QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-left-43QS-AUG->86QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-left-43QS-AUG->11A-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-left-11Q-JUN->5Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-left-11Q-JUN->22Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-left-11Q-JUN->51MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-left-3AS-MAR->AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-left-3AS-MAR->6AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-left-3AS-MAR->14Q-FEB]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-left-7A-MAY->3A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-left-7A-MAY->14A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-left-7A-MAY->85M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-right-8003D->4001D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-right-8003D->16006D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-right-8003D->21AS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-right-6H->3H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-right-6H->12H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-right-6H->400T]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-right-3D->D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-right-3D->6D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-right-11D->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-right-3MS->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-right-3MS->6MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-right-3MS->85D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-right-7M->3M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-right-7M->14M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-right-7M->2QS-APR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-right-43QS-AUG->21QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-right-43QS-AUG->86QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-right-43QS-AUG->11A-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-right-11Q-JUN->5Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-right-11Q-JUN->22Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-right-11Q-JUN->51MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-right-3AS-MAR->AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-right-3AS-MAR->6AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-right-3AS-MAR->14Q-FEB]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-right-7A-MAY->3A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-right-7A-MAY->14A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-right-7A-MAY->85M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-None-8003D->4001D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-None-8003D->16006D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-None-8003D->21AS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-None-6H->3H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-None-6H->12H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-None-6H->400T]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-None-3D->D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-None-3D->6D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-None-11D->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-None-3MS->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-None-3MS->6MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-None-3MS->85D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-None-7M->3M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-None-7M->14M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-None-7M->2QS-APR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-None-43QS-AUG->21QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-None-43QS-AUG->86QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-None-43QS-AUG->11A-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-None-11Q-JUN->5Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-None-11Q-JUN->22Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-None-11Q-JUN->51MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-None-3AS-MAR->AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-None-3AS-MAR->6AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-None-3AS-MAR->14Q-FEB]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-None-7A-MAY->3A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-None-7A-MAY->14A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-None-7A-MAY->85M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-left-8003D->4001D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-left-8003D->16006D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-left-8003D->21AS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-left-6H->3H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-left-6H->12H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-left-6H->400T]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-left-3D->D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-left-3D->6D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-left-11D->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-left-3MS->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-left-3MS->6MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-left-3MS->85D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-left-7M->3M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-left-7M->14M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-left-7M->2QS-APR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-left-43QS-AUG->21QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-left-43QS-AUG->86QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-left-43QS-AUG->11A-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-left-11Q-JUN->5Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-left-11Q-JUN->22Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-left-11Q-JUN->51MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-left-3AS-MAR->AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-left-3AS-MAR->6AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-left-3AS-MAR->14Q-FEB]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-left-7A-MAY->3A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-left-7A-MAY->14A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-left-7A-MAY->85M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-right-8003D->4001D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-right-8003D->16006D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-right-8003D->21AS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-right-6H->3H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-right-6H->12H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-right-6H->400T]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-right-3D->D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-right-3D->6D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-right-11D->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-right-3MS->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-right-3MS->6MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-right-3MS->85D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-right-7M->3M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-right-7M->14M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-right-7M->2QS-APR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-right-43QS-AUG->21QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-right-43QS-AUG->86QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-right-43QS-AUG->11A-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-right-11Q-JUN->5Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-right-11Q-JUN->22Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-right-11Q-JUN->51MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-right-3AS-MAR->AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-right-3AS-MAR->6AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-right-3AS-MAR->14Q-FEB]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-right-7A-MAY->3A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-right-7A-MAY->14A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-right-7A-MAY->85M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-None-8003D->4001D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-None-8003D->16006D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-None-8003D->21AS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-None-6H->3H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-None-6H->12H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-None-6H->400T]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-None-3D->D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-None-3D->6D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-None-11D->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-None-3MS->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-None-3MS->6MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-None-3MS->85D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-None-7M->3M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-None-7M->14M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-None-7M->2QS-APR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-None-43QS-AUG->21QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-None-43QS-AUG->86QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-None-43QS-AUG->11A-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-None-11Q-JUN->5Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-None-11Q-JUN->22Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-None-11Q-JUN->51MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-None-3AS-MAR->AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-None-3AS-MAR->6AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-None-3AS-MAR->14Q-FEB]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-None-7A-MAY->3A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-None-7A-MAY->14A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-None-7A-MAY->85M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-left-8003D->4001D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-left-8003D->16006D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-left-8003D->21AS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-left-6H->3H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-left-6H->12H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-left-6H->400T]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-left-3D->D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-left-3D->6D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-left-11D->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-left-3MS->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-left-3MS->6MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-left-3MS->85D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-left-7M->3M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-left-7M->14M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-left-7M->2QS-APR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-left-43QS-AUG->21QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-left-43QS-AUG->86QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-left-43QS-AUG->11A-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-left-11Q-JUN->5Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-left-11Q-JUN->22Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-left-11Q-JUN->51MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-left-3AS-MAR->AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-left-3AS-MAR->6AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-left-3AS-MAR->14Q-FEB]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-left-7A-MAY->3A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-left-7A-MAY->14A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-left-7A-MAY->85M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-right-8003D->4001D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-right-8003D->16006D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-right-8003D->21AS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-right-6H->3H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-right-6H->12H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-right-6H->400T]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-right-3D->D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-right-3D->6D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-right-11D->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-right-3MS->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-right-3MS->6MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-right-3MS->85D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-right-7M->3M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-right-7M->14M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-right-7M->2QS-APR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-right-43QS-AUG->21QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-right-43QS-AUG->86QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-right-43QS-AUG->11A-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-right-11Q-JUN->5Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-right-11Q-JUN->22Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-right-11Q-JUN->51MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-right-3AS-MAR->AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-right-3AS-MAR->6AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-right-3AS-MAR->14Q-FEB]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-right-7A-MAY->3A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-right-7A-MAY->14A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-right-7A-MAY->85M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-None-8003D->4001D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-None-8003D->16006D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-None-8003D->21AS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-None-6H->3H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-None-6H->12H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-None-6H->400T]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-None-3D->D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-None-3D->6D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-None-11D->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-None-3MS->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-None-3MS->6MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-None-3MS->85D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-None-7M->3M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-None-7M->14M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-None-7M->2QS-APR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-None-43QS-AUG->21QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-None-43QS-AUG->86QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-None-43QS-AUG->11A-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-None-11Q-JUN->5Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-None-11Q-JUN->22Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-None-11Q-JUN->51MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-None-3AS-MAR->AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-None-3AS-MAR->6AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-None-3AS-MAR->14Q-FEB]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-None-7A-MAY->3A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-None-7A-MAY->14A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-None-7A-MAY->85M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-left-8003D->4001D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-left-8003D->16006D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-left-8003D->21AS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-left-6H->3H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-left-6H->12H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-left-6H->400T]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-left-3D->D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-left-3D->6D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-left-11D->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-left-3MS->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-left-3MS->6MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-left-3MS->85D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-left-7M->3M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-left-7M->14M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-left-7M->2QS-APR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-left-43QS-AUG->21QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-left-43QS-AUG->86QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-left-43QS-AUG->11A-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-left-11Q-JUN->5Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-left-11Q-JUN->22Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-left-11Q-JUN->51MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-left-3AS-MAR->AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-left-3AS-MAR->6AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-left-3AS-MAR->14Q-FEB]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-left-7A-MAY->3A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-left-7A-MAY->14A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-left-7A-MAY->85M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-right-8003D->4001D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-right-8003D->16006D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-right-8003D->21AS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-right-6H->3H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-right-6H->12H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-right-6H->400T]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-right-3D->D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-right-3D->6D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-right-11D->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-right-3MS->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-right-3MS->6MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-right-3MS->85D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-right-7M->3M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-right-7M->14M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-right-7M->2QS-APR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-right-43QS-AUG->21QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-right-43QS-AUG->86QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-right-43QS-AUG->11A-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-right-11Q-JUN->5Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-right-11Q-JUN->22Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-right-11Q-JUN->51MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-right-3AS-MAR->AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-right-3AS-MAR->6AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-right-3AS-MAR->14Q-FEB]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-right-7A-MAY->3A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-right-7A-MAY->14A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-right-7A-MAY->85M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-None-8003D->4001D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-None-8003D->16006D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-None-8003D->21AS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-None-6H->3H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-None-6H->12H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-None-6H->400T]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-None-3D->D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-None-3D->6D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-None-11D->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-None-3MS->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-None-3MS->6MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-None-3MS->85D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-None-7M->3M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-None-7M->14M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-None-7M->2QS-APR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-None-43QS-AUG->21QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-None-43QS-AUG->86QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-None-43QS-AUG->11A-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-None-11Q-JUN->5Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-None-11Q-JUN->22Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-None-11Q-JUN->51MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-None-3AS-MAR->AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-None-3AS-MAR->6AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-None-3AS-MAR->14Q-FEB]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-None-7A-MAY->3A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-None-7A-MAY->14A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-None-7A-MAY->85M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-left-8003D->4001D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-left-8003D->16006D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-left-8003D->21AS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-left-6H->3H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-left-6H->12H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-left-6H->400T]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-left-3D->D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-left-3D->6D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-left-11D->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-left-3MS->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-left-3MS->6MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-left-3MS->85D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-left-7M->3M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-left-7M->14M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-left-7M->2QS-APR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-left-43QS-AUG->21QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-left-43QS-AUG->86QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-left-43QS-AUG->11A-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-left-11Q-JUN->5Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-left-11Q-JUN->22Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-left-11Q-JUN->51MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-left-3AS-MAR->AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-left-3AS-MAR->6AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-left-3AS-MAR->14Q-FEB]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-left-7A-MAY->3A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-left-7A-MAY->14A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-left-7A-MAY->85M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-right-8003D->4001D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-right-8003D->16006D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-right-8003D->21AS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-right-6H->3H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-right-6H->12H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-right-6H->400T]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-right-3D->D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-right-3D->6D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-right-11D->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-right-3MS->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-right-3MS->6MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-right-3MS->85D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-right-7M->3M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-right-7M->14M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-right-7M->2QS-APR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-right-43QS-AUG->21QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-right-43QS-AUG->86QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-right-43QS-AUG->11A-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-right-11Q-JUN->5Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-right-11Q-JUN->22Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-right-11Q-JUN->51MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-right-3AS-MAR->AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-right-3AS-MAR->6AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-right-3AS-MAR->14Q-FEB]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-right-7A-MAY->3A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-right-7A-MAY->14A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-right-7A-MAY->85M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_closed_label_defaults[S-left]",
                            "xarray/tests/test_cftimeindex_resample.py::test_closed_label_defaults[T-left]",
                            "xarray/tests/test_cftimeindex_resample.py::test_closed_label_defaults[H-left]",
                            "xarray/tests/test_cftimeindex_resample.py::test_closed_label_defaults[D-left]",
                            "xarray/tests/test_cftimeindex_resample.py::test_closed_label_defaults[M-right]",
                            "xarray/tests/test_cftimeindex_resample.py::test_closed_label_defaults[MS-left]",
                            "xarray/tests/test_cftimeindex_resample.py::test_closed_label_defaults[Q-right]",
                            "xarray/tests/test_cftimeindex_resample.py::test_closed_label_defaults[QS-left]",
                            "xarray/tests/test_cftimeindex_resample.py::test_closed_label_defaults[A-right]",
                            "xarray/tests/test_cftimeindex_resample.py::test_closed_label_defaults[AS-left]",
                            "xarray/tests/test_cftimeindex_resample.py::test_calendars[gregorian]",
                            "xarray/tests/test_cftimeindex_resample.py::test_calendars[noleap]",
                            "xarray/tests/test_cftimeindex_resample.py::test_calendars[all_leap]",
                            "xarray/tests/test_cftimeindex_resample.py::test_calendars[360_day]",
                            "xarray/tests/test_cftimeindex_resample.py::test_calendars[julian]",
                            "xarray/tests/test_cftimeindex_resample.py::test_origin[start_day-left]",
                            "xarray/tests/test_cftimeindex_resample.py::test_origin[start_day-right]",
                            "xarray/tests/test_cftimeindex_resample.py::test_origin[start-left]",
                            "xarray/tests/test_cftimeindex_resample.py::test_origin[start-right]",
                            "xarray/tests/test_cftimeindex_resample.py::test_origin[end-left]",
                            "xarray/tests/test_cftimeindex_resample.py::test_origin[end-right]",
                            "xarray/tests/test_cftimeindex_resample.py::test_origin[end_day-left]",
                            "xarray/tests/test_cftimeindex_resample.py::test_origin[end_day-right]",
                            "xarray/tests/test_cftimeindex_resample.py::test_origin[epoch-left]",
                            "xarray/tests/test_cftimeindex_resample.py::test_origin[epoch-right]",
                            "xarray/tests/test_cftimeindex_resample.py::test_origin[(1970,",
                            "xarray/tests/test_cftimeindex_resample.py::test_base_and_offset_error",
                            "xarray/tests/test_cftimeindex_resample.py::test_invalid_offset_error[foo]",
                            "xarray/tests/test_cftimeindex_resample.py::test_invalid_offset_error[5MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_invalid_offset_error[10]",
                            "xarray/tests/test_cftimeindex_resample.py::test_timedelta_offset",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample_loffset_cftimeindex[12H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample_loffset_cftimeindex[loffset1]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample_invalid_loffset_cftimeindex",
                            "xarray/tests/test_cftimeindex_resample.py::test__convert_base_to_offset[1-10S]",
                            "xarray/tests/test_cftimeindex_resample.py::test__convert_base_to_offset[17-3H]",
                            "xarray/tests/test_cftimeindex_resample.py::test__convert_base_to_offset[15-5U]",
                            "xarray/tests/test_cftimeindex_resample.py::test__convert_base_to_offset_invalid_index",
                            "xarray/tests/test_groupby.py::test_groupby_flox_kwargs[kwargs0]",
                            "xarray/tests/test_groupby.py::test_groupby_flox_kwargs[kwargs1]",
                            "xarray/tests/test_groupby.py::TestDataArrayResample::test_resample_drop_nondim_coords",
                            "xarray/tests/test_groupby.py::TestDataArrayResample::test_upsample_interpolate",
                            "xarray/tests/test_groupby.py::TestDataArrayResample::test_upsample_interpolate_bug_2197",
                            "xarray/tests/test_groupby.py::TestDataArrayResample::test_upsample_interpolate_regression_1605",
                            "xarray/tests/test_groupby.py::TestDataArrayResample::test_upsample_interpolate_dask[True]",
                            "xarray/tests/test_groupby.py::TestDataArrayResample::test_upsample_interpolate_dask[False]",
                            "xarray/tests/test_groupby.py::TestDatasetResample::test_resample_drop_nondim_coords"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "pydata__xarray-5731.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "xarray/tests/test_computation.py::test_cov[None-da_a0-da_b0-0]",
                            "xarray/tests/test_computation.py::test_cov[None-da_a0-da_b0-1]",
                            "xarray/tests/test_computation.py::test_cov[None-da_a1-da_b1-0]",
                            "xarray/tests/test_computation.py::test_cov[None-da_a1-da_b1-1]",
                            "xarray/tests/test_computation.py::test_cov[None-da_a2-da_b2-0]",
                            "xarray/tests/test_computation.py::test_cov[None-da_a2-da_b2-1]",
                            "xarray/tests/test_computation.py::test_cov[time-da_a0-da_b0-0]",
                            "xarray/tests/test_computation.py::test_cov[time-da_a0-da_b0-1]",
                            "xarray/tests/test_computation.py::test_cov[time-da_a1-da_b1-0]",
                            "xarray/tests/test_computation.py::test_cov[time-da_a1-da_b1-1]",
                            "xarray/tests/test_computation.py::test_cov[time-da_a2-da_b2-0]",
                            "xarray/tests/test_computation.py::test_cov[time-da_a2-da_b2-1]",
                            "xarray/tests/test_computation.py::test_corr[None-da_a0-da_b0]",
                            "xarray/tests/test_computation.py::test_corr[None-da_a1-da_b1]",
                            "xarray/tests/test_computation.py::test_corr[None-da_a2-da_b2]",
                            "xarray/tests/test_computation.py::test_corr[time-da_a0-da_b0]",
                            "xarray/tests/test_computation.py::test_corr[time-da_a1-da_b1]",
                            "xarray/tests/test_computation.py::test_corr[time-da_a2-da_b2]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[None-da_a0-da_b0]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[None-da_a1-da_b1]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[None-da_a2-da_b2]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[None-da_a3-da_b3]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[None-da_a4-da_b4]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[None-da_a5-da_b5]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[None-da_a6-da_b6]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[None-da_a7-da_b7]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[None-da_a8-da_b8]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[time-da_a0-da_b0]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[time-da_a1-da_b1]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[time-da_a2-da_b2]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[time-da_a3-da_b3]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[time-da_a4-da_b4]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[time-da_a5-da_b5]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[time-da_a6-da_b6]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[time-da_a7-da_b7]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[time-da_a8-da_b8]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[x-da_a0-da_b0]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[x-da_a1-da_b1]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[x-da_a2-da_b2]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[x-da_a3-da_b3]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[x-da_a4-da_b4]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[x-da_a5-da_b5]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[x-da_a6-da_b6]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[x-da_a7-da_b7]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[x-da_a8-da_b8]",
                            "xarray/tests/test_computation.py::test_autocov[None-da_a0]",
                            "xarray/tests/test_computation.py::test_autocov[None-da_a1]",
                            "xarray/tests/test_computation.py::test_autocov[None-da_a2]",
                            "xarray/tests/test_computation.py::test_autocov[None-da_a3]",
                            "xarray/tests/test_computation.py::test_autocov[None-da_a4]",
                            "xarray/tests/test_computation.py::test_autocov[time-da_a0]",
                            "xarray/tests/test_computation.py::test_autocov[time-da_a1]",
                            "xarray/tests/test_computation.py::test_autocov[time-da_a2]",
                            "xarray/tests/test_computation.py::test_autocov[time-da_a3]",
                            "xarray/tests/test_computation.py::test_autocov[time-da_a4]",
                            "xarray/tests/test_computation.py::test_autocov[x-da_a0]",
                            "xarray/tests/test_computation.py::test_autocov[x-da_a1]",
                            "xarray/tests/test_computation.py::test_autocov[x-da_a2]",
                            "xarray/tests/test_computation.py::test_autocov[x-da_a3]",
                            "xarray/tests/test_computation.py::test_autocov[x-da_a4]",
                            "xarray/tests/test_computation.py::test_autocov[dim3-da_a0]",
                            "xarray/tests/test_computation.py::test_autocov[dim3-da_a1]",
                            "xarray/tests/test_computation.py::test_autocov[dim3-da_a2]",
                            "xarray/tests/test_computation.py::test_autocov[dim3-da_a3]",
                            "xarray/tests/test_computation.py::test_autocov[dim3-da_a4]"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "xarray/tests/test_computation.py::test_signature_properties",
                            "xarray/tests/test_computation.py::test_result_name",
                            "xarray/tests/test_computation.py::test_ordered_set_union",
                            "xarray/tests/test_computation.py::test_ordered_set_intersection",
                            "xarray/tests/test_computation.py::test_join_dict_keys",
                            "xarray/tests/test_computation.py::test_collect_dict_values",
                            "xarray/tests/test_computation.py::test_apply_identity",
                            "xarray/tests/test_computation.py::test_apply_two_inputs",
                            "xarray/tests/test_computation.py::test_apply_1d_and_0d",
                            "xarray/tests/test_computation.py::test_apply_two_outputs",
                            "xarray/tests/test_computation.py::test_apply_dask_parallelized_two_outputs",
                            "xarray/tests/test_computation.py::test_apply_input_core_dimension",
                            "xarray/tests/test_computation.py::test_apply_output_core_dimension",
                            "xarray/tests/test_computation.py::test_apply_exclude",
                            "xarray/tests/test_computation.py::test_apply_groupby_add",
                            "xarray/tests/test_computation.py::test_unified_dim_sizes",
                            "xarray/tests/test_computation.py::test_broadcast_compat_data_1d",
                            "xarray/tests/test_computation.py::test_broadcast_compat_data_2d",
                            "xarray/tests/test_computation.py::test_keep_attrs",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_variable[default]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_variable[False]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_variable[True]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_variable[override]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_variable[drop]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_variable[drop_conflicts]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_variable[no_conflicts]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray[default]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray[False]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray[True]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray[override]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray[drop]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray[drop_conflicts]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray[no_conflicts]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray_variables[default-dim]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray_variables[default-coord]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray_variables[False-dim]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray_variables[False-coord]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray_variables[True-dim]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray_variables[True-coord]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray_variables[override-dim]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray_variables[override-coord]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray_variables[drop-dim]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray_variables[drop-coord]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray_variables[drop_conflicts-dim]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray_variables[drop_conflicts-coord]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray_variables[no_conflicts-dim]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray_variables[no_conflicts-coord]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset[default]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset[False]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset[True]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset[override]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset[drop]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset[drop_conflicts]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset[no_conflicts]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[default-data]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[default-dim]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[default-coord]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[False-data]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[False-dim]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[False-coord]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[True-data]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[True-dim]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[True-coord]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[override-data]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[override-dim]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[override-coord]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[drop-data]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[drop-dim]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[drop-coord]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[drop_conflicts-data]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[drop_conflicts-dim]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[drop_conflicts-coord]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[no_conflicts-data]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[no_conflicts-dim]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[no_conflicts-coord]",
                            "xarray/tests/test_computation.py::test_dataset_join",
                            "xarray/tests/test_computation.py::test_apply_dask",
                            "xarray/tests/test_computation.py::test_apply_dask_parallelized_one_arg",
                            "xarray/tests/test_computation.py::test_apply_dask_parallelized_two_args",
                            "xarray/tests/test_computation.py::test_apply_dask_parallelized_errors",
                            "xarray/tests/test_computation.py::test_apply_dask_multiple_inputs",
                            "xarray/tests/test_computation.py::test_apply_dask_new_output_dimension",
                            "xarray/tests/test_computation.py::test_apply_dask_new_output_sizes",
                            "xarray/tests/test_computation.py::test_vectorize",
                            "xarray/tests/test_computation.py::test_vectorize_dask",
                            "xarray/tests/test_computation.py::test_vectorize_dask_dtype",
                            "xarray/tests/test_computation.py::test_vectorize_dask_dtype_without_output_dtypes[data_array0]",
                            "xarray/tests/test_computation.py::test_vectorize_dask_dtype_without_output_dtypes[data_array1]",
                            "xarray/tests/test_computation.py::test_vectorize_exclude_dims",
                            "xarray/tests/test_computation.py::test_vectorize_exclude_dims_dask",
                            "xarray/tests/test_computation.py::test_corr_only_dataarray",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[None-da_a0-da_b0-0]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[None-da_a0-da_b0-1]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[None-da_a1-da_b1-0]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[None-da_a1-da_b1-1]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[None-da_a2-da_b2-0]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[None-da_a2-da_b2-1]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[None-da_a3-da_b3-0]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[None-da_a3-da_b3-1]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[None-da_a4-da_b4-0]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[None-da_a4-da_b4-1]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[None-da_a5-da_b5-0]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[None-da_a5-da_b5-1]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[x-da_a0-da_b0-0]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[x-da_a0-da_b0-1]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[x-da_a1-da_b1-0]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[x-da_a1-da_b1-1]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[x-da_a2-da_b2-0]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[x-da_a2-da_b2-1]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[x-da_a3-da_b3-0]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[x-da_a3-da_b3-1]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[x-da_a4-da_b4-0]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[x-da_a4-da_b4-1]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[x-da_a5-da_b5-0]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[x-da_a5-da_b5-1]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[time-da_a0-da_b0-0]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[time-da_a0-da_b0-1]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[time-da_a1-da_b1-0]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[time-da_a1-da_b1-1]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[time-da_a2-da_b2-0]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[time-da_a2-da_b2-1]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[time-da_a3-da_b3-0]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[time-da_a3-da_b3-1]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[time-da_a4-da_b4-0]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[time-da_a4-da_b4-1]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[time-da_a5-da_b5-0]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[time-da_a5-da_b5-1]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[None-da_a0-da_b0]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[None-da_a1-da_b1]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[None-da_a2-da_b2]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[None-da_a3-da_b3]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[None-da_a4-da_b4]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[None-da_a5-da_b5]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[None-da_a6-da_b6]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[None-da_a7-da_b7]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[None-da_a8-da_b8]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[time-da_a0-da_b0]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[time-da_a1-da_b1]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[time-da_a2-da_b2]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[time-da_a3-da_b3]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[time-da_a4-da_b4]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[time-da_a5-da_b5]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[time-da_a6-da_b6]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[time-da_a7-da_b7]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[time-da_a8-da_b8]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[x-da_a0-da_b0]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[x-da_a1-da_b1]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[x-da_a2-da_b2]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[x-da_a3-da_b3]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[x-da_a4-da_b4]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[x-da_a5-da_b5]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[x-da_a6-da_b6]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[x-da_a7-da_b7]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[x-da_a8-da_b8]",
                            "xarray/tests/test_computation.py::test_corr_dtype_error",
                            "xarray/tests/test_computation.py::test_vectorize_dask_new_output_dims",
                            "xarray/tests/test_computation.py::test_output_wrong_number",
                            "xarray/tests/test_computation.py::test_output_wrong_dims",
                            "xarray/tests/test_computation.py::test_output_wrong_dim_size",
                            "xarray/tests/test_computation.py::test_dot[True]",
                            "xarray/tests/test_computation.py::test_dot[False]",
                            "xarray/tests/test_computation.py::test_dot_align_coords[True]",
                            "xarray/tests/test_computation.py::test_dot_align_coords[False]",
                            "xarray/tests/test_computation.py::test_where",
                            "xarray/tests/test_computation.py::test_polyval[True-True]",
                            "xarray/tests/test_computation.py::test_polyval[True-False]",
                            "xarray/tests/test_computation.py::test_polyval[False-True]",
                            "xarray/tests/test_computation.py::test_polyval[False-False]"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "pallets__flask-5063.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "tests/test_cli.py::TestRoutes::test_subdomain",
                            "tests/test_cli.py::TestRoutes::test_host"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "tests/test_cli.py::test_cli_name",
                            "tests/test_cli.py::test_find_best_app",
                            "tests/test_cli.py::test_prepare_import[test-path0-test]",
                            "tests/test_cli.py::test_prepare_import[test.py-path1-test]",
                            "tests/test_cli.py::test_prepare_import[a/test-path2-test]",
                            "tests/test_cli.py::test_prepare_import[test/__init__.py-path3-test]",
                            "tests/test_cli.py::test_prepare_import[test/__init__-path4-test]",
                            "tests/test_cli.py::test_prepare_import[value5-path5-cliapp.inner1]",
                            "tests/test_cli.py::test_prepare_import[value6-path6-cliapp.inner1.inner2]",
                            "tests/test_cli.py::test_prepare_import[test.a.b-path7-test.a.b]",
                            "tests/test_cli.py::test_prepare_import[value8-path8-cliapp.app]",
                            "tests/test_cli.py::test_prepare_import[value9-path9-cliapp.message.txt]",
                            "tests/test_cli.py::test_locate_app[cliapp.app-None-testapp]",
                            "tests/test_cli.py::test_locate_app[cliapp.app-testapp-testapp]",
                            "tests/test_cli.py::test_locate_app[cliapp.factory-None-app]",
                            "tests/test_cli.py::test_locate_app[cliapp.factory-create_app-app]",
                            "tests/test_cli.py::test_locate_app[cliapp.factory-create_app()-app]",
                            "tests/test_cli.py::test_locate_app[cliapp.factory-create_app2(\"foo\",",
                            "tests/test_cli.py::test_locate_app[cliapp.factory-",
                            "tests/test_cli.py::test_locate_app_raises[notanapp.py-None]",
                            "tests/test_cli.py::test_locate_app_raises[cliapp/app-None]",
                            "tests/test_cli.py::test_locate_app_raises[cliapp.app-notanapp]",
                            "tests/test_cli.py::test_locate_app_raises[cliapp.factory-create_app2(\"foo\")]",
                            "tests/test_cli.py::test_locate_app_raises[cliapp.factory-create_app(]",
                            "tests/test_cli.py::test_locate_app_raises[cliapp.factory-no_app]",
                            "tests/test_cli.py::test_locate_app_raises[cliapp.importerrorapp-None]",
                            "tests/test_cli.py::test_locate_app_raises[cliapp.message.txt-None]",
                            "tests/test_cli.py::test_locate_app_suppress_raise",
                            "tests/test_cli.py::test_get_version",
                            "tests/test_cli.py::test_scriptinfo",
                            "tests/test_cli.py::test_app_cli_has_app_context",
                            "tests/test_cli.py::test_with_appcontext",
                            "tests/test_cli.py::test_appgroup_app_context",
                            "tests/test_cli.py::test_flaskgroup_app_context",
                            "tests/test_cli.py::test_flaskgroup_debug[True]",
                            "tests/test_cli.py::test_flaskgroup_debug[False]",
                            "tests/test_cli.py::test_flaskgroup_nested",
                            "tests/test_cli.py::test_no_command_echo_loading_error",
                            "tests/test_cli.py::test_help_echo_loading_error",
                            "tests/test_cli.py::test_help_echo_exception",
                            "tests/test_cli.py::TestRoutes::test_simple",
                            "tests/test_cli.py::TestRoutes::test_sort",
                            "tests/test_cli.py::TestRoutes::test_all_methods",
                            "tests/test_cli.py::TestRoutes::test_no_routes",
                            "tests/test_cli.py::test_load_dotenv",
                            "tests/test_cli.py::test_dotenv_path",
                            "tests/test_cli.py::test_dotenv_optional",
                            "tests/test_cli.py::test_disable_dotenv_from_env",
                            "tests/test_cli.py::test_run_cert_path",
                            "tests/test_cli.py::test_run_cert_adhoc",
                            "tests/test_cli.py::test_run_cert_import",
                            "tests/test_cli.py::test_run_cert_no_ssl",
                            "tests/test_cli.py::test_cli_blueprints",
                            "tests/test_cli.py::test_cli_empty"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "psf__requests-1776.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "test_requests.py::RequestsTestCase::test_DIGEST_AUTH_SETS_SESSION_COOKIES",
                            "test_requests.py::RequestsTestCase::test_request_cookies_not_persisted",
                            "test_requests.py::RequestsTestCase::test_set_cookie_on_301"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "test_requests.py::RequestsTestCase::test_BASICAUTH_TUPLE_HTTP_200_OK_GET",
                            "test_requests.py::RequestsTestCase::test_DIGESTAUTH_QUOTES_QOP_VALUE",
                            "test_requests.py::RequestsTestCase::test_DIGESTAUTH_WRONG_HTTP_401_GET",
                            "test_requests.py::RequestsTestCase::test_DIGEST_AUTH_RETURNS_COOKIE",
                            "test_requests.py::RequestsTestCase::test_DIGEST_HTTP_200_OK_GET",
                            "test_requests.py::RequestsTestCase::test_DIGEST_STREAM",
                            "test_requests.py::RequestsTestCase::test_HTTP_200_OK_GET_ALTERNATIVE",
                            "test_requests.py::RequestsTestCase::test_HTTP_200_OK_GET_WITH_MIXED_PARAMS",
                            "test_requests.py::RequestsTestCase::test_HTTP_200_OK_GET_WITH_PARAMS",
                            "test_requests.py::RequestsTestCase::test_HTTP_200_OK_HEAD",
                            "test_requests.py::RequestsTestCase::test_HTTP_200_OK_PUT",
                            "test_requests.py::RequestsTestCase::test_HTTP_302_ALLOW_REDIRECT_GET",
                            "test_requests.py::RequestsTestCase::test_POSTBIN_GET_POST_FILES",
                            "test_requests.py::RequestsTestCase::test_POSTBIN_GET_POST_FILES_WITH_DATA",
                            "test_requests.py::RequestsTestCase::test_autoset_header_values_are_native",
                            "test_requests.py::RequestsTestCase::test_basic_building",
                            "test_requests.py::RequestsTestCase::test_basicauth_with_netrc",
                            "test_requests.py::RequestsTestCase::test_can_send_nonstring_objects_with_files",
                            "test_requests.py::RequestsTestCase::test_cannot_send_unprepared_requests",
                            "test_requests.py::RequestsTestCase::test_cookie_parameters",
                            "test_requests.py::RequestsTestCase::test_cookie_persists_via_api",
                            "test_requests.py::RequestsTestCase::test_cookie_quote_wrapped",
                            "test_requests.py::RequestsTestCase::test_cookie_removed_on_expire",
                            "test_requests.py::RequestsTestCase::test_cookie_sent_on_redirect",
                            "test_requests.py::RequestsTestCase::test_custom_content_type",
                            "test_requests.py::RequestsTestCase::test_decompress_gzip",
                            "test_requests.py::RequestsTestCase::test_different_encodings_dont_break_post",
                            "test_requests.py::RequestsTestCase::test_entry_points",
                            "test_requests.py::RequestsTestCase::test_fixes_1329",
                            "test_requests.py::RequestsTestCase::test_generic_cookiejar_works",
                            "test_requests.py::RequestsTestCase::test_get_auth_from_url",
                            "test_requests.py::RequestsTestCase::test_get_auth_from_url_encoded_spaces",
                            "test_requests.py::RequestsTestCase::test_get_auth_from_url_not_encoded_spaces",
                            "test_requests.py::RequestsTestCase::test_get_auth_from_url_percent_chars",
                            "test_requests.py::RequestsTestCase::test_header_keys_are_native",
                            "test_requests.py::RequestsTestCase::test_header_remove_is_case_insensitive",
                            "test_requests.py::RequestsTestCase::test_hook_receives_request_arguments",
                            "test_requests.py::RequestsTestCase::test_http_error",
                            "test_requests.py::RequestsTestCase::test_invalid_url",
                            "test_requests.py::RequestsTestCase::test_links",
                            "test_requests.py::RequestsTestCase::test_long_authinfo_in_url",
                            "test_requests.py::RequestsTestCase::test_mixed_case_scheme_acceptable",
                            "test_requests.py::RequestsTestCase::test_no_content_length",
                            "test_requests.py::RequestsTestCase::test_oddball_schemes_dont_check_URLs",
                            "test_requests.py::RequestsTestCase::test_param_cookiejar_works",
                            "test_requests.py::RequestsTestCase::test_params_are_added_before_fragment",
                            "test_requests.py::RequestsTestCase::test_params_are_merged_case_sensitive",
                            "test_requests.py::RequestsTestCase::test_path_is_not_double_encoded",
                            "test_requests.py::RequestsTestCase::test_prepared_from_session",
                            "test_requests.py::RequestsTestCase::test_prepared_request_hook",
                            "test_requests.py::RequestsTestCase::test_request_and_response_are_pickleable",
                            "test_requests.py::RequestsTestCase::test_request_cookie_overrides_session_cookie",
                            "test_requests.py::RequestsTestCase::test_request_ok_set",
                            "test_requests.py::RequestsTestCase::test_requests_in_history_are_not_overridden",
                            "test_requests.py::RequestsTestCase::test_response_is_iterable",
                            "test_requests.py::RequestsTestCase::test_session_hooks_are_overriden_by_request_hooks",
                            "test_requests.py::RequestsTestCase::test_session_hooks_are_used_with_no_request_hooks",
                            "test_requests.py::RequestsTestCase::test_session_pickling",
                            "test_requests.py::RequestsTestCase::test_status_raising",
                            "test_requests.py::RequestsTestCase::test_time_elapsed_blank",
                            "test_requests.py::RequestsTestCase::test_transport_adapter_ordering",
                            "test_requests.py::RequestsTestCase::test_unicode_get",
                            "test_requests.py::RequestsTestCase::test_unicode_header_name",
                            "test_requests.py::RequestsTestCase::test_unicode_method_name",
                            "test_requests.py::RequestsTestCase::test_unicode_multipart_post",
                            "test_requests.py::RequestsTestCase::test_unicode_multipart_post_fieldnames",
                            "test_requests.py::RequestsTestCase::test_urlencoded_get_query_multivalued_param",
                            "test_requests.py::TestContentEncodingDetection::test_html4_pragma",
                            "test_requests.py::TestContentEncodingDetection::test_html_charset",
                            "test_requests.py::TestContentEncodingDetection::test_none",
                            "test_requests.py::TestContentEncodingDetection::test_precedence",
                            "test_requests.py::TestContentEncodingDetection::test_xhtml_pragma",
                            "test_requests.py::TestContentEncodingDetection::test_xml",
                            "test_requests.py::TestCaseInsensitiveDict::test_contains",
                            "test_requests.py::TestCaseInsensitiveDict::test_delitem",
                            "test_requests.py::TestCaseInsensitiveDict::test_docstring_example",
                            "test_requests.py::TestCaseInsensitiveDict::test_equality",
                            "test_requests.py::TestCaseInsensitiveDict::test_fixes_649",
                            "test_requests.py::TestCaseInsensitiveDict::test_get",
                            "test_requests.py::TestCaseInsensitiveDict::test_getitem",
                            "test_requests.py::TestCaseInsensitiveDict::test_iter",
                            "test_requests.py::TestCaseInsensitiveDict::test_iterable_init",
                            "test_requests.py::TestCaseInsensitiveDict::test_kwargs_init",
                            "test_requests.py::TestCaseInsensitiveDict::test_len",
                            "test_requests.py::TestCaseInsensitiveDict::test_lower_items",
                            "test_requests.py::TestCaseInsensitiveDict::test_mapping_init",
                            "test_requests.py::TestCaseInsensitiveDict::test_preserve_key_case",
                            "test_requests.py::TestCaseInsensitiveDict::test_preserve_last_key_case",
                            "test_requests.py::TestCaseInsensitiveDict::test_setdefault",
                            "test_requests.py::TestCaseInsensitiveDict::test_update",
                            "test_requests.py::TestCaseInsensitiveDict::test_update_retains_unchanged",
                            "test_requests.py::UtilsTestCase::test_super_len_io_streams"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "astropy__astropy-7858.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "astropy/wcs/tests/test_wcs.py::test_scalar_inputs"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "astropy/wcs/tests/test_wcs.py::TestMaps::test_consistency",
                            "astropy/wcs/tests/test_wcs.py::TestMaps::test_maps",
                            "astropy/wcs/tests/test_wcs.py::TestSpectra::test_consistency",
                            "astropy/wcs/tests/test_wcs.py::TestSpectra::test_spectra",
                            "astropy/wcs/tests/test_wcs.py::test_fixes",
                            "astropy/wcs/tests/test_wcs.py::test_outside_sky",
                            "astropy/wcs/tests/test_wcs.py::test_pix2world",
                            "astropy/wcs/tests/test_wcs.py::test_load_fits_path",
                            "astropy/wcs/tests/test_wcs.py::test_dict_init",
                            "astropy/wcs/tests/test_wcs.py::test_extra_kwarg",
                            "astropy/wcs/tests/test_wcs.py::test_3d_shapes",
                            "astropy/wcs/tests/test_wcs.py::test_preserve_shape",
                            "astropy/wcs/tests/test_wcs.py::test_broadcasting",
                            "astropy/wcs/tests/test_wcs.py::test_shape_mismatch",
                            "astropy/wcs/tests/test_wcs.py::test_invalid_shape",
                            "astropy/wcs/tests/test_wcs.py::test_warning_about_defunct_keywords",
                            "astropy/wcs/tests/test_wcs.py::test_warning_about_defunct_keywords_exception",
                            "astropy/wcs/tests/test_wcs.py::test_to_header_string",
                            "astropy/wcs/tests/test_wcs.py::test_to_fits",
                            "astropy/wcs/tests/test_wcs.py::test_to_header_warning",
                            "astropy/wcs/tests/test_wcs.py::test_no_comments_in_header",
                            "astropy/wcs/tests/test_wcs.py::test_find_all_wcs_crash",
                            "astropy/wcs/tests/test_wcs.py::test_validate",
                            "astropy/wcs/tests/test_wcs.py::test_validate_with_2_wcses",
                            "astropy/wcs/tests/test_wcs.py::test_crpix_maps_to_crval",
                            "astropy/wcs/tests/test_wcs.py::test_all_world2pix",
                            "astropy/wcs/tests/test_wcs.py::test_scamp_sip_distortion_parameters",
                            "astropy/wcs/tests/test_wcs.py::test_fixes2",
                            "astropy/wcs/tests/test_wcs.py::test_unit_normalization",
                            "astropy/wcs/tests/test_wcs.py::test_footprint_to_file",
                            "astropy/wcs/tests/test_wcs.py::test_validate_faulty_wcs",
                            "astropy/wcs/tests/test_wcs.py::test_error_message",
                            "astropy/wcs/tests/test_wcs.py::test_out_of_bounds",
                            "astropy/wcs/tests/test_wcs.py::test_calc_footprint_1",
                            "astropy/wcs/tests/test_wcs.py::test_calc_footprint_2",
                            "astropy/wcs/tests/test_wcs.py::test_calc_footprint_3",
                            "astropy/wcs/tests/test_wcs.py::test_sip",
                            "astropy/wcs/tests/test_wcs.py::test_printwcs",
                            "astropy/wcs/tests/test_wcs.py::test_invalid_spherical",
                            "astropy/wcs/tests/test_wcs.py::test_no_iteration",
                            "astropy/wcs/tests/test_wcs.py::test_sip_tpv_agreement",
                            "astropy/wcs/tests/test_wcs.py::test_tpv_copy",
                            "astropy/wcs/tests/test_wcs.py::test_hst_wcs",
                            "astropy/wcs/tests/test_wcs.py::test_list_naxis",
                            "astropy/wcs/tests/test_wcs.py::test_sip_broken",
                            "astropy/wcs/tests/test_wcs.py::test_no_truncate_crval",
                            "astropy/wcs/tests/test_wcs.py::test_no_truncate_crval_try2",
                            "astropy/wcs/tests/test_wcs.py::test_no_truncate_crval_p17",
                            "astropy/wcs/tests/test_wcs.py::test_no_truncate_using_compare",
                            "astropy/wcs/tests/test_wcs.py::test_passing_ImageHDU",
                            "astropy/wcs/tests/test_wcs.py::test_inconsistent_sip",
                            "astropy/wcs/tests/test_wcs.py::test_bounds_check",
                            "astropy/wcs/tests/test_wcs.py::test_naxis",
                            "astropy/wcs/tests/test_wcs.py::test_sip_with_altkey",
                            "astropy/wcs/tests/test_wcs.py::test_to_fits_1",
                            "astropy/wcs/tests/test_wcs.py::test_keyedsip",
                            "astropy/wcs/tests/test_wcs.py::test_zero_size_input"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "matplotlib__matplotlib-14043.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "lib/matplotlib/tests/test_axes.py::test_bar_errbar_zorder"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "lib/matplotlib/tests/test_axes.py::test_get_labels",
                            "lib/matplotlib/tests/test_axes.py::test_spy_invalid_kwargs",
                            "lib/matplotlib/tests/test_axes.py::test_twinx_cla",
                            "lib/matplotlib/tests/test_axes.py::test_twinx_axis_scales[png]",
                            "lib/matplotlib/tests/test_axes.py::test_twin_inherit_autoscale_setting",
                            "lib/matplotlib/tests/test_axes.py::test_inverted_cla",
                            "lib/matplotlib/tests/test_axes.py::test_minorticks_on_rcParams_both[png]",
                            "lib/matplotlib/tests/test_axes.py::test_autoscale_tiny_range[png]",
                            "lib/matplotlib/tests/test_axes.py::test_autoscale_tight",
                            "lib/matplotlib/tests/test_axes.py::test_autoscale_log_shared",
                            "lib/matplotlib/tests/test_axes.py::test_use_sticky_edges",
                            "lib/matplotlib/tests/test_axes.py::test_arrow_simple[png]",
                            "lib/matplotlib/tests/test_axes.py::test_arrow_empty",
                            "lib/matplotlib/tests/test_axes.py::test_annotate_default_arrow",
                            "lib/matplotlib/tests/test_axes.py::test_structured_data",
                            "lib/matplotlib/tests/test_axes.py::test_polar_rlim[png]",
                            "lib/matplotlib/tests/test_axes.py::test_polar_rlim_bottom[png]",
                            "lib/matplotlib/tests/test_axes.py::test_hexbin_extent[png]",
                            "lib/matplotlib/tests/test_axes.py::test_hexbin_empty[png]",
                            "lib/matplotlib/tests/test_axes.py::test_hexbin_pickable",
                            "lib/matplotlib/tests/test_axes.py::test_inverted_limits",
                            "lib/matplotlib/tests/test_axes.py::test_imshow[png]",
                            "lib/matplotlib/tests/test_axes.py::test_polycollection_joinstyle[png]",
                            "lib/matplotlib/tests/test_axes.py::test_fill_between_input[2d_x_input]",
                            "lib/matplotlib/tests/test_axes.py::test_fill_between_input[2d_y1_input]",
                            "lib/matplotlib/tests/test_axes.py::test_fill_between_input[2d_y2_input]",
                            "lib/matplotlib/tests/test_axes.py::test_fill_betweenx_input[2d_y_input]",
                            "lib/matplotlib/tests/test_axes.py::test_fill_betweenx_input[2d_x1_input]",
                            "lib/matplotlib/tests/test_axes.py::test_fill_betweenx_input[2d_x2_input]",
                            "lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate[png]",
                            "lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate_decreasing[png]",
                            "lib/matplotlib/tests/test_axes.py::test_pcolorargs_5205",
                            "lib/matplotlib/tests/test_axes.py::test_pcolormesh[png]",
                            "lib/matplotlib/tests/test_axes.py::test_pcolorargs",
                            "lib/matplotlib/tests/test_axes.py::test_arc_angles[png]",
                            "lib/matplotlib/tests/test_axes.py::test_arc_ellipse[png]",
                            "lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales[png]",
                            "lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales_zoomed[png]",
                            "lib/matplotlib/tests/test_axes.py::test_markevery_log_scales[png]",
                            "lib/matplotlib/tests/test_axes.py::test_markevery_polar[png]",
                            "lib/matplotlib/tests/test_axes.py::test_marker_edges[png]",
                            "lib/matplotlib/tests/test_axes.py::test_bar_ticklabel_fail",
                            "lib/matplotlib/tests/test_axes.py::test_bar_color_none_alpha",
                            "lib/matplotlib/tests/test_axes.py::test_bar_edgecolor_none_alpha",
                            "lib/matplotlib/tests/test_axes.py::test_bar_timedelta",
                            "lib/matplotlib/tests/test_axes.py::test_hist_log[png]",
                            "lib/matplotlib/tests/test_axes.py::test_hist_bar_empty[png]",
                            "lib/matplotlib/tests/test_axes.py::test_hist_step_empty[png]",
                            "lib/matplotlib/tests/test_axes.py::test_hist_steplog[png]",
                            "lib/matplotlib/tests/test_axes.py::test_hist_step_filled[png]",
                            "lib/matplotlib/tests/test_axes.py::test_hist_step_log_bottom[png]",
                            "lib/matplotlib/tests/test_axes.py::test_hist_unequal_bins_density",
                            "lib/matplotlib/tests/test_axes.py::test_hist_datetime_datasets",
                            "lib/matplotlib/tests/test_axes.py::test_hist_with_empty_input[data0-1]",
                            "lib/matplotlib/tests/test_axes.py::test_hist_with_empty_input[data1-1]",
                            "lib/matplotlib/tests/test_axes.py::test_hist_with_empty_input[data2-2]",
                            "lib/matplotlib/tests/test_axes.py::test_contour_hatching[png]",
                            "lib/matplotlib/tests/test_axes.py::test_hist2d[png]",
                            "lib/matplotlib/tests/test_axes.py::test_hist2d_transpose[png]",
                            "lib/matplotlib/tests/test_axes.py::test_hist2d_density_normed",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_plot[png]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_marker[png]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_2D[png]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_invalid_color[png]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_no_invalid_color[png]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[0.5-None]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[rgby-None]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[rgb-shape]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[rgbrgb-shape]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case4-conversion]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[red-None]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[none-None]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[None-None]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case8-None]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[jaune-conversion]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case10-conversion]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case11-conversion]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case12-None]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case13-None]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case14-shape]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case15-None]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case16-None]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case17-conversion]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case18-None]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case19-shape]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case20-None]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case21-shape]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case22-None]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case23-shape]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case24-None]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case25-shape]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case26-None]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case27-shape]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case28-None]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case29-shape]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case30-conversion]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case31-conversion]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case32-conversion]",
                            "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params0-expected_result0]",
                            "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params1-expected_result1]",
                            "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params2-expected_result2]",
                            "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params3-expected_result3]",
                            "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params4-expected_result4]",
                            "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs0-None]",
                            "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs1-None]",
                            "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs2-r]",
                            "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs3-expected_edgecolors3]",
                            "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs4-r]",
                            "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs5-face]",
                            "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs6-none]",
                            "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs7-r]",
                            "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs8-r]",
                            "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs9-r]",
                            "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs10-g]",
                            "lib/matplotlib/tests/test_axes.py::test_pyplot_axes",
                            "lib/matplotlib/tests/test_axes.py::test_stackplot_baseline[png]",
                            "lib/matplotlib/tests/test_axes.py::test_bxp_horizontal[png]",
                            "lib/matplotlib/tests/test_axes.py::test_bxp_patchartist[png]",
                            "lib/matplotlib/tests/test_axes.py::test_bxp_custompatchartist[png]",
                            "lib/matplotlib/tests/test_axes.py::test_bxp_customoutlier[png]",
                            "lib/matplotlib/tests/test_axes.py::test_bxp_showcustommean[png]",
                            "lib/matplotlib/tests/test_axes.py::test_bxp_custombox[png]",
                            "lib/matplotlib/tests/test_axes.py::test_bxp_custommedian[png]",
                            "lib/matplotlib/tests/test_axes.py::test_bxp_customcap[png]",
                            "lib/matplotlib/tests/test_axes.py::test_bxp_customwhisker[png]",
                            "lib/matplotlib/tests/test_axes.py::test_bxp_shownotches[png]",
                            "lib/matplotlib/tests/test_axes.py::test_bxp_nocaps[png]",
                            "lib/matplotlib/tests/test_axes.py::test_bxp_nobox[png]",
                            "lib/matplotlib/tests/test_axes.py::test_bxp_no_flier_stats[png]",
                            "lib/matplotlib/tests/test_axes.py::test_bxp_showmean[png]",
                            "lib/matplotlib/tests/test_axes.py::test_bxp_showmeanasline[png]",
                            "lib/matplotlib/tests/test_axes.py::test_bxp_scalarwidth[png]",
                            "lib/matplotlib/tests/test_axes.py::test_bxp_customwidths[png]",
                            "lib/matplotlib/tests/test_axes.py::test_bxp_custompositions[png]",
                            "lib/matplotlib/tests/test_axes.py::test_bxp_bad_widths",
                            "lib/matplotlib/tests/test_axes.py::test_bxp_bad_positions",
                            "lib/matplotlib/tests/test_axes.py::test_boxplot_sym2[png]",
                            "lib/matplotlib/tests/test_axes.py::test_boxplot_sym[png]",
                            "lib/matplotlib/tests/test_axes.py::test_boxplot_rc_parameters[png]",
                            "lib/matplotlib/tests/test_axes.py::test_boxplot_with_CIarray[png]",
                            "lib/matplotlib/tests/test_axes.py::test_boxplot_no_weird_whisker[png]",
                            "lib/matplotlib/tests/test_axes.py::test_boxplot_bad_medians_1",
                            "lib/matplotlib/tests/test_axes.py::test_boxplot_bad_medians_2",
                            "lib/matplotlib/tests/test_axes.py::test_boxplot_bad_ci_1",
                            "lib/matplotlib/tests/test_axes.py::test_boxplot_zorder",
                            "lib/matplotlib/tests/test_axes.py::test_boxplot_bad_ci_2",
                            "lib/matplotlib/tests/test_axes.py::test_boxplot_mod_artist_after_plotting[png]",
                            "lib/matplotlib/tests/test_axes.py::test_violinplot_bad_positions",
                            "lib/matplotlib/tests/test_axes.py::test_violinplot_bad_widths",
                            "lib/matplotlib/tests/test_axes.py::test_manage_xticks",
                            "lib/matplotlib/tests/test_axes.py::test_boxplot_not_single",
                            "lib/matplotlib/tests/test_axes.py::test_tick_space_size_0",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_colorcycle",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_shape",
                            "lib/matplotlib/tests/test_axes.py::test_errobar_nonefmt",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_with_prop_cycle[png]",
                            "lib/matplotlib/tests/test_axes.py::test_hist_step[png]",
                            "lib/matplotlib/tests/test_axes.py::test_stem[png-w/",
                            "lib/matplotlib/tests/test_axes.py::test_stem[png-w/o",
                            "lib/matplotlib/tests/test_axes.py::test_stem_params[png]",
                            "lib/matplotlib/tests/test_axes.py::test_stem_args",
                            "lib/matplotlib/tests/test_axes.py::test_stem_dates",
                            "lib/matplotlib/tests/test_axes.py::test_hist_normed_density[False-False]",
                            "lib/matplotlib/tests/test_axes.py::test_hist_normed_density[False-True]",
                            "lib/matplotlib/tests/test_axes.py::test_hist_normed_density[True-False]",
                            "lib/matplotlib/tests/test_axes.py::test_hist_normed_density[True-True]",
                            "lib/matplotlib/tests/test_axes.py::test_hist_step_bottom[png]",
                            "lib/matplotlib/tests/test_axes.py::test_hist_emptydata",
                            "lib/matplotlib/tests/test_axes.py::test_hist_labels",
                            "lib/matplotlib/tests/test_axes.py::test_transparent_markers[png]",
                            "lib/matplotlib/tests/test_axes.py::test_rgba_markers[png]",
                            "lib/matplotlib/tests/test_axes.py::test_mollweide_grid[png]",
                            "lib/matplotlib/tests/test_axes.py::test_mollweide_forward_inverse_closure",
                            "lib/matplotlib/tests/test_axes.py::test_mollweide_inverse_forward_closure",
                            "lib/matplotlib/tests/test_axes.py::test_alpha[png]",
                            "lib/matplotlib/tests/test_axes.py::test_eventplot[png]",
                            "lib/matplotlib/tests/test_axes.py::test_eventplot_defaults[png]",
                            "lib/matplotlib/tests/test_axes.py::test_eventplot_colors[colors0]",
                            "lib/matplotlib/tests/test_axes.py::test_eventplot_colors[colors1]",
                            "lib/matplotlib/tests/test_axes.py::test_eventplot_colors[colors2]",
                            "lib/matplotlib/tests/test_axes.py::test_eventplot_colors[colors3]",
                            "lib/matplotlib/tests/test_axes.py::test_eventplot_problem_kwargs[png]",
                            "lib/matplotlib/tests/test_axes.py::test_empty_eventplot",
                            "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data0-_empty]",
                            "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data1-vertical]",
                            "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data2-horizontal]",
                            "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data3-None]",
                            "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data4-none]",
                            "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data5-_empty]",
                            "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data6-vertical]",
                            "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data7-horizontal]",
                            "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data8-None]",
                            "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data9-none]",
                            "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data10-_empty]",
                            "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data11-vertical]",
                            "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data12-horizontal]",
                            "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data13-None]",
                            "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data14-none]",
                            "lib/matplotlib/tests/test_axes.py::test_marker_styles[png]",
                            "lib/matplotlib/tests/test_axes.py::test_vertex_markers[png]",
                            "lib/matplotlib/tests/test_axes.py::test_step_linestyle[png]",
                            "lib/matplotlib/tests/test_axes.py::test_mixed_collection[png]",
                            "lib/matplotlib/tests/test_axes.py::test_subplot_key_hash",
                            "lib/matplotlib/tests/test_axes.py::test_specgram_freqs[png]",
                            "lib/matplotlib/tests/test_axes.py::test_specgram_noise[png]",
                            "lib/matplotlib/tests/test_axes.py::test_specgram_magnitude_freqs[png]",
                            "lib/matplotlib/tests/test_axes.py::test_specgram_magnitude_noise[png]",
                            "lib/matplotlib/tests/test_axes.py::test_specgram_angle_freqs[png]",
                            "lib/matplotlib/tests/test_axes.py::test_specgram_noise_angle[png]",
                            "lib/matplotlib/tests/test_axes.py::test_specgram_freqs_phase[png]",
                            "lib/matplotlib/tests/test_axes.py::test_specgram_noise_phase[png]",
                            "lib/matplotlib/tests/test_axes.py::test_psd_freqs[png]",
                            "lib/matplotlib/tests/test_axes.py::test_psd_noise[png]",
                            "lib/matplotlib/tests/test_axes.py::test_csd_freqs[png]",
                            "lib/matplotlib/tests/test_axes.py::test_csd_noise[png]",
                            "lib/matplotlib/tests/test_axes.py::test_magnitude_spectrum_freqs[png]",
                            "lib/matplotlib/tests/test_axes.py::test_magnitude_spectrum_noise[png]",
                            "lib/matplotlib/tests/test_axes.py::test_angle_spectrum_freqs[png]",
                            "lib/matplotlib/tests/test_axes.py::test_angle_spectrum_noise[png]",
                            "lib/matplotlib/tests/test_axes.py::test_phase_spectrum_freqs[png]",
                            "lib/matplotlib/tests/test_axes.py::test_phase_spectrum_noise[png]",
                            "lib/matplotlib/tests/test_axes.py::test_twin_spines[png]",
                            "lib/matplotlib/tests/test_axes.py::test_twin_spines_on_top[png]",
                            "lib/matplotlib/tests/test_axes.py::test_rcparam_grid_minor",
                            "lib/matplotlib/tests/test_axes.py::test_vline_limit",
                            "lib/matplotlib/tests/test_axes.py::test_empty_shared_subplots",
                            "lib/matplotlib/tests/test_axes.py::test_shared_with_aspect_1",
                            "lib/matplotlib/tests/test_axes.py::test_shared_with_aspect_2",
                            "lib/matplotlib/tests/test_axes.py::test_shared_with_aspect_3",
                            "lib/matplotlib/tests/test_axes.py::test_twin_with_aspect[x]",
                            "lib/matplotlib/tests/test_axes.py::test_twin_with_aspect[y]",
                            "lib/matplotlib/tests/test_axes.py::test_relim_visible_only",
                            "lib/matplotlib/tests/test_axes.py::test_text_labelsize",
                            "lib/matplotlib/tests/test_axes.py::test_pie_textprops",
                            "lib/matplotlib/tests/test_axes.py::test_tick_label_update",
                            "lib/matplotlib/tests/test_axes.py::test_margins",
                            "lib/matplotlib/tests/test_axes.py::test_length_one_hist",
                            "lib/matplotlib/tests/test_axes.py::test_pathological_hexbin",
                            "lib/matplotlib/tests/test_axes.py::test_color_None",
                            "lib/matplotlib/tests/test_axes.py::test_color_alias",
                            "lib/matplotlib/tests/test_axes.py::test_numerical_hist_label",
                            "lib/matplotlib/tests/test_axes.py::test_unicode_hist_label",
                            "lib/matplotlib/tests/test_axes.py::test_move_offsetlabel",
                            "lib/matplotlib/tests/test_axes.py::test_rc_tick",
                            "lib/matplotlib/tests/test_axes.py::test_rc_major_minor_tick",
                            "lib/matplotlib/tests/test_axes.py::test_square_plot",
                            "lib/matplotlib/tests/test_axes.py::test_no_None",
                            "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy0-AxesImage]",
                            "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy1-AxesImage]",
                            "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy2-AxesImage]",
                            "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy3-PcolorImage]",
                            "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy4-QuadMesh]",
                            "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy0-AxesImage]",
                            "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy1-AxesImage]",
                            "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy2-AxesImage]",
                            "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy3-PcolorImage]",
                            "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy4-QuadMesh]",
                            "lib/matplotlib/tests/test_axes.py::test_shared_scale",
                            "lib/matplotlib/tests/test_axes.py::test_violin_point_mass",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs0]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs1]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs2]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs3]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs4]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs5]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs6]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs7]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs8]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs9]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs10]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs11]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs12]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs13]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs14]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs15]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs16]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs17]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs18]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs19]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs20]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs21]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs22]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs23]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs24]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs25]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs26]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs27]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs28]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs29]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs30]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs31]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs32]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs33]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs34]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs35]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs36]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs37]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs38]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs39]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs40]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs41]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs42]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs43]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs44]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs45]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs46]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs47]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs48]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs49]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs50]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs51]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs52]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs53]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs54]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs55]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs56]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs57]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs58]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs59]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs60]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs61]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs62]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs63]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs64]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs65]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs66]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs67]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs68]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs69]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs70]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs71]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs72]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs73]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs74]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs75]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs76]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs77]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs78]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs79]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs80]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs81]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs82]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs83]",
                            "lib/matplotlib/tests/test_axes.py::test_dash_offset[png]",
                            "lib/matplotlib/tests/test_axes.py::test_title_pad",
                            "lib/matplotlib/tests/test_axes.py::test_title_location_roundtrip",
                            "lib/matplotlib/tests/test_axes.py::test_loglog[png]",
                            "lib/matplotlib/tests/test_axes.py::test_loglog_nonpos[png]",
                            "lib/matplotlib/tests/test_axes.py::test_axes_margins",
                            "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[gca-x]",
                            "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[gca-y]",
                            "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots-x]",
                            "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots-y]",
                            "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots_shared-x]",
                            "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots_shared-y]",
                            "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[add_axes-x]",
                            "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[add_axes-y]",
                            "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes_relim",
                            "lib/matplotlib/tests/test_axes.py::test_shared_axes_autoscale",
                            "lib/matplotlib/tests/test_axes.py::test_adjust_numtick_aspect",
                            "lib/matplotlib/tests/test_axes.py::test_broken_barh_empty",
                            "lib/matplotlib/tests/test_axes.py::test_broken_barh_timedelta",
                            "lib/matplotlib/tests/test_axes.py::test_axis_set_tick_params_labelsize_labelcolor",
                            "lib/matplotlib/tests/test_axes.py::test_axes_tick_params_gridlines",
                            "lib/matplotlib/tests/test_axes.py::test_axes_tick_params_ylabelside",
                            "lib/matplotlib/tests/test_axes.py::test_axes_tick_params_xlabelside",
                            "lib/matplotlib/tests/test_axes.py::test_none_kwargs",
                            "lib/matplotlib/tests/test_axes.py::test_ls_ds_conflict",
                            "lib/matplotlib/tests/test_axes.py::test_bar_uint8",
                            "lib/matplotlib/tests/test_axes.py::test_axisbelow[png]",
                            "lib/matplotlib/tests/test_axes.py::test_titlesetpos",
                            "lib/matplotlib/tests/test_axes.py::test_title_xticks_top",
                            "lib/matplotlib/tests/test_axes.py::test_title_xticks_top_both",
                            "lib/matplotlib/tests/test_axes.py::test_offset_label_color",
                            "lib/matplotlib/tests/test_axes.py::test_large_offset",
                            "lib/matplotlib/tests/test_axes.py::test_barb_units",
                            "lib/matplotlib/tests/test_axes.py::test_quiver_units",
                            "lib/matplotlib/tests/test_axes.py::test_bar_color_cycle",
                            "lib/matplotlib/tests/test_axes.py::test_tick_param_label_rotation",
                            "lib/matplotlib/tests/test_axes.py::test_fillbetween_cycle",
                            "lib/matplotlib/tests/test_axes.py::test_log_margins",
                            "lib/matplotlib/tests/test_axes.py::test_color_length_mismatch",
                            "lib/matplotlib/tests/test_axes.py::test_eventplot_legend",
                            "lib/matplotlib/tests/test_axes.py::test_bar_broadcast_args",
                            "lib/matplotlib/tests/test_axes.py::test_invalid_axis_limits",
                            "lib/matplotlib/tests/test_axes.py::test_minorticks_on[symlog-symlog]",
                            "lib/matplotlib/tests/test_axes.py::test_minorticks_on[symlog-log]",
                            "lib/matplotlib/tests/test_axes.py::test_minorticks_on[log-symlog]",
                            "lib/matplotlib/tests/test_axes.py::test_minorticks_on[log-log]",
                            "lib/matplotlib/tests/test_axes.py::test_twinx_knows_limits",
                            "lib/matplotlib/tests/test_axes.py::test_zero_linewidth",
                            "lib/matplotlib/tests/test_axes.py::test_polar_gridlines",
                            "lib/matplotlib/tests/test_axes.py::test_empty_errorbar_legend",
                            "lib/matplotlib/tests/test_axes.py::test_plot_columns_cycle_deprecation",
                            "lib/matplotlib/tests/test_axes.py::test_markerfacecolor_none_alpha[png]",
                            "lib/matplotlib/tests/test_axes.py::test_tick_padding_tightbbox",
                            "lib/matplotlib/tests/test_axes.py::test_zoom_inset",
                            "lib/matplotlib/tests/test_axes.py::test_set_position",
                            "lib/matplotlib/tests/test_axes.py::test_spines_properbbox_after_zoom",
                            "lib/matplotlib/tests/test_axes.py::test_cartopy_backcompat",
                            "lib/matplotlib/tests/test_axes.py::test_gettightbbox_ignoreNaN",
                            "lib/matplotlib/tests/test_axes.py::test_scatter_empty_data",
                            "lib/matplotlib/tests/test_axes.py::test_annotate_across_transforms[png]",
                            "lib/matplotlib/tests/test_axes.py::test_deprecated_uppercase_colors",
                            "lib/matplotlib/tests/test_axes.py::test_secondary_fail",
                            "lib/matplotlib/tests/test_axes.py::test_secondary_resize",
                            "lib/matplotlib/tests/test_axes.py::test_nodecorator",
                            "lib/matplotlib/tests/test_axes.py::test_displaced_spine",
                            "lib/matplotlib/tests/test_axes.py::test_tickdirs",
                            "lib/matplotlib/tests/test_axes.py::test_minor_accountedfor",
                            "lib/matplotlib/tests/test_axes.py::test_axis_bool_arguments[png]",
                            "lib/matplotlib/tests/test_axes.py::test_datetime_masked",
                            "lib/matplotlib/tests/test_axes.py::test_hist_auto_bins",
                            "lib/matplotlib/tests/test_axes.py::test_hist_nan_data",
                            "lib/matplotlib/tests/test_axes.py::test_hist_range_and_density"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "mwaskom__seaborn-2766.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "seaborn/tests/test_algorithms.py::test_bootstrap",
                            "seaborn/tests/test_algorithms.py::test_bootstrap_length",
                            "seaborn/tests/test_algorithms.py::test_bootstrap_range",
                            "seaborn/tests/test_algorithms.py::test_bootstrap_multiarg",
                            "seaborn/tests/test_algorithms.py::test_bootstrap_axis",
                            "seaborn/tests/test_algorithms.py::test_bootstrap_seed",
                            "seaborn/tests/test_algorithms.py::test_bootstrap_ols",
                            "seaborn/tests/test_algorithms.py::test_bootstrap_units",
                            "seaborn/tests/test_algorithms.py::test_bootstrap_arglength",
                            "seaborn/tests/test_algorithms.py::test_bootstrap_string_func",
                            "seaborn/tests/test_algorithms.py::test_bootstrap_reproducibility",
                            "seaborn/tests/test_algorithms.py::test_seed_new",
                            "seaborn/tests/test_categorical.py::TestCategoricalPlotter::test_1d_input_data",
                            "seaborn/tests/test_categorical.py::TestCategoricalPlotter::test_2d_input_data",
                            "seaborn/tests/test_categorical.py::TestCategoricalPlotter::test_3d_input_data",
                            "seaborn/tests/test_categorical.py::TestCategoricalPlotter::test_list_of_array_input_data",
                            "seaborn/tests/test_categorical.py::TestCategoricalPlotter::test_wide_array_input_data",
                            "seaborn/tests/test_categorical.py::TestCategoricalPlotter::test_single_long_direct_inputs",
                            "seaborn/tests/test_categorical.py::TestCategoricalPlotter::test_single_long_indirect_inputs",
                            "seaborn/tests/test_categorical.py::TestCategoricalPlotter::test_longform_groupby",
                            "seaborn/tests/test_categorical.py::TestCategoricalPlotter::test_input_validation",
                            "seaborn/tests/test_categorical.py::TestCategoricalPlotter::test_hue_order",
                            "seaborn/tests/test_categorical.py::TestCategoricalPlotter::test_plot_units",
                            "seaborn/tests/test_categorical.py::TestCategoricalPlotter::test_default_palettes",
                            "seaborn/tests/test_categorical.py::TestCategoricalPlotter::test_default_palette_with_many_levels",
                            "seaborn/tests/test_categorical.py::TestCategoricalPlotter::test_specific_color",
                            "seaborn/tests/test_categorical.py::TestCategoricalPlotter::test_specific_palette",
                            "seaborn/tests/test_categorical.py::TestCategoricalPlotter::test_dict_as_palette",
                            "seaborn/tests/test_categorical.py::TestCategoricalPlotter::test_palette_desaturation",
                            "seaborn/tests/test_categorical.py::TestCategoricalStatPlotter::test_no_bootstrappig",
                            "seaborn/tests/test_categorical.py::TestCategoricalStatPlotter::test_single_layer_stats",
                            "seaborn/tests/test_categorical.py::TestCategoricalStatPlotter::test_single_layer_stats_with_units",
                            "seaborn/tests/test_categorical.py::TestCategoricalStatPlotter::test_single_layer_stats_with_missing_data",
                            "seaborn/tests/test_categorical.py::TestCategoricalStatPlotter::test_nested_stats",
                            "seaborn/tests/test_categorical.py::TestCategoricalStatPlotter::test_bootstrap_seed",
                            "seaborn/tests/test_categorical.py::TestCategoricalStatPlotter::test_nested_stats_with_units",
                            "seaborn/tests/test_categorical.py::TestCategoricalStatPlotter::test_nested_stats_with_missing_data",
                            "seaborn/tests/test_categorical.py::TestCategoricalStatPlotter::test_sd_error_bars",
                            "seaborn/tests/test_categorical.py::TestCategoricalStatPlotter::test_nested_sd_error_bars",
                            "seaborn/tests/test_categorical.py::TestCategoricalStatPlotter::test_draw_cis",
                            "seaborn/tests/test_categorical.py::TestBoxPlotter::test_nested_width",
                            "seaborn/tests/test_categorical.py::TestBoxPlotter::test_hue_offsets",
                            "seaborn/tests/test_categorical.py::TestBoxPlotter::test_axes_data",
                            "seaborn/tests/test_categorical.py::TestBoxPlotter::test_box_colors",
                            "seaborn/tests/test_categorical.py::TestBoxPlotter::test_draw_missing_boxes",
                            "seaborn/tests/test_categorical.py::TestBoxPlotter::test_missing_data",
                            "seaborn/tests/test_categorical.py::TestBoxPlotter::test_unaligned_index",
                            "seaborn/tests/test_categorical.py::TestBoxPlotter::test_boxplots",
                            "seaborn/tests/test_categorical.py::TestBoxPlotter::test_axes_annotation",
                            "seaborn/tests/test_categorical.py::TestViolinPlotter::test_split_error",
                            "seaborn/tests/test_categorical.py::TestViolinPlotter::test_no_observations",
                            "seaborn/tests/test_categorical.py::TestViolinPlotter::test_single_observation",
                            "seaborn/tests/test_categorical.py::TestViolinPlotter::test_dwidth",
                            "seaborn/tests/test_categorical.py::TestViolinPlotter::test_scale_area",
                            "seaborn/tests/test_categorical.py::TestViolinPlotter::test_scale_width",
                            "seaborn/tests/test_categorical.py::TestViolinPlotter::test_scale_count",
                            "seaborn/tests/test_categorical.py::TestViolinPlotter::test_bad_scale",
                            "seaborn/tests/test_categorical.py::TestViolinPlotter::test_kde_fit",
                            "seaborn/tests/test_categorical.py::TestViolinPlotter::test_draw_to_density",
                            "seaborn/tests/test_categorical.py::TestViolinPlotter::test_draw_single_observations",
                            "seaborn/tests/test_categorical.py::TestViolinPlotter::test_draw_box_lines",
                            "seaborn/tests/test_categorical.py::TestViolinPlotter::test_draw_quartiles",
                            "seaborn/tests/test_categorical.py::TestViolinPlotter::test_draw_points",
                            "seaborn/tests/test_categorical.py::TestViolinPlotter::test_draw_sticks",
                            "seaborn/tests/test_categorical.py::TestViolinPlotter::test_validate_inner",
                            "seaborn/tests/test_categorical.py::TestViolinPlotter::test_draw_violinplots",
                            "seaborn/tests/test_categorical.py::TestViolinPlotter::test_draw_violinplots_no_observations",
                            "seaborn/tests/test_categorical.py::TestViolinPlotter::test_draw_violinplots_single_observations",
                            "seaborn/tests/test_categorical.py::TestViolinPlotter::test_violinplots",
                            "seaborn/tests/test_categorical.py::TestCategoricalScatterPlotter::test_group_point_colors",
                            "seaborn/tests/test_categorical.py::TestCategoricalScatterPlotter::test_hue_point_colors",
                            "seaborn/tests/test_categorical.py::TestCategoricalScatterPlotter::test_scatterplot_legend",
                            "seaborn/tests/test_categorical.py::TestStripPlotter::test_stripplot_vertical",
                            "seaborn/tests/test_categorical.py::TestStripPlotter::test_stripplot_horiztonal",
                            "seaborn/tests/test_categorical.py::TestStripPlotter::test_stripplot_jitter",
                            "seaborn/tests/test_categorical.py::TestStripPlotter::test_dodge_nested_stripplot_vertical",
                            "seaborn/tests/test_categorical.py::TestStripPlotter::test_dodge_nested_stripplot_horizontal",
                            "seaborn/tests/test_categorical.py::TestStripPlotter::test_nested_stripplot_vertical",
                            "seaborn/tests/test_categorical.py::TestStripPlotter::test_nested_stripplot_horizontal",
                            "seaborn/tests/test_categorical.py::TestStripPlotter::test_three_strip_points",
                            "seaborn/tests/test_categorical.py::TestStripPlotter::test_unaligned_index",
                            "seaborn/tests/test_categorical.py::TestSwarmPlotter::test_could_overlap",
                            "seaborn/tests/test_categorical.py::TestSwarmPlotter::test_position_candidates",
                            "seaborn/tests/test_categorical.py::TestSwarmPlotter::test_find_first_non_overlapping_candidate",
                            "seaborn/tests/test_categorical.py::TestSwarmPlotter::test_beeswarm",
                            "seaborn/tests/test_categorical.py::TestSwarmPlotter::test_add_gutters",
                            "seaborn/tests/test_categorical.py::TestSwarmPlotter::test_swarmplot_vertical",
                            "seaborn/tests/test_categorical.py::TestSwarmPlotter::test_swarmplot_horizontal",
                            "seaborn/tests/test_categorical.py::TestSwarmPlotter::test_dodge_nested_swarmplot_vertical",
                            "seaborn/tests/test_categorical.py::TestSwarmPlotter::test_dodge_nested_swarmplot_horizontal",
                            "seaborn/tests/test_categorical.py::TestSwarmPlotter::test_nested_swarmplot_vertical",
                            "seaborn/tests/test_categorical.py::TestSwarmPlotter::test_nested_swarmplot_horizontal",
                            "seaborn/tests/test_categorical.py::TestSwarmPlotter::test_unaligned_index",
                            "seaborn/tests/test_categorical.py::TestBarPlotter::test_nested_width",
                            "seaborn/tests/test_categorical.py::TestBarPlotter::test_draw_vertical_bars",
                            "seaborn/tests/test_categorical.py::TestBarPlotter::test_draw_horizontal_bars",
                            "seaborn/tests/test_categorical.py::TestBarPlotter::test_draw_nested_vertical_bars",
                            "seaborn/tests/test_categorical.py::TestBarPlotter::test_draw_nested_horizontal_bars",
                            "seaborn/tests/test_categorical.py::TestBarPlotter::test_draw_missing_bars",
                            "seaborn/tests/test_categorical.py::TestBarPlotter::test_unaligned_index",
                            "seaborn/tests/test_categorical.py::TestBarPlotter::test_barplot_colors",
                            "seaborn/tests/test_categorical.py::TestBarPlotter::test_simple_barplots",
                            "seaborn/tests/test_categorical.py::TestPointPlotter::test_different_defualt_colors",
                            "seaborn/tests/test_categorical.py::TestPointPlotter::test_hue_offsets",
                            "seaborn/tests/test_categorical.py::TestPointPlotter::test_draw_vertical_points",
                            "seaborn/tests/test_categorical.py::TestPointPlotter::test_draw_horizontal_points",
                            "seaborn/tests/test_categorical.py::TestPointPlotter::test_draw_vertical_nested_points",
                            "seaborn/tests/test_categorical.py::TestPointPlotter::test_draw_horizontal_nested_points",
                            "seaborn/tests/test_categorical.py::TestPointPlotter::test_draw_missing_points",
                            "seaborn/tests/test_categorical.py::TestPointPlotter::test_unaligned_index",
                            "seaborn/tests/test_categorical.py::TestPointPlotter::test_pointplot_colors",
                            "seaborn/tests/test_categorical.py::TestPointPlotter::test_simple_pointplots",
                            "seaborn/tests/test_categorical.py::TestCountPlot::test_plot_elements",
                            "seaborn/tests/test_categorical.py::TestCountPlot::test_input_error",
                            "seaborn/tests/test_categorical.py::TestCatPlot::test_facet_organization",
                            "seaborn/tests/test_categorical.py::TestCatPlot::test_plot_elements",
                            "seaborn/tests/test_categorical.py::TestCatPlot::test_bad_plot_kind_error",
                            "seaborn/tests/test_categorical.py::TestCatPlot::test_count_x_and_y",
                            "seaborn/tests/test_categorical.py::TestCatPlot::test_plot_colors",
                            "seaborn/tests/test_categorical.py::TestCatPlot::test_ax_kwarg_removal",
                            "seaborn/tests/test_categorical.py::TestCatPlot::test_factorplot",
                            "seaborn/tests/test_categorical.py::TestBoxenPlotter::test_invalid_depths",
                            "seaborn/tests/test_categorical.py::TestBoxenPlotter::test_valid_scales",
                            "seaborn/tests/test_categorical.py::TestBoxenPlotter::test_hue_offsets",
                            "seaborn/tests/test_distributions.py::TestRugPlot::test_empty_data",
                            "seaborn/tests/test_distributions.py::TestKDEPlotUnivariate::test_empty_data",
                            "seaborn/tests/test_distributions.py::TestKDEPlotUnivariate::test_multiple_argument_check",
                            "seaborn/tests/test_distributions.py::TestKDEPlotUnivariate::test_input_checking",
                            "seaborn/tests/test_distributions.py::TestKDEPlotBivariate::test_quantile_to_level",
                            "seaborn/tests/test_distributions.py::TestKDEPlotBivariate::test_input_checking",
                            "seaborn/tests/test_distributions.py::TestHistPlotUnivariate::test_empty_data",
                            "seaborn/tests/test_distributions.py::TestHistPlotUnivariate::test_discrete_requires_bars",
                            "seaborn/tests/test_distributions.py::TestECDFPlotUnivariate::test_bivariate_error",
                            "seaborn/tests/test_distributions.py::TestDisPlot::test_empty",
                            "seaborn/tests/test_distributions.py::TestDisPlot::test_bivariate_ecdf_error",
                            "seaborn/tests/test_rcmod.py::TestAxesStyle::test_default_return",
                            "seaborn/tests/test_rcmod.py::TestAxesStyle::test_key_usage",
                            "seaborn/tests/test_rcmod.py::TestAxesStyle::test_bad_style",
                            "seaborn/tests/test_rcmod.py::TestAxesStyle::test_rc_override",
                            "seaborn/tests/test_rcmod.py::TestAxesStyle::test_set_style",
                            "seaborn/tests/test_rcmod.py::TestAxesStyle::test_style_context_manager",
                            "seaborn/tests/test_rcmod.py::TestAxesStyle::test_style_context_independence",
                            "seaborn/tests/test_rcmod.py::TestAxesStyle::test_set_rc",
                            "seaborn/tests/test_rcmod.py::TestAxesStyle::test_set_with_palette",
                            "seaborn/tests/test_rcmod.py::TestAxesStyle::test_reset_defaults",
                            "seaborn/tests/test_rcmod.py::TestAxesStyle::test_reset_orig",
                            "seaborn/tests/test_rcmod.py::TestAxesStyle::test_set_is_alias",
                            "seaborn/tests/test_rcmod.py::TestPlottingContext::test_default_return",
                            "seaborn/tests/test_rcmod.py::TestPlottingContext::test_key_usage",
                            "seaborn/tests/test_rcmod.py::TestPlottingContext::test_bad_context",
                            "seaborn/tests/test_rcmod.py::TestPlottingContext::test_font_scale",
                            "seaborn/tests/test_rcmod.py::TestPlottingContext::test_rc_override",
                            "seaborn/tests/test_rcmod.py::TestPlottingContext::test_set_context",
                            "seaborn/tests/test_rcmod.py::TestPlottingContext::test_context_context_manager",
                            "seaborn/tests/test_rcmod.py::TestPalette::test_set_palette",
                            "seaborn/tests/test_rcmod.py::TestFonts::test_set_serif_font",
                            "seaborn/tests/test_regression.py::TestLinearPlotter::test_establish_variables_from_frame",
                            "seaborn/tests/test_regression.py::TestLinearPlotter::test_establish_variables_from_series",
                            "seaborn/tests/test_regression.py::TestLinearPlotter::test_establish_variables_from_array",
                            "seaborn/tests/test_regression.py::TestLinearPlotter::test_establish_variables_from_lists",
                            "seaborn/tests/test_regression.py::TestLinearPlotter::test_establish_variables_from_mix",
                            "seaborn/tests/test_regression.py::TestLinearPlotter::test_establish_variables_from_bad",
                            "seaborn/tests/test_regression.py::TestLinearPlotter::test_dropna",
                            "seaborn/tests/test_regression.py::TestRegressionPlotter::test_variables_from_frame",
                            "seaborn/tests/test_regression.py::TestRegressionPlotter::test_variables_from_series",
                            "seaborn/tests/test_regression.py::TestRegressionPlotter::test_variables_from_mix",
                            "seaborn/tests/test_regression.py::TestRegressionPlotter::test_variables_must_be_1d",
                            "seaborn/tests/test_regression.py::TestRegressionPlotter::test_dropna",
                            "seaborn/tests/test_regression.py::TestRegressionPlotter::test_singleton[x0-y0]",
                            "seaborn/tests/test_regression.py::TestRegressionPlotter::test_singleton[x1-y1]",
                            "seaborn/tests/test_regression.py::TestRegressionPlotter::test_singleton[x2-y2]",
                            "seaborn/tests/test_regression.py::TestRegressionPlotter::test_ci",
                            "seaborn/tests/test_regression.py::TestRegressionPlotter::test_regress_logx",
                            "seaborn/tests/test_regression.py::TestRegressionPlotter::test_regress_bootstrap_seed",
                            "seaborn/tests/test_regression.py::TestRegressionPlotter::test_numeric_bins",
                            "seaborn/tests/test_regression.py::TestRegressionPlotter::test_provided_bins",
                            "seaborn/tests/test_regression.py::TestRegressionPlotter::test_bin_results",
                            "seaborn/tests/test_regression.py::TestRegressionPlotter::test_scatter_data",
                            "seaborn/tests/test_regression.py::TestRegressionPlotter::test_estimate_data",
                            "seaborn/tests/test_regression.py::TestRegressionPlotter::test_estimate_cis",
                            "seaborn/tests/test_regression.py::TestRegressionPlotter::test_estimate_units",
                            "seaborn/tests/test_regression.py::TestRegressionPlotter::test_partial",
                            "seaborn/tests/test_regression.py::TestRegressionPlotter::test_regression_options",
                            "seaborn/tests/test_regression.py::TestRegressionPlotter::test_regression_limits",
                            "seaborn/tests/test_regression.py::TestRegressionPlots::test_regplot_basic",
                            "seaborn/tests/test_regression.py::TestRegressionPlots::test_regplot_selective",
                            "seaborn/tests/test_regression.py::TestRegressionPlots::test_regplot_scatter_kws_alpha",
                            "seaborn/tests/test_regression.py::TestRegressionPlots::test_regplot_binned",
                            "seaborn/tests/test_regression.py::TestRegressionPlots::test_lmplot_no_data",
                            "seaborn/tests/test_regression.py::TestRegressionPlots::test_lmplot_basic",
                            "seaborn/tests/test_regression.py::TestRegressionPlots::test_lmplot_hue",
                            "seaborn/tests/test_regression.py::TestRegressionPlots::test_lmplot_markers",
                            "seaborn/tests/test_regression.py::TestRegressionPlots::test_lmplot_marker_linewidths",
                            "seaborn/tests/test_regression.py::TestRegressionPlots::test_lmplot_facets",
                            "seaborn/tests/test_regression.py::TestRegressionPlots::test_lmplot_hue_col_nolegend",
                            "seaborn/tests/test_regression.py::TestRegressionPlots::test_lmplot_scatter_kws",
                            "seaborn/tests/test_regression.py::TestRegressionPlots::test_lmplot_facet_truncate[True]",
                            "seaborn/tests/test_regression.py::TestRegressionPlots::test_lmplot_facet_truncate[False]",
                            "seaborn/tests/test_regression.py::TestRegressionPlots::test_lmplot_sharey",
                            "seaborn/tests/test_regression.py::TestRegressionPlots::test_lmplot_facet_kws",
                            "seaborn/tests/test_regression.py::TestRegressionPlots::test_residplot",
                            "seaborn/tests/test_regression.py::TestRegressionPlots::test_three_point_colors",
                            "seaborn/tests/test_regression.py::TestRegressionPlots::test_regplot_xlim",
                            "seaborn/tests/test_utils.py::test_pmf_hist_basics",
                            "seaborn/tests/test_utils.py::test_ci_to_errsize",
                            "seaborn/tests/test_utils.py::test_desaturate",
                            "seaborn/tests/test_utils.py::test_desaturation_prop",
                            "seaborn/tests/test_utils.py::test_saturate",
                            "seaborn/tests/test_utils.py::test_sig_stars[0.0001-***]",
                            "seaborn/tests/test_utils.py::test_sig_stars[0.001-**]",
                            "seaborn/tests/test_utils.py::test_sig_stars[0.01-*]",
                            "seaborn/tests/test_utils.py::test_sig_stars[0.09-.]",
                            "seaborn/tests/test_utils.py::test_sig_stars[1-]",
                            "seaborn/tests/test_utils.py::test_iqr",
                            "seaborn/tests/test_utils.py::test_to_utf8[a-a0]",
                            "seaborn/tests/test_utils.py::test_to_utf8[abc-abc0]",
                            "seaborn/tests/test_utils.py::test_to_utf8[a-a1]",
                            "seaborn/tests/test_utils.py::test_to_utf8[abc-abc1]",
                            "seaborn/tests/test_utils.py::test_to_utf8[s4-abc]",
                            "seaborn/tests/test_utils.py::test_to_utf8[s5-]",
                            "seaborn/tests/test_utils.py::test_to_utf8[1-1]",
                            "seaborn/tests/test_utils.py::test_to_utf8[0-0]",
                            "seaborn/tests/test_utils.py::test_to_utf8[s8-[]]",
                            "seaborn/tests/test_utils.py::TestSpineUtils::test_despine",
                            "seaborn/tests/test_utils.py::TestSpineUtils::test_despine_specific_axes",
                            "seaborn/tests/test_utils.py::TestSpineUtils::test_despine_with_offset",
                            "seaborn/tests/test_utils.py::TestSpineUtils::test_despine_side_specific_offset",
                            "seaborn/tests/test_utils.py::TestSpineUtils::test_despine_with_offset_specific_axes",
                            "seaborn/tests/test_utils.py::TestSpineUtils::test_despine_trim_spines",
                            "seaborn/tests/test_utils.py::TestSpineUtils::test_despine_trim_inverted",
                            "seaborn/tests/test_utils.py::TestSpineUtils::test_despine_trim_noticks",
                            "seaborn/tests/test_utils.py::TestSpineUtils::test_despine_trim_categorical",
                            "seaborn/tests/test_utils.py::TestSpineUtils::test_despine_moved_ticks",
                            "seaborn/tests/test_utils.py::test_ticklabels_overlap",
                            "seaborn/tests/test_utils.py::test_move_legend_matplotlib_objects",
                            "seaborn/tests/test_utils.py::test_move_legend_input_checks",
                            "seaborn/tests/test_utils.py::test_get_dataset_names",
                            "seaborn/tests/test_utils.py::test_load_datasets",
                            "seaborn/tests/test_utils.py::test_load_dataset_string_error",
                            "seaborn/tests/test_utils.py::test_load_dataset_passed_data_error",
                            "seaborn/tests/test_utils.py::test_load_cached_datasets",
                            "seaborn/tests/test_utils.py::test_relative_luminance",
                            "seaborn/tests/test_utils.py::test_get_color_cycle[cycler0-result0]",
                            "seaborn/tests/test_utils.py::test_get_color_cycle[cycler1-result1]",
                            "seaborn/tests/test_utils.py::test_get_color_cycle[cycler2-result2]",
                            "seaborn/tests/test_utils.py::test_get_color_cycle[cycler3-result3]",
                            "seaborn/tests/test_utils.py::test_get_color_cycle[cycler4-result4]",
                            "seaborn/tests/test_utils.py::test_get_color_cycle[cycler5-result5]",
                            "seaborn/tests/test_utils.py::test_get_color_cycle[cycler6-result6]",
                            "seaborn/tests/test_utils.py::test_remove_na",
                            "seaborn/tests/test_utils.py::test_assign_default_kwargs",
                            "seaborn/tests/test_utils.py::test_draw_figure"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "psf__requests-3362.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "tests/test_requests.py::TestRequests::test_response_decode_unicode"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "tests/test_requests.py::TestRequests::test_entry_points",
                            "tests/test_requests.py::TestRequests::test_invalid_url[MissingSchema-hiwpefhipowhefopw]",
                            "tests/test_requests.py::TestRequests::test_invalid_url[InvalidSchema-localhost:3128]",
                            "tests/test_requests.py::TestRequests::test_invalid_url[InvalidSchema-localhost.localdomain:3128/]",
                            "tests/test_requests.py::TestRequests::test_invalid_url[InvalidSchema-10.122.1.1:3128/]",
                            "tests/test_requests.py::TestRequests::test_invalid_url[InvalidURL-http://]",
                            "tests/test_requests.py::TestRequests::test_basic_building",
                            "tests/test_requests.py::TestRequests::test_path_is_not_double_encoded",
                            "tests/test_requests.py::TestRequests::test_params_are_added_before_fragment[http://example.com/path#fragment-http://example.com/path?a=b#fragment]",
                            "tests/test_requests.py::TestRequests::test_params_are_added_before_fragment[http://example.com/path?key=value#fragment-http://example.com/path?key=value&a=b#fragment]",
                            "tests/test_requests.py::TestRequests::test_params_original_order_is_preserved_by_default",
                            "tests/test_requests.py::TestRequests::test_params_bytes_are_encoded",
                            "tests/test_requests.py::TestRequests::test_binary_put",
                            "tests/test_requests.py::TestRequests::test_errors[http://doesnotexist.google.com-ConnectionError]",
                            "tests/test_requests.py::TestRequests::test_errors[http://localhost:1-ConnectionError]",
                            "tests/test_requests.py::TestRequests::test_errors[http://fe80::5054:ff:fe5a:fc0-InvalidURL]",
                            "tests/test_requests.py::TestRequests::test_proxy_error",
                            "tests/test_requests.py::TestRequests::test_non_prepared_request_error",
                            "tests/test_requests.py::TestRequests::test_prepare_request_with_bytestring_url",
                            "tests/test_requests.py::TestRequests::test_links",
                            "tests/test_requests.py::TestRequests::test_cookie_parameters",
                            "tests/test_requests.py::TestRequests::test_cookie_as_dict_keeps_len",
                            "tests/test_requests.py::TestRequests::test_cookie_as_dict_keeps_items",
                            "tests/test_requests.py::TestRequests::test_cookie_as_dict_keys",
                            "tests/test_requests.py::TestRequests::test_cookie_as_dict_values",
                            "tests/test_requests.py::TestRequests::test_cookie_as_dict_items",
                            "tests/test_requests.py::TestRequests::test_cookie_duplicate_names_different_domains",
                            "tests/test_requests.py::TestRequests::test_cookie_duplicate_names_raises_cookie_conflict_error",
                            "tests/test_requests.py::TestRequests::test_response_is_iterable",
                            "tests/test_requests.py::TestRequests::test_response_chunk_size_int",
                            "tests/test_requests.py::TestRequests::test_http_error",
                            "tests/test_requests.py::TestRequests::test_transport_adapter_ordering",
                            "tests/test_requests.py::TestRequests::test_long_authinfo_in_url",
                            "tests/test_requests.py::TestRequests::test_nonhttp_schemes_dont_check_URLs",
                            "tests/test_requests.py::TestRequests::test_basic_auth_str_is_always_native",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_init[cid0]",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_init[cid1]",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_init[cid2]",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_docstring_example",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_len",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_getitem",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_fixes_649",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_delitem",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_contains",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_get",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_update",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_update_retains_unchanged",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_iter",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_equality",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_setdefault",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_lower_items",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_preserve_key_case",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_preserve_last_key_case",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_copy",
                            "tests/test_requests.py::TestMorselToCookieExpires::test_expires_valid_str",
                            "tests/test_requests.py::TestMorselToCookieExpires::test_expires_invalid_int[100-TypeError]",
                            "tests/test_requests.py::TestMorselToCookieExpires::test_expires_invalid_int[woops-ValueError]",
                            "tests/test_requests.py::TestMorselToCookieExpires::test_expires_none",
                            "tests/test_requests.py::TestMorselToCookieMaxAge::test_max_age_valid_int",
                            "tests/test_requests.py::TestMorselToCookieMaxAge::test_max_age_invalid_str",
                            "tests/test_requests.py::TestTimeout::test_connect_timeout",
                            "tests/test_requests.py::TestTimeout::test_total_timeout_connect",
                            "tests/test_requests.py::test_json_encodes_as_bytes",
                            "tests/test_requests.py::test_proxy_env_vars_override_default[http_proxy-http://example.com-socks5://proxy.com:9876]",
                            "tests/test_requests.py::test_proxy_env_vars_override_default[https_proxy-https://example.com-socks5://proxy.com:9876]",
                            "tests/test_requests.py::test_proxy_env_vars_override_default[all_proxy-http://example.com-socks5://proxy.com:9876]",
                            "tests/test_requests.py::test_proxy_env_vars_override_default[all_proxy-https://example.com-socks5://proxy.com:9876]",
                            "tests/test_requests.py::test_data_argument_accepts_tuples[data0]",
                            "tests/test_requests.py::test_data_argument_accepts_tuples[data1]",
                            "tests/test_requests.py::test_data_argument_accepts_tuples[data2]",
                            "tests/test_requests.py::test_prepared_copy[None]",
                            "tests/test_requests.py::test_prepared_copy[kwargs1]",
                            "tests/test_requests.py::test_prepared_copy[kwargs2]",
                            "tests/test_requests.py::test_prepared_copy[kwargs3]",
                            "tests/test_requests.py::test_vendor_aliases"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "sphinx-doc__sphinx-9246.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "tests/test_transforms_post_transforms.py::test_missing_reference_conditional_pending_xref"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "tests/test_transforms_post_transforms.py::test_nitpicky_warning",
                            "tests/test_transforms_post_transforms.py::test_missing_reference"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "sphinx-doc__sphinx-10137.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "tests/test_ext_extlinks.py::test_all_replacements_suggested_if_multiple_replacements_possible"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "tests/test_ext_extlinks.py::test_extlinks_detect_candidates",
                            "tests/test_ext_extlinks.py::test_replaceable_uris_emit_extlinks_warnings"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "pallets__flask-4642.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "tests/test_cli.py::test_flaskgroup_nested"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "tests/test_cli.py::test_cli_name",
                            "tests/test_cli.py::test_find_best_app",
                            "tests/test_cli.py::test_prepare_import[test-path0-test]",
                            "tests/test_cli.py::test_prepare_import[test.py-path1-test]",
                            "tests/test_cli.py::test_prepare_import[a/test-path2-test]",
                            "tests/test_cli.py::test_prepare_import[test/__init__.py-path3-test]",
                            "tests/test_cli.py::test_prepare_import[test/__init__-path4-test]",
                            "tests/test_cli.py::test_prepare_import[value5-path5-cliapp.inner1]",
                            "tests/test_cli.py::test_prepare_import[value6-path6-cliapp.inner1.inner2]",
                            "tests/test_cli.py::test_prepare_import[test.a.b-path7-test.a.b]",
                            "tests/test_cli.py::test_prepare_import[value8-path8-cliapp.app]",
                            "tests/test_cli.py::test_prepare_import[value9-path9-cliapp.message.txt]",
                            "tests/test_cli.py::test_locate_app[cliapp.app-None-testapp]",
                            "tests/test_cli.py::test_locate_app[cliapp.app-testapp-testapp]",
                            "tests/test_cli.py::test_locate_app[cliapp.factory-None-app]",
                            "tests/test_cli.py::test_locate_app[cliapp.factory-create_app-app]",
                            "tests/test_cli.py::test_locate_app[cliapp.factory-create_app()-app]",
                            "tests/test_cli.py::test_locate_app[cliapp.factory-create_app2(\"foo\",",
                            "tests/test_cli.py::test_locate_app[cliapp.factory-",
                            "tests/test_cli.py::test_locate_app_raises[notanapp.py-None]",
                            "tests/test_cli.py::test_locate_app_raises[cliapp/app-None]",
                            "tests/test_cli.py::test_locate_app_raises[cliapp.app-notanapp]",
                            "tests/test_cli.py::test_locate_app_raises[cliapp.factory-create_app2(\"foo\")]",
                            "tests/test_cli.py::test_locate_app_raises[cliapp.factory-create_app(]",
                            "tests/test_cli.py::test_locate_app_raises[cliapp.factory-no_app]",
                            "tests/test_cli.py::test_locate_app_raises[cliapp.importerrorapp-None]",
                            "tests/test_cli.py::test_locate_app_raises[cliapp.message.txt-None]",
                            "tests/test_cli.py::test_locate_app_suppress_raise",
                            "tests/test_cli.py::test_get_version",
                            "tests/test_cli.py::test_scriptinfo",
                            "tests/test_cli.py::test_lazy_load_error",
                            "tests/test_cli.py::test_with_appcontext",
                            "tests/test_cli.py::test_appgroup",
                            "tests/test_cli.py::test_flaskgroup",
                            "tests/test_cli.py::test_flaskgroup_debug[True]",
                            "tests/test_cli.py::test_flaskgroup_debug[False]",
                            "tests/test_cli.py::test_no_command_echo_loading_error",
                            "tests/test_cli.py::test_help_echo_loading_error",
                            "tests/test_cli.py::test_help_echo_exception",
                            "tests/test_cli.py::TestRoutes::test_simple",
                            "tests/test_cli.py::TestRoutes::test_all_methods",
                            "tests/test_cli.py::TestRoutes::test_no_routes",
                            "tests/test_cli.py::test_load_dotenv",
                            "tests/test_cli.py::test_dotenv_path",
                            "tests/test_cli.py::test_dotenv_optional",
                            "tests/test_cli.py::test_disable_dotenv_from_env",
                            "tests/test_cli.py::test_run_cert_path",
                            "tests/test_cli.py::test_run_cert_adhoc",
                            "tests/test_cli.py::test_run_cert_import",
                            "tests/test_cli.py::test_run_cert_no_ssl",
                            "tests/test_cli.py::test_cli_blueprints",
                            "tests/test_cli.py::test_cli_empty"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "sympy__sympy-24909.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "test_prefix_operations"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "test_prefix_unit",
                            "test_bases"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "sympy__sympy-14817.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "test_MatrixSymbol_printing"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "test_pretty_ascii_str",
                            "test_pretty_unicode_str",
                            "test_upretty_greek",
                            "test_upretty_multiindex",
                            "test_upretty_sub_super",
                            "test_upretty_subs_missing_in_24",
                            "test_upretty_modifiers",
                            "test_pretty_Cycle",
                            "test_pretty_basic",
                            "test_negative_fractions",
                            "test_issue_5524",
                            "test_pretty_ordering",
                            "test_EulerGamma",
                            "test_GoldenRatio",
                            "test_pretty_relational",
                            "test_Assignment",
                            "test_AugmentedAssignment",
                            "test_issue_7117",
                            "test_pretty_rational",
                            "test_pretty_functions",
                            "test_pretty_sqrt",
                            "test_pretty_sqrt_char_knob",
                            "test_pretty_sqrt_longsymbol_no_sqrt_char",
                            "test_pretty_KroneckerDelta",
                            "test_pretty_product",
                            "test_pretty_lambda",
                            "test_pretty_order",
                            "test_pretty_derivatives",
                            "test_pretty_integrals",
                            "test_pretty_matrix",
                            "test_pretty_ndim_arrays",
                            "test_tensor_TensorProduct",
                            "test_diffgeom_print_WedgeProduct",
                            "test_Adjoint",
                            "test_pretty_Trace_issue_9044",
                            "test_MatrixExpressions",
                            "test_pretty_dotproduct",
                            "test_pretty_piecewise",
                            "test_pretty_ITE",
                            "test_pretty_seq",
                            "test_any_object_in_sequence",
                            "test_print_builtin_set",
                            "test_pretty_sets",
                            "test_pretty_SetExpr",
                            "test_pretty_ImageSet",
                            "test_pretty_ConditionSet",
                            "test_pretty_ComplexRegion",
                            "test_pretty_Union_issue_10414",
                            "test_pretty_Intersection_issue_10414",
                            "test_ProductSet_paranthesis",
                            "test_ProductSet_prod_char_issue_10413",
                            "test_pretty_sequences",
                            "test_pretty_FourierSeries",
                            "test_pretty_FormalPowerSeries",
                            "test_pretty_limits",
                            "test_pretty_ComplexRootOf",
                            "test_pretty_RootSum",
                            "test_GroebnerBasis",
                            "test_pretty_Boolean",
                            "test_pretty_Domain",
                            "test_pretty_prec",
                            "test_pprint",
                            "test_pretty_class",
                            "test_pretty_no_wrap_line",
                            "test_settings",
                            "test_pretty_sum",
                            "test_units",
                            "test_pretty_Subs",
                            "test_gammas",
                            "test_beta",
                            "test_function_subclass_different_name",
                            "test_SingularityFunction",
                            "test_deltas",
                            "test_hyper",
                            "test_meijerg",
                            "test_noncommutative",
                            "test_pretty_special_functions",
                            "test_expint",
                            "test_elliptic_functions",
                            "test_RandomDomain",
                            "test_PrettyPoly",
                            "test_issue_6285",
                            "test_issue_6359",
                            "test_issue_6739",
                            "test_complicated_symbol_unchanged",
                            "test_categories",
                            "test_PrettyModules",
                            "test_QuotientRing",
                            "test_Homomorphism",
                            "test_Tr",
                            "test_pretty_Add",
                            "test_issue_7179",
                            "test_issue_7180",
                            "test_pretty_Complement",
                            "test_pretty_SymmetricDifference",
                            "test_pretty_Contains",
                            "test_issue_4335",
                            "test_issue_6324",
                            "test_issue_7927",
                            "test_issue_6134",
                            "test_issue_9877",
                            "test_issue_13651",
                            "test_pretty_primenu",
                            "test_pretty_primeomega",
                            "test_pretty_Mod",
                            "test_issue_11801",
                            "test_pretty_UnevaluatedExpr",
                            "test_issue_10472",
                            "test_MatrixElement_printing",
                            "test_issue_12675",
                            "test_degree_printing"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "psf__requests-5087.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "tests/test_lowlevel.py::test_response_content_retains_error"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "tests/test_lowlevel.py::test_chunked_upload",
                            "tests/test_lowlevel.py::test_digestauth_401_count_reset_on_redirect",
                            "tests/test_lowlevel.py::test_digestauth_401_only_sent_once",
                            "tests/test_lowlevel.py::test_digestauth_only_on_4xx",
                            "tests/test_lowlevel.py::test_redirect_rfc1808_to_non_ascii_location",
                            "tests/test_lowlevel.py::test_fragment_not_sent_with_request",
                            "tests/test_lowlevel.py::test_fragment_update_on_redirect"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "psf__requests-1944.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "test_requests.py::RequestsTestCase::test_BASICAUTH_TUPLE_HTTP_200_OK_GET",
                            "test_requests.py::RequestsTestCase::test_DIGESTAUTH_WRONG_HTTP_401_GET",
                            "test_requests.py::RequestsTestCase::test_auth_is_retained_for_redirect_on_host",
                            "test_requests.py::RequestsTestCase::test_redirect_with_wrong_gzipped_header",
                            "test_requests.py::RequestsTestCase::test_session_pickling"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "test_requests.py::RequestsTestCase::test_DIGESTAUTH_QUOTES_QOP_VALUE",
                            "test_requests.py::RequestsTestCase::test_DIGEST_AUTH_RETURNS_COOKIE",
                            "test_requests.py::RequestsTestCase::test_DIGEST_AUTH_SETS_SESSION_COOKIES",
                            "test_requests.py::RequestsTestCase::test_DIGEST_STREAM",
                            "test_requests.py::RequestsTestCase::test_HTTP_200_OK_GET_ALTERNATIVE",
                            "test_requests.py::RequestsTestCase::test_HTTP_200_OK_GET_WITH_MIXED_PARAMS",
                            "test_requests.py::RequestsTestCase::test_HTTP_200_OK_GET_WITH_PARAMS",
                            "test_requests.py::RequestsTestCase::test_HTTP_200_OK_HEAD",
                            "test_requests.py::RequestsTestCase::test_HTTP_200_OK_PUT",
                            "test_requests.py::RequestsTestCase::test_HTTP_302_ALLOW_REDIRECT_GET",
                            "test_requests.py::RequestsTestCase::test_POSTBIN_GET_POST_FILES",
                            "test_requests.py::RequestsTestCase::test_POSTBIN_GET_POST_FILES_WITH_DATA",
                            "test_requests.py::RequestsTestCase::test_auth_is_stripped_on_redirect_off_host",
                            "test_requests.py::RequestsTestCase::test_autoset_header_values_are_native",
                            "test_requests.py::RequestsTestCase::test_basic_building",
                            "test_requests.py::RequestsTestCase::test_basicauth_with_netrc",
                            "test_requests.py::RequestsTestCase::test_can_send_nonstring_objects_with_files",
                            "test_requests.py::RequestsTestCase::test_cannot_send_unprepared_requests",
                            "test_requests.py::RequestsTestCase::test_cookie_as_dict_items",
                            "test_requests.py::RequestsTestCase::test_cookie_as_dict_keeps_items",
                            "test_requests.py::RequestsTestCase::test_cookie_as_dict_keeps_len",
                            "test_requests.py::RequestsTestCase::test_cookie_as_dict_keys",
                            "test_requests.py::RequestsTestCase::test_cookie_as_dict_values",
                            "test_requests.py::RequestsTestCase::test_cookie_parameters",
                            "test_requests.py::RequestsTestCase::test_cookie_persists_via_api",
                            "test_requests.py::RequestsTestCase::test_cookie_quote_wrapped",
                            "test_requests.py::RequestsTestCase::test_cookie_removed_on_expire",
                            "test_requests.py::RequestsTestCase::test_cookie_sent_on_redirect",
                            "test_requests.py::RequestsTestCase::test_custom_content_type",
                            "test_requests.py::RequestsTestCase::test_decompress_gzip",
                            "test_requests.py::RequestsTestCase::test_different_encodings_dont_break_post",
                            "test_requests.py::RequestsTestCase::test_entry_points",
                            "test_requests.py::RequestsTestCase::test_fixes_1329",
                            "test_requests.py::RequestsTestCase::test_generic_cookiejar_works",
                            "test_requests.py::RequestsTestCase::test_get_auth_from_url",
                            "test_requests.py::RequestsTestCase::test_get_auth_from_url_encoded_hashes",
                            "test_requests.py::RequestsTestCase::test_get_auth_from_url_encoded_spaces",
                            "test_requests.py::RequestsTestCase::test_get_auth_from_url_not_encoded_spaces",
                            "test_requests.py::RequestsTestCase::test_get_auth_from_url_percent_chars",
                            "test_requests.py::RequestsTestCase::test_header_keys_are_native",
                            "test_requests.py::RequestsTestCase::test_header_remove_is_case_insensitive",
                            "test_requests.py::RequestsTestCase::test_headers_on_session_with_None_are_not_sent",
                            "test_requests.py::RequestsTestCase::test_history_is_always_a_list",
                            "test_requests.py::RequestsTestCase::test_hook_receives_request_arguments",
                            "test_requests.py::RequestsTestCase::test_http_error",
                            "test_requests.py::RequestsTestCase::test_invalid_url",
                            "test_requests.py::RequestsTestCase::test_links",
                            "test_requests.py::RequestsTestCase::test_long_authinfo_in_url",
                            "test_requests.py::RequestsTestCase::test_manual_redirect_with_partial_body_read",
                            "test_requests.py::RequestsTestCase::test_mixed_case_scheme_acceptable",
                            "test_requests.py::RequestsTestCase::test_no_content_length",
                            "test_requests.py::RequestsTestCase::test_oddball_schemes_dont_check_URLs",
                            "test_requests.py::RequestsTestCase::test_params_are_added_before_fragment",
                            "test_requests.py::RequestsTestCase::test_params_are_merged_case_sensitive",
                            "test_requests.py::RequestsTestCase::test_path_is_not_double_encoded",
                            "test_requests.py::RequestsTestCase::test_prepared_from_session",
                            "test_requests.py::RequestsTestCase::test_prepared_request_hook",
                            "test_requests.py::RequestsTestCase::test_pyopenssl_redirect",
                            "test_requests.py::RequestsTestCase::test_request_and_response_are_pickleable",
                            "test_requests.py::RequestsTestCase::test_request_cookie_overrides_session_cookie",
                            "test_requests.py::RequestsTestCase::test_request_cookies_not_persisted",
                            "test_requests.py::RequestsTestCase::test_request_ok_set",
                            "test_requests.py::RequestsTestCase::test_requests_in_history_are_not_overridden",
                            "test_requests.py::RequestsTestCase::test_response_decode_unicode",
                            "test_requests.py::RequestsTestCase::test_response_is_iterable",
                            "test_requests.py::RequestsTestCase::test_session_hooks_are_overriden_by_request_hooks",
                            "test_requests.py::RequestsTestCase::test_session_hooks_are_used_with_no_request_hooks",
                            "test_requests.py::RequestsTestCase::test_set_cookie_on_301",
                            "test_requests.py::RequestsTestCase::test_status_raising",
                            "test_requests.py::RequestsTestCase::test_time_elapsed_blank",
                            "test_requests.py::RequestsTestCase::test_transport_adapter_ordering",
                            "test_requests.py::RequestsTestCase::test_unicode_get",
                            "test_requests.py::RequestsTestCase::test_unicode_header_name",
                            "test_requests.py::RequestsTestCase::test_unicode_method_name",
                            "test_requests.py::RequestsTestCase::test_unicode_multipart_post",
                            "test_requests.py::RequestsTestCase::test_unicode_multipart_post_fieldnames",
                            "test_requests.py::RequestsTestCase::test_uppercase_scheme_redirect",
                            "test_requests.py::RequestsTestCase::test_urlencoded_get_query_multivalued_param",
                            "test_requests.py::RequestsTestCase::test_user_agent_transfers",
                            "test_requests.py::TestContentEncodingDetection::test_html4_pragma",
                            "test_requests.py::TestContentEncodingDetection::test_html_charset",
                            "test_requests.py::TestContentEncodingDetection::test_none",
                            "test_requests.py::TestContentEncodingDetection::test_precedence",
                            "test_requests.py::TestContentEncodingDetection::test_xhtml_pragma",
                            "test_requests.py::TestContentEncodingDetection::test_xml",
                            "test_requests.py::TestCaseInsensitiveDict::test_contains",
                            "test_requests.py::TestCaseInsensitiveDict::test_delitem",
                            "test_requests.py::TestCaseInsensitiveDict::test_docstring_example",
                            "test_requests.py::TestCaseInsensitiveDict::test_equality",
                            "test_requests.py::TestCaseInsensitiveDict::test_fixes_649",
                            "test_requests.py::TestCaseInsensitiveDict::test_get",
                            "test_requests.py::TestCaseInsensitiveDict::test_getitem",
                            "test_requests.py::TestCaseInsensitiveDict::test_iter",
                            "test_requests.py::TestCaseInsensitiveDict::test_iterable_init",
                            "test_requests.py::TestCaseInsensitiveDict::test_kwargs_init",
                            "test_requests.py::TestCaseInsensitiveDict::test_len",
                            "test_requests.py::TestCaseInsensitiveDict::test_lower_items",
                            "test_requests.py::TestCaseInsensitiveDict::test_mapping_init",
                            "test_requests.py::TestCaseInsensitiveDict::test_preserve_key_case",
                            "test_requests.py::TestCaseInsensitiveDict::test_preserve_last_key_case",
                            "test_requests.py::TestCaseInsensitiveDict::test_setdefault",
                            "test_requests.py::TestCaseInsensitiveDict::test_update",
                            "test_requests.py::TestCaseInsensitiveDict::test_update_retains_unchanged",
                            "test_requests.py::UtilsTestCase::test_address_in_network",
                            "test_requests.py::UtilsTestCase::test_dotted_netmask",
                            "test_requests.py::UtilsTestCase::test_get_auth_from_url",
                            "test_requests.py::UtilsTestCase::test_get_environ_proxies",
                            "test_requests.py::UtilsTestCase::test_get_environ_proxies_ip_ranges",
                            "test_requests.py::UtilsTestCase::test_is_ipv4_address",
                            "test_requests.py::UtilsTestCase::test_is_valid_cidr",
                            "test_requests.py::UtilsTestCase::test_super_len_io_streams",
                            "test_requests.py::TestMorselToCookieExpires::test_expires_invalid_int",
                            "test_requests.py::TestMorselToCookieExpires::test_expires_invalid_str",
                            "test_requests.py::TestMorselToCookieExpires::test_expires_none",
                            "test_requests.py::TestMorselToCookieExpires::test_expires_valid_str",
                            "test_requests.py::TestMorselToCookieMaxAge::test_max_age_invalid_str",
                            "test_requests.py::TestMorselToCookieMaxAge::test_max_age_valid_int",
                            "test_requests.py::TestTimeout::test_stream_timeout",
                            "test_requests.py::TestRedirects::test_requests_are_updated_each_time",
                            "test_requests.py::test_data_argument_accepts_tuples"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "sphinx-doc__sphinx-10819.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "tests/test_search.py::test_IndexBuilder"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "tests/test_search.py::test_objects_are_escaped",
                            "tests/test_search.py::test_meta_keys_are_handled_for_language_en",
                            "tests/test_search.py::test_meta_keys_are_handled_for_language_de",
                            "tests/test_search.py::test_stemmer_does_not_remove_short_words",
                            "tests/test_search.py::test_stemmer",
                            "tests/test_search.py::test_term_in_heading_and_section",
                            "tests/test_search.py::test_term_in_raw_directive",
                            "tests/test_search.py::test_IndexBuilder_lookup",
                            "tests/test_search.py::test_search_index_gen_zh",
                            "tests/test_search.py::test_nosearch"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "django__django-17087.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "test_serialize_nested_class_method (migrations.test_writer.WriterTests.test_serialize_nested_class_method)"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "test_args_kwargs_signature (migrations.test_writer.OperationWriterTests.test_args_kwargs_signature)",
                            "test_args_signature (migrations.test_writer.OperationWriterTests.test_args_signature)",
                            "test_empty_signature (migrations.test_writer.OperationWriterTests.test_empty_signature)",
                            "test_expand_args_signature (migrations.test_writer.OperationWriterTests.test_expand_args_signature)",
                            "test_kwargs_signature (migrations.test_writer.OperationWriterTests.test_kwargs_signature)",
                            "test_multiline_args_signature (migrations.test_writer.OperationWriterTests.test_multiline_args_signature)",
                            "test_nested_args_signature (migrations.test_writer.OperationWriterTests.test_nested_args_signature)",
                            "test_nested_operation_expand_args_signature (migrations.test_writer.OperationWriterTests.test_nested_operation_expand_args_signature)",
                            "test_custom_operation (migrations.test_writer.WriterTests.test_custom_operation)",
                            "test_deconstruct_class_arguments (migrations.test_writer.WriterTests.test_deconstruct_class_arguments)",
                            "Test comments at top of file.",
                            "test_migration_path (migrations.test_writer.WriterTests.test_migration_path)",
                            "django.db.models shouldn't be imported if unused.",
                            "test_register_non_serializer (migrations.test_writer.WriterTests.test_register_non_serializer)",
                            "test_register_serializer (migrations.test_writer.WriterTests.test_register_serializer)",
                            "test_serialize_builtin_types (migrations.test_writer.WriterTests.test_serialize_builtin_types)",
                            "test_serialize_builtins (migrations.test_writer.WriterTests.test_serialize_builtins)",
                            "test_serialize_choices (migrations.test_writer.WriterTests.test_serialize_choices)",
                            "Ticket #22943: Test serialization of class-based validators, including",
                            "test_serialize_collections (migrations.test_writer.WriterTests.test_serialize_collections)",
                            "Make sure compiled regex can be serialized.",
                            "test_serialize_complex_func_index (migrations.test_writer.WriterTests.test_serialize_complex_func_index)",
                            "test_serialize_constants (migrations.test_writer.WriterTests.test_serialize_constants)",
                            "test_serialize_datetime (migrations.test_writer.WriterTests.test_serialize_datetime)",
                            "Ticket #22679: makemigrations generates invalid code for (an empty",
                            "test_serialize_enum_flags (migrations.test_writer.WriterTests.test_serialize_enum_flags)",
                            "test_serialize_enums (migrations.test_writer.WriterTests.test_serialize_enums)",
                            "test_serialize_fields (migrations.test_writer.WriterTests.test_serialize_fields)",
                            "test_serialize_frozensets (migrations.test_writer.WriterTests.test_serialize_frozensets)",
                            "test_serialize_functions (migrations.test_writer.WriterTests.test_serialize_functions)",
                            "test_serialize_functools_partial (migrations.test_writer.WriterTests.test_serialize_functools_partial)",
                            "test_serialize_functools_partialmethod (migrations.test_writer.WriterTests.test_serialize_functools_partialmethod)",
                            "test_serialize_iterators (migrations.test_writer.WriterTests.test_serialize_iterators)",
                            "test_serialize_lazy_objects (migrations.test_writer.WriterTests.test_serialize_lazy_objects)",
                            "A reference in a local scope can't be serialized.",
                            "test_serialize_managers (migrations.test_writer.WriterTests.test_serialize_managers)",
                            "test_serialize_multiline_strings (migrations.test_writer.WriterTests.test_serialize_multiline_strings)",
                            "test_serialize_nested_class (migrations.test_writer.WriterTests.test_serialize_nested_class)",
                            "test_serialize_numbers (migrations.test_writer.WriterTests.test_serialize_numbers)",
                            "test_serialize_path_like (migrations.test_writer.WriterTests.test_serialize_path_like)",
                            "test_serialize_pathlib (migrations.test_writer.WriterTests.test_serialize_pathlib)",
                            "test_serialize_range (migrations.test_writer.WriterTests.test_serialize_range)",
                            "test_serialize_set (migrations.test_writer.WriterTests.test_serialize_set)",
                            "test_serialize_settings (migrations.test_writer.WriterTests.test_serialize_settings)",
                            "test_serialize_strings (migrations.test_writer.WriterTests.test_serialize_strings)",
                            "test_serialize_timedelta (migrations.test_writer.WriterTests.test_serialize_timedelta)",
                            "test_serialize_type_model (migrations.test_writer.WriterTests.test_serialize_type_model)",
                            "test_serialize_type_none (migrations.test_writer.WriterTests.test_serialize_type_none)",
                            "An unbound method used within a class body can be serialized.",
                            "test_serialize_uuid (migrations.test_writer.WriterTests.test_serialize_uuid)",
                            "Tests serializing a simple migration.",
                            "test_sorted_dependencies (migrations.test_writer.WriterTests.test_sorted_dependencies)",
                            "#24155 - Tests ordering of imports."
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "psf__requests-2678.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "test_requests.py::RequestsTestCase::test_HTTP_302_ALLOW_REDIRECT_GET",
                            "test_requests.py::RequestsTestCase::test_auth_is_retained_for_redirect_on_host",
                            "test_requests.py::RequestsTestCase::test_auth_is_stripped_on_redirect_off_host",
                            "test_requests.py::RequestsTestCase::test_different_encodings_dont_break_post",
                            "test_requests.py::RequestsTestCase::test_prepared_from_session",
                            "test_requests.py::RequestsTestCase::test_user_agent_transfers",
                            "test_requests.py::test_urllib3_pool_connection_closed"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "test_requests.py::RequestsTestCase::test_BASICAUTH_TUPLE_HTTP_200_OK_GET",
                            "test_requests.py::RequestsTestCase::test_DIGESTAUTH_QUOTES_QOP_VALUE",
                            "test_requests.py::RequestsTestCase::test_DIGESTAUTH_WRONG_HTTP_401_GET",
                            "test_requests.py::RequestsTestCase::test_DIGEST_AUTH_RETURNS_COOKIE",
                            "test_requests.py::RequestsTestCase::test_DIGEST_AUTH_SETS_SESSION_COOKIES",
                            "test_requests.py::RequestsTestCase::test_DIGEST_HTTP_200_OK_GET",
                            "test_requests.py::RequestsTestCase::test_DIGEST_STREAM",
                            "test_requests.py::RequestsTestCase::test_HTTP_200_OK_GET_ALTERNATIVE",
                            "test_requests.py::RequestsTestCase::test_HTTP_200_OK_GET_WITH_MIXED_PARAMS",
                            "test_requests.py::RequestsTestCase::test_HTTP_200_OK_GET_WITH_PARAMS",
                            "test_requests.py::RequestsTestCase::test_HTTP_200_OK_PUT",
                            "test_requests.py::RequestsTestCase::test_LocationParseError",
                            "test_requests.py::RequestsTestCase::test_POSTBIN_GET_POST_FILES",
                            "test_requests.py::RequestsTestCase::test_POSTBIN_GET_POST_FILES_WITH_DATA",
                            "test_requests.py::RequestsTestCase::test_autoset_header_values_are_native",
                            "test_requests.py::RequestsTestCase::test_basic_auth_str_is_always_native",
                            "test_requests.py::RequestsTestCase::test_basic_building",
                            "test_requests.py::RequestsTestCase::test_basicauth_with_netrc",
                            "test_requests.py::RequestsTestCase::test_can_send_bytes_bytearray_objects_with_files",
                            "test_requests.py::RequestsTestCase::test_can_send_file_object_with_non_string_filename",
                            "test_requests.py::RequestsTestCase::test_can_send_nonstring_objects_with_files",
                            "test_requests.py::RequestsTestCase::test_cannot_send_unprepared_requests",
                            "test_requests.py::RequestsTestCase::test_connection_error_invalid_domain",
                            "test_requests.py::RequestsTestCase::test_connection_error_invalid_port",
                            "test_requests.py::RequestsTestCase::test_cookie_as_dict_items",
                            "test_requests.py::RequestsTestCase::test_cookie_as_dict_keeps_items",
                            "test_requests.py::RequestsTestCase::test_cookie_as_dict_keeps_len",
                            "test_requests.py::RequestsTestCase::test_cookie_as_dict_keys",
                            "test_requests.py::RequestsTestCase::test_cookie_as_dict_values",
                            "test_requests.py::RequestsTestCase::test_cookie_parameters",
                            "test_requests.py::RequestsTestCase::test_cookie_persists_via_api",
                            "test_requests.py::RequestsTestCase::test_cookie_quote_wrapped",
                            "test_requests.py::RequestsTestCase::test_cookie_removed_on_expire",
                            "test_requests.py::RequestsTestCase::test_cookie_sent_on_redirect",
                            "test_requests.py::RequestsTestCase::test_custom_content_type",
                            "test_requests.py::RequestsTestCase::test_decompress_gzip",
                            "test_requests.py::RequestsTestCase::test_entry_points",
                            "test_requests.py::RequestsTestCase::test_fixes_1329",
                            "test_requests.py::RequestsTestCase::test_generic_cookiejar_works",
                            "test_requests.py::RequestsTestCase::test_get_auth_from_url",
                            "test_requests.py::RequestsTestCase::test_get_auth_from_url_encoded_hashes",
                            "test_requests.py::RequestsTestCase::test_get_auth_from_url_encoded_spaces",
                            "test_requests.py::RequestsTestCase::test_get_auth_from_url_not_encoded_spaces",
                            "test_requests.py::RequestsTestCase::test_get_auth_from_url_percent_chars",
                            "test_requests.py::RequestsTestCase::test_header_keys_are_native",
                            "test_requests.py::RequestsTestCase::test_history_is_always_a_list",
                            "test_requests.py::RequestsTestCase::test_hook_receives_request_arguments",
                            "test_requests.py::RequestsTestCase::test_http_error",
                            "test_requests.py::RequestsTestCase::test_invalid_url",
                            "test_requests.py::RequestsTestCase::test_json_param_post_content_type_works",
                            "test_requests.py::RequestsTestCase::test_links",
                            "test_requests.py::RequestsTestCase::test_long_authinfo_in_url",
                            "test_requests.py::RequestsTestCase::test_manual_redirect_with_partial_body_read",
                            "test_requests.py::RequestsTestCase::test_mixed_case_scheme_acceptable",
                            "test_requests.py::RequestsTestCase::test_no_content_length",
                            "test_requests.py::RequestsTestCase::test_nonhttp_schemes_dont_check_URLs",
                            "test_requests.py::RequestsTestCase::test_override_content_length",
                            "test_requests.py::RequestsTestCase::test_param_cookiejar_works",
                            "test_requests.py::RequestsTestCase::test_params_are_added_before_fragment",
                            "test_requests.py::RequestsTestCase::test_params_are_merged_case_sensitive",
                            "test_requests.py::RequestsTestCase::test_params_original_order_is_preserved_by_default",
                            "test_requests.py::RequestsTestCase::test_path_is_not_double_encoded",
                            "test_requests.py::RequestsTestCase::test_prepare_request_with_bytestring_url",
                            "test_requests.py::RequestsTestCase::test_prepared_request_hook",
                            "test_requests.py::RequestsTestCase::test_pyopenssl_redirect",
                            "test_requests.py::RequestsTestCase::test_redirect_with_wrong_gzipped_header",
                            "test_requests.py::RequestsTestCase::test_request_and_response_are_pickleable",
                            "test_requests.py::RequestsTestCase::test_request_cookie_overrides_session_cookie",
                            "test_requests.py::RequestsTestCase::test_request_cookies_not_persisted",
                            "test_requests.py::RequestsTestCase::test_request_ok_set",
                            "test_requests.py::RequestsTestCase::test_requests_history_is_saved",
                            "test_requests.py::RequestsTestCase::test_requests_in_history_are_not_overridden",
                            "test_requests.py::RequestsTestCase::test_response_decode_unicode",
                            "test_requests.py::RequestsTestCase::test_response_is_iterable",
                            "test_requests.py::RequestsTestCase::test_response_iter_lines",
                            "test_requests.py::RequestsTestCase::test_session_hooks_are_overriden_by_request_hooks",
                            "test_requests.py::RequestsTestCase::test_session_hooks_are_used_with_no_request_hooks",
                            "test_requests.py::RequestsTestCase::test_session_pickling",
                            "test_requests.py::RequestsTestCase::test_set_cookie_on_301",
                            "test_requests.py::RequestsTestCase::test_status_raising",
                            "test_requests.py::RequestsTestCase::test_time_elapsed_blank",
                            "test_requests.py::RequestsTestCase::test_transport_adapter_ordering",
                            "test_requests.py::RequestsTestCase::test_unconsumed_session_response_closes_connection",
                            "test_requests.py::RequestsTestCase::test_unicode_get",
                            "test_requests.py::RequestsTestCase::test_unicode_header_name",
                            "test_requests.py::RequestsTestCase::test_unicode_method_name",
                            "test_requests.py::RequestsTestCase::test_unicode_multipart_post",
                            "test_requests.py::RequestsTestCase::test_unicode_multipart_post_fieldnames",
                            "test_requests.py::RequestsTestCase::test_uppercase_scheme_redirect",
                            "test_requests.py::RequestsTestCase::test_urlencoded_get_query_multivalued_param",
                            "test_requests.py::TestContentEncodingDetection::test_html4_pragma",
                            "test_requests.py::TestContentEncodingDetection::test_html_charset",
                            "test_requests.py::TestContentEncodingDetection::test_none",
                            "test_requests.py::TestContentEncodingDetection::test_precedence",
                            "test_requests.py::TestContentEncodingDetection::test_xhtml_pragma",
                            "test_requests.py::TestContentEncodingDetection::test_xml",
                            "test_requests.py::TestCaseInsensitiveDict::test_contains",
                            "test_requests.py::TestCaseInsensitiveDict::test_copy",
                            "test_requests.py::TestCaseInsensitiveDict::test_delitem",
                            "test_requests.py::TestCaseInsensitiveDict::test_docstring_example",
                            "test_requests.py::TestCaseInsensitiveDict::test_equality",
                            "test_requests.py::TestCaseInsensitiveDict::test_fixes_649",
                            "test_requests.py::TestCaseInsensitiveDict::test_get",
                            "test_requests.py::TestCaseInsensitiveDict::test_getitem",
                            "test_requests.py::TestCaseInsensitiveDict::test_iter",
                            "test_requests.py::TestCaseInsensitiveDict::test_iterable_init",
                            "test_requests.py::TestCaseInsensitiveDict::test_kwargs_init",
                            "test_requests.py::TestCaseInsensitiveDict::test_len",
                            "test_requests.py::TestCaseInsensitiveDict::test_lower_items",
                            "test_requests.py::TestCaseInsensitiveDict::test_mapping_init",
                            "test_requests.py::TestCaseInsensitiveDict::test_preserve_key_case",
                            "test_requests.py::TestCaseInsensitiveDict::test_preserve_last_key_case",
                            "test_requests.py::TestCaseInsensitiveDict::test_setdefault",
                            "test_requests.py::TestCaseInsensitiveDict::test_update",
                            "test_requests.py::TestCaseInsensitiveDict::test_update_retains_unchanged",
                            "test_requests.py::UtilsTestCase::test_address_in_network",
                            "test_requests.py::UtilsTestCase::test_dotted_netmask",
                            "test_requests.py::UtilsTestCase::test_get_auth_from_url",
                            "test_requests.py::UtilsTestCase::test_get_environ_proxies",
                            "test_requests.py::UtilsTestCase::test_get_environ_proxies_ip_ranges",
                            "test_requests.py::UtilsTestCase::test_guess_filename_when_filename_is_an_int",
                            "test_requests.py::UtilsTestCase::test_guess_filename_when_int",
                            "test_requests.py::UtilsTestCase::test_guess_filename_with_file_like_obj",
                            "test_requests.py::UtilsTestCase::test_guess_filename_with_unicode_name",
                            "test_requests.py::UtilsTestCase::test_is_ipv4_address",
                            "test_requests.py::UtilsTestCase::test_is_valid_cidr",
                            "test_requests.py::UtilsTestCase::test_requote_uri_properly_requotes",
                            "test_requests.py::UtilsTestCase::test_requote_uri_with_unquoted_percents",
                            "test_requests.py::UtilsTestCase::test_super_len_io_streams",
                            "test_requests.py::TestMorselToCookieExpires::test_expires_invalid_int",
                            "test_requests.py::TestMorselToCookieExpires::test_expires_invalid_str",
                            "test_requests.py::TestMorselToCookieExpires::test_expires_none",
                            "test_requests.py::TestMorselToCookieExpires::test_expires_valid_str",
                            "test_requests.py::TestMorselToCookieMaxAge::test_max_age_invalid_str",
                            "test_requests.py::TestMorselToCookieMaxAge::test_max_age_valid_int",
                            "test_requests.py::TestTimeout::test_stream_timeout",
                            "test_requests.py::TestTimeout::test_invalid_timeout",
                            "test_requests.py::TestTimeout::test_none_timeout",
                            "test_requests.py::TestTimeout::test_read_timeout",
                            "test_requests.py::TestTimeout::test_connect_timeout",
                            "test_requests.py::TestTimeout::test_total_timeout_connect",
                            "test_requests.py::TestRedirects::test_requests_are_updated_each_time",
                            "test_requests.py::test_data_argument_accepts_tuples",
                            "test_requests.py::test_prepared_request_empty_copy",
                            "test_requests.py::test_prepared_request_no_cookies_copy",
                            "test_requests.py::test_prepared_request_complete_copy",
                            "test_requests.py::test_prepare_unicode_url",
                            "test_requests.py::test_urllib3_retries",
                            "test_requests.py::test_vendor_aliases"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "scikit-learn__scikit-learn-12784.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "sklearn/compose/tests/test_column_transformer.py::test_make_column_transformer_pandas",
                            "sklearn/utils/tests/test_validation.py::test_check_array_series"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "sklearn/compose/tests/test_column_transformer.py::test_column_transformer",
                            "sklearn/compose/tests/test_column_transformer.py::test_column_transformer_dataframe",
                            "sklearn/compose/tests/test_column_transformer.py::test_column_transformer_empty_columns[list-pandas]",
                            "sklearn/compose/tests/test_column_transformer.py::test_column_transformer_empty_columns[list-numpy]",
                            "sklearn/compose/tests/test_column_transformer.py::test_column_transformer_empty_columns[bool-pandas]",
                            "sklearn/compose/tests/test_column_transformer.py::test_column_transformer_empty_columns[bool-numpy]",
                            "sklearn/compose/tests/test_column_transformer.py::test_column_transformer_sparse_array",
                            "sklearn/compose/tests/test_column_transformer.py::test_column_transformer_list",
                            "sklearn/compose/tests/test_column_transformer.py::test_column_transformer_sparse_stacking",
                            "sklearn/compose/tests/test_column_transformer.py::test_column_transformer_mixed_cols_sparse",
                            "sklearn/compose/tests/test_column_transformer.py::test_column_transformer_sparse_threshold",
                            "sklearn/compose/tests/test_column_transformer.py::test_column_transformer_error_msg_1D",
                            "sklearn/compose/tests/test_column_transformer.py::test_2D_transformer_output",
                            "sklearn/compose/tests/test_column_transformer.py::test_2D_transformer_output_pandas",
                            "sklearn/compose/tests/test_column_transformer.py::test_column_transformer_invalid_columns[drop]",
                            "sklearn/compose/tests/test_column_transformer.py::test_column_transformer_invalid_columns[passthrough]",
                            "sklearn/compose/tests/test_column_transformer.py::test_column_transformer_invalid_transformer",
                            "sklearn/compose/tests/test_column_transformer.py::test_make_column_transformer",
                            "sklearn/compose/tests/test_column_transformer.py::test_make_column_transformer_kwargs",
                            "sklearn/compose/tests/test_column_transformer.py::test_make_column_transformer_remainder_transformer",
                            "sklearn/compose/tests/test_column_transformer.py::test_column_transformer_get_set_params",
                            "sklearn/compose/tests/test_column_transformer.py::test_column_transformer_named_estimators",
                            "sklearn/compose/tests/test_column_transformer.py::test_column_transformer_cloning",
                            "sklearn/compose/tests/test_column_transformer.py::test_column_transformer_get_feature_names",
                            "sklearn/compose/tests/test_column_transformer.py::test_column_transformer_special_strings",
                            "sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder",
                            "sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_numpy[key0]",
                            "sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_numpy[key1]",
                            "sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_numpy[key2]",
                            "sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_numpy[key3]",
                            "sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_pandas[key0]",
                            "sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_pandas[key1]",
                            "sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_pandas[key2]",
                            "sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_pandas[key3]",
                            "sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_pandas[pd-index]",
                            "sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_pandas[key5]",
                            "sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_pandas[key6]",
                            "sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_pandas[key7]",
                            "sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_pandas[key8]",
                            "sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_transformer[key0]",
                            "sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_transformer[key1]",
                            "sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_transformer[key2]",
                            "sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_transformer[key3]",
                            "sklearn/compose/tests/test_column_transformer.py::test_column_transformer_no_remaining_remainder_transformer",
                            "sklearn/compose/tests/test_column_transformer.py::test_column_transformer_drops_all_remainder_transformer",
                            "sklearn/compose/tests/test_column_transformer.py::test_column_transformer_sparse_remainder_transformer",
                            "sklearn/compose/tests/test_column_transformer.py::test_column_transformer_drop_all_sparse_remainder_transformer",
                            "sklearn/compose/tests/test_column_transformer.py::test_column_transformer_get_set_params_with_remainder",
                            "sklearn/compose/tests/test_column_transformer.py::test_column_transformer_no_estimators",
                            "sklearn/compose/tests/test_column_transformer.py::test_column_transformer_no_estimators_set_params",
                            "sklearn/compose/tests/test_column_transformer.py::test_column_transformer_callable_specifier",
                            "sklearn/linear_model/tests/test_logistic.py::test_predict_2_classes",
                            "sklearn/linear_model/tests/test_logistic.py::test_error",
                            "sklearn/linear_model/tests/test_logistic.py::test_logistic_cv_mock_scorer",
                            "sklearn/linear_model/tests/test_logistic.py::test_logistic_cv_score_does_not_warn_by_default",
                            "sklearn/linear_model/tests/test_logistic.py::test_lr_liblinear_warning",
                            "sklearn/linear_model/tests/test_logistic.py::test_predict_3_classes",
                            "sklearn/linear_model/tests/test_logistic.py::test_predict_iris",
                            "sklearn/linear_model/tests/test_logistic.py::test_multinomial_validation[lbfgs]",
                            "sklearn/linear_model/tests/test_logistic.py::test_multinomial_validation[newton-cg]",
                            "sklearn/linear_model/tests/test_logistic.py::test_multinomial_validation[sag]",
                            "sklearn/linear_model/tests/test_logistic.py::test_multinomial_validation[saga]",
                            "sklearn/linear_model/tests/test_logistic.py::test_check_solver_option[LogisticRegression]",
                            "sklearn/linear_model/tests/test_logistic.py::test_check_solver_option[LogisticRegressionCV]",
                            "sklearn/linear_model/tests/test_logistic.py::test_logistic_regression_warnings[LogisticRegression-params0-True]",
                            "sklearn/linear_model/tests/test_logistic.py::test_logistic_regression_warnings[LogisticRegressionCV-params1-False]",
                            "sklearn/linear_model/tests/test_logistic.py::test_multinomial_binary[lbfgs]",
                            "sklearn/linear_model/tests/test_logistic.py::test_multinomial_binary[newton-cg]",
                            "sklearn/linear_model/tests/test_logistic.py::test_multinomial_binary[sag]",
                            "sklearn/linear_model/tests/test_logistic.py::test_multinomial_binary[saga]",
                            "sklearn/linear_model/tests/test_logistic.py::test_multinomial_binary_probabilities",
                            "sklearn/linear_model/tests/test_logistic.py::test_sparsify",
                            "sklearn/linear_model/tests/test_logistic.py::test_inconsistent_input",
                            "sklearn/linear_model/tests/test_logistic.py::test_write_parameters",
                            "sklearn/linear_model/tests/test_logistic.py::test_nan",
                            "sklearn/linear_model/tests/test_logistic.py::test_consistency_path",
                            "sklearn/linear_model/tests/test_logistic.py::test_logistic_regression_path_convergence_fail",
                            "sklearn/linear_model/tests/test_logistic.py::test_liblinear_dual_random_state",
                            "sklearn/linear_model/tests/test_logistic.py::test_logistic_loss_and_grad",
                            "sklearn/linear_model/tests/test_logistic.py::test_logistic_grad_hess",
                            "sklearn/linear_model/tests/test_logistic.py::test_logistic_cv",
                            "sklearn/linear_model/tests/test_logistic.py::test_logistic_cv_multinomial_score[accuracy-multiclass_agg_list0]",
                            "sklearn/linear_model/tests/test_logistic.py::test_logistic_cv_multinomial_score[precision-multiclass_agg_list1]",
                            "sklearn/linear_model/tests/test_logistic.py::test_logistic_cv_multinomial_score[f1-multiclass_agg_list2]",
                            "sklearn/linear_model/tests/test_logistic.py::test_logistic_cv_multinomial_score[neg_log_loss-multiclass_agg_list3]",
                            "sklearn/linear_model/tests/test_logistic.py::test_logistic_cv_multinomial_score[recall-multiclass_agg_list4]",
                            "sklearn/linear_model/tests/test_logistic.py::test_multinomial_logistic_regression_string_inputs",
                            "sklearn/linear_model/tests/test_logistic.py::test_logistic_cv_sparse",
                            "sklearn/linear_model/tests/test_logistic.py::test_intercept_logistic_helper",
                            "sklearn/linear_model/tests/test_logistic.py::test_ovr_multinomial_iris",
                            "sklearn/linear_model/tests/test_logistic.py::test_logistic_regression_solvers",
                            "sklearn/linear_model/tests/test_logistic.py::test_logistic_regression_solvers_multiclass",
                            "sklearn/linear_model/tests/test_logistic.py::test_logistic_regressioncv_class_weights",
                            "sklearn/linear_model/tests/test_logistic.py::test_logistic_regression_sample_weights",
                            "sklearn/linear_model/tests/test_logistic.py::test_logistic_regression_class_weights",
                            "sklearn/linear_model/tests/test_logistic.py::test_logistic_regression_multinomial",
                            "sklearn/linear_model/tests/test_logistic.py::test_multinomial_grad_hess",
                            "sklearn/linear_model/tests/test_logistic.py::test_liblinear_decision_function_zero",
                            "sklearn/linear_model/tests/test_logistic.py::test_liblinear_logregcv_sparse",
                            "sklearn/linear_model/tests/test_logistic.py::test_saga_sparse",
                            "sklearn/linear_model/tests/test_logistic.py::test_logreg_intercept_scaling",
                            "sklearn/linear_model/tests/test_logistic.py::test_logreg_intercept_scaling_zero",
                            "sklearn/linear_model/tests/test_logistic.py::test_logreg_l1",
                            "sklearn/linear_model/tests/test_logistic.py::test_logreg_l1_sparse_data",
                            "sklearn/linear_model/tests/test_logistic.py::test_logistic_regression_cv_refit[l1-42]",
                            "sklearn/linear_model/tests/test_logistic.py::test_logistic_regression_cv_refit[l2-42]",
                            "sklearn/linear_model/tests/test_logistic.py::test_logreg_predict_proba_multinomial",
                            "sklearn/linear_model/tests/test_logistic.py::test_max_iter",
                            "sklearn/linear_model/tests/test_logistic.py::test_n_iter[newton-cg]",
                            "sklearn/linear_model/tests/test_logistic.py::test_n_iter[liblinear]",
                            "sklearn/linear_model/tests/test_logistic.py::test_n_iter[sag]",
                            "sklearn/linear_model/tests/test_logistic.py::test_n_iter[saga]",
                            "sklearn/linear_model/tests/test_logistic.py::test_n_iter[lbfgs]",
                            "sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-True-True-newton-cg]",
                            "sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-True-True-sag]",
                            "sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-True-True-saga]",
                            "sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-True-True-lbfgs]",
                            "sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-True-False-newton-cg]",
                            "sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-True-False-sag]",
                            "sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-True-False-saga]",
                            "sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-True-False-lbfgs]",
                            "sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-False-True-newton-cg]",
                            "sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-False-True-sag]",
                            "sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-False-True-saga]",
                            "sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-False-True-lbfgs]",
                            "sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-False-False-newton-cg]",
                            "sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-False-False-sag]",
                            "sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-False-False-saga]",
                            "sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-False-False-lbfgs]",
                            "sklearn/linear_model/tests/test_logistic.py::test_warm_start[multinomial-True-True-newton-cg]",
                            "sklearn/linear_model/tests/test_logistic.py::test_warm_start[multinomial-True-True-sag]",
                            "sklearn/linear_model/tests/test_logistic.py::test_warm_start[multinomial-True-True-saga]",
                            "sklearn/linear_model/tests/test_logistic.py::test_warm_start[multinomial-True-True-lbfgs]",
                            "sklearn/linear_model/tests/test_logistic.py::test_warm_start[multinomial-True-False-newton-cg]",
                            "sklearn/linear_model/tests/test_logistic.py::test_warm_start[multinomial-True-False-sag]",
                            "sklearn/linear_model/tests/test_logistic.py::test_warm_start[multinomial-True-False-saga]",
                            "sklearn/linear_model/tests/test_logistic.py::test_warm_start[multinomial-True-False-lbfgs]",
                            "sklearn/linear_model/tests/test_logistic.py::test_warm_start[multinomial-False-True-newton-cg]",
                            "sklearn/linear_model/tests/test_logistic.py::test_warm_start[multinomial-False-True-sag]",
                            "sklearn/linear_model/tests/test_logistic.py::test_warm_start[multinomial-False-True-saga]",
                            "sklearn/linear_model/tests/test_logistic.py::test_warm_start[multinomial-False-True-lbfgs]",
                            "sklearn/linear_model/tests/test_logistic.py::test_warm_start[multinomial-False-False-newton-cg]",
                            "sklearn/linear_model/tests/test_logistic.py::test_warm_start[multinomial-False-False-sag]",
                            "sklearn/linear_model/tests/test_logistic.py::test_warm_start[multinomial-False-False-saga]",
                            "sklearn/linear_model/tests/test_logistic.py::test_warm_start[multinomial-False-False-lbfgs]",
                            "sklearn/linear_model/tests/test_logistic.py::test_saga_vs_liblinear",
                            "sklearn/linear_model/tests/test_logistic.py::test_dtype_match[ovr]",
                            "sklearn/linear_model/tests/test_logistic.py::test_dtype_match[multinomial]",
                            "sklearn/linear_model/tests/test_logistic.py::test_warm_start_converge_LR",
                            "sklearn/linear_model/tests/test_logistic.py::test_logistic_regression_path_coefs_multinomial",
                            "sklearn/linear_model/tests/test_logistic.py::test_logistic_regression_multi_class_auto[liblinear-est0]",
                            "sklearn/linear_model/tests/test_logistic.py::test_logistic_regression_multi_class_auto[liblinear-est1]",
                            "sklearn/linear_model/tests/test_logistic.py::test_logistic_regression_multi_class_auto[lbfgs-est0]",
                            "sklearn/linear_model/tests/test_logistic.py::test_logistic_regression_multi_class_auto[lbfgs-est1]",
                            "sklearn/linear_model/tests/test_logistic.py::test_logistic_regression_multi_class_auto[newton-cg-est0]",
                            "sklearn/linear_model/tests/test_logistic.py::test_logistic_regression_multi_class_auto[newton-cg-est1]",
                            "sklearn/linear_model/tests/test_logistic.py::test_logistic_regression_multi_class_auto[sag-est0]",
                            "sklearn/linear_model/tests/test_logistic.py::test_logistic_regression_multi_class_auto[sag-est1]",
                            "sklearn/linear_model/tests/test_logistic.py::test_logistic_regression_multi_class_auto[saga-est0]",
                            "sklearn/linear_model/tests/test_logistic.py::test_logistic_regression_multi_class_auto[saga-est1]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_boolean_distance[dice]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_boolean_distance[jaccard]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_boolean_distance[kulsinski]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_boolean_distance[matching]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_boolean_distance[rogerstanimoto]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_boolean_distance[russellrao]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_boolean_distance[sokalmichener]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_boolean_distance[sokalsneath]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_boolean_distance[yule]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_precomputed[pairwise_distances]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_precomputed[pairwise_kernels]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_parallel[pairwise_distances-euclidean-kwds0]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_parallel[pairwise_distances-wminkowski-kwds1]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_parallel[pairwise_distances-wminkowski-kwds2]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_parallel[pairwise_kernels-polynomial-kwds3]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_parallel[pairwise_kernels-callable_rbf_kernel-kwds4]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_callable_nonstrict_metric",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_kernels[rbf]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_kernels[laplacian]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_kernels[sigmoid]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_kernels[polynomial]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_kernels[linear]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_kernels[chi2]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_kernels[additive_chi2]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_kernels_callable",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_kernels_filter_param",
                            "sklearn/metrics/tests/test_pairwise.py::test_paired_distances[cosine-paired_cosine_distances]",
                            "sklearn/metrics/tests/test_pairwise.py::test_paired_distances[euclidean-paired_euclidean_distances]",
                            "sklearn/metrics/tests/test_pairwise.py::test_paired_distances[l2-paired_euclidean_distances]",
                            "sklearn/metrics/tests/test_pairwise.py::test_paired_distances[l1-paired_manhattan_distances]",
                            "sklearn/metrics/tests/test_pairwise.py::test_paired_distances[manhattan-paired_manhattan_distances]",
                            "sklearn/metrics/tests/test_pairwise.py::test_paired_distances[cityblock-paired_manhattan_distances]",
                            "sklearn/metrics/tests/test_pairwise.py::test_paired_distances_callable",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_argmin_min",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_chunked_reduce",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_chunked_reduce_valid[<lambda>0]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_chunked_reduce_valid[<lambda>1]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_chunked_reduce_valid[<lambda>2]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_chunked_reduce_valid[<lambda>3]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_chunked_reduce_valid[<lambda>4]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_chunked_reduce_invalid[<lambda>-ValueError-length",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_chunked_reduce_invalid[<lambda>-TypeError-returned",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_chunked_reduce_invalid[<lambda>-TypeError-,",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_chunked_diagonal[euclidean]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_chunked_diagonal[l2]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_chunked_diagonal[sqeuclidean]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_chunked",
                            "sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances",
                            "sklearn/metrics/tests/test_pairwise.py::test_cosine_distances",
                            "sklearn/metrics/tests/test_pairwise.py::test_paired_euclidean_distances",
                            "sklearn/metrics/tests/test_pairwise.py::test_paired_manhattan_distances",
                            "sklearn/metrics/tests/test_pairwise.py::test_chi_square_kernel",
                            "sklearn/metrics/tests/test_pairwise.py::test_kernel_symmetry[linear_kernel]",
                            "sklearn/metrics/tests/test_pairwise.py::test_kernel_symmetry[polynomial_kernel]",
                            "sklearn/metrics/tests/test_pairwise.py::test_kernel_symmetry[rbf_kernel]",
                            "sklearn/metrics/tests/test_pairwise.py::test_kernel_symmetry[laplacian_kernel]",
                            "sklearn/metrics/tests/test_pairwise.py::test_kernel_symmetry[sigmoid_kernel]",
                            "sklearn/metrics/tests/test_pairwise.py::test_kernel_symmetry[cosine_similarity]",
                            "sklearn/metrics/tests/test_pairwise.py::test_kernel_sparse[linear_kernel]",
                            "sklearn/metrics/tests/test_pairwise.py::test_kernel_sparse[polynomial_kernel]",
                            "sklearn/metrics/tests/test_pairwise.py::test_kernel_sparse[rbf_kernel]",
                            "sklearn/metrics/tests/test_pairwise.py::test_kernel_sparse[laplacian_kernel]",
                            "sklearn/metrics/tests/test_pairwise.py::test_kernel_sparse[sigmoid_kernel]",
                            "sklearn/metrics/tests/test_pairwise.py::test_kernel_sparse[cosine_similarity]",
                            "sklearn/metrics/tests/test_pairwise.py::test_linear_kernel",
                            "sklearn/metrics/tests/test_pairwise.py::test_rbf_kernel",
                            "sklearn/metrics/tests/test_pairwise.py::test_laplacian_kernel",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_similarity_sparse_output[linear-linear_kernel]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_similarity_sparse_output[cosine-cosine_similarity]",
                            "sklearn/metrics/tests/test_pairwise.py::test_cosine_similarity",
                            "sklearn/metrics/tests/test_pairwise.py::test_check_dense_matrices",
                            "sklearn/metrics/tests/test_pairwise.py::test_check_XB_returned",
                            "sklearn/metrics/tests/test_pairwise.py::test_check_different_dimensions",
                            "sklearn/metrics/tests/test_pairwise.py::test_check_invalid_dimensions",
                            "sklearn/metrics/tests/test_pairwise.py::test_check_sparse_arrays",
                            "sklearn/metrics/tests/test_pairwise.py::test_check_tuple_input",
                            "sklearn/metrics/tests/test_pairwise.py::test_check_preserve_type",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_data_derived_params[Y",
                            "sklearn/model_selection/tests/test_split.py::test_cross_validator_with_default_params",
                            "sklearn/model_selection/tests/test_split.py::test_2d_y",
                            "sklearn/model_selection/tests/test_split.py::test_kfold_valueerrors",
                            "sklearn/model_selection/tests/test_split.py::test_kfold_indices",
                            "sklearn/model_selection/tests/test_split.py::test_kfold_no_shuffle",
                            "sklearn/model_selection/tests/test_split.py::test_stratified_kfold_no_shuffle",
                            "sklearn/model_selection/tests/test_split.py::test_stratified_kfold_ratios",
                            "sklearn/model_selection/tests/test_split.py::test_kfold_balance",
                            "sklearn/model_selection/tests/test_split.py::test_stratifiedkfold_balance",
                            "sklearn/model_selection/tests/test_split.py::test_shuffle_kfold",
                            "sklearn/model_selection/tests/test_split.py::test_shuffle_stratifiedkfold",
                            "sklearn/model_selection/tests/test_split.py::test_kfold_can_detect_dependent_samples_on_digits",
                            "sklearn/model_selection/tests/test_split.py::test_shuffle_split",
                            "sklearn/model_selection/tests/test_split.py::test_stratified_shuffle_split_init",
                            "sklearn/model_selection/tests/test_split.py::test_stratified_shuffle_split_respects_test_size",
                            "sklearn/model_selection/tests/test_split.py::test_stratified_shuffle_split_iter",
                            "sklearn/model_selection/tests/test_split.py::test_stratified_shuffle_split_even",
                            "sklearn/model_selection/tests/test_split.py::test_stratified_shuffle_split_overlap_train_test_bug",
                            "sklearn/model_selection/tests/test_split.py::test_stratified_shuffle_split_multilabel",
                            "sklearn/model_selection/tests/test_split.py::test_stratified_shuffle_split_multilabel_many_labels",
                            "sklearn/model_selection/tests/test_split.py::test_predefinedsplit_with_kfold_split",
                            "sklearn/model_selection/tests/test_split.py::test_group_shuffle_split",
                            "sklearn/model_selection/tests/test_split.py::test_leave_one_p_group_out",
                            "sklearn/model_selection/tests/test_split.py::test_leave_group_out_changing_groups",
                            "sklearn/model_selection/tests/test_split.py::test_leave_one_p_group_out_error_on_fewer_number_of_groups",
                            "sklearn/model_selection/tests/test_split.py::test_repeated_cv_value_errors",
                            "sklearn/model_selection/tests/test_split.py::test_repeated_kfold_determinstic_split",
                            "sklearn/model_selection/tests/test_split.py::test_get_n_splits_for_repeated_kfold",
                            "sklearn/model_selection/tests/test_split.py::test_get_n_splits_for_repeated_stratified_kfold",
                            "sklearn/model_selection/tests/test_split.py::test_repeated_stratified_kfold_determinstic_split",
                            "sklearn/model_selection/tests/test_split.py::test_train_test_split_errors",
                            "sklearn/model_selection/tests/test_split.py::test_train_test_split",
                            "sklearn/model_selection/tests/test_split.py::test_shufflesplit_errors",
                            "sklearn/model_selection/tests/test_split.py::test_shufflesplit_reproducible",
                            "sklearn/model_selection/tests/test_split.py::test_stratifiedshufflesplit_list_input",
                            "sklearn/model_selection/tests/test_split.py::test_train_test_split_allow_nans",
                            "sklearn/model_selection/tests/test_split.py::test_check_cv",
                            "sklearn/model_selection/tests/test_split.py::test_cv_iterable_wrapper",
                            "sklearn/model_selection/tests/test_split.py::test_group_kfold",
                            "sklearn/model_selection/tests/test_split.py::test_time_series_cv",
                            "sklearn/model_selection/tests/test_split.py::test_time_series_max_train_size",
                            "sklearn/model_selection/tests/test_split.py::test_nested_cv",
                            "sklearn/model_selection/tests/test_split.py::test_train_test_default_warning",
                            "sklearn/model_selection/tests/test_split.py::test_nsplit_default_warn",
                            "sklearn/model_selection/tests/test_split.py::test_check_cv_default_warn",
                            "sklearn/model_selection/tests/test_split.py::test_build_repr",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_cdist[euclidean]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_cdist[cityblock]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_cdist[minkowski]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_cdist[chebyshev]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_cdist[seuclidean]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_cdist[wminkowski]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_cdist[mahalanobis]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_cdist[hamming]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_cdist[canberra]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_cdist[braycurtis]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_cdist_bool_metric[matching]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_cdist_bool_metric[jaccard]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_cdist_bool_metric[dice]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_cdist_bool_metric[kulsinski]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_cdist_bool_metric[rogerstanimoto]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_cdist_bool_metric[russellrao]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_cdist_bool_metric[sokalmichener]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_cdist_bool_metric[sokalsneath]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_pdist[euclidean]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_pdist[cityblock]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_pdist[minkowski]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_pdist[chebyshev]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_pdist[seuclidean]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_pdist[wminkowski]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_pdist[mahalanobis]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_pdist[hamming]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_pdist[canberra]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_pdist[braycurtis]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_pdist_bool_metrics[matching]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_pdist_bool_metrics[dice]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_pdist_bool_metrics[kulsinski]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_pdist_bool_metrics[rogerstanimoto]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_pdist_bool_metrics[russellrao]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_pdist_bool_metrics[sokalmichener]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_pdist_bool_metrics[sokalsneath]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_pickle[euclidean]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_pickle[cityblock]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_pickle[minkowski]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_pickle[chebyshev]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_pickle[seuclidean]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_pickle[wminkowski]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_pickle[mahalanobis]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_pickle[hamming]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_pickle[canberra]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_pickle[braycurtis]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_pickle_bool_metrics[matching]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_pickle_bool_metrics[jaccard]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_pickle_bool_metrics[dice]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_pickle_bool_metrics[kulsinski]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_pickle_bool_metrics[rogerstanimoto]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_pickle_bool_metrics[russellrao]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_pickle_bool_metrics[sokalmichener]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_pickle_bool_metrics[sokalsneath]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_haversine_metric",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_pyfunc_metric",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_bad_pyfunc_metric",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_input_data_size",
                            "sklearn/utils/tests/test_validation.py::test_as_float_array",
                            "sklearn/utils/tests/test_validation.py::test_as_float_array_nan[X0]",
                            "sklearn/utils/tests/test_validation.py::test_as_float_array_nan[X1]",
                            "sklearn/utils/tests/test_validation.py::test_np_matrix",
                            "sklearn/utils/tests/test_validation.py::test_memmap",
                            "sklearn/utils/tests/test_validation.py::test_ordering",
                            "sklearn/utils/tests/test_validation.py::test_check_array_force_all_finite_valid[asarray-inf-False]",
                            "sklearn/utils/tests/test_validation.py::test_check_array_force_all_finite_valid[asarray-nan-allow-nan]",
                            "sklearn/utils/tests/test_validation.py::test_check_array_force_all_finite_valid[asarray-nan-False]",
                            "sklearn/utils/tests/test_validation.py::test_check_array_force_all_finite_valid[csr_matrix-inf-False]",
                            "sklearn/utils/tests/test_validation.py::test_check_array_force_all_finite_valid[csr_matrix-nan-allow-nan]",
                            "sklearn/utils/tests/test_validation.py::test_check_array_force_all_finite_valid[csr_matrix-nan-False]",
                            "sklearn/utils/tests/test_validation.py::test_check_array_force_all_finiteinvalid[asarray-inf-True-Input",
                            "sklearn/utils/tests/test_validation.py::test_check_array_force_all_finiteinvalid[asarray-inf-allow-nan-Input",
                            "sklearn/utils/tests/test_validation.py::test_check_array_force_all_finiteinvalid[asarray-nan-True-Input",
                            "sklearn/utils/tests/test_validation.py::test_check_array_force_all_finiteinvalid[asarray-nan-allow-inf-force_all_finite",
                            "sklearn/utils/tests/test_validation.py::test_check_array_force_all_finiteinvalid[asarray-nan-1-Input",
                            "sklearn/utils/tests/test_validation.py::test_check_array_force_all_finiteinvalid[csr_matrix-inf-True-Input",
                            "sklearn/utils/tests/test_validation.py::test_check_array_force_all_finiteinvalid[csr_matrix-inf-allow-nan-Input",
                            "sklearn/utils/tests/test_validation.py::test_check_array_force_all_finiteinvalid[csr_matrix-nan-True-Input",
                            "sklearn/utils/tests/test_validation.py::test_check_array_force_all_finiteinvalid[csr_matrix-nan-allow-inf-force_all_finite",
                            "sklearn/utils/tests/test_validation.py::test_check_array_force_all_finiteinvalid[csr_matrix-nan-1-Input",
                            "sklearn/utils/tests/test_validation.py::test_check_array",
                            "sklearn/utils/tests/test_validation.py::test_check_array_pandas_dtype_object_conversion",
                            "sklearn/utils/tests/test_validation.py::test_check_array_on_mock_dataframe",
                            "sklearn/utils/tests/test_validation.py::test_check_array_dtype_stability",
                            "sklearn/utils/tests/test_validation.py::test_check_array_dtype_warning",
                            "sklearn/utils/tests/test_validation.py::test_check_array_accept_sparse_type_exception",
                            "sklearn/utils/tests/test_validation.py::test_check_array_accept_sparse_no_exception",
                            "sklearn/utils/tests/test_validation.py::test_check_array_accept_large_sparse_no_exception[csr]",
                            "sklearn/utils/tests/test_validation.py::test_check_array_accept_large_sparse_no_exception[csc]",
                            "sklearn/utils/tests/test_validation.py::test_check_array_accept_large_sparse_no_exception[coo]",
                            "sklearn/utils/tests/test_validation.py::test_check_array_accept_large_sparse_no_exception[bsr]",
                            "sklearn/utils/tests/test_validation.py::test_check_array_accept_large_sparse_raise_exception[csr]",
                            "sklearn/utils/tests/test_validation.py::test_check_array_accept_large_sparse_raise_exception[csc]",
                            "sklearn/utils/tests/test_validation.py::test_check_array_accept_large_sparse_raise_exception[coo]",
                            "sklearn/utils/tests/test_validation.py::test_check_array_accept_large_sparse_raise_exception[bsr]",
                            "sklearn/utils/tests/test_validation.py::test_check_array_large_indices_non_supported_scipy_version[csr]",
                            "sklearn/utils/tests/test_validation.py::test_check_array_large_indices_non_supported_scipy_version[csc]",
                            "sklearn/utils/tests/test_validation.py::test_check_array_large_indices_non_supported_scipy_version[coo]",
                            "sklearn/utils/tests/test_validation.py::test_check_array_large_indices_non_supported_scipy_version[bsr]",
                            "sklearn/utils/tests/test_validation.py::test_check_array_min_samples_and_features_messages",
                            "sklearn/utils/tests/test_validation.py::test_check_array_complex_data_error",
                            "sklearn/utils/tests/test_validation.py::test_has_fit_parameter",
                            "sklearn/utils/tests/test_validation.py::test_check_symmetric",
                            "sklearn/utils/tests/test_validation.py::test_check_is_fitted",
                            "sklearn/utils/tests/test_validation.py::test_check_consistent_length",
                            "sklearn/utils/tests/test_validation.py::test_check_dataframe_fit_attribute",
                            "sklearn/utils/tests/test_validation.py::test_suppress_validation",
                            "sklearn/utils/tests/test_validation.py::test_check_dataframe_warns_on_dtype",
                            "sklearn/utils/tests/test_validation.py::test_check_memory",
                            "sklearn/utils/tests/test_validation.py::test_check_array_memmap[True]",
                            "sklearn/utils/tests/test_validation.py::test_check_array_memmap[False]",
                            "sklearn/utils/tests/test_validation.py::test_check_X_y_informative_error",
                            "sklearn/utils/tests/test_validation.py::test_retrieve_samples_from_non_standard_shape"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "psf__requests-1537.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "test_requests.py::RequestsTestCase::test_can_send_nonstring_objects_with_files"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "test_requests.py::RequestsTestCase::test_basic_building",
                            "test_requests.py::RequestsTestCase::test_cannot_send_unprepared_requests",
                            "test_requests.py::RequestsTestCase::test_cookie_parameters",
                            "test_requests.py::RequestsTestCase::test_entry_points",
                            "test_requests.py::RequestsTestCase::test_get_auth_from_url",
                            "test_requests.py::RequestsTestCase::test_header_keys_are_native",
                            "test_requests.py::RequestsTestCase::test_hook_receives_request_arguments",
                            "test_requests.py::RequestsTestCase::test_http_error",
                            "test_requests.py::RequestsTestCase::test_invalid_url",
                            "test_requests.py::RequestsTestCase::test_links",
                            "test_requests.py::RequestsTestCase::test_long_authinfo_in_url",
                            "test_requests.py::RequestsTestCase::test_no_content_length",
                            "test_requests.py::RequestsTestCase::test_params_are_added_before_fragment",
                            "test_requests.py::RequestsTestCase::test_path_is_not_double_encoded",
                            "test_requests.py::RequestsTestCase::test_response_is_iterable",
                            "test_requests.py::RequestsTestCase::test_transport_adapter_ordering",
                            "test_requests.py::RequestsTestCase::test_unicode_multipart_post_fieldnames",
                            "test_requests.py::TestCaseInsensitiveDict::test_contains",
                            "test_requests.py::TestCaseInsensitiveDict::test_delitem",
                            "test_requests.py::TestCaseInsensitiveDict::test_docstring_example",
                            "test_requests.py::TestCaseInsensitiveDict::test_equality",
                            "test_requests.py::TestCaseInsensitiveDict::test_fixes_649",
                            "test_requests.py::TestCaseInsensitiveDict::test_get",
                            "test_requests.py::TestCaseInsensitiveDict::test_getitem",
                            "test_requests.py::TestCaseInsensitiveDict::test_iter",
                            "test_requests.py::TestCaseInsensitiveDict::test_iterable_init",
                            "test_requests.py::TestCaseInsensitiveDict::test_kwargs_init",
                            "test_requests.py::TestCaseInsensitiveDict::test_len",
                            "test_requests.py::TestCaseInsensitiveDict::test_lower_items",
                            "test_requests.py::TestCaseInsensitiveDict::test_mapping_init",
                            "test_requests.py::TestCaseInsensitiveDict::test_preserve_key_case",
                            "test_requests.py::TestCaseInsensitiveDict::test_preserve_last_key_case",
                            "test_requests.py::TestCaseInsensitiveDict::test_setdefault",
                            "test_requests.py::TestCaseInsensitiveDict::test_update",
                            "test_requests.py::TestCaseInsensitiveDict::test_update_retains_unchanged"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "psf__requests-2754.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "test_requests.py::TestUtils::test_unquote_unreserved_handles_bytes"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "test_requests.py::TestRequests::test_entry_points",
                            "test_requests.py::TestRequests::test_invalid_url[MissingScheme-hiwpefhipowhefopw]",
                            "test_requests.py::TestRequests::test_invalid_url[InvalidScheme-localhost:3128]",
                            "test_requests.py::TestRequests::test_invalid_url[InvalidScheme-localhost.localdomain:3128/]",
                            "test_requests.py::TestRequests::test_invalid_url[InvalidScheme-10.122.1.1:3128/]",
                            "test_requests.py::TestRequests::test_invalid_url[InvalidURL-http://]",
                            "test_requests.py::TestRequests::test_basic_building",
                            "test_requests.py::TestRequests::test_path_is_not_double_encoded",
                            "test_requests.py::TestRequests::test_params_are_added_before_fragment[http://example.com/path#fragment-http://example.com/path?a=b#fragment]",
                            "test_requests.py::TestRequests::test_params_are_added_before_fragment[http://example.com/path?key=value#fragment-http://example.com/path?key=value&a=b#fragment]",
                            "test_requests.py::TestRequests::test_params_original_order_is_preserved_by_default",
                            "test_requests.py::TestRequests::test_params_bytes_are_encoded",
                            "test_requests.py::TestRequests::test_binary_put",
                            "test_requests.py::TestRequests::test_errors[http://doesnotexist.google.com-ConnectionError]",
                            "test_requests.py::TestRequests::test_errors[http://localhost:1-ConnectionError]",
                            "test_requests.py::TestRequests::test_errors[http://fe80::5054:ff:fe5a:fc0-InvalidURL]",
                            "test_requests.py::TestRequests::test_prepare_request_with_bytestring_url",
                            "test_requests.py::TestRequests::test_links",
                            "test_requests.py::TestRequests::test_cookie_parameters",
                            "test_requests.py::TestRequests::test_cookie_as_dict_keeps_len",
                            "test_requests.py::TestRequests::test_cookie_as_dict_keeps_items",
                            "test_requests.py::TestRequests::test_cookie_as_dict_keys",
                            "test_requests.py::TestRequests::test_cookie_as_dict_values",
                            "test_requests.py::TestRequests::test_cookie_as_dict_items",
                            "test_requests.py::TestRequests::test_response_is_iterable",
                            "test_requests.py::TestRequests::test_response_decode_unicode",
                            "test_requests.py::TestRequests::test_get_auth_from_url",
                            "test_requests.py::TestRequests::test_get_auth_from_url_encoded_spaces",
                            "test_requests.py::TestRequests::test_get_auth_from_url_not_encoded_spaces",
                            "test_requests.py::TestRequests::test_get_auth_from_url_percent_chars",
                            "test_requests.py::TestRequests::test_get_auth_from_url_encoded_hashes",
                            "test_requests.py::TestRequests::test_http_error",
                            "test_requests.py::TestRequests::test_transport_adapter_ordering",
                            "test_requests.py::TestRequests::test_long_authinfo_in_url",
                            "test_requests.py::TestRequests::test_nonhttp_schemes_dont_check_URLs",
                            "test_requests.py::TestRequests::test_basic_auth_str_is_always_native",
                            "test_requests.py::TestContentEncodingDetection::test_none",
                            "test_requests.py::TestContentEncodingDetection::test_pragmas[<meta",
                            "test_requests.py::TestContentEncodingDetection::test_pragmas[<?xml",
                            "test_requests.py::TestContentEncodingDetection::test_precedence",
                            "test_requests.py::TestCaseInsensitiveDict::test_init[cid0]",
                            "test_requests.py::TestCaseInsensitiveDict::test_init[cid1]",
                            "test_requests.py::TestCaseInsensitiveDict::test_init[cid2]",
                            "test_requests.py::TestCaseInsensitiveDict::test_docstring_example",
                            "test_requests.py::TestCaseInsensitiveDict::test_len",
                            "test_requests.py::TestCaseInsensitiveDict::test_getitem",
                            "test_requests.py::TestCaseInsensitiveDict::test_fixes_649",
                            "test_requests.py::TestCaseInsensitiveDict::test_delitem",
                            "test_requests.py::TestCaseInsensitiveDict::test_contains",
                            "test_requests.py::TestCaseInsensitiveDict::test_get",
                            "test_requests.py::TestCaseInsensitiveDict::test_update",
                            "test_requests.py::TestCaseInsensitiveDict::test_update_retains_unchanged",
                            "test_requests.py::TestCaseInsensitiveDict::test_iter",
                            "test_requests.py::TestCaseInsensitiveDict::test_equality",
                            "test_requests.py::TestCaseInsensitiveDict::test_setdefault",
                            "test_requests.py::TestCaseInsensitiveDict::test_lower_items",
                            "test_requests.py::TestCaseInsensitiveDict::test_preserve_key_case",
                            "test_requests.py::TestCaseInsensitiveDict::test_preserve_last_key_case",
                            "test_requests.py::TestCaseInsensitiveDict::test_copy",
                            "test_requests.py::TestUtils::test_super_len_io_streams",
                            "test_requests.py::TestUtils::test_super_len_correctly_calculates_len_of_partially_read_file",
                            "test_requests.py::TestUtils::test_get_environ_proxies_ip_ranges",
                            "test_requests.py::TestUtils::test_get_environ_proxies",
                            "test_requests.py::TestUtils::test_select_proxies",
                            "test_requests.py::TestUtils::test_guess_filename_when_int",
                            "test_requests.py::TestUtils::test_guess_filename_when_filename_is_an_int",
                            "test_requests.py::TestUtils::test_guess_filename_with_file_like_obj",
                            "test_requests.py::TestUtils::test_guess_filename_with_unicode_name",
                            "test_requests.py::TestUtils::test_is_ipv4_address",
                            "test_requests.py::TestUtils::test_is_valid_cidr",
                            "test_requests.py::TestUtils::test_dotted_netmask",
                            "test_requests.py::TestUtils::test_address_in_network",
                            "test_requests.py::TestUtils::test_get_auth_from_url",
                            "test_requests.py::TestUtils::test_requote_uri_with_unquoted_percents",
                            "test_requests.py::TestUtils::test_requote_uri_properly_requotes",
                            "test_requests.py::TestUtils::test_unquote_unreserved_handles_unicode",
                            "test_requests.py::TestMorselToCookieExpires::test_expires_valid_str",
                            "test_requests.py::TestMorselToCookieExpires::test_expires_invalid_int[100-TypeError]",
                            "test_requests.py::TestMorselToCookieExpires::test_expires_invalid_int[woops-ValueError]",
                            "test_requests.py::TestMorselToCookieExpires::test_expires_none",
                            "test_requests.py::TestMorselToCookieMaxAge::test_max_age_valid_int",
                            "test_requests.py::TestMorselToCookieMaxAge::test_max_age_invalid_str",
                            "test_requests.py::TestTimeout::test_connect_timeout",
                            "test_requests.py::TestTimeout::test_total_timeout_connect",
                            "test_requests.py::test_data_argument_accepts_tuples",
                            "test_requests.py::test_prepared_request_empty_copy",
                            "test_requests.py::test_prepared_request_no_cookies_copy",
                            "test_requests.py::test_prepared_request_complete_copy",
                            "test_requests.py::test_prepare_unicode_url",
                            "test_requests.py::test_prepare_requires_a_request_method",
                            "test_requests.py::test_vendor_aliases"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "astropy__astropy-14590.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_ufunc_inplace_where[True]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_ufunc_inplace_where[False]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_ufunc_inplace_masked_where[True]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_ufunc_inplace_masked_where[False]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityUfuncs::test_ufunc_inplace_where[True]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityUfuncs::test_ufunc_inplace_where[False]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityUfuncs::test_ufunc_inplace_masked_where[True]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityUfuncs::test_ufunc_inplace_masked_where[False]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeUfuncs::test_ufunc_inplace_where[True]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeUfuncs::test_ufunc_inplace_where[False]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeUfuncs::test_ufunc_inplace_masked_where[True]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeUfuncs::test_ufunc_inplace_masked_where[False]"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_2op_ufunc[add]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_2op_ufunc[subtract]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_2op_ufunc[divide]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_2op_ufunc[arctan2]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_2op_ufunc[minimum]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_ufunc_inplace[add]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_ufunc_inplace[subtract]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_ufunc_inplace[divide]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_ufunc_inplace[arctan2]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_ufunc_inplace[minimum]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_ufunc_inplace_no_masked_input",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_ufunc_inplace_error",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_ufunc_inplace_error_masked_where",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_2op_ufunc_outer[outer0]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_2op_ufunc_outer[outer1]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_3op_ufunc",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_add_reduce[0]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_add_reduce[1]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_add_reduce[None]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_add_reduce_no_masked_input",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_minimum_reduce[0]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_minimum_reduce[1]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_minimum_reduce[None]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_maximum_reduce[0]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_maximum_reduce[1]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_maximum_reduce[None]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_multiply_reduce[0]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_multiply_reduce[1]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_multiply_reduce[None]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_ufunc_not_implemented_for_other",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityUfuncs::test_2op_ufunc[add]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityUfuncs::test_2op_ufunc[subtract]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityUfuncs::test_2op_ufunc[divide]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityUfuncs::test_2op_ufunc[arctan2]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityUfuncs::test_2op_ufunc[minimum]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityUfuncs::test_ufunc_inplace[add]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityUfuncs::test_ufunc_inplace[subtract]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityUfuncs::test_ufunc_inplace[divide]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityUfuncs::test_ufunc_inplace[arctan2]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityUfuncs::test_ufunc_inplace[minimum]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityUfuncs::test_ufunc_inplace_no_masked_input",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityUfuncs::test_ufunc_inplace_error",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityUfuncs::test_ufunc_inplace_error_masked_where",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityUfuncs::test_2op_ufunc_outer[outer0]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityUfuncs::test_2op_ufunc_outer[outer1]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityUfuncs::test_3op_ufunc",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityUfuncs::test_add_reduce[0]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityUfuncs::test_add_reduce[1]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityUfuncs::test_add_reduce[None]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityUfuncs::test_add_reduce_no_masked_input",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityUfuncs::test_minimum_reduce[0]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityUfuncs::test_minimum_reduce[1]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityUfuncs::test_minimum_reduce[None]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityUfuncs::test_maximum_reduce[0]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityUfuncs::test_maximum_reduce[1]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityUfuncs::test_maximum_reduce[None]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityUfuncs::test_ufunc_inplace_error2",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeUfuncs::test_2op_ufunc[add]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeUfuncs::test_2op_ufunc[subtract]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeUfuncs::test_2op_ufunc[divide]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeUfuncs::test_2op_ufunc[arctan2]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeUfuncs::test_2op_ufunc[minimum]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeUfuncs::test_ufunc_inplace[add]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeUfuncs::test_ufunc_inplace[subtract]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeUfuncs::test_ufunc_inplace[divide]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeUfuncs::test_ufunc_inplace[arctan2]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeUfuncs::test_ufunc_inplace[minimum]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeUfuncs::test_ufunc_inplace_no_masked_input",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeUfuncs::test_ufunc_inplace_error",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeUfuncs::test_ufunc_inplace_error_masked_where",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeUfuncs::test_2op_ufunc_outer[outer0]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeUfuncs::test_2op_ufunc_outer[outer1]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeUfuncs::test_3op_ufunc",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeUfuncs::test_add_reduce[0]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeUfuncs::test_add_reduce[1]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeUfuncs::test_add_reduce[None]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeUfuncs::test_add_reduce_no_masked_input",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeUfuncs::test_minimum_reduce[0]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeUfuncs::test_minimum_reduce[1]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeUfuncs::test_minimum_reduce[None]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeUfuncs::test_maximum_reduce[0]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeUfuncs::test_maximum_reduce[1]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeUfuncs::test_maximum_reduce[None]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeUfuncs::test_ufunc_inplace_quantity_initial",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayConcatenation::test_concatenate",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayConcatenation::test_concatenate_not_all_masked",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayConcatenation::test_insert[1]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayConcatenation::test_insert[obj1]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayConcatenation::test_insert_masked_obj",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayConcatenation::test_append",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityConcatenation::test_concatenate",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityConcatenation::test_concatenate_not_all_masked",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityConcatenation::test_insert[1]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityConcatenation::test_insert[obj1]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityConcatenation::test_insert_masked_obj",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityConcatenation::test_append",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeConcatenation::test_concatenate",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeConcatenation::test_concatenate_not_all_masked",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeConcatenation::test_insert[1]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeConcatenation::test_insert[obj1]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeConcatenation::test_insert_masked_obj",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeConcatenation::test_append",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayBroadcast::test_broadcast_to",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayBroadcast::test_broadcast_to_using_apply",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayBroadcast::test_broadcast_arrays",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayBroadcast::test_broadcast_arrays_not_all_masked",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayBroadcast::test_broadcast_arrays_subok_false",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityBroadcast::test_broadcast_to",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityBroadcast::test_broadcast_to_using_apply",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityBroadcast::test_broadcast_arrays",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityBroadcast::test_broadcast_arrays_not_all_masked",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityBroadcast::test_broadcast_arrays_subok_false",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeBroadcast::test_broadcast_to",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeBroadcast::test_broadcast_to_using_apply",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeBroadcast::test_broadcast_arrays",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeBroadcast::test_broadcast_arrays_not_all_masked",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeBroadcast::test_broadcast_arrays_subok_false",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayCalculation::test_diff[1--1]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayCalculation::test_diff[2--1]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayCalculation::test_diff[1-0]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayCalculation::test_diff_explicit",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityCalculation::test_diff[1--1]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityCalculation::test_diff[2--1]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityCalculation::test_diff[1-0]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityCalculation::test_diff_explicit",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeCalculation::test_diff[1--1]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeCalculation::test_diff[2--1]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeCalculation::test_diff[1-0]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeCalculation::test_diff_explicit",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArraySorting::test_lexsort1[-1]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArraySorting::test_lexsort1[0]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArraySorting::test_lexsort2[-1]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArraySorting::test_lexsort2[0]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArraySorting::test_lexsort_mix[-1]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArraySorting::test_lexsort_mix[0]"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "pytest-dev__pytest-5840.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "testing/test_conftest.py::test_setinitial_conftest_subdirs[test]",
                            "testing/test_conftest.py::test_setinitial_conftest_subdirs[tests]"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "testing/test_conftest.py::TestConftestValueAccessGlobal::test_basic_init[global]",
                            "testing/test_conftest.py::TestConftestValueAccessGlobal::test_immediate_initialiation_and_incremental_are_the_same[global]",
                            "testing/test_conftest.py::TestConftestValueAccessGlobal::test_value_access_not_existing[global]",
                            "testing/test_conftest.py::TestConftestValueAccessGlobal::test_value_access_by_path[global]",
                            "testing/test_conftest.py::TestConftestValueAccessGlobal::test_value_access_with_confmod[global]",
                            "testing/test_conftest.py::TestConftestValueAccessGlobal::test_basic_init[inpackage]",
                            "testing/test_conftest.py::TestConftestValueAccessGlobal::test_immediate_initialiation_and_incremental_are_the_same[inpackage]",
                            "testing/test_conftest.py::TestConftestValueAccessGlobal::test_value_access_not_existing[inpackage]",
                            "testing/test_conftest.py::TestConftestValueAccessGlobal::test_value_access_by_path[inpackage]",
                            "testing/test_conftest.py::TestConftestValueAccessGlobal::test_value_access_with_confmod[inpackage]",
                            "testing/test_conftest.py::test_conftest_in_nonpkg_with_init",
                            "testing/test_conftest.py::test_doubledash_considered",
                            "testing/test_conftest.py::test_issue151_load_all_conftests",
                            "testing/test_conftest.py::test_conftest_global_import",
                            "testing/test_conftest.py::test_conftestcutdir",
                            "testing/test_conftest.py::test_conftestcutdir_inplace_considered",
                            "testing/test_conftest.py::test_setinitial_conftest_subdirs[whatever]",
                            "testing/test_conftest.py::test_setinitial_conftest_subdirs[.dotdir]",
                            "testing/test_conftest.py::test_conftest_confcutdir",
                            "testing/test_conftest.py::test_conftest_symlink",
                            "testing/test_conftest.py::test_conftest_symlink_files",
                            "testing/test_conftest.py::test_conftest_uppercase",
                            "testing/test_conftest.py::test_no_conftest",
                            "testing/test_conftest.py::test_conftest_existing_resultlog",
                            "testing/test_conftest.py::test_conftest_existing_junitxml",
                            "testing/test_conftest.py::test_conftest_import_order",
                            "testing/test_conftest.py::test_fixture_dependency",
                            "testing/test_conftest.py::test_conftest_found_with_double_dash",
                            "testing/test_conftest.py::TestConftestVisibility::test_parsefactories_relative_node_ids[runner-..-3]",
                            "testing/test_conftest.py::TestConftestVisibility::test_parsefactories_relative_node_ids[package-..-3]",
                            "testing/test_conftest.py::TestConftestVisibility::test_parsefactories_relative_node_ids[swc-../..-3]",
                            "testing/test_conftest.py::TestConftestVisibility::test_parsefactories_relative_node_ids[snc-../..-3]",
                            "testing/test_conftest.py::TestConftestVisibility::test_parsefactories_relative_node_ids[runner-../package-3]",
                            "testing/test_conftest.py::TestConftestVisibility::test_parsefactories_relative_node_ids[package-.-3]",
                            "testing/test_conftest.py::TestConftestVisibility::test_parsefactories_relative_node_ids[swc-..-3]",
                            "testing/test_conftest.py::TestConftestVisibility::test_parsefactories_relative_node_ids[snc-..-3]",
                            "testing/test_conftest.py::TestConftestVisibility::test_parsefactories_relative_node_ids[runner-../package/swc-1]",
                            "testing/test_conftest.py::TestConftestVisibility::test_parsefactories_relative_node_ids[package-./swc-1]",
                            "testing/test_conftest.py::TestConftestVisibility::test_parsefactories_relative_node_ids[swc-.-1]",
                            "testing/test_conftest.py::TestConftestVisibility::test_parsefactories_relative_node_ids[snc-../swc-1]",
                            "testing/test_conftest.py::TestConftestVisibility::test_parsefactories_relative_node_ids[runner-../package/snc-1]",
                            "testing/test_conftest.py::TestConftestVisibility::test_parsefactories_relative_node_ids[package-./snc-1]",
                            "testing/test_conftest.py::TestConftestVisibility::test_parsefactories_relative_node_ids[swc-../snc-1]",
                            "testing/test_conftest.py::TestConftestVisibility::test_parsefactories_relative_node_ids[snc-.-1]",
                            "testing/test_conftest.py::test_search_conftest_up_to_inifile[.-2-0]",
                            "testing/test_conftest.py::test_search_conftest_up_to_inifile[src-1-1]",
                            "testing/test_conftest.py::test_search_conftest_up_to_inifile[None-1-1]",
                            "testing/test_conftest.py::test_issue1073_conftest_special_objects",
                            "testing/test_conftest.py::test_conftest_exception_handling",
                            "testing/test_conftest.py::test_hook_proxy",
                            "testing/test_conftest.py::test_required_option_help"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "psf__requests-6028.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "tests/test_utils.py::test_prepend_scheme_if_needed[http://user:pass@example.com/path?query-http://user:pass@example.com/path?query]",
                            "tests/test_utils.py::test_prepend_scheme_if_needed[http://user@example.com/path?query-http://user@example.com/path?query]"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "tests/test_utils.py::TestSuperLen::test_io_streams[StringIO-Test]",
                            "tests/test_utils.py::TestSuperLen::test_io_streams[BytesIO-Test]",
                            "tests/test_utils.py::TestSuperLen::test_super_len_correctly_calculates_len_of_partially_read_file",
                            "tests/test_utils.py::TestSuperLen::test_super_len_handles_files_raising_weird_errors_in_tell[OSError0]",
                            "tests/test_utils.py::TestSuperLen::test_super_len_handles_files_raising_weird_errors_in_tell[OSError1]",
                            "tests/test_utils.py::TestSuperLen::test_super_len_tell_ioerror[OSError0]",
                            "tests/test_utils.py::TestSuperLen::test_super_len_tell_ioerror[OSError1]",
                            "tests/test_utils.py::TestSuperLen::test_string",
                            "tests/test_utils.py::TestSuperLen::test_file[r-1]",
                            "tests/test_utils.py::TestSuperLen::test_file[rb-0]",
                            "tests/test_utils.py::TestSuperLen::test_tarfile_member",
                            "tests/test_utils.py::TestSuperLen::test_super_len_with__len__",
                            "tests/test_utils.py::TestSuperLen::test_super_len_with_no__len__",
                            "tests/test_utils.py::TestSuperLen::test_super_len_with_tell",
                            "tests/test_utils.py::TestSuperLen::test_super_len_with_fileno",
                            "tests/test_utils.py::TestSuperLen::test_super_len_with_no_matches",
                            "tests/test_utils.py::TestToKeyValList::test_valid[value0-expected0]",
                            "tests/test_utils.py::TestToKeyValList::test_valid[value1-expected1]",
                            "tests/test_utils.py::TestToKeyValList::test_valid[value2-expected2]",
                            "tests/test_utils.py::TestToKeyValList::test_valid[None-None]",
                            "tests/test_utils.py::TestToKeyValList::test_invalid",
                            "tests/test_utils.py::TestUnquoteHeaderValue::test_valid[None-None]",
                            "tests/test_utils.py::TestUnquoteHeaderValue::test_valid[Test-Test]",
                            "tests/test_utils.py::TestUnquoteHeaderValue::test_valid[\"Test\"-Test]",
                            "tests/test_utils.py::TestUnquoteHeaderValue::test_valid[\"Test\\\\\\\\\"-Test\\\\]",
                            "tests/test_utils.py::TestUnquoteHeaderValue::test_valid[\"\\\\\\\\Comp\\\\Res\"-\\\\Comp\\\\Res]",
                            "tests/test_utils.py::TestUnquoteHeaderValue::test_is_filename",
                            "tests/test_utils.py::TestGetEnvironProxies::test_bypass[no_proxy-http://192.168.0.1:5000/]",
                            "tests/test_utils.py::TestGetEnvironProxies::test_bypass[no_proxy-http://192.168.0.1/]",
                            "tests/test_utils.py::TestGetEnvironProxies::test_bypass[no_proxy-http://172.16.1.1/]",
                            "tests/test_utils.py::TestGetEnvironProxies::test_bypass[no_proxy-http://172.16.1.1:5000/]",
                            "tests/test_utils.py::TestGetEnvironProxies::test_bypass[no_proxy-http://localhost.localdomain:5000/v1.0/]",
                            "tests/test_utils.py::TestGetEnvironProxies::test_bypass[NO_PROXY-http://192.168.0.1:5000/]",
                            "tests/test_utils.py::TestGetEnvironProxies::test_bypass[NO_PROXY-http://192.168.0.1/]",
                            "tests/test_utils.py::TestGetEnvironProxies::test_bypass[NO_PROXY-http://172.16.1.1/]",
                            "tests/test_utils.py::TestGetEnvironProxies::test_bypass[NO_PROXY-http://172.16.1.1:5000/]",
                            "tests/test_utils.py::TestGetEnvironProxies::test_bypass[NO_PROXY-http://localhost.localdomain:5000/v1.0/]",
                            "tests/test_utils.py::TestGetEnvironProxies::test_not_bypass[no_proxy-http://192.168.1.1:5000/]",
                            "tests/test_utils.py::TestGetEnvironProxies::test_not_bypass[no_proxy-http://192.168.1.1/]",
                            "tests/test_utils.py::TestGetEnvironProxies::test_not_bypass[no_proxy-http://www.requests.com/]",
                            "tests/test_utils.py::TestGetEnvironProxies::test_not_bypass[NO_PROXY-http://192.168.1.1:5000/]",
                            "tests/test_utils.py::TestGetEnvironProxies::test_not_bypass[NO_PROXY-http://192.168.1.1/]",
                            "tests/test_utils.py::TestGetEnvironProxies::test_not_bypass[NO_PROXY-http://www.requests.com/]",
                            "tests/test_utils.py::TestGetEnvironProxies::test_bypass_no_proxy_keyword[no_proxy-http://192.168.1.1:5000/]",
                            "tests/test_utils.py::TestGetEnvironProxies::test_bypass_no_proxy_keyword[no_proxy-http://192.168.1.1/]",
                            "tests/test_utils.py::TestGetEnvironProxies::test_bypass_no_proxy_keyword[no_proxy-http://www.requests.com/]",
                            "tests/test_utils.py::TestGetEnvironProxies::test_bypass_no_proxy_keyword[NO_PROXY-http://192.168.1.1:5000/]",
                            "tests/test_utils.py::TestGetEnvironProxies::test_bypass_no_proxy_keyword[NO_PROXY-http://192.168.1.1/]",
                            "tests/test_utils.py::TestGetEnvironProxies::test_bypass_no_proxy_keyword[NO_PROXY-http://www.requests.com/]",
                            "tests/test_utils.py::TestGetEnvironProxies::test_not_bypass_no_proxy_keyword[no_proxy-http://192.168.0.1:5000/]",
                            "tests/test_utils.py::TestGetEnvironProxies::test_not_bypass_no_proxy_keyword[no_proxy-http://192.168.0.1/]",
                            "tests/test_utils.py::TestGetEnvironProxies::test_not_bypass_no_proxy_keyword[no_proxy-http://172.16.1.1/]",
                            "tests/test_utils.py::TestGetEnvironProxies::test_not_bypass_no_proxy_keyword[no_proxy-http://172.16.1.1:5000/]",
                            "tests/test_utils.py::TestGetEnvironProxies::test_not_bypass_no_proxy_keyword[no_proxy-http://localhost.localdomain:5000/v1.0/]",
                            "tests/test_utils.py::TestGetEnvironProxies::test_not_bypass_no_proxy_keyword[NO_PROXY-http://192.168.0.1:5000/]",
                            "tests/test_utils.py::TestGetEnvironProxies::test_not_bypass_no_proxy_keyword[NO_PROXY-http://192.168.0.1/]",
                            "tests/test_utils.py::TestGetEnvironProxies::test_not_bypass_no_proxy_keyword[NO_PROXY-http://172.16.1.1/]",
                            "tests/test_utils.py::TestGetEnvironProxies::test_not_bypass_no_proxy_keyword[NO_PROXY-http://172.16.1.1:5000/]",
                            "tests/test_utils.py::TestGetEnvironProxies::test_not_bypass_no_proxy_keyword[NO_PROXY-http://localhost.localdomain:5000/v1.0/]",
                            "tests/test_utils.py::TestIsIPv4Address::test_valid",
                            "tests/test_utils.py::TestIsIPv4Address::test_invalid[8.8.8.8.8]",
                            "tests/test_utils.py::TestIsIPv4Address::test_invalid[localhost.localdomain]",
                            "tests/test_utils.py::TestIsValidCIDR::test_valid",
                            "tests/test_utils.py::TestIsValidCIDR::test_invalid[8.8.8.8]",
                            "tests/test_utils.py::TestIsValidCIDR::test_invalid[192.168.1.0/a]",
                            "tests/test_utils.py::TestIsValidCIDR::test_invalid[192.168.1.0/128]",
                            "tests/test_utils.py::TestIsValidCIDR::test_invalid[192.168.1.0/-1]",
                            "tests/test_utils.py::TestIsValidCIDR::test_invalid[192.168.1.999/24]",
                            "tests/test_utils.py::TestAddressInNetwork::test_valid",
                            "tests/test_utils.py::TestAddressInNetwork::test_invalid",
                            "tests/test_utils.py::TestGuessFilename::test_guess_filename_invalid[1]",
                            "tests/test_utils.py::TestGuessFilename::test_guess_filename_invalid[value1]",
                            "tests/test_utils.py::TestGuessFilename::test_guess_filename_valid[value-bytes]",
                            "tests/test_utils.py::TestGuessFilename::test_guess_filename_valid[value-str]",
                            "tests/test_utils.py::TestExtractZippedPaths::test_unzipped_paths_unchanged[/]",
                            "tests/test_utils.py::TestExtractZippedPaths::test_unzipped_paths_unchanged[/test_utils.py]",
                            "tests/test_utils.py::TestExtractZippedPaths::test_unzipped_paths_unchanged[/__init__.py]",
                            "tests/test_utils.py::TestExtractZippedPaths::test_unzipped_paths_unchanged[/location]",
                            "tests/test_utils.py::TestExtractZippedPaths::test_zipped_paths_extracted",
                            "tests/test_utils.py::TestExtractZippedPaths::test_invalid_unc_path",
                            "tests/test_utils.py::TestContentEncodingDetection::test_none",
                            "tests/test_utils.py::TestContentEncodingDetection::test_pragmas[<meta",
                            "tests/test_utils.py::TestContentEncodingDetection::test_pragmas[<?xml",
                            "tests/test_utils.py::TestContentEncodingDetection::test_precedence",
                            "tests/test_utils.py::TestGuessJSONUTF::test_encoded[utf-32]",
                            "tests/test_utils.py::TestGuessJSONUTF::test_encoded[utf-8-sig]",
                            "tests/test_utils.py::TestGuessJSONUTF::test_encoded[utf-16]",
                            "tests/test_utils.py::TestGuessJSONUTF::test_encoded[utf-8]",
                            "tests/test_utils.py::TestGuessJSONUTF::test_encoded[utf-16-be]",
                            "tests/test_utils.py::TestGuessJSONUTF::test_encoded[utf-16-le]",
                            "tests/test_utils.py::TestGuessJSONUTF::test_encoded[utf-32-be]",
                            "tests/test_utils.py::TestGuessJSONUTF::test_encoded[utf-32-le]",
                            "tests/test_utils.py::TestGuessJSONUTF::test_bad_utf_like_encoding",
                            "tests/test_utils.py::TestGuessJSONUTF::test_guess_by_bom[utf-16-be-utf-16]",
                            "tests/test_utils.py::TestGuessJSONUTF::test_guess_by_bom[utf-16-le-utf-16]",
                            "tests/test_utils.py::TestGuessJSONUTF::test_guess_by_bom[utf-32-be-utf-32]",
                            "tests/test_utils.py::TestGuessJSONUTF::test_guess_by_bom[utf-32-le-utf-32]",
                            "tests/test_utils.py::test_get_auth_from_url[http://%25%21%2A%27%28%29%3B%3A%40%26%3D%2B%24%2C%2F%3F%23%5B%5D%20:%25%21%2A%27%28%29%3B%3A%40%26%3D%2B%24%2C%2F%3F%23%5B%5D%20@request.com/url.html#test-auth0]",
                            "tests/test_utils.py::test_get_auth_from_url[http://user:pass@complex.url.com/path?query=yes-auth1]",
                            "tests/test_utils.py::test_get_auth_from_url[http://user:pass%20pass@complex.url.com/path?query=yes-auth2]",
                            "tests/test_utils.py::test_get_auth_from_url[http://user:pass",
                            "tests/test_utils.py::test_get_auth_from_url[http://user%25user:pass@complex.url.com/path?query=yes-auth4]",
                            "tests/test_utils.py::test_get_auth_from_url[http://user:pass%23pass@complex.url.com/path?query=yes-auth5]",
                            "tests/test_utils.py::test_get_auth_from_url[http://complex.url.com/path?query=yes-auth6]",
                            "tests/test_utils.py::test_requote_uri_with_unquoted_percents[http://example.com/fiz?buz=%25ppicture-http://example.com/fiz?buz=%25ppicture]",
                            "tests/test_utils.py::test_requote_uri_with_unquoted_percents[http://example.com/fiz?buz=%ppicture-http://example.com/fiz?buz=%25ppicture]",
                            "tests/test_utils.py::test_unquote_unreserved[http://example.com/?a=%---http://example.com/?a=%--]",
                            "tests/test_utils.py::test_unquote_unreserved[http://example.com/?a=%300-http://example.com/?a=00]",
                            "tests/test_utils.py::test_dotted_netmask[8-255.0.0.0]",
                            "tests/test_utils.py::test_dotted_netmask[24-255.255.255.0]",
                            "tests/test_utils.py::test_dotted_netmask[25-255.255.255.128]",
                            "tests/test_utils.py::test_select_proxies[hTTp://u:p@Some.Host/path-http://some.host.proxy-proxies0]",
                            "tests/test_utils.py::test_select_proxies[hTTp://u:p@Other.Host/path-http://http.proxy-proxies1]",
                            "tests/test_utils.py::test_select_proxies[hTTp:///path-http://http.proxy-proxies2]",
                            "tests/test_utils.py::test_select_proxies[hTTps://Other.Host-None-proxies3]",
                            "tests/test_utils.py::test_select_proxies[file:///etc/motd-None-proxies4]",
                            "tests/test_utils.py::test_select_proxies[hTTp://u:p@Some.Host/path-socks5://some.host.proxy-proxies5]",
                            "tests/test_utils.py::test_select_proxies[hTTp://u:p@Other.Host/path-socks5://http.proxy-proxies6]",
                            "tests/test_utils.py::test_select_proxies[hTTp:///path-socks5://http.proxy-proxies7]",
                            "tests/test_utils.py::test_select_proxies[hTTps://Other.Host-socks5://http.proxy-proxies8]",
                            "tests/test_utils.py::test_select_proxies[http://u:p@other.host/path-http://http.proxy-proxies9]",
                            "tests/test_utils.py::test_select_proxies[http://u:p@some.host/path-http://some.host.proxy-proxies10]",
                            "tests/test_utils.py::test_select_proxies[https://u:p@other.host/path-socks5://http.proxy-proxies11]",
                            "tests/test_utils.py::test_select_proxies[https://u:p@some.host/path-socks5://http.proxy-proxies12]",
                            "tests/test_utils.py::test_select_proxies[https://-socks5://http.proxy-proxies13]",
                            "tests/test_utils.py::test_select_proxies[file:///etc/motd-socks5://http.proxy-proxies14]",
                            "tests/test_utils.py::test_parse_dict_header[foo=\"is",
                            "tests/test_utils.py::test_parse_dict_header[key_without_value-expected1]",
                            "tests/test_utils.py::test__parse_content_type_header[application/xml-expected0]",
                            "tests/test_utils.py::test__parse_content_type_header[application/json",
                            "tests/test_utils.py::test__parse_content_type_header[text/plain-expected3]",
                            "tests/test_utils.py::test__parse_content_type_header[multipart/form-data;",
                            "tests/test_utils.py::test_get_encoding_from_headers[value0-None]",
                            "tests/test_utils.py::test_get_encoding_from_headers[value1-utf-8]",
                            "tests/test_utils.py::test_get_encoding_from_headers[value2-ISO-8859-1]",
                            "tests/test_utils.py::test_iter_slices[-0]",
                            "tests/test_utils.py::test_iter_slices[T-1]",
                            "tests/test_utils.py::test_iter_slices[Test-4]",
                            "tests/test_utils.py::test_iter_slices[Cont-0]",
                            "tests/test_utils.py::test_iter_slices[Other--5]",
                            "tests/test_utils.py::test_iter_slices[Content-None]",
                            "tests/test_utils.py::test_parse_header_links[<http:/.../front.jpeg>;",
                            "tests/test_utils.py::test_parse_header_links[<http:/.../front.jpeg>-expected1]",
                            "tests/test_utils.py::test_parse_header_links[<http:/.../front.jpeg>;-expected2]",
                            "tests/test_utils.py::test_parse_header_links[-expected4]",
                            "tests/test_utils.py::test_prepend_scheme_if_needed[example.com/path-http://example.com/path]",
                            "tests/test_utils.py::test_prepend_scheme_if_needed[//example.com/path-http://example.com/path]",
                            "tests/test_utils.py::test_prepend_scheme_if_needed[example.com:80-http://example.com:80]",
                            "tests/test_utils.py::test_to_native_string[T-T0]",
                            "tests/test_utils.py::test_to_native_string[T-T1]",
                            "tests/test_utils.py::test_to_native_string[T-T2]",
                            "tests/test_utils.py::test_urldefragauth[http://u:p@example.com/path?a=1#test-http://example.com/path?a=1]",
                            "tests/test_utils.py::test_urldefragauth[http://example.com/path-http://example.com/path]",
                            "tests/test_utils.py::test_urldefragauth[//u:p@example.com/path-//example.com/path]",
                            "tests/test_utils.py::test_urldefragauth[//example.com/path-//example.com/path]",
                            "tests/test_utils.py::test_urldefragauth[example.com/path-//example.com/path]",
                            "tests/test_utils.py::test_urldefragauth[scheme:u:p@example.com/path-scheme://example.com/path]",
                            "tests/test_utils.py::test_should_bypass_proxies[http://192.168.0.1:5000/-True]",
                            "tests/test_utils.py::test_should_bypass_proxies[http://192.168.0.1/-True]",
                            "tests/test_utils.py::test_should_bypass_proxies[http://172.16.1.1/-True]",
                            "tests/test_utils.py::test_should_bypass_proxies[http://172.16.1.1:5000/-True]",
                            "tests/test_utils.py::test_should_bypass_proxies[http://localhost.localdomain:5000/v1.0/-True]",
                            "tests/test_utils.py::test_should_bypass_proxies[http://google.com:6000/-True]",
                            "tests/test_utils.py::test_should_bypass_proxies[http://172.16.1.12/-False]",
                            "tests/test_utils.py::test_should_bypass_proxies[http://172.16.1.12:5000/-False]",
                            "tests/test_utils.py::test_should_bypass_proxies[http://google.com:5000/v1.0/-False]",
                            "tests/test_utils.py::test_should_bypass_proxies[file:///some/path/on/disk-True]",
                            "tests/test_utils.py::test_add_dict_to_cookiejar[cookiejar0]",
                            "tests/test_utils.py::test_add_dict_to_cookiejar[cookiejar1]",
                            "tests/test_utils.py::test_unicode_is_ascii[test-True]",
                            "tests/test_utils.py::test_unicode_is_ascii[\\xe6\\xed\\xf6\\xfb-False]",
                            "tests/test_utils.py::test_unicode_is_ascii[\\u30b8\\u30a7\\u30fc\\u30d4\\u30fc\\u30cb\\u30c3\\u30af-False]",
                            "tests/test_utils.py::test_should_bypass_proxies_no_proxy[http://192.168.0.1:5000/-True]",
                            "tests/test_utils.py::test_should_bypass_proxies_no_proxy[http://192.168.0.1/-True]",
                            "tests/test_utils.py::test_should_bypass_proxies_no_proxy[http://172.16.1.1/-True]",
                            "tests/test_utils.py::test_should_bypass_proxies_no_proxy[http://172.16.1.1:5000/-True]",
                            "tests/test_utils.py::test_should_bypass_proxies_no_proxy[http://localhost.localdomain:5000/v1.0/-True]",
                            "tests/test_utils.py::test_should_bypass_proxies_no_proxy[http://172.16.1.12/-False]",
                            "tests/test_utils.py::test_should_bypass_proxies_no_proxy[http://172.16.1.12:5000/-False]",
                            "tests/test_utils.py::test_should_bypass_proxies_no_proxy[http://google.com:5000/v1.0/-False]",
                            "tests/test_utils.py::test_set_environ[no_proxy-192.168.0.0/24,127.0.0.1,localhost.localdomain]",
                            "tests/test_utils.py::test_set_environ[no_proxy-None]",
                            "tests/test_utils.py::test_set_environ[a_new_key-192.168.0.0/24,127.0.0.1,localhost.localdomain]",
                            "tests/test_utils.py::test_set_environ[a_new_key-None]",
                            "tests/test_utils.py::test_set_environ_raises_exception"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "sphinx-doc__sphinx-11550.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "tests/test_ext_autodoc_preserve_defaults.py::test_preserve_defaults",
                            "tests/test_ext_autodoc_preserve_defaults.py::test_preserve_defaults_special_constructs"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "psf__requests-4718.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "tests/test_requests.py::TestRequests::test_should_strip_auth_host_change",
                            "tests/test_requests.py::TestRequests::test_should_strip_auth_http_downgrade",
                            "tests/test_requests.py::TestRequests::test_should_strip_auth_https_upgrade",
                            "tests/test_requests.py::TestRequests::test_should_strip_auth_port_change"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "tests/test_requests.py::TestRequests::test_entry_points",
                            "tests/test_requests.py::TestRequests::test_invalid_url[MissingSchema-hiwpefhipowhefopw]",
                            "tests/test_requests.py::TestRequests::test_invalid_url[InvalidSchema-localhost:3128]",
                            "tests/test_requests.py::TestRequests::test_invalid_url[InvalidSchema-localhost.localdomain:3128/]",
                            "tests/test_requests.py::TestRequests::test_invalid_url[InvalidSchema-10.122.1.1:3128/]",
                            "tests/test_requests.py::TestRequests::test_invalid_url[InvalidURL-http://]",
                            "tests/test_requests.py::TestRequests::test_basic_building",
                            "tests/test_requests.py::TestRequests::test_path_is_not_double_encoded",
                            "tests/test_requests.py::TestRequests::test_params_are_added_before_fragment[http://example.com/path#fragment-http://example.com/path?a=b#fragment]",
                            "tests/test_requests.py::TestRequests::test_params_are_added_before_fragment[http://example.com/path?key=value#fragment-http://example.com/path?key=value&a=b#fragment]",
                            "tests/test_requests.py::TestRequests::test_params_original_order_is_preserved_by_default",
                            "tests/test_requests.py::TestRequests::test_params_bytes_are_encoded",
                            "tests/test_requests.py::TestRequests::test_binary_put",
                            "tests/test_requests.py::TestRequests::test_whitespaces_are_removed_from_url",
                            "tests/test_requests.py::TestRequests::test_basicauth_encodes_byte_strings",
                            "tests/test_requests.py::TestRequests::test_errors[http://doesnotexist.google.com-ConnectionError]",
                            "tests/test_requests.py::TestRequests::test_errors[http://localhost:1-ConnectionError]",
                            "tests/test_requests.py::TestRequests::test_errors[http://fe80::5054:ff:fe5a:fc0-InvalidURL]",
                            "tests/test_requests.py::TestRequests::test_proxy_error",
                            "tests/test_requests.py::TestRequests::test_non_prepared_request_error",
                            "tests/test_requests.py::TestRequests::test_prepare_request_with_bytestring_url",
                            "tests/test_requests.py::TestRequests::test_links",
                            "tests/test_requests.py::TestRequests::test_cookie_parameters",
                            "tests/test_requests.py::TestRequests::test_cookie_as_dict_keeps_len",
                            "tests/test_requests.py::TestRequests::test_cookie_as_dict_keeps_items",
                            "tests/test_requests.py::TestRequests::test_cookie_as_dict_keys",
                            "tests/test_requests.py::TestRequests::test_cookie_as_dict_values",
                            "tests/test_requests.py::TestRequests::test_cookie_as_dict_items",
                            "tests/test_requests.py::TestRequests::test_cookie_duplicate_names_different_domains",
                            "tests/test_requests.py::TestRequests::test_cookie_duplicate_names_raises_cookie_conflict_error",
                            "tests/test_requests.py::TestRequests::test_cookie_policy_copy",
                            "tests/test_requests.py::TestRequests::test_empty_response_has_content_none",
                            "tests/test_requests.py::TestRequests::test_response_is_iterable",
                            "tests/test_requests.py::TestRequests::test_response_decode_unicode",
                            "tests/test_requests.py::TestRequests::test_response_reason_unicode",
                            "tests/test_requests.py::TestRequests::test_response_reason_unicode_fallback",
                            "tests/test_requests.py::TestRequests::test_response_chunk_size_type",
                            "tests/test_requests.py::TestRequests::test_http_error",
                            "tests/test_requests.py::TestRequests::test_transport_adapter_ordering",
                            "tests/test_requests.py::TestRequests::test_session_get_adapter_prefix_matching",
                            "tests/test_requests.py::TestRequests::test_session_get_adapter_prefix_matching_mixed_case",
                            "tests/test_requests.py::TestRequests::test_session_get_adapter_prefix_matching_is_case_insensitive",
                            "tests/test_requests.py::TestRequests::test_long_authinfo_in_url",
                            "tests/test_requests.py::TestRequests::test_nonhttp_schemes_dont_check_URLs",
                            "tests/test_requests.py::TestRequests::test_prepare_body_position_non_stream",
                            "tests/test_requests.py::TestRequests::test_rewind_body",
                            "tests/test_requests.py::TestRequests::test_rewind_partially_read_body",
                            "tests/test_requests.py::TestRequests::test_rewind_body_no_seek",
                            "tests/test_requests.py::TestRequests::test_rewind_body_failed_seek",
                            "tests/test_requests.py::TestRequests::test_rewind_body_failed_tell",
                            "tests/test_requests.py::TestRequests::test_basic_auth_str_is_always_native[test-test-Basic",
                            "tests/test_requests.py::TestRequests::test_basic_auth_str_is_always_native[\\xd0\\xb8\\xd0\\xbc\\xd1\\x8f-\\xd0\\xbf\\xd0\\xb0\\xd1\\x80\\xd0\\xbe\\xd0\\xbb\\xd1\\x8c-Basic",
                            "tests/test_requests.py::TestRequests::test_proxy_auth",
                            "tests/test_requests.py::TestRequests::test_proxy_auth_empty_pass",
                            "tests/test_requests.py::TestRequests::test_response_without_release_conn",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_init[cid0]",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_init[cid1]",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_init[cid2]",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_docstring_example",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_len",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_getitem",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_fixes_649",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_delitem",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_contains",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_get",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_update",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_update_retains_unchanged",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_iter",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_equality",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_setdefault",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_lower_items",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_preserve_key_case",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_preserve_last_key_case",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_copy",
                            "tests/test_requests.py::TestMorselToCookieExpires::test_expires_valid_str",
                            "tests/test_requests.py::TestMorselToCookieExpires::test_expires_invalid_int[100-TypeError]",
                            "tests/test_requests.py::TestMorselToCookieExpires::test_expires_invalid_int[woops-ValueError]",
                            "tests/test_requests.py::TestMorselToCookieExpires::test_expires_none",
                            "tests/test_requests.py::TestMorselToCookieMaxAge::test_max_age_valid_int",
                            "tests/test_requests.py::TestMorselToCookieMaxAge::test_max_age_invalid_str",
                            "tests/test_requests.py::TestTimeout::test_connect_timeout[timeout0]",
                            "tests/test_requests.py::TestTimeout::test_connect_timeout[timeout1]",
                            "tests/test_requests.py::TestTimeout::test_total_timeout_connect[timeout0]",
                            "tests/test_requests.py::TestTimeout::test_total_timeout_connect[timeout1]",
                            "tests/test_requests.py::test_json_encodes_as_bytes",
                            "tests/test_requests.py::test_proxy_env_vars_override_default[http_proxy-http://example.com-socks5://proxy.com:9876]",
                            "tests/test_requests.py::test_proxy_env_vars_override_default[https_proxy-https://example.com-socks5://proxy.com:9876]",
                            "tests/test_requests.py::test_proxy_env_vars_override_default[all_proxy-http://example.com-socks5://proxy.com:9876]",
                            "tests/test_requests.py::test_proxy_env_vars_override_default[all_proxy-https://example.com-socks5://proxy.com:9876]",
                            "tests/test_requests.py::test_data_argument_accepts_tuples[data0]",
                            "tests/test_requests.py::test_data_argument_accepts_tuples[data1]",
                            "tests/test_requests.py::test_data_argument_accepts_tuples[data2]",
                            "tests/test_requests.py::test_prepared_copy[None]",
                            "tests/test_requests.py::test_prepared_copy[kwargs1]",
                            "tests/test_requests.py::test_prepared_copy[kwargs2]",
                            "tests/test_requests.py::test_prepared_copy[kwargs3]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://google.com-http://google.com/]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://\\u30b8\\u30a7\\u30fc\\u30d4\\u30fc\\u30cb\\u30c3\\u30af.jp-http://xn--hckqz9bzb1cyrb.jp/]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://xn--n3h.net/-http://xn--n3h.net/0]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://\\xe3\\x82\\xb8\\xe3\\x82\\xa7\\xe3\\x83\\xbc\\xe3\\x83\\x94\\xe3\\x83\\xbc\\xe3\\x83\\x8b\\xe3\\x83\\x83\\xe3\\x82\\xaf.jp-http://xn--hckqz9bzb1cyrb.jp/]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://stra\\xdfe.de/stra\\xdfe-http://xn--strae-oqa.de/stra%C3%9Fe]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://stra\\xc3\\x9fe.de/stra\\xc3\\x9fe-http://xn--strae-oqa.de/stra%C3%9Fe]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://K\\xf6nigsg\\xe4\\xdfchen.de/stra\\xdfe-http://xn--knigsgchen-b4a3dun.de/stra%C3%9Fe]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://K\\xc3\\xb6nigsg\\xc3\\xa4\\xc3\\x9fchen.de/stra\\xc3\\x9fe-http://xn--knigsgchen-b4a3dun.de/stra%C3%9Fe]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://xn--n3h.net/-http://xn--n3h.net/1]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://[1200:0000:ab00:1234:0000:2552:7777:1313]:12345/-http://[1200:0000:ab00:1234:0000:2552:7777:1313]:12345/0]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://[1200:0000:ab00:1234:0000:2552:7777:1313]:12345/-http://[1200:0000:ab00:1234:0000:2552:7777:1313]:12345/1]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_bad_url[http://*.google.com0]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_bad_url[http://*0]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_bad_url[http://*.google.com1]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_bad_url[http://*1]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_bad_url[http://\\u2603.net/]",
                            "tests/test_requests.py::TestPreparingURLs::test_url_mutation[http+unix://%2Fvar%2Frun%2Fsocket/path%7E-http+unix://%2Fvar%2Frun%2Fsocket/path~0]",
                            "tests/test_requests.py::TestPreparingURLs::test_url_mutation[http+unix://%2Fvar%2Frun%2Fsocket/path%7E-http+unix://%2Fvar%2Frun%2Fsocket/path~1]",
                            "tests/test_requests.py::TestPreparingURLs::test_url_mutation[mailto:user@example.org-mailto:user@example.org0]",
                            "tests/test_requests.py::TestPreparingURLs::test_url_mutation[mailto:user@example.org-mailto:user@example.org1]",
                            "tests/test_requests.py::TestPreparingURLs::test_url_mutation[data:SSDimaUgUHl0aG9uIQ==-data:SSDimaUgUHl0aG9uIQ==]",
                            "tests/test_requests.py::TestPreparingURLs::test_parameters_for_nonstandard_schemes[http+unix://%2Fvar%2Frun%2Fsocket/path-params0-http+unix://%2Fvar%2Frun%2Fsocket/path?key=value]",
                            "tests/test_requests.py::TestPreparingURLs::test_parameters_for_nonstandard_schemes[http+unix://%2Fvar%2Frun%2Fsocket/path-params1-http+unix://%2Fvar%2Frun%2Fsocket/path?key=value]",
                            "tests/test_requests.py::TestPreparingURLs::test_parameters_for_nonstandard_schemes[mailto:user@example.org-params2-mailto:user@example.org]",
                            "tests/test_requests.py::TestPreparingURLs::test_parameters_for_nonstandard_schemes[mailto:user@example.org-params3-mailto:user@example.org]"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "sphinx-doc__sphinx-10504.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "tests/test_transforms_post_transforms.py::test_keyboard_hyphen_spaces"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "tests/test_transforms_post_transforms.py::test_nitpicky_warning",
                            "tests/test_transforms_post_transforms.py::test_missing_reference",
                            "tests/test_transforms_post_transforms.py::test_missing_reference_conditional_pending_xref"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "pytest-dev__pytest-8641.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "testing/logging/test_formatter.py::test_coloredlogformatter_with_width_precision"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "testing/logging/test_formatter.py::test_coloredlogformatter",
                            "testing/logging/test_formatter.py::test_multiline_message",
                            "testing/logging/test_formatter.py::test_colored_short_level"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "sphinx-doc__sphinx-11544.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "tests/test_build_linkcheck.py::test_too_many_requests_retry_after_HTTP_date"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "tests/test_build_linkcheck.py::test_defaults",
                            "tests/test_build_linkcheck.py::test_check_link_response_only",
                            "tests/test_build_linkcheck.py::test_too_many_retries",
                            "tests/test_build_linkcheck.py::test_raw_node",
                            "tests/test_build_linkcheck.py::test_anchors_ignored",
                            "tests/test_build_linkcheck.py::test_anchors_ignored_for_url",
                            "tests/test_build_linkcheck.py::test_raises_for_invalid_status",
                            "tests/test_build_linkcheck.py::test_auth_header_uses_first_match",
                            "tests/test_build_linkcheck.py::test_auth_header_no_match",
                            "tests/test_build_linkcheck.py::test_linkcheck_request_headers",
                            "tests/test_build_linkcheck.py::test_linkcheck_request_headers_no_slash",
                            "tests/test_build_linkcheck.py::test_linkcheck_request_headers_default",
                            "tests/test_build_linkcheck.py::test_follows_redirects_on_HEAD",
                            "tests/test_build_linkcheck.py::test_follows_redirects_on_GET",
                            "tests/test_build_linkcheck.py::test_linkcheck_allowed_redirects",
                            "tests/test_build_linkcheck.py::test_invalid_ssl",
                            "tests/test_build_linkcheck.py::test_connect_to_selfsigned_fails",
                            "tests/test_build_linkcheck.py::test_connect_to_selfsigned_with_tls_verify_false",
                            "tests/test_build_linkcheck.py::test_connect_to_selfsigned_with_tls_cacerts",
                            "tests/test_build_linkcheck.py::test_connect_to_selfsigned_with_requests_env_var",
                            "tests/test_build_linkcheck.py::test_connect_to_selfsigned_nonexistent_cert_file",
                            "tests/test_build_linkcheck.py::test_TooManyRedirects_on_HEAD",
                            "tests/test_build_linkcheck.py::test_too_many_requests_retry_after_int_delay",
                            "tests/test_build_linkcheck.py::test_too_many_requests_retry_after_without_header",
                            "tests/test_build_linkcheck.py::test_too_many_requests_user_timeout",
                            "tests/test_build_linkcheck.py::test_limit_rate_default_sleep",
                            "tests/test_build_linkcheck.py::test_limit_rate_user_max_delay",
                            "tests/test_build_linkcheck.py::test_limit_rate_doubles_previous_wait_time",
                            "tests/test_build_linkcheck.py::test_limit_rate_clips_wait_time_to_max_time",
                            "tests/test_build_linkcheck.py::test_limit_rate_bails_out_after_waiting_max_time",
                            "tests/test_build_linkcheck.py::test_connection_contention",
                            "tests/test_build_linkcheck.py::test_get_after_head_raises_connection_error",
                            "tests/test_build_linkcheck.py::test_linkcheck_exclude_documents"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "sphinx-doc__sphinx-7501.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "tests/test_domain_std.py::test_glossary"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "tests/test_domain_std.py::test_process_doc_handle_figure_caption",
                            "tests/test_domain_std.py::test_process_doc_handle_table_title",
                            "tests/test_domain_std.py::test_get_full_qualified_name",
                            "tests/test_domain_std.py::test_glossary_warning",
                            "tests/test_domain_std.py::test_glossary_comment",
                            "tests/test_domain_std.py::test_glossary_comment2",
                            "tests/test_domain_std.py::test_glossary_sorted",
                            "tests/test_domain_std.py::test_glossary_alphanumeric",
                            "tests/test_domain_std.py::test_glossary_conflicted_labels",
                            "tests/test_domain_std.py::test_cmdoption",
                            "tests/test_domain_std.py::test_multiple_cmdoptions",
                            "tests/test_domain_std.py::test_disabled_docref"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "sympy__sympy-18763.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "test_latex_subs"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "test_printmethod",
                            "test_latex_basic",
                            "test_latex_builtins",
                            "test_latex_SingularityFunction",
                            "test_latex_cycle",
                            "test_latex_permutation",
                            "test_latex_Float",
                            "test_latex_vector_expressions",
                            "test_latex_symbols",
                            "test_latex_functions",
                            "test_function_subclass_different_name",
                            "test_hyper_printing",
                            "test_latex_bessel",
                            "test_latex_fresnel",
                            "test_latex_brackets",
                            "test_latex_indexed",
                            "test_latex_derivatives",
                            "test_latex_integrals",
                            "test_latex_sets",
                            "test_latex_SetExpr",
                            "test_latex_Range",
                            "test_latex_sequences",
                            "test_latex_FourierSeries",
                            "test_latex_FormalPowerSeries",
                            "test_latex_intervals",
                            "test_latex_AccumuBounds",
                            "test_latex_emptyset",
                            "test_latex_universalset",
                            "test_latex_commutator",
                            "test_latex_union",
                            "test_latex_intersection",
                            "test_latex_symmetric_difference",
                            "test_latex_Complement",
                            "test_latex_productset",
                            "test_set_operators_parenthesis",
                            "test_latex_Complexes",
                            "test_latex_Naturals",
                            "test_latex_Naturals0",
                            "test_latex_Integers",
                            "test_latex_ImageSet",
                            "test_latex_ConditionSet",
                            "test_latex_ComplexRegion",
                            "test_latex_Contains",
                            "test_latex_sum",
                            "test_latex_product",
                            "test_latex_limits",
                            "test_latex_log",
                            "test_issue_3568",
                            "test_latex",
                            "test_latex_dict",
                            "test_latex_list",
                            "test_latex_rational",
                            "test_latex_inverse",
                            "test_latex_DiracDelta",
                            "test_latex_Heaviside",
                            "test_latex_KroneckerDelta",
                            "test_latex_LeviCivita",
                            "test_mode",
                            "test_latex_mathieu",
                            "test_latex_Piecewise",
                            "test_latex_Matrix",
                            "test_latex_matrix_with_functions",
                            "test_latex_NDimArray",
                            "test_latex_mul_symbol",
                            "test_latex_issue_4381",
                            "test_latex_issue_4576",
                            "test_latex_pow_fraction",
                            "test_noncommutative",
                            "test_latex_order",
                            "test_latex_Lambda",
                            "test_latex_PolyElement",
                            "test_latex_FracElement",
                            "test_latex_Poly",
                            "test_latex_Poly_order",
                            "test_latex_ComplexRootOf",
                            "test_latex_RootSum",
                            "test_settings",
                            "test_latex_numbers",
                            "test_latex_euler",
                            "test_lamda",
                            "test_custom_symbol_names",
                            "test_matAdd",
                            "test_matMul",
                            "test_latex_MatrixSlice",
                            "test_latex_RandomDomain",
                            "test_PrettyPoly",
                            "test_integral_transforms",
                            "test_PolynomialRingBase",
                            "test_categories",
                            "test_Modules",
                            "test_QuotientRing",
                            "test_Tr",
                            "test_Adjoint",
                            "test_Transpose",
                            "test_Hadamard",
                            "test_ElementwiseApplyFunction",
                            "test_ZeroMatrix",
                            "test_OneMatrix",
                            "test_Identity",
                            "test_boolean_args_order",
                            "test_imaginary",
                            "test_builtins_without_args",
                            "test_latex_greek_functions",
                            "test_translate",
                            "test_other_symbols",
                            "test_modifiers",
                            "test_greek_symbols",
                            "test_fancyset_symbols",
                            "test_builtin_no_args",
                            "test_issue_6853",
                            "test_Mul",
                            "test_Pow",
                            "test_issue_7180",
                            "test_issue_8409",
                            "test_issue_7117",
                            "test_issue_15439",
                            "test_issue_2934",
                            "test_issue_10489",
                            "test_issue_12886",
                            "test_issue_13651",
                            "test_latex_UnevaluatedExpr",
                            "test_MatrixElement_printing",
                            "test_MatrixSymbol_printing",
                            "test_KroneckerProduct_printing",
                            "test_Quaternion_latex_printing",
                            "test_TensorProduct_printing",
                            "test_WedgeProduct_printing",
                            "test_issue_14041",
                            "test_issue_9216",
                            "test_latex_printer_tensor",
                            "test_multiline_latex",
                            "test_issue_15353",
                            "test_trace",
                            "test_print_basic",
                            "test_MatrixSymbol_bold",
                            "test_imaginary_unit",
                            "test_text_re_im",
                            "test_DiffGeomMethods",
                            "test_unit_printing",
                            "test_issue_17092",
                            "test_latex_decimal_separator"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "django__django-9003.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "test_join_reuse_order (queries.tests.Queries4Tests)"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "test_ticket15786 (queries.tests.Exclude15786)",
                            "test_no_extra_params (queries.tests.DefaultValuesInsertTest)",
                            "test_infinite_loop (queries.tests.ConditionalTests)",
                            "test_ticket7371 (queries.tests.CustomPkTests)",
                            "test_empty_string_promotion (queries.tests.EmptyStringPromotionTests)",
                            "#13227 -- If a queryset is already evaluated, it can still be used as a query arg",
                            "test_no_fields_cloning (queries.tests.CloneTests)",
                            "test_no_model_options_cloning (queries.tests.CloneTests)",
                            "test_ticket_7302 (queries.tests.EscapingTests)",
                            "test_21001 (queries.tests.EmptyStringsAsNullTest)",
                            "test_direct_exclude (queries.tests.EmptyStringsAsNullTest)",
                            "test_joined_exclude (queries.tests.EmptyStringsAsNullTest)",
                            "test_ticket_24605 (queries.tests.TestTicket24605)",
                            "test_ticket10432 (queries.tests.GeneratorExpressionTests)",
                            "test_tickets_3045_3288 (queries.tests.SelectRelatedTests)",
                            "test_ticket_20101 (queries.tests.Ticket20101Tests)",
                            "test_evaluated_proxy_count (queries.tests.ProxyQueryCleanupTest)",
                            "test_ticket14729 (queries.tests.RawQueriesTests)",
                            "test_ticket_24278 (queries.tests.TestTicket24279)",
                            "test_ticket7872 (queries.tests.DisjunctiveFilterTests)",
                            "test_ticket8283 (queries.tests.DisjunctiveFilterTests)",
                            "test_exists (queries.tests.ExistsSql)",
                            "test_ticket_18414 (queries.tests.ExistsSql)",
                            "test_invalid_order_by (queries.tests.QuerySetExceptionTests)",
                            "test_invalid_qs_list (queries.tests.QuerySetExceptionTests)",
                            "test_invalid_queryset_model (queries.tests.QuerySetExceptionTests)",
                            "test_iter_exceptions (queries.tests.QuerySetExceptionTests)",
                            "test_double_subquery_in (queries.tests.DoubleInSubqueryTests)",
                            "test_ticket22023 (queries.tests.Queries3Tests)",
                            "test_ticket7107 (queries.tests.Queries3Tests)",
                            "test_ticket8683 (queries.tests.Queries3Tests)",
                            "test_invalid_values (queries.tests.TestInvalidValuesRelation)",
                            "test_empty_full_handling_conjunction (queries.tests.WhereNodeTest)",
                            "test_empty_full_handling_disjunction (queries.tests.WhereNodeTest)",
                            "test_empty_nodes (queries.tests.WhereNodeTest)",
                            "test_ticket8597 (queries.tests.ComparisonTests)",
                            "test_annotated_ordering (queries.tests.QuerysetOrderedTests)",
                            "test_cleared_default_ordering (queries.tests.QuerysetOrderedTests)",
                            "test_explicit_ordering (queries.tests.QuerysetOrderedTests)",
                            "test_no_default_or_explicit_ordering (queries.tests.QuerysetOrderedTests)",
                            "test_order_by_extra (queries.tests.QuerysetOrderedTests)",
                            "test_ticket_12807 (queries.tests.Ticket12807Tests)",
                            "test_reverse_trimming (queries.tests.ReverseJoinTrimmingTest)",
                            "test_emptyqueryset_values (queries.tests.EmptyQuerySetTests)",
                            "test_ticket_19151 (queries.tests.EmptyQuerySetTests)",
                            "test_values_subquery (queries.tests.EmptyQuerySetTests)",
                            "test_extra_multiple_select_params_values_order_by (queries.tests.ValuesQuerysetTests)",
                            "test_extra_select_params_values_order_in_extra (queries.tests.ValuesQuerysetTests)",
                            "test_extra_values (queries.tests.ValuesQuerysetTests)",
                            "test_extra_values_list (queries.tests.ValuesQuerysetTests)",
                            "test_extra_values_order_in_extra (queries.tests.ValuesQuerysetTests)",
                            "test_extra_values_order_multiple (queries.tests.ValuesQuerysetTests)",
                            "test_extra_values_order_twice (queries.tests.ValuesQuerysetTests)",
                            "test_field_error_values_list (queries.tests.ValuesQuerysetTests)",
                            "test_flat_extra_values_list (queries.tests.ValuesQuerysetTests)",
                            "test_flat_values_list (queries.tests.ValuesQuerysetTests)",
                            "test_join_already_in_query (queries.tests.NullableRelOrderingTests)",
                            "test_ticket10028 (queries.tests.NullableRelOrderingTests)",
                            "test_ticket_18785 (queries.tests.Ticket18785Tests)",
                            "test_ticket_21787 (queries.tests.ForeignKeyToBaseExcludeTests)",
                            "test_ticket_21203 (queries.tests.Ticket21203Tests)",
                            "test_exclude_plain (queries.tests.ExcludeTest17600)",
                            "test_exclude_plain_distinct (queries.tests.ExcludeTest17600)",
                            "test_exclude_with_q_is_equal_to_plain_exclude (queries.tests.ExcludeTest17600)",
                            "test_exclude_with_q_is_equal_to_plain_exclude_variation (queries.tests.ExcludeTest17600)",
                            "test_exclude_with_q_object_distinct (queries.tests.ExcludeTest17600)",
                            "test_exclude_with_q_object_no_distinct (queries.tests.ExcludeTest17600)",
                            "test_primary_key (queries.tests.IsNullTests)",
                            "test_to_field (queries.tests.IsNullTests)",
                            "test_ticket_21879 (queries.tests.ReverseM2MCustomPkTests)",
                            "test_fk_reuse (queries.tests.JoinReuseTest)",
                            "test_fk_reuse_annotation (queries.tests.JoinReuseTest)",
                            "test_fk_reuse_disjunction (queries.tests.JoinReuseTest)",
                            "test_fk_reuse_order_by (queries.tests.JoinReuseTest)",
                            "test_fk_reuse_select_related (queries.tests.JoinReuseTest)",
                            "test_revfk_noreuse (queries.tests.JoinReuseTest)",
                            "test_revo2o_reuse (queries.tests.JoinReuseTest)",
                            "test_ticket_14056 (queries.tests.Ticket14056Tests)",
                            "test_values_in_subquery (queries.tests.ValuesSubqueryTests)",
                            "test_ticket_22429 (queries.tests.Ticket22429Tests)",
                            "test_ticket_19964 (queries.tests.RelabelCloneTest)",
                            "test_ticket7778 (queries.tests.SubclassFKTests)",
                            "test_empty_resultset_sql (queries.tests.WeirdQuerysetSlicingTests)",
                            "test_empty_sliced_subquery (queries.tests.WeirdQuerysetSlicingTests)",
                            "test_empty_sliced_subquery_exclude (queries.tests.WeirdQuerysetSlicingTests)",
                            "test_tickets_7698_10202 (queries.tests.WeirdQuerysetSlicingTests)",
                            "test_zero_length_values_slicing (queries.tests.WeirdQuerysetSlicingTests)",
                            "test_ticket_20788 (queries.tests.Ticket20788Tests)",
                            "test_can_combine_queries_using_and_and_or_operators (queries.tests.QuerySetSupportsPythonIdioms)",
                            "test_can_get_items_using_index_and_slice_notation (queries.tests.QuerySetSupportsPythonIdioms)",
                            "test_can_get_number_of_items_in_queryset_using_standard_len (queries.tests.QuerySetSupportsPythonIdioms)",
                            "test_slicing_can_slice_again_after_slicing (queries.tests.QuerySetSupportsPythonIdioms)",
                            "test_slicing_cannot_combine_queries_once_sliced (queries.tests.QuerySetSupportsPythonIdioms)",
                            "test_slicing_cannot_filter_queryset_once_sliced (queries.tests.QuerySetSupportsPythonIdioms)",
                            "test_slicing_cannot_reorder_queryset_once_sliced (queries.tests.QuerySetSupportsPythonIdioms)",
                            "hint: inverting your ordering might do what you need",
                            "test_slicing_with_steps_can_be_used (queries.tests.QuerySetSupportsPythonIdioms)",
                            "test_slicing_with_tests_is_not_lazy (queries.tests.QuerySetSupportsPythonIdioms)",
                            "test_slicing_without_step_is_lazy (queries.tests.QuerySetSupportsPythonIdioms)",
                            "test_double_exclude (queries.tests.NullInExcludeTest)",
                            "test_null_in_exclude_qs (queries.tests.NullInExcludeTest)",
                            "test_non_nullable_fk_not_promoted (queries.tests.ValuesJoinPromotionTests)",
                            "test_ticket_21376 (queries.tests.ValuesJoinPromotionTests)",
                            "test_values_no_promotion_for_existing (queries.tests.ValuesJoinPromotionTests)",
                            "test_ticket_20955 (queries.tests.Ticket20955Tests)",
                            "test_correct_lookup (queries.tests.RelatedLookupTypeTests)",
                            "test_values_queryset_lookup (queries.tests.RelatedLookupTypeTests)",
                            "test_wrong_backward_lookup (queries.tests.RelatedLookupTypeTests)",
                            "test_wrong_type_lookup (queries.tests.RelatedLookupTypeTests)",
                            "test_ticket12239 (queries.tests.Queries2Tests)",
                            "test_ticket4289 (queries.tests.Queries2Tests)",
                            "test_ticket7759 (queries.tests.Queries2Tests)",
                            "test_ticket_23605 (queries.tests.Ticket23605Tests)",
                            "test_nested_queries_sql (queries.tests.Queries6Tests)",
                            "test_parallel_iterators (queries.tests.Queries6Tests)",
                            "test_ticket3739 (queries.tests.Queries6Tests)",
                            "test_ticket_11320 (queries.tests.Queries6Tests)",
                            "test_tickets_8921_9188 (queries.tests.Queries6Tests)",
                            "test_exclude_many_to_many (queries.tests.ManyToManyExcludeTest)",
                            "test_ticket_12823 (queries.tests.ManyToManyExcludeTest)",
                            "test_ticket14511 (queries.tests.ExcludeTests)",
                            "test_to_field (queries.tests.ExcludeTests)",
                            "test_disjunction_promotion1 (queries.tests.DisjunctionPromotionTests)",
                            "test_disjunction_promotion2 (queries.tests.DisjunctionPromotionTests)",
                            "test_disjunction_promotion3 (queries.tests.DisjunctionPromotionTests)",
                            "test_disjunction_promotion3_demote (queries.tests.DisjunctionPromotionTests)",
                            "test_disjunction_promotion4 (queries.tests.DisjunctionPromotionTests)",
                            "test_disjunction_promotion4_demote (queries.tests.DisjunctionPromotionTests)",
                            "test_disjunction_promotion5_demote (queries.tests.DisjunctionPromotionTests)",
                            "test_disjunction_promotion6 (queries.tests.DisjunctionPromotionTests)",
                            "test_disjunction_promotion7 (queries.tests.DisjunctionPromotionTests)",
                            "test_disjunction_promotion_fexpression (queries.tests.DisjunctionPromotionTests)",
                            "test_disjunction_promotion_select_related (queries.tests.DisjunctionPromotionTests)",
                            "Subselects honor any manual ordering",
                            "test_related_sliced_subquery (queries.tests.SubqueryTests)",
                            "test_slice_subquery_and_query (queries.tests.SubqueryTests)",
                            "Delete queries can safely contain sliced subqueries",
                            "test_in_query (queries.tests.ToFieldTests)",
                            "test_in_subquery (queries.tests.ToFieldTests)",
                            "test_nested_in_subquery (queries.tests.ToFieldTests)",
                            "test_recursive_fk (queries.tests.ToFieldTests)",
                            "test_recursive_fk_reverse (queries.tests.ToFieldTests)",
                            "test_reverse_in (queries.tests.ToFieldTests)",
                            "test_single_object (queries.tests.ToFieldTests)",
                            "test_single_object_reverse (queries.tests.ToFieldTests)",
                            "test_extra_select_literal_percent_s (queries.tests.Queries5Tests)",
                            "test_ordering (queries.tests.Queries5Tests)",
                            "test_ticket5261 (queries.tests.Queries5Tests)",
                            "test_ticket7045 (queries.tests.Queries5Tests)",
                            "test_ticket7256 (queries.tests.Queries5Tests)",
                            "test_ticket9848 (queries.tests.Queries5Tests)",
                            "test_AB_ACB (queries.tests.UnionTests)",
                            "test_A_AB (queries.tests.UnionTests)",
                            "test_A_AB2 (queries.tests.UnionTests)",
                            "test_BAB_BAC (queries.tests.UnionTests)",
                            "test_BAB_BACB (queries.tests.UnionTests)",
                            "test_BA_BCA__BAB_BAC_BCA (queries.tests.UnionTests)",
                            "test_isnull_filter_promotion (queries.tests.NullJoinPromotionOrTest)",
                            "test_null_join_demotion (queries.tests.NullJoinPromotionOrTest)",
                            "test_ticket_17886 (queries.tests.NullJoinPromotionOrTest)",
                            "test_ticket_21366 (queries.tests.NullJoinPromotionOrTest)",
                            "test_ticket_21748 (queries.tests.NullJoinPromotionOrTest)",
                            "test_ticket_21748_complex_filter (queries.tests.NullJoinPromotionOrTest)",
                            "test_ticket_21748_double_negated_and (queries.tests.NullJoinPromotionOrTest)",
                            "test_ticket_21748_double_negated_or (queries.tests.NullJoinPromotionOrTest)",
                            "test_combine_join_reuse (queries.tests.Queries4Tests)",
                            "test_order_by_resetting (queries.tests.Queries4Tests)",
                            "test_order_by_reverse_fk (queries.tests.Queries4Tests)",
                            "test_ticket10181 (queries.tests.Queries4Tests)",
                            "test_ticket11811 (queries.tests.Queries4Tests)",
                            "test_ticket14876 (queries.tests.Queries4Tests)",
                            "test_ticket15316_exclude_false (queries.tests.Queries4Tests)",
                            "test_ticket15316_exclude_true (queries.tests.Queries4Tests)",
                            "test_ticket15316_filter_false (queries.tests.Queries4Tests)",
                            "test_ticket15316_filter_true (queries.tests.Queries4Tests)",
                            "test_ticket15316_one2one_exclude_false (queries.tests.Queries4Tests)",
                            "test_ticket15316_one2one_exclude_true (queries.tests.Queries4Tests)",
                            "test_ticket15316_one2one_filter_false (queries.tests.Queries4Tests)",
                            "test_ticket15316_one2one_filter_true (queries.tests.Queries4Tests)",
                            "test_ticket24525 (queries.tests.Queries4Tests)",
                            "test_ticket7095 (queries.tests.Queries4Tests)",
                            "test_avoid_infinite_loop_on_too_many_subqueries (queries.tests.Queries1Tests)",
                            "test_deferred_load_qs_pickling (queries.tests.Queries1Tests)",
                            "test_double_exclude (queries.tests.Queries1Tests)",
                            "test_error_raised_on_filter_with_dictionary (queries.tests.Queries1Tests)",
                            "test_exclude (queries.tests.Queries1Tests)",
                            "test_exclude_in (queries.tests.Queries1Tests)",
                            "test_get_clears_ordering (queries.tests.Queries1Tests)",
                            "test_heterogeneous_qs_combination (queries.tests.Queries1Tests)",
                            "test_lookup_constraint_fielderror (queries.tests.Queries1Tests)",
                            "test_nested_exclude (queries.tests.Queries1Tests)",
                            "test_order_by_join_unref (queries.tests.Queries1Tests)",
                            "test_order_by_tables (queries.tests.Queries1Tests)",
                            "test_reasonable_number_of_subq_aliases (queries.tests.Queries1Tests)",
                            "test_subquery_condition (queries.tests.Queries1Tests)",
                            "test_ticket10205 (queries.tests.Queries1Tests)",
                            "test_ticket10432 (queries.tests.Queries1Tests)",
                            "test_ticket1050 (queries.tests.Queries1Tests)",
                            "test_ticket10742 (queries.tests.Queries1Tests)",
                            "test_ticket17429 (queries.tests.Queries1Tests)",
                            "test_ticket1801 (queries.tests.Queries1Tests)",
                            "test_ticket19672 (queries.tests.Queries1Tests)",
                            "test_ticket2091 (queries.tests.Queries1Tests)",
                            "test_ticket2253 (queries.tests.Queries1Tests)",
                            "test_ticket2306 (queries.tests.Queries1Tests)",
                            "test_ticket2400 (queries.tests.Queries1Tests)",
                            "test_ticket2496 (queries.tests.Queries1Tests)",
                            "test_ticket2902 (queries.tests.Queries1Tests)",
                            "test_ticket3037 (queries.tests.Queries1Tests)",
                            "test_ticket3141 (queries.tests.Queries1Tests)",
                            "test_ticket4358 (queries.tests.Queries1Tests)",
                            "test_ticket4464 (queries.tests.Queries1Tests)",
                            "test_ticket4510 (queries.tests.Queries1Tests)",
                            "test_ticket6074 (queries.tests.Queries1Tests)",
                            "test_ticket6154 (queries.tests.Queries1Tests)",
                            "test_ticket6981 (queries.tests.Queries1Tests)",
                            "test_ticket7076 (queries.tests.Queries1Tests)",
                            "test_ticket7096 (queries.tests.Queries1Tests)",
                            "test_ticket7098 (queries.tests.Queries1Tests)",
                            "test_ticket7155 (queries.tests.Queries1Tests)",
                            "test_ticket7181 (queries.tests.Queries1Tests)",
                            "test_ticket7235 (queries.tests.Queries1Tests)",
                            "test_ticket7277 (queries.tests.Queries1Tests)",
                            "test_ticket7323 (queries.tests.Queries1Tests)",
                            "test_ticket7378 (queries.tests.Queries1Tests)",
                            "test_ticket7791 (queries.tests.Queries1Tests)",
                            "test_ticket7813 (queries.tests.Queries1Tests)",
                            "test_ticket8439 (queries.tests.Queries1Tests)",
                            "test_ticket9411 (queries.tests.Queries1Tests)",
                            "test_ticket9926 (queries.tests.Queries1Tests)",
                            "test_ticket9985 (queries.tests.Queries1Tests)",
                            "test_ticket9997 (queries.tests.Queries1Tests)",
                            "test_ticket_10790_1 (queries.tests.Queries1Tests)",
                            "test_ticket_10790_2 (queries.tests.Queries1Tests)",
                            "test_ticket_10790_3 (queries.tests.Queries1Tests)",
                            "test_ticket_10790_4 (queries.tests.Queries1Tests)",
                            "test_ticket_10790_5 (queries.tests.Queries1Tests)",
                            "test_ticket_10790_6 (queries.tests.Queries1Tests)",
                            "test_ticket_10790_7 (queries.tests.Queries1Tests)",
                            "test_ticket_10790_8 (queries.tests.Queries1Tests)",
                            "test_ticket_10790_combine (queries.tests.Queries1Tests)",
                            "test_ticket_20250 (queries.tests.Queries1Tests)",
                            "test_tickets_1878_2939 (queries.tests.Queries1Tests)",
                            "test_tickets_2076_7256 (queries.tests.Queries1Tests)",
                            "test_tickets_2080_3592 (queries.tests.Queries1Tests)",
                            "test_tickets_2874_3002 (queries.tests.Queries1Tests)",
                            "test_tickets_4088_4306 (queries.tests.Queries1Tests)",
                            "test_tickets_5321_7070 (queries.tests.Queries1Tests)",
                            "test_tickets_5324_6704 (queries.tests.Queries1Tests)",
                            "test_tickets_6180_6203 (queries.tests.Queries1Tests)",
                            "test_tickets_7087_12242 (queries.tests.Queries1Tests)",
                            "test_tickets_7204_7506 (queries.tests.Queries1Tests)",
                            "test_tickets_7448_7707 (queries.tests.Queries1Tests)"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "sympy__sympy-19601.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "test_collect_pr19431"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "test_radsimp",
                            "test_radsimp_issue_3214",
                            "test_collect_1",
                            "test_collect_2",
                            "test_collect_3",
                            "test_collect_4",
                            "test_collect_5",
                            "test_collect_D",
                            "test_collect_func",
                            "test_collect_order",
                            "test_rcollect",
                            "test_collect_D_0",
                            "test_collect_Wild",
                            "test_collect_const",
                            "test_issue_13143",
                            "test_issue_6097",
                            "test_fraction_expand",
                            "test_fraction",
                            "test_issue_5615",
                            "test_issue_5933",
                            "test_issue_14608",
                            "test_collect_abs"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "astropy__astropy-13033.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "astropy/timeseries/tests/test_sampled.py::test_required_columns"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "astropy/timeseries/tests/test_sampled.py::test_empty_initialization",
                            "astropy/timeseries/tests/test_sampled.py::test_empty_initialization_invalid",
                            "astropy/timeseries/tests/test_sampled.py::test_initialize_only_time",
                            "astropy/timeseries/tests/test_sampled.py::test_initialization_with_data",
                            "astropy/timeseries/tests/test_sampled.py::test_initialize_only_data",
                            "astropy/timeseries/tests/test_sampled.py::test_initialization_with_table",
                            "astropy/timeseries/tests/test_sampled.py::test_initialization_missing_time_delta",
                            "astropy/timeseries/tests/test_sampled.py::test_initialization_invalid_time_and_time_start",
                            "astropy/timeseries/tests/test_sampled.py::test_initialization_invalid_time_delta",
                            "astropy/timeseries/tests/test_sampled.py::test_initialization_with_time_in_data",
                            "astropy/timeseries/tests/test_sampled.py::test_initialization_n_samples",
                            "astropy/timeseries/tests/test_sampled.py::test_initialization_length_mismatch",
                            "astropy/timeseries/tests/test_sampled.py::test_initialization_invalid_both_time_and_time_delta",
                            "astropy/timeseries/tests/test_sampled.py::test_fold",
                            "astropy/timeseries/tests/test_sampled.py::test_fold_invalid_options",
                            "astropy/timeseries/tests/test_sampled.py::test_read_time_missing",
                            "astropy/timeseries/tests/test_sampled.py::test_read_time_wrong",
                            "astropy/timeseries/tests/test_sampled.py::test_read",
                            "astropy/timeseries/tests/test_sampled.py::test_periodogram[BoxLeastSquares]",
                            "astropy/timeseries/tests/test_sampled.py::test_periodogram[LombScargle]"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "django__django-10426.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "test_squashmigrations_initial_attribute (migrations.test_commands.SquashMigrationsTests)"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "test_makemigrations_app_name_specified_as_label (migrations.test_commands.AppLabelErrorTests)",
                            "test_makemigrations_nonexistent_app_label (migrations.test_commands.AppLabelErrorTests)",
                            "test_migrate_app_name_specified_as_label (migrations.test_commands.AppLabelErrorTests)",
                            "test_migrate_nonexistent_app_label (migrations.test_commands.AppLabelErrorTests)",
                            "test_sqlmigrate_app_name_specified_as_label (migrations.test_commands.AppLabelErrorTests)",
                            "test_sqlmigrate_nonexistent_app_label (migrations.test_commands.AppLabelErrorTests)",
                            "test_squashmigrations_app_name_specified_as_label (migrations.test_commands.AppLabelErrorTests)",
                            "test_squashmigrations_nonexistent_app_label (migrations.test_commands.AppLabelErrorTests)",
                            "--squashed-name specifies the new migration's name.",
                            "--squashed-name also works if a start migration is omitted.",
                            "test_squashmigrations_invalid_start (migrations.test_commands.SquashMigrationsTests)",
                            "test_squashmigrations_squashes (migrations.test_commands.SquashMigrationsTests)",
                            "test_squashmigrations_valid_start (migrations.test_commands.SquashMigrationsTests)",
                            "test_ticket_23799_squashmigrations_no_optimize (migrations.test_commands.SquashMigrationsTests)",
                            "test_failing_migration (migrations.test_commands.MakeMigrationsTests)",
                            "test_files_content (migrations.test_commands.MakeMigrationsTests)",
                            "test_makemigration_merge_dry_run (migrations.test_commands.MakeMigrationsTests)",
                            "test_makemigration_merge_dry_run_verbosity_3 (migrations.test_commands.MakeMigrationsTests)",
                            "test_makemigrations_auto_now_add_interactive (migrations.test_commands.MakeMigrationsTests)",
                            "test_makemigrations_check (migrations.test_commands.MakeMigrationsTests)",
                            "test_makemigrations_conflict_exit (migrations.test_commands.MakeMigrationsTests)",
                            "test_makemigrations_consistency_checks_respect_routers (migrations.test_commands.MakeMigrationsTests)",
                            "test_makemigrations_default_merge_name (migrations.test_commands.MakeMigrationsTests)",
                            "test_makemigrations_disabled_migrations_for_app (migrations.test_commands.MakeMigrationsTests)",
                            "test_makemigrations_dry_run (migrations.test_commands.MakeMigrationsTests)",
                            "test_makemigrations_dry_run_verbosity_3 (migrations.test_commands.MakeMigrationsTests)",
                            "test_makemigrations_empty_connections (migrations.test_commands.MakeMigrationsTests)",
                            "test_makemigrations_empty_migration (migrations.test_commands.MakeMigrationsTests)",
                            "test_makemigrations_empty_no_app_specified (migrations.test_commands.MakeMigrationsTests)",
                            "test_makemigrations_handle_merge (migrations.test_commands.MakeMigrationsTests)",
                            "test_makemigrations_inconsistent_history (migrations.test_commands.MakeMigrationsTests)",
                            "test_makemigrations_interactive_accept (migrations.test_commands.MakeMigrationsTests)",
                            "test_makemigrations_interactive_by_default (migrations.test_commands.MakeMigrationsTests)",
                            "test_makemigrations_interactive_reject (migrations.test_commands.MakeMigrationsTests)",
                            "test_makemigrations_merge_dont_output_dependency_operations (migrations.test_commands.MakeMigrationsTests)",
                            "test_makemigrations_merge_no_conflict (migrations.test_commands.MakeMigrationsTests)",
                            "test_makemigrations_migration_path_output (migrations.test_commands.MakeMigrationsTests)",
                            "test_makemigrations_migration_path_output_valueerror (migrations.test_commands.MakeMigrationsTests)",
                            "test_makemigrations_migrations_announce (migrations.test_commands.MakeMigrationsTests)",
                            "test_makemigrations_migrations_modules_nonexistent_toplevel_package (migrations.test_commands.MakeMigrationsTests)",
                            "test_makemigrations_migrations_modules_path_not_exist (migrations.test_commands.MakeMigrationsTests)",
                            "test_makemigrations_no_apps_initial (migrations.test_commands.MakeMigrationsTests)",
                            "test_makemigrations_no_changes (migrations.test_commands.MakeMigrationsTests)",
                            "test_makemigrations_no_changes_no_apps (migrations.test_commands.MakeMigrationsTests)",
                            "test_makemigrations_no_common_ancestor (migrations.test_commands.MakeMigrationsTests)",
                            "Migration directories without an __init__.py file are allowed.",
                            "test_makemigrations_non_interactive_no_field_rename (migrations.test_commands.MakeMigrationsTests)",
                            "test_makemigrations_non_interactive_no_model_rename (migrations.test_commands.MakeMigrationsTests)",
                            "test_makemigrations_non_interactive_not_null_addition (migrations.test_commands.MakeMigrationsTests)",
                            "test_makemigrations_non_interactive_not_null_alteration (migrations.test_commands.MakeMigrationsTests)",
                            "test_makemigrations_order (migrations.test_commands.MakeMigrationsTests)",
                            "test_makemigrations_unspecified_app_with_conflict_merge (migrations.test_commands.MakeMigrationsTests)",
                            "test_makemigrations_unspecified_app_with_conflict_no_merge (migrations.test_commands.MakeMigrationsTests)",
                            "test_makemigrations_with_custom_name (migrations.test_commands.MakeMigrationsTests)",
                            "test_makemigrations_with_invalid_custom_name (migrations.test_commands.MakeMigrationsTests)",
                            "test_ambigious_prefix (migrations.test_commands.MigrateTests)",
                            "test_app_without_migrations (migrations.test_commands.MigrateTests)",
                            "test_migrate (migrations.test_commands.MigrateTests)",
                            "test_migrate_conflict_exit (migrations.test_commands.MigrateTests)",
                            "test_migrate_fake_initial (migrations.test_commands.MigrateTests)",
                            "test_migrate_fake_split_initial (migrations.test_commands.MigrateTests)",
                            "test_migrate_inconsistent_history (migrations.test_commands.MigrateTests)",
                            "test_migrate_initial_false (migrations.test_commands.MigrateTests)",
                            "Tests migrate --plan output.",
                            "test_migrate_record_replaced (migrations.test_commands.MigrateTests)",
                            "test_migrate_record_squashed (migrations.test_commands.MigrateTests)",
                            "test_migrate_syncdb_deferred_sql_executed_with_schemaeditor (migrations.test_commands.MigrateTests)",
                            "test_migrate_with_system_checks (migrations.test_commands.MigrateTests)",
                            "test_regression_22823_unmigrated_fk_to_migrated_model (migrations.test_commands.MigrateTests)",
                            "test_showmigrations_list (migrations.test_commands.MigrateTests)",
                            "test_showmigrations_no_migrations (migrations.test_commands.MigrateTests)",
                            "test_showmigrations_plan (migrations.test_commands.MigrateTests)",
                            "test_showmigrations_plan_multiple_app_labels (migrations.test_commands.MigrateTests)",
                            "test_showmigrations_plan_single_app_label (migrations.test_commands.MigrateTests)",
                            "test_showmigrations_plan_squashed (migrations.test_commands.MigrateTests)",
                            "test_sqlmigrate_backwards (migrations.test_commands.MigrateTests)",
                            "test_sqlmigrate_for_non_atomic_migration (migrations.test_commands.MigrateTests)",
                            "test_sqlmigrate_forwards (migrations.test_commands.MigrateTests)",
                            "test_unknown_prefix (migrations.test_commands.MigrateTests)"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "matplotlib__matplotlib-25129.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "lib/matplotlib/tests/test_widgets.py::test_MultiCursor[False-False]",
                            "lib/matplotlib/tests/test_widgets.py::test_MultiCursor[False-True]",
                            "lib/matplotlib/tests/test_widgets.py::test_MultiCursor[True-False]",
                            "lib/matplotlib/tests/test_widgets.py::test_MultiCursor[True-True]"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_selector[kwargs0]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_selector[kwargs1]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_selector[kwargs2]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_selector[kwargs3]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[0-10-0-10-data]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[0-10-0-10-pixels]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[0-10-1-10.5-data]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[0-10-1-10.5-pixels]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[0-10-1-11-data]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[0-10-1-11-pixels]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-10.5-0-10-data]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-10.5-0-10-pixels]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-10.5-1-10.5-data]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-10.5-1-10.5-pixels]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-10.5-1-11-data]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-10.5-1-11-pixels]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-11-0-10-data]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-11-0-10-pixels]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-11-1-10.5-data]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-11-1-10.5-pixels]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-11-1-11-data]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-11-1-11-pixels]",
                            "lib/matplotlib/tests/test_widgets.py::test_deprecation_selector_visible_attribute",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_drag[True-new_center0]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_drag[False-new_center1]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_selector_set_props_handle_props",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_resize",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_add_state",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_resize_center[True]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_resize_center[False]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_resize_square[True]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_resize_square[False]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_resize_square_center",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_rotate[RectangleSelector]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_rotate[EllipseSelector]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_add_remove_set",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_resize_square_center_aspect[False]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_resize_square_center_aspect[True]",
                            "lib/matplotlib/tests/test_widgets.py::test_ellipse",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_handles",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_selector_onselect[True]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_selector_onselect[False]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_selector_ignore_outside[True]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_selector_ignore_outside[False]",
                            "lib/matplotlib/tests/test_widgets.py::test_span_selector[horizontal-False-kwargs0]",
                            "lib/matplotlib/tests/test_widgets.py::test_span_selector[vertical-True-kwargs1]",
                            "lib/matplotlib/tests/test_widgets.py::test_span_selector[horizontal-False-kwargs2]",
                            "lib/matplotlib/tests/test_widgets.py::test_span_selector[horizontal-False-kwargs3]",
                            "lib/matplotlib/tests/test_widgets.py::test_span_selector_onselect[True]",
                            "lib/matplotlib/tests/test_widgets.py::test_span_selector_onselect[False]",
                            "lib/matplotlib/tests/test_widgets.py::test_span_selector_ignore_outside[True]",
                            "lib/matplotlib/tests/test_widgets.py::test_span_selector_ignore_outside[False]",
                            "lib/matplotlib/tests/test_widgets.py::test_span_selector_drag[True]",
                            "lib/matplotlib/tests/test_widgets.py::test_span_selector_drag[False]",
                            "lib/matplotlib/tests/test_widgets.py::test_span_selector_direction",
                            "lib/matplotlib/tests/test_widgets.py::test_span_selector_set_props_handle_props",
                            "lib/matplotlib/tests/test_widgets.py::test_selector_clear[span]",
                            "lib/matplotlib/tests/test_widgets.py::test_selector_clear[rectangle]",
                            "lib/matplotlib/tests/test_widgets.py::test_selector_clear_method[span]",
                            "lib/matplotlib/tests/test_widgets.py::test_selector_clear_method[rectangle]",
                            "lib/matplotlib/tests/test_widgets.py::test_span_selector_add_state",
                            "lib/matplotlib/tests/test_widgets.py::test_tool_line_handle",
                            "lib/matplotlib/tests/test_widgets.py::test_span_selector_bound[horizontal]",
                            "lib/matplotlib/tests/test_widgets.py::test_span_selector_bound[vertical]",
                            "lib/matplotlib/tests/test_widgets.py::test_snapping_values_span_selector",
                            "lib/matplotlib/tests/test_widgets.py::test_span_selector_snap",
                            "lib/matplotlib/tests/test_widgets.py::test_lasso_selector[kwargs0]",
                            "lib/matplotlib/tests/test_widgets.py::test_lasso_selector[kwargs1]",
                            "lib/matplotlib/tests/test_widgets.py::test_lasso_selector[kwargs2]",
                            "lib/matplotlib/tests/test_widgets.py::test_CheckButtons",
                            "lib/matplotlib/tests/test_widgets.py::test_TextBox[none]",
                            "lib/matplotlib/tests/test_widgets.py::test_TextBox[toolbar2]",
                            "lib/matplotlib/tests/test_widgets.py::test_TextBox[toolmanager]",
                            "lib/matplotlib/tests/test_widgets.py::test_check_radio_buttons_image[png]",
                            "lib/matplotlib/tests/test_widgets.py::test_radio_buttons[png]",
                            "lib/matplotlib/tests/test_widgets.py::test_radio_buttons_props[png]",
                            "lib/matplotlib/tests/test_widgets.py::test_radio_button_active_conflict",
                            "lib/matplotlib/tests/test_widgets.py::test_radio_buttons_activecolor_change[png]",
                            "lib/matplotlib/tests/test_widgets.py::test_check_buttons[png]",
                            "lib/matplotlib/tests/test_widgets.py::test_check_button_props[png]",
                            "lib/matplotlib/tests/test_widgets.py::test_check_buttons_rectangles[png]",
                            "lib/matplotlib/tests/test_widgets.py::test_check_buttons_lines[png]",
                            "lib/matplotlib/tests/test_widgets.py::test_slider_slidermin_slidermax_invalid",
                            "lib/matplotlib/tests/test_widgets.py::test_slider_slidermin_slidermax",
                            "lib/matplotlib/tests/test_widgets.py::test_slider_valmin_valmax",
                            "lib/matplotlib/tests/test_widgets.py::test_slider_valstep_snapping",
                            "lib/matplotlib/tests/test_widgets.py::test_slider_horizontal_vertical",
                            "lib/matplotlib/tests/test_widgets.py::test_slider_reset",
                            "lib/matplotlib/tests/test_widgets.py::test_range_slider[horizontal]",
                            "lib/matplotlib/tests/test_widgets.py::test_range_slider[vertical]",
                            "lib/matplotlib/tests/test_widgets.py::test_range_slider_same_init_values[horizontal]",
                            "lib/matplotlib/tests/test_widgets.py::test_range_slider_same_init_values[vertical]",
                            "lib/matplotlib/tests/test_widgets.py::test_polygon_selector[False]",
                            "lib/matplotlib/tests/test_widgets.py::test_polygon_selector[True]",
                            "lib/matplotlib/tests/test_widgets.py::test_polygon_selector_set_props_handle_props[False]",
                            "lib/matplotlib/tests/test_widgets.py::test_polygon_selector_set_props_handle_props[True]",
                            "lib/matplotlib/tests/test_widgets.py::test_rect_visibility[png]",
                            "lib/matplotlib/tests/test_widgets.py::test_rect_visibility[pdf]",
                            "lib/matplotlib/tests/test_widgets.py::test_polygon_selector_remove[False-1]",
                            "lib/matplotlib/tests/test_widgets.py::test_polygon_selector_remove[False-2]",
                            "lib/matplotlib/tests/test_widgets.py::test_polygon_selector_remove[False-3]",
                            "lib/matplotlib/tests/test_widgets.py::test_polygon_selector_remove[True-1]",
                            "lib/matplotlib/tests/test_widgets.py::test_polygon_selector_remove[True-2]",
                            "lib/matplotlib/tests/test_widgets.py::test_polygon_selector_remove[True-3]",
                            "lib/matplotlib/tests/test_widgets.py::test_polygon_selector_remove_first_point[False]",
                            "lib/matplotlib/tests/test_widgets.py::test_polygon_selector_remove_first_point[True]",
                            "lib/matplotlib/tests/test_widgets.py::test_polygon_selector_redraw[False]",
                            "lib/matplotlib/tests/test_widgets.py::test_polygon_selector_redraw[True]",
                            "lib/matplotlib/tests/test_widgets.py::test_polygon_selector_verts_setter[png-False]",
                            "lib/matplotlib/tests/test_widgets.py::test_polygon_selector_verts_setter[png-True]",
                            "lib/matplotlib/tests/test_widgets.py::test_polygon_selector_box"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "sympy__sympy-22914.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "test_PythonCodePrinter"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "test_PythonCodePrinter_standard",
                            "test_MpmathPrinter",
                            "test_NumPyPrinter",
                            "test_SciPyPrinter",
                            "test_pycode_reserved_words",
                            "test_sqrt",
                            "test_frac",
                            "test_printmethod",
                            "test_codegen_ast_nodes",
                            "test_issue_14283",
                            "test_NumPyPrinter_print_seq",
                            "test_issue_16535_16536",
                            "test_Integral",
                            "test_fresnel_integrals",
                            "test_beta",
                            "test_airy",
                            "test_airy_prime"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "sphinx-doc__sphinx-11266.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "tests/test_build_latex.py::test_writer"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "tests/test_build_latex.py::test_latex_warnings",
                            "tests/test_build_latex.py::test_latex_basic",
                            "tests/test_build_latex.py::test_latex_basic_manual",
                            "tests/test_build_latex.py::test_latex_basic_howto",
                            "tests/test_build_latex.py::test_latex_basic_manual_ja",
                            "tests/test_build_latex.py::test_latex_basic_howto_ja",
                            "tests/test_build_latex.py::test_latex_theme",
                            "tests/test_build_latex.py::test_latex_theme_papersize",
                            "tests/test_build_latex.py::test_latex_theme_options",
                            "tests/test_build_latex.py::test_latex_additional_settings_for_language_code",
                            "tests/test_build_latex.py::test_latex_additional_settings_for_greek",
                            "tests/test_build_latex.py::test_latex_title_after_admonitions",
                            "tests/test_build_latex.py::test_latex_release",
                            "tests/test_build_latex.py::test_numref",
                            "tests/test_build_latex.py::test_numref_with_prefix1",
                            "tests/test_build_latex.py::test_numref_with_prefix2",
                            "tests/test_build_latex.py::test_numref_with_language_ja",
                            "tests/test_build_latex.py::test_latex_obey_numfig_is_false",
                            "tests/test_build_latex.py::test_latex_obey_numfig_secnum_depth_is_zero",
                            "tests/test_build_latex.py::test_latex_obey_numfig_secnum_depth_is_two",
                            "tests/test_build_latex.py::test_latex_obey_numfig_but_math_numfig_false",
                            "tests/test_build_latex.py::test_latex_add_latex_package",
                            "tests/test_build_latex.py::test_babel_with_no_language_settings",
                            "tests/test_build_latex.py::test_babel_with_language_de",
                            "tests/test_build_latex.py::test_babel_with_language_ru",
                            "tests/test_build_latex.py::test_babel_with_language_tr",
                            "tests/test_build_latex.py::test_babel_with_language_ja",
                            "tests/test_build_latex.py::test_babel_with_unknown_language",
                            "tests/test_build_latex.py::test_polyglossia_with_language_de",
                            "tests/test_build_latex.py::test_polyglossia_with_language_de_1901",
                            "tests/test_build_latex.py::test_footnote",
                            "tests/test_build_latex.py::test_reference_in_caption_and_codeblock_in_footnote",
                            "tests/test_build_latex.py::test_footnote_referred_multiple_times",
                            "tests/test_build_latex.py::test_latex_show_urls_is_inline",
                            "tests/test_build_latex.py::test_latex_show_urls_is_footnote",
                            "tests/test_build_latex.py::test_latex_show_urls_is_no",
                            "tests/test_build_latex.py::test_latex_show_urls_footnote_and_substitutions",
                            "tests/test_build_latex.py::test_image_in_section",
                            "tests/test_build_latex.py::test_latex_logo_if_not_found",
                            "tests/test_build_latex.py::test_toctree_maxdepth_manual",
                            "tests/test_build_latex.py::test_toctree_maxdepth_howto",
                            "tests/test_build_latex.py::test_toctree_not_found",
                            "tests/test_build_latex.py::test_toctree_without_maxdepth",
                            "tests/test_build_latex.py::test_toctree_with_deeper_maxdepth",
                            "tests/test_build_latex.py::test_latex_toplevel_sectioning_is_None",
                            "tests/test_build_latex.py::test_latex_toplevel_sectioning_is_part",
                            "tests/test_build_latex.py::test_latex_toplevel_sectioning_is_part_with_howto",
                            "tests/test_build_latex.py::test_latex_toplevel_sectioning_is_chapter",
                            "tests/test_build_latex.py::test_latex_toplevel_sectioning_is_chapter_with_howto",
                            "tests/test_build_latex.py::test_latex_toplevel_sectioning_is_section",
                            "tests/test_build_latex.py::test_latex_table_tabulars",
                            "tests/test_build_latex.py::test_latex_table_longtable",
                            "tests/test_build_latex.py::test_latex_table_complex_tables",
                            "tests/test_build_latex.py::test_latex_table_with_booktabs_and_colorrows",
                            "tests/test_build_latex.py::test_latex_table_custom_template_caseA",
                            "tests/test_build_latex.py::test_latex_table_custom_template_caseB",
                            "tests/test_build_latex.py::test_latex_table_custom_template_caseC",
                            "tests/test_build_latex.py::test_latex_raw_directive",
                            "tests/test_build_latex.py::test_latex_images",
                            "tests/test_build_latex.py::test_latex_index",
                            "tests/test_build_latex.py::test_latex_equations",
                            "tests/test_build_latex.py::test_latex_image_in_parsed_literal",
                            "tests/test_build_latex.py::test_latex_nested_enumerated_list",
                            "tests/test_build_latex.py::test_latex_thebibliography",
                            "tests/test_build_latex.py::test_latex_glossary",
                            "tests/test_build_latex.py::test_latex_labels",
                            "tests/test_build_latex.py::test_latex_figure_in_admonition",
                            "tests/test_build_latex.py::test_default_latex_documents",
                            "tests/test_build_latex.py::test_index_on_title",
                            "tests/test_build_latex.py::test_texescape_for_non_unicode_supported_engine",
                            "tests/test_build_latex.py::test_texescape_for_unicode_supported_engine",
                            "tests/test_build_latex.py::test_latex_elements_extrapackages",
                            "tests/test_build_latex.py::test_latex_nested_tables",
                            "tests/test_build_latex.py::test_latex_container",
                            "tests/test_build_latex.py::test_latex_code_role",
                            "tests/test_build_latex.py::test_copy_images"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "sympy__sympy-20590.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "test_immutable"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "test__aresame",
                            "test_structure",
                            "test_equality",
                            "test_matches_basic",
                            "test_has",
                            "test_subs",
                            "test_subs_with_unicode_symbols",
                            "test_atoms",
                            "test_free_symbols_empty",
                            "test_doit",
                            "test_S",
                            "test_xreplace",
                            "test_preorder_traversal",
                            "test_sorted_args",
                            "test_call",
                            "test_rewrite",
                            "test_literal_evalf_is_number_is_zero_is_comparable",
                            "test_as_Basic",
                            "test_atomic",
                            "test_as_dummy",
                            "test_canonical_variables"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "sympy__sympy-16334.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "test_Pow_is_pos_neg"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "test_symbol_unset",
                            "test_zero",
                            "test_one",
                            "test_negativeone",
                            "test_infinity",
                            "test_neg_infinity",
                            "test_zoo",
                            "test_nan",
                            "test_pos_rational",
                            "test_neg_rational",
                            "test_pi",
                            "test_E",
                            "test_I",
                            "test_symbol_real",
                            "test_symbol_imaginary",
                            "test_symbol_zero",
                            "test_symbol_positive",
                            "test_neg_symbol_positive",
                            "test_symbol_nonpositive",
                            "test_neg_symbol_nonpositive",
                            "test_symbol_falsepositive",
                            "test_symbol_falsepositive_mul",
                            "test_neg_symbol_falsepositive",
                            "test_neg_symbol_falsenegative",
                            "test_symbol_falsepositive_real",
                            "test_neg_symbol_falsepositive_real",
                            "test_symbol_falsenonnegative",
                            "test_symbol_falsenonnegative_real",
                            "test_neg_symbol_falsenonnegative_real",
                            "test_prime",
                            "test_composite",
                            "test_prime_symbol",
                            "test_symbol_noncommutative",
                            "test_other_symbol",
                            "test_issue_3825",
                            "test_issue_4822",
                            "test_hash_vs_typeinfo",
                            "test_hash_vs_typeinfo_2",
                            "test_hash_vs_eq",
                            "test_Add_is_pos_neg",
                            "test_Add_is_imaginary",
                            "test_Add_is_algebraic",
                            "test_Mul_is_algebraic",
                            "test_Pow_is_algebraic",
                            "test_Mul_is_prime_composite",
                            "test_Pow_is_prime_composite",
                            "test_Mul_is_infinite",
                            "test_special_is_rational",
                            "test_sanitize_assumptions",
                            "test_special_assumptions",
                            "test_inconsistent",
                            "test_issue_6631",
                            "test_issue_2730",
                            "test_issue_4149",
                            "test_issue_2920",
                            "test_issue_7899",
                            "test_issue_8075",
                            "test_issue_8642",
                            "test_issues_8632_8633_8638_8675_8992",
                            "test_issue_9115_9150",
                            "test_issue_9165",
                            "test_issue_10024",
                            "test_issue_10302"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "pytest-dev__pytest-5281.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "testing/test_capture.py::TestFDCapture::test_capfd_sys_stdout_mode"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "[100%]",
                            "testing/test_capture.py::TestCaptureManager::test_getmethod_default_no_fd",
                            "testing/test_capture.py::TestCaptureManager::test_capturing_basic_api[no]",
                            "testing/test_capture.py::TestCaptureManager::test_capturing_basic_api[sys]",
                            "testing/test_capture.py::TestCaptureManager::test_capturing_basic_api[fd]",
                            "testing/test_capture.py::TestCaptureManager::test_init_capturing",
                            "testing/test_capture.py::TestCaptureIO::test_text",
                            "testing/test_capture.py::TestCaptureIO::test_unicode_and_str_mixture",
                            "testing/test_capture.py::TestCaptureIO::test_write_bytes_to_buffer",
                            "testing/test_capture.py::test_dontreadfrominput",
                            "testing/test_capture.py::test_dontreadfrominput_buffer_python3",
                            "testing/test_capture.py::test_dupfile_on_bytesio",
                            "testing/test_capture.py::test_dupfile_on_textio",
                            "testing/test_capture.py::TestFDCapture::test_stderr",
                            "testing/test_capture.py::TestStdCapture::test_capturing_done_simple",
                            "testing/test_capture.py::TestStdCapture::test_capturing_reset_simple",
                            "testing/test_capture.py::TestStdCapture::test_capturing_readouterr",
                            "testing/test_capture.py::TestStdCapture::test_capture_results_accessible_by_attribute",
                            "testing/test_capture.py::TestStdCapture::test_capturing_readouterr_unicode",
                            "testing/test_capture.py::TestStdCapture::test_reset_twice_error",
                            "testing/test_capture.py::TestStdCapture::test_capturing_modify_sysouterr_in_between",
                            "testing/test_capture.py::TestStdCapture::test_capturing_error_recursive",
                            "testing/test_capture.py::TestStdCapture::test_just_out_capture",
                            "testing/test_capture.py::TestStdCapture::test_just_err_capture",
                            "testing/test_capture.py::TestStdCapture::test_stdin_restored",
                            "testing/test_capture.py::TestStdCapture::test_stdin_nulled_by_default",
                            "testing/test_capture.py::TestStdCaptureFD::test_capturing_done_simple",
                            "testing/test_capture.py::TestStdCaptureFD::test_capturing_reset_simple",
                            "testing/test_capture.py::TestStdCaptureFD::test_capturing_readouterr",
                            "testing/test_capture.py::TestStdCaptureFD::test_capture_results_accessible_by_attribute",
                            "testing/test_capture.py::TestStdCaptureFD::test_capturing_readouterr_unicode",
                            "testing/test_capture.py::TestStdCaptureFD::test_reset_twice_error",
                            "testing/test_capture.py::TestStdCaptureFD::test_capturing_modify_sysouterr_in_between",
                            "testing/test_capture.py::TestStdCaptureFD::test_capturing_error_recursive",
                            "testing/test_capture.py::TestStdCaptureFD::test_just_out_capture",
                            "testing/test_capture.py::TestStdCaptureFD::test_just_err_capture",
                            "testing/test_capture.py::TestStdCaptureFD::test_stdin_restored",
                            "testing/test_capture.py::TestStdCaptureFD::test_stdin_nulled_by_default",
                            "testing/test_capture.py::TestStdCaptureFD::test_intermingling",
                            "testing/test_capture.py::test_capture_not_started_but_reset",
                            "testing/test_capture.py::test_using_capsys_fixture_works_with_sys_stdout_encoding",
                            "testing/test_capture.py::test_capsys_results_accessible_by_attribute",
                            "testing/test_capture.py::test_pickling_and_unpickling_encoded_file",
                            "testing/test_capture.py::test_capturing_unicode[fd]",
                            "testing/test_capture.py::test_capturing_unicode[sys]",
                            "testing/test_capture.py::test_capturing_bytes_in_utf8_encoding[fd]",
                            "testing/test_capture.py::test_capturing_bytes_in_utf8_encoding[sys]",
                            "testing/test_capture.py::test_collect_capturing",
                            "testing/test_capture.py::TestPerTestCapturing::test_capture_and_fixtures",
                            "testing/test_capture.py::TestPerTestCapturing::test_no_carry_over",
                            "testing/test_capture.py::TestPerTestCapturing::test_teardown_capturing",
                            "testing/test_capture.py::TestPerTestCapturing::test_teardown_capturing_final",
                            "testing/test_capture.py::TestPerTestCapturing::test_capturing_outerr",
                            "testing/test_capture.py::TestLoggingInteraction::test_logging_stream_ownership",
                            "testing/test_capture.py::TestLoggingInteraction::test_logging_and_immediate_setupteardown",
                            "testing/test_capture.py::TestLoggingInteraction::test_logging_and_crossscope_fixtures",
                            "testing/test_capture.py::TestLoggingInteraction::test_conftestlogging_is_shown",
                            "testing/test_capture.py::TestLoggingInteraction::test_conftestlogging_and_test_logging",
                            "testing/test_capture.py::TestLoggingInteraction::test_logging_after_cap_stopped",
                            "testing/test_capture.py::TestCaptureFixture::test_std_functional[opt0]",
                            "testing/test_capture.py::TestCaptureFixture::test_std_functional[opt1]",
                            "testing/test_capture.py::TestCaptureFixture::test_capsyscapfd",
                            "testing/test_capture.py::TestCaptureFixture::test_capturing_getfixturevalue",
                            "testing/test_capture.py::TestCaptureFixture::test_capsyscapfdbinary",
                            "testing/test_capture.py::TestCaptureFixture::test_capture_is_represented_on_failure_issue128[sys]",
                            "testing/test_capture.py::TestCaptureFixture::test_capture_is_represented_on_failure_issue128[fd]",
                            "testing/test_capture.py::TestCaptureFixture::test_stdfd_functional",
                            "testing/test_capture.py::TestCaptureFixture::test_capfdbinary",
                            "testing/test_capture.py::TestCaptureFixture::test_capsysbinary",
                            "testing/test_capture.py::TestCaptureFixture::test_partial_setup_failure",
                            "testing/test_capture.py::TestCaptureFixture::test_keyboardinterrupt_disables_capturing",
                            "testing/test_capture.py::TestCaptureFixture::test_capture_and_logging",
                            "testing/test_capture.py::TestCaptureFixture::test_disabled_capture_fixture[True-capsys]",
                            "testing/test_capture.py::TestCaptureFixture::test_disabled_capture_fixture[True-capfd]",
                            "testing/test_capture.py::TestCaptureFixture::test_disabled_capture_fixture[False-capsys]",
                            "testing/test_capture.py::TestCaptureFixture::test_disabled_capture_fixture[False-capfd]",
                            "testing/test_capture.py::TestCaptureFixture::test_fixture_use_by_other_fixtures[capsys]",
                            "testing/test_capture.py::TestCaptureFixture::test_fixture_use_by_other_fixtures[capfd]",
                            "testing/test_capture.py::TestCaptureFixture::test_fixture_use_by_other_fixtures_teardown[capsys]",
                            "testing/test_capture.py::TestCaptureFixture::test_fixture_use_by_other_fixtures_teardown[capfd]",
                            "testing/test_capture.py::test_setup_failure_does_not_kill_capturing",
                            "testing/test_capture.py::test_fdfuncarg_skips_on_no_osdup",
                            "testing/test_capture.py::test_capture_conftest_runtest_setup",
                            "testing/test_capture.py::test_capture_badoutput_issue412",
                            "testing/test_capture.py::test_capture_early_option_parsing",
                            "testing/test_capture.py::test_capture_binary_output",
                            "testing/test_capture.py::test_error_during_readouterr",
                            "testing/test_capture.py::test_dupfile",
                            "testing/test_capture.py::TestFDCapture::test_simple",
                            "testing/test_capture.py::TestFDCapture::test_simple_many",
                            "testing/test_capture.py::TestFDCapture::test_simple_fail_second_start",
                            "testing/test_capture.py::TestFDCapture::test_stdin",
                            "testing/test_capture.py::TestFDCapture::test_writeorg",
                            "testing/test_capture.py::TestFDCapture::test_simple_resume_suspend",
                            "testing/test_capture.py::TestStdCaptureFD::test_simple_only_fd",
                            "testing/test_capture.py::TestStdCaptureFDinvalidFD::test_stdcapture_fd_invalid_fd",
                            "testing/test_capture.py::test_fdcapture_tmpfile_remains_the_same[True]",
                            "testing/test_capture.py::test_fdcapture_tmpfile_remains_the_same[False]",
                            "testing/test_capture.py::test_close_and_capture_again",
                            "testing/test_capture.py::test_capturing_and_logging_fundamentals[SysCapture]",
                            "testing/test_capture.py::test_capturing_and_logging_fundamentals[FDCapture]",
                            "testing/test_capture.py::test_error_attribute_issue555",
                            "testing/test_capture.py::test_dontreadfrominput_has_encoding",
                            "testing/test_capture.py::test_crash_on_closing_tmpfile_py27",
                            "testing/test_capture.py::test_global_capture_with_live_logging",
                            "testing/test_capture.py::test_capture_with_live_logging[capsys]",
                            "testing/test_capture.py::test_capture_with_live_logging[capfd]",
                            "testing/test_capture.py::test_typeerror_encodedfile_write"
                        ],
                        "failure": [
                            "testing/test_capture.py::TestStdCaptureFD::test_many",
                            "testing/test_capture.py::TestFDCapture::test_simple_many_check_open_files"
                        ]
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "django__django-16429.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "test_depth (utils_tests.test_timesince.TZAwareTimesinceTests)",
                            "test_depth_invalid (utils_tests.test_timesince.TZAwareTimesinceTests)",
                            "Test other units.",
                            "test_thousand_years_ago (utils_tests.test_timesince.TZAwareTimesinceTests)"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "Timesince should work with both date objects (#9672)",
                            "Both timesince and timeuntil should work on date objects (#17937).",
                            "When using two different timezones.",
                            "If the two differing units aren't adjacent, only the first unit is",
                            "When the second date occurs before the first, we should always",
                            "equal datetimes.",
                            "Microseconds and seconds are ignored.",
                            "test_leap_year (utils_tests.test_timesince.TZAwareTimesinceTests)",
                            "test_leap_year_new_years_eve (utils_tests.test_timesince.TZAwareTimesinceTests)",
                            "test_months_edge (utils_tests.test_timesince.TZAwareTimesinceTests)",
                            "Test multiple units.",
                            "test_naive_datetime_with_tzinfo_attribute (utils_tests.test_timesince.TZAwareTimesinceTests)",
                            "test_second_before_equal_first_humanize_time_strings (utils_tests.test_timesince.TZAwareTimesinceTests)",
                            "test_depth (utils_tests.test_timesince.TimesinceTests)",
                            "test_depth_invalid (utils_tests.test_timesince.TimesinceTests)",
                            "test_leap_year (utils_tests.test_timesince.TimesinceTests)",
                            "test_leap_year_new_years_eve (utils_tests.test_timesince.TimesinceTests)",
                            "test_months_edge (utils_tests.test_timesince.TimesinceTests)",
                            "test_naive_datetime_with_tzinfo_attribute (utils_tests.test_timesince.TimesinceTests)",
                            "test_second_before_equal_first_humanize_time_strings (utils_tests.test_timesince.TimesinceTests)",
                            "test_thousand_years_ago (utils_tests.test_timesince.TimesinceTests)"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "sphinx-doc__sphinx-10551.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "tests/test_domain_py.py::test_pyfunction_with_unary_operators",
                            "tests/test_domain_py.py::test_pyfunction_with_binary_operators",
                            "tests/test_pycode_ast.py::test_unparse[~1-~1]",
                            "tests/test_pycode_ast.py::test_unparse[a**b-a**b]",
                            "tests/test_pycode_ast.py::test_unparse[+a-+a]",
                            "tests/test_pycode_ast.py::test_unparse[-1--1]",
                            "tests/test_pycode_ast.py::test_unparse[-a--a]"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "tests/test_domain_py.py::test_function_signatures",
                            "tests/test_domain_py.py::test_domain_py_xrefs",
                            "tests/test_domain_py.py::test_domain_py_xrefs_abbreviations",
                            "tests/test_domain_py.py::test_domain_py_objects",
                            "tests/test_domain_py.py::test_resolve_xref_for_properties",
                            "tests/test_domain_py.py::test_domain_py_find_obj",
                            "tests/test_domain_py.py::test_domain_py_canonical",
                            "tests/test_domain_py.py::test_get_full_qualified_name",
                            "tests/test_domain_py.py::test_parse_annotation",
                            "tests/test_domain_py.py::test_parse_annotation_suppress",
                            "tests/test_domain_py.py::test_parse_annotation_Literal",
                            "tests/test_domain_py.py::test_pyfunction_signature",
                            "tests/test_domain_py.py::test_pyfunction_signature_full",
                            "tests/test_domain_py.py::test_pyfunction_signature_full_py38",
                            "tests/test_domain_py.py::test_pyfunction_with_number_literals",
                            "tests/test_domain_py.py::test_pyfunction_with_union_type_operator",
                            "tests/test_domain_py.py::test_optional_pyfunction_signature",
                            "tests/test_domain_py.py::test_pyexception_signature",
                            "tests/test_domain_py.py::test_pydata_signature",
                            "tests/test_domain_py.py::test_pydata_signature_old",
                            "tests/test_domain_py.py::test_pydata_with_union_type_operator",
                            "tests/test_domain_py.py::test_pyobject_prefix",
                            "tests/test_domain_py.py::test_pydata",
                            "tests/test_domain_py.py::test_pyfunction",
                            "tests/test_domain_py.py::test_pyclass_options",
                            "tests/test_domain_py.py::test_pymethod_options",
                            "tests/test_domain_py.py::test_pyclassmethod",
                            "tests/test_domain_py.py::test_pystaticmethod",
                            "tests/test_domain_py.py::test_pyattribute",
                            "tests/test_domain_py.py::test_pyproperty",
                            "tests/test_domain_py.py::test_pydecorator_signature",
                            "tests/test_domain_py.py::test_pydecoratormethod_signature",
                            "tests/test_domain_py.py::test_canonical",
                            "tests/test_domain_py.py::test_canonical_definition_overrides",
                            "tests/test_domain_py.py::test_canonical_definition_skip",
                            "tests/test_domain_py.py::test_canonical_duplicated",
                            "tests/test_domain_py.py::test_info_field_list",
                            "tests/test_domain_py.py::test_info_field_list_piped_type",
                            "tests/test_domain_py.py::test_info_field_list_Literal",
                            "tests/test_domain_py.py::test_info_field_list_var",
                            "tests/test_domain_py.py::test_type_field",
                            "tests/test_domain_py.py::test_module_index",
                            "tests/test_domain_py.py::test_module_index_submodule",
                            "tests/test_domain_py.py::test_module_index_not_collapsed",
                            "tests/test_domain_py.py::test_modindex_common_prefix",
                            "tests/test_domain_py.py::test_noindexentry",
                            "tests/test_domain_py.py::test_python_python_use_unqualified_type_names",
                            "tests/test_domain_py.py::test_python_python_use_unqualified_type_names_disabled",
                            "tests/test_domain_py.py::test_warn_missing_reference",
                            "tests/test_pycode_ast.py::test_unparse[a",
                            "tests/test_pycode_ast.py::test_unparse[os.path-os.path]",
                            "tests/test_pycode_ast.py::test_unparse[1",
                            "tests/test_pycode_ast.py::test_unparse[b'bytes'-b'bytes']",
                            "tests/test_pycode_ast.py::test_unparse[object()-object()]",
                            "tests/test_pycode_ast.py::test_unparse[1234-1234_0]",
                            "tests/test_pycode_ast.py::test_unparse[{'key1':",
                            "tests/test_pycode_ast.py::test_unparse[...-...]",
                            "tests/test_pycode_ast.py::test_unparse[Tuple[int,",
                            "tests/test_pycode_ast.py::test_unparse[lambda",
                            "tests/test_pycode_ast.py::test_unparse[[1,",
                            "tests/test_pycode_ast.py::test_unparse[sys-sys]",
                            "tests/test_pycode_ast.py::test_unparse[1234-1234_1]",
                            "tests/test_pycode_ast.py::test_unparse[not",
                            "tests/test_pycode_ast.py::test_unparse[{1,",
                            "tests/test_pycode_ast.py::test_unparse['str'-'str']",
                            "tests/test_pycode_ast.py::test_unparse[(1,",
                            "tests/test_pycode_ast.py::test_unparse[()-()]",
                            "tests/test_pycode_ast.py::test_unparse[(1,)-(1,)]",
                            "tests/test_pycode_ast.py::test_unparse_None",
                            "tests/test_pycode_ast.py::test_unparse_py38[lambda",
                            "tests/test_pycode_ast.py::test_unparse_py38[0x1234-0x1234]",
                            "tests/test_pycode_ast.py::test_unparse_py38[1_000_000-1_000_000]"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "astropy__astropy-13842.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "astropy/table/tests/test_mixin.py::test_add_column[arrayswap-False]",
                            "astropy/table/tests/test_mixin.py::test_add_column[arraywrap-False]",
                            "astropy/table/tests/test_mixin.py::test_add_column[cartesianrep-False]",
                            "astropy/table/tests/test_mixin.py::test_add_column[earthlocation-False]",
                            "astropy/table/tests/test_mixin.py::test_add_column[latitude-False]",
                            "astropy/table/tests/test_mixin.py::test_add_column[longitude-False]",
                            "astropy/table/tests/test_mixin.py::test_add_column[ndarraybig-False]",
                            "astropy/table/tests/test_mixin.py::test_add_column[ndarraylil-False]",
                            "astropy/table/tests/test_mixin.py::test_add_column[quantity-False]",
                            "astropy/table/tests/test_mixin.py::test_add_column[skycoord-False]",
                            "astropy/table/tests/test_mixin.py::test_add_column[sphericaldiff-False]",
                            "astropy/table/tests/test_mixin.py::test_add_column[sphericalrep-False]",
                            "astropy/table/tests/test_mixin.py::test_add_column[sphericalrepdiff-False]",
                            "astropy/table/tests/test_mixin.py::test_add_column[time-False]",
                            "astropy/table/tests/test_mixin.py::test_add_column[timedelta-False]",
                            "astropy/table/tests/test_mixin.py::test_ensure_input_info_is_unchanged[QTable-False]"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "astropy/table/tests/test_mixin.py::test_attributes[arrayswap]",
                            "astropy/table/tests/test_mixin.py::test_attributes[arraywrap]",
                            "astropy/table/tests/test_mixin.py::test_attributes[cartesianrep]",
                            "astropy/table/tests/test_mixin.py::test_attributes[earthlocation]",
                            "astropy/table/tests/test_mixin.py::test_attributes[latitude]",
                            "astropy/table/tests/test_mixin.py::test_attributes[longitude]",
                            "astropy/table/tests/test_mixin.py::test_attributes[ndarraybig]",
                            "astropy/table/tests/test_mixin.py::test_attributes[ndarraylil]",
                            "astropy/table/tests/test_mixin.py::test_attributes[quantity]",
                            "astropy/table/tests/test_mixin.py::test_attributes[skycoord]",
                            "astropy/table/tests/test_mixin.py::test_attributes[sphericaldiff]",
                            "astropy/table/tests/test_mixin.py::test_attributes[sphericalrep]",
                            "astropy/table/tests/test_mixin.py::test_attributes[sphericalrepdiff]",
                            "astropy/table/tests/test_mixin.py::test_attributes[time]",
                            "astropy/table/tests/test_mixin.py::test_attributes[timedelta]",
                            "astropy/table/tests/test_mixin.py::test_make_table[unmasked-arrayswap]",
                            "astropy/table/tests/test_mixin.py::test_make_table[unmasked-arraywrap]",
                            "astropy/table/tests/test_mixin.py::test_make_table[unmasked-cartesianrep]",
                            "astropy/table/tests/test_mixin.py::test_make_table[unmasked-earthlocation]",
                            "astropy/table/tests/test_mixin.py::test_make_table[unmasked-latitude]",
                            "astropy/table/tests/test_mixin.py::test_make_table[unmasked-longitude]",
                            "astropy/table/tests/test_mixin.py::test_make_table[unmasked-ndarraybig]",
                            "astropy/table/tests/test_mixin.py::test_make_table[unmasked-ndarraylil]",
                            "astropy/table/tests/test_mixin.py::test_make_table[unmasked-quantity]",
                            "astropy/table/tests/test_mixin.py::test_make_table[unmasked-skycoord]",
                            "astropy/table/tests/test_mixin.py::test_make_table[unmasked-sphericaldiff]",
                            "astropy/table/tests/test_mixin.py::test_make_table[unmasked-sphericalrep]",
                            "astropy/table/tests/test_mixin.py::test_make_table[unmasked-sphericalrepdiff]",
                            "astropy/table/tests/test_mixin.py::test_make_table[unmasked-time]",
                            "astropy/table/tests/test_mixin.py::test_make_table[unmasked-timedelta]",
                            "astropy/table/tests/test_mixin.py::test_make_table[masked-arrayswap]",
                            "astropy/table/tests/test_mixin.py::test_make_table[masked-arraywrap]",
                            "astropy/table/tests/test_mixin.py::test_make_table[masked-cartesianrep]",
                            "astropy/table/tests/test_mixin.py::test_make_table[masked-earthlocation]",
                            "astropy/table/tests/test_mixin.py::test_make_table[masked-latitude]",
                            "astropy/table/tests/test_mixin.py::test_make_table[masked-longitude]",
                            "astropy/table/tests/test_mixin.py::test_make_table[masked-ndarraybig]",
                            "astropy/table/tests/test_mixin.py::test_make_table[masked-ndarraylil]",
                            "astropy/table/tests/test_mixin.py::test_make_table[masked-quantity]",
                            "astropy/table/tests/test_mixin.py::test_make_table[masked-skycoord]",
                            "astropy/table/tests/test_mixin.py::test_make_table[masked-sphericaldiff]",
                            "astropy/table/tests/test_mixin.py::test_make_table[masked-sphericalrep]",
                            "astropy/table/tests/test_mixin.py::test_make_table[masked-sphericalrepdiff]",
                            "astropy/table/tests/test_mixin.py::test_make_table[masked-time]",
                            "astropy/table/tests/test_mixin.py::test_make_table[masked-timedelta]",
                            "astropy/table/tests/test_mixin.py::test_make_table[subclass-arrayswap]",
                            "astropy/table/tests/test_mixin.py::test_make_table[subclass-arraywrap]",
                            "astropy/table/tests/test_mixin.py::test_make_table[subclass-cartesianrep]",
                            "astropy/table/tests/test_mixin.py::test_make_table[subclass-earthlocation]",
                            "astropy/table/tests/test_mixin.py::test_make_table[subclass-latitude]",
                            "astropy/table/tests/test_mixin.py::test_make_table[subclass-longitude]",
                            "astropy/table/tests/test_mixin.py::test_make_table[subclass-ndarraybig]",
                            "astropy/table/tests/test_mixin.py::test_make_table[subclass-ndarraylil]",
                            "astropy/table/tests/test_mixin.py::test_make_table[subclass-quantity]",
                            "astropy/table/tests/test_mixin.py::test_make_table[subclass-skycoord]",
                            "astropy/table/tests/test_mixin.py::test_make_table[subclass-sphericaldiff]",
                            "astropy/table/tests/test_mixin.py::test_make_table[subclass-sphericalrep]",
                            "astropy/table/tests/test_mixin.py::test_make_table[subclass-sphericalrepdiff]",
                            "astropy/table/tests/test_mixin.py::test_make_table[subclass-time]",
                            "astropy/table/tests/test_mixin.py::test_make_table[subclass-timedelta]",
                            "astropy/table/tests/test_mixin.py::test_votable_quantity_write",
                            "astropy/table/tests/test_mixin.py::test_io_time_write_fits_local[Table]",
                            "astropy/table/tests/test_mixin.py::test_io_time_write_fits_local[QTable]",
                            "astropy/table/tests/test_mixin.py::test_votable_mixin_write_fail[arrayswap]",
                            "astropy/table/tests/test_mixin.py::test_votable_mixin_write_fail[arraywrap]",
                            "astropy/table/tests/test_mixin.py::test_votable_mixin_write_fail[cartesianrep]",
                            "astropy/table/tests/test_mixin.py::test_votable_mixin_write_fail[ndarraybig]",
                            "astropy/table/tests/test_mixin.py::test_votable_mixin_write_fail[ndarraylil]",
                            "astropy/table/tests/test_mixin.py::test_votable_mixin_write_fail[skycoord]",
                            "astropy/table/tests/test_mixin.py::test_votable_mixin_write_fail[sphericaldiff]",
                            "astropy/table/tests/test_mixin.py::test_votable_mixin_write_fail[sphericalrep]",
                            "astropy/table/tests/test_mixin.py::test_votable_mixin_write_fail[sphericalrepdiff]",
                            "astropy/table/tests/test_mixin.py::test_votable_mixin_write_fail[time]",
                            "astropy/table/tests/test_mixin.py::test_votable_mixin_write_fail[timedelta]",
                            "astropy/table/tests/test_mixin.py::test_join[unmasked]",
                            "astropy/table/tests/test_mixin.py::test_join[masked]",
                            "astropy/table/tests/test_mixin.py::test_join[subclass]",
                            "astropy/table/tests/test_mixin.py::test_hstack[unmasked]",
                            "astropy/table/tests/test_mixin.py::test_hstack[masked]",
                            "astropy/table/tests/test_mixin.py::test_hstack[subclass]",
                            "astropy/table/tests/test_mixin.py::test_get_items[arrayswap]",
                            "astropy/table/tests/test_mixin.py::test_get_items[arraywrap]",
                            "astropy/table/tests/test_mixin.py::test_get_items[cartesianrep]",
                            "astropy/table/tests/test_mixin.py::test_get_items[earthlocation]",
                            "astropy/table/tests/test_mixin.py::test_get_items[latitude]",
                            "astropy/table/tests/test_mixin.py::test_get_items[longitude]",
                            "astropy/table/tests/test_mixin.py::test_get_items[ndarraybig]",
                            "astropy/table/tests/test_mixin.py::test_get_items[ndarraylil]",
                            "astropy/table/tests/test_mixin.py::test_get_items[quantity]",
                            "astropy/table/tests/test_mixin.py::test_get_items[skycoord]",
                            "astropy/table/tests/test_mixin.py::test_get_items[sphericaldiff]",
                            "astropy/table/tests/test_mixin.py::test_get_items[sphericalrep]",
                            "astropy/table/tests/test_mixin.py::test_get_items[sphericalrepdiff]",
                            "astropy/table/tests/test_mixin.py::test_get_items[time]",
                            "astropy/table/tests/test_mixin.py::test_get_items[timedelta]",
                            "astropy/table/tests/test_mixin.py::test_info_preserved_pickle_copy_init[arrayswap]",
                            "astropy/table/tests/test_mixin.py::test_info_preserved_pickle_copy_init[arraywrap]",
                            "astropy/table/tests/test_mixin.py::test_info_preserved_pickle_copy_init[cartesianrep]",
                            "astropy/table/tests/test_mixin.py::test_info_preserved_pickle_copy_init[earthlocation]",
                            "astropy/table/tests/test_mixin.py::test_info_preserved_pickle_copy_init[latitude]",
                            "astropy/table/tests/test_mixin.py::test_info_preserved_pickle_copy_init[longitude]",
                            "astropy/table/tests/test_mixin.py::test_info_preserved_pickle_copy_init[ndarraybig]",
                            "astropy/table/tests/test_mixin.py::test_info_preserved_pickle_copy_init[ndarraylil]",
                            "astropy/table/tests/test_mixin.py::test_info_preserved_pickle_copy_init[quantity]",
                            "astropy/table/tests/test_mixin.py::test_info_preserved_pickle_copy_init[skycoord]",
                            "astropy/table/tests/test_mixin.py::test_info_preserved_pickle_copy_init[sphericaldiff]",
                            "astropy/table/tests/test_mixin.py::test_info_preserved_pickle_copy_init[sphericalrep]",
                            "astropy/table/tests/test_mixin.py::test_info_preserved_pickle_copy_init[sphericalrepdiff]",
                            "astropy/table/tests/test_mixin.py::test_info_preserved_pickle_copy_init[time]",
                            "astropy/table/tests/test_mixin.py::test_info_preserved_pickle_copy_init[timedelta]",
                            "astropy/table/tests/test_mixin.py::test_add_column[arrayswap-True]",
                            "astropy/table/tests/test_mixin.py::test_add_column[arraywrap-True]",
                            "astropy/table/tests/test_mixin.py::test_add_column[cartesianrep-True]",
                            "astropy/table/tests/test_mixin.py::test_add_column[earthlocation-True]",
                            "astropy/table/tests/test_mixin.py::test_add_column[latitude-True]",
                            "astropy/table/tests/test_mixin.py::test_add_column[longitude-True]",
                            "astropy/table/tests/test_mixin.py::test_add_column[ndarraybig-True]",
                            "astropy/table/tests/test_mixin.py::test_add_column[ndarraylil-True]",
                            "astropy/table/tests/test_mixin.py::test_add_column[quantity-True]",
                            "astropy/table/tests/test_mixin.py::test_add_column[skycoord-True]",
                            "astropy/table/tests/test_mixin.py::test_add_column[sphericaldiff-True]",
                            "astropy/table/tests/test_mixin.py::test_add_column[sphericalrep-True]",
                            "astropy/table/tests/test_mixin.py::test_add_column[sphericalrepdiff-True]",
                            "astropy/table/tests/test_mixin.py::test_add_column[time-True]",
                            "astropy/table/tests/test_mixin.py::test_add_column[timedelta-True]",
                            "astropy/table/tests/test_mixin.py::test_vstack",
                            "astropy/table/tests/test_mixin.py::test_insert_row[arrayswap]",
                            "astropy/table/tests/test_mixin.py::test_insert_row[arraywrap]",
                            "astropy/table/tests/test_mixin.py::test_insert_row[cartesianrep]",
                            "astropy/table/tests/test_mixin.py::test_insert_row[earthlocation]",
                            "astropy/table/tests/test_mixin.py::test_insert_row[latitude]",
                            "astropy/table/tests/test_mixin.py::test_insert_row[longitude]",
                            "astropy/table/tests/test_mixin.py::test_insert_row[ndarraybig]",
                            "astropy/table/tests/test_mixin.py::test_insert_row[ndarraylil]",
                            "astropy/table/tests/test_mixin.py::test_insert_row[quantity]",
                            "astropy/table/tests/test_mixin.py::test_insert_row[skycoord]",
                            "astropy/table/tests/test_mixin.py::test_insert_row[sphericaldiff]",
                            "astropy/table/tests/test_mixin.py::test_insert_row[sphericalrep]",
                            "astropy/table/tests/test_mixin.py::test_insert_row[sphericalrepdiff]",
                            "astropy/table/tests/test_mixin.py::test_insert_row[time]",
                            "astropy/table/tests/test_mixin.py::test_insert_row[timedelta]",
                            "astropy/table/tests/test_mixin.py::test_insert_row_bad_unit",
                            "astropy/table/tests/test_mixin.py::test_convert_np_array[arrayswap]",
                            "astropy/table/tests/test_mixin.py::test_convert_np_array[arraywrap]",
                            "astropy/table/tests/test_mixin.py::test_convert_np_array[cartesianrep]",
                            "astropy/table/tests/test_mixin.py::test_convert_np_array[earthlocation]",
                            "astropy/table/tests/test_mixin.py::test_convert_np_array[latitude]",
                            "astropy/table/tests/test_mixin.py::test_convert_np_array[longitude]",
                            "astropy/table/tests/test_mixin.py::test_convert_np_array[ndarraybig]",
                            "astropy/table/tests/test_mixin.py::test_convert_np_array[ndarraylil]",
                            "astropy/table/tests/test_mixin.py::test_convert_np_array[quantity]",
                            "astropy/table/tests/test_mixin.py::test_convert_np_array[skycoord]",
                            "astropy/table/tests/test_mixin.py::test_convert_np_array[sphericaldiff]",
                            "astropy/table/tests/test_mixin.py::test_convert_np_array[sphericalrep]",
                            "astropy/table/tests/test_mixin.py::test_convert_np_array[sphericalrepdiff]",
                            "astropy/table/tests/test_mixin.py::test_convert_np_array[time]",
                            "astropy/table/tests/test_mixin.py::test_convert_np_array[timedelta]",
                            "astropy/table/tests/test_mixin.py::test_assignment_and_copy",
                            "astropy/table/tests/test_mixin.py::test_conversion_qtable_table",
                            "astropy/table/tests/test_mixin.py::test_setitem_as_column_name",
                            "astropy/table/tests/test_mixin.py::test_quantity_representation",
                            "astropy/table/tests/test_mixin.py::test_representation_representation",
                            "astropy/table/tests/test_mixin.py::test_skycoord_representation",
                            "astropy/table/tests/test_mixin.py::test_ndarray_mixin[True]",
                            "astropy/table/tests/test_mixin.py::test_ndarray_mixin[False]",
                            "astropy/table/tests/test_mixin.py::test_possible_string_format_functions",
                            "astropy/table/tests/test_mixin.py::test_rename_mixin_columns[arrayswap]",
                            "astropy/table/tests/test_mixin.py::test_rename_mixin_columns[arraywrap]",
                            "astropy/table/tests/test_mixin.py::test_rename_mixin_columns[cartesianrep]",
                            "astropy/table/tests/test_mixin.py::test_rename_mixin_columns[earthlocation]",
                            "astropy/table/tests/test_mixin.py::test_rename_mixin_columns[latitude]",
                            "astropy/table/tests/test_mixin.py::test_rename_mixin_columns[longitude]",
                            "astropy/table/tests/test_mixin.py::test_rename_mixin_columns[ndarraybig]",
                            "astropy/table/tests/test_mixin.py::test_rename_mixin_columns[ndarraylil]",
                            "astropy/table/tests/test_mixin.py::test_rename_mixin_columns[quantity]",
                            "astropy/table/tests/test_mixin.py::test_rename_mixin_columns[skycoord]",
                            "astropy/table/tests/test_mixin.py::test_rename_mixin_columns[sphericaldiff]",
                            "astropy/table/tests/test_mixin.py::test_rename_mixin_columns[sphericalrep]",
                            "astropy/table/tests/test_mixin.py::test_rename_mixin_columns[sphericalrepdiff]",
                            "astropy/table/tests/test_mixin.py::test_rename_mixin_columns[time]",
                            "astropy/table/tests/test_mixin.py::test_rename_mixin_columns[timedelta]",
                            "astropy/table/tests/test_mixin.py::test_represent_mixins_as_columns_unit_fix",
                            "astropy/table/tests/test_mixin.py::test_primary_data_column_gets_description",
                            "astropy/table/tests/test_mixin.py::test_skycoord_with_velocity",
                            "astropy/table/tests/test_mixin.py::test_ensure_input_info_is_unchanged[Table-True]",
                            "astropy/table/tests/test_mixin.py::test_ensure_input_info_is_unchanged[Table-False]",
                            "astropy/table/tests/test_mixin.py::test_ensure_input_info_is_unchanged[QTable-True]",
                            "astropy/table/tests/test_mixin.py::test_bad_info_class"
                        ],
                        "failure": [
                            "astropy/table/tests/test_mixin.py::test_io_ascii_write"
                        ]
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "sphinx-doc__sphinx-8801.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "tests/test_ext_autodoc_autoclass.py::test_uninitialized_attributes"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "tests/test_ext_autodoc_autoclass.py::test_classes",
                            "tests/test_ext_autodoc_autoclass.py::test_instance_variable",
                            "tests/test_ext_autodoc_autoclass.py::test_inherited_instance_variable",
                            "tests/test_ext_autodoc_autoclass.py::test_undocumented_uninitialized_attributes",
                            "tests/test_ext_autodoc_autoclass.py::test_decorators",
                            "tests/test_ext_autodoc_autoclass.py::test_slots_attribute",
                            "tests/test_ext_autodoc_autoclass.py::test_show_inheritance_for_subclass_of_generic_type",
                            "tests/test_ext_autodoc_autoclass.py::test_class_alias"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "sympy__sympy-22005.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "test_solve_poly_system"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "test_solve_biquadratic",
                            "test_solve_triangulated"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "pydata__xarray-6601.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "xarray/tests/test_computation.py::test_polyval[broadcast-x-False]"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "xarray/tests/test_computation.py::test_signature_properties",
                            "xarray/tests/test_computation.py::test_result_name",
                            "xarray/tests/test_computation.py::test_ordered_set_union",
                            "xarray/tests/test_computation.py::test_ordered_set_intersection",
                            "xarray/tests/test_computation.py::test_join_dict_keys",
                            "xarray/tests/test_computation.py::test_collect_dict_values",
                            "xarray/tests/test_computation.py::test_apply_identity",
                            "xarray/tests/test_computation.py::test_apply_two_inputs",
                            "xarray/tests/test_computation.py::test_apply_1d_and_0d",
                            "xarray/tests/test_computation.py::test_apply_two_outputs",
                            "xarray/tests/test_computation.py::test_apply_dask_parallelized_two_outputs",
                            "xarray/tests/test_computation.py::test_apply_input_core_dimension",
                            "xarray/tests/test_computation.py::test_apply_output_core_dimension",
                            "xarray/tests/test_computation.py::test_apply_exclude",
                            "xarray/tests/test_computation.py::test_apply_groupby_add",
                            "xarray/tests/test_computation.py::test_unified_dim_sizes",
                            "xarray/tests/test_computation.py::test_broadcast_compat_data_1d",
                            "xarray/tests/test_computation.py::test_broadcast_compat_data_2d",
                            "xarray/tests/test_computation.py::test_keep_attrs",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_variable[default]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_variable[False]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_variable[True]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_variable[override]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_variable[drop]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_variable[drop_conflicts]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_variable[no_conflicts]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray[default]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray[False]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray[True]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray[override]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray[drop]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray[drop_conflicts]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray[no_conflicts]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray_variables[default-dim]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray_variables[default-coord]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray_variables[False-dim]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray_variables[False-coord]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray_variables[True-dim]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray_variables[True-coord]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray_variables[override-dim]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray_variables[override-coord]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray_variables[drop-dim]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray_variables[drop-coord]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray_variables[drop_conflicts-dim]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray_variables[drop_conflicts-coord]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray_variables[no_conflicts-dim]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray_variables[no_conflicts-coord]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset[default]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset[False]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset[True]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset[override]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset[drop]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset[drop_conflicts]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset[no_conflicts]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[default-data]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[default-dim]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[default-coord]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[False-data]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[False-dim]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[False-coord]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[True-data]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[True-dim]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[True-coord]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[override-data]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[override-dim]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[override-coord]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[drop-data]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[drop-dim]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[drop-coord]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[drop_conflicts-data]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[drop_conflicts-dim]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[drop_conflicts-coord]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[no_conflicts-data]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[no_conflicts-dim]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[no_conflicts-coord]",
                            "xarray/tests/test_computation.py::test_dataset_join",
                            "xarray/tests/test_computation.py::test_apply_dask",
                            "xarray/tests/test_computation.py::test_apply_dask_parallelized_one_arg",
                            "xarray/tests/test_computation.py::test_apply_dask_parallelized_two_args",
                            "xarray/tests/test_computation.py::test_apply_dask_parallelized_errors",
                            "xarray/tests/test_computation.py::test_apply_dask_multiple_inputs",
                            "xarray/tests/test_computation.py::test_apply_dask_new_output_dimension",
                            "xarray/tests/test_computation.py::test_apply_dask_new_output_sizes",
                            "xarray/tests/test_computation.py::test_vectorize",
                            "xarray/tests/test_computation.py::test_vectorize_dask",
                            "xarray/tests/test_computation.py::test_vectorize_dask_dtype",
                            "xarray/tests/test_computation.py::test_vectorize_dask_dtype_without_output_dtypes[data_array0]",
                            "xarray/tests/test_computation.py::test_vectorize_dask_dtype_without_output_dtypes[data_array1]",
                            "xarray/tests/test_computation.py::test_vectorize_exclude_dims",
                            "xarray/tests/test_computation.py::test_vectorize_exclude_dims_dask",
                            "xarray/tests/test_computation.py::test_corr_only_dataarray",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[None-da_a0-da_b0-0]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[None-da_a0-da_b0-1]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[None-da_a1-da_b1-0]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[None-da_a1-da_b1-1]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[None-da_a2-da_b2-0]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[None-da_a2-da_b2-1]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[None-da_a3-da_b3-0]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[None-da_a3-da_b3-1]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[None-da_a4-da_b4-0]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[None-da_a4-da_b4-1]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[None-da_a5-da_b5-0]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[None-da_a5-da_b5-1]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[x-da_a0-da_b0-0]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[x-da_a0-da_b0-1]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[x-da_a1-da_b1-0]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[x-da_a1-da_b1-1]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[x-da_a2-da_b2-0]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[x-da_a2-da_b2-1]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[x-da_a3-da_b3-0]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[x-da_a3-da_b3-1]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[x-da_a4-da_b4-0]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[x-da_a4-da_b4-1]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[x-da_a5-da_b5-0]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[x-da_a5-da_b5-1]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[time-da_a0-da_b0-0]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[time-da_a0-da_b0-1]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[time-da_a1-da_b1-0]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[time-da_a1-da_b1-1]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[time-da_a2-da_b2-0]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[time-da_a2-da_b2-1]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[time-da_a3-da_b3-0]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[time-da_a3-da_b3-1]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[time-da_a4-da_b4-0]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[time-da_a4-da_b4-1]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[time-da_a5-da_b5-0]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[time-da_a5-da_b5-1]",
                            "xarray/tests/test_computation.py::test_cov[None-da_a0-da_b0-0]",
                            "xarray/tests/test_computation.py::test_cov[None-da_a0-da_b0-1]",
                            "xarray/tests/test_computation.py::test_cov[None-da_a1-da_b1-0]",
                            "xarray/tests/test_computation.py::test_cov[None-da_a1-da_b1-1]",
                            "xarray/tests/test_computation.py::test_cov[None-da_a2-da_b2-0]",
                            "xarray/tests/test_computation.py::test_cov[None-da_a2-da_b2-1]",
                            "xarray/tests/test_computation.py::test_cov[time-da_a0-da_b0-0]",
                            "xarray/tests/test_computation.py::test_cov[time-da_a0-da_b0-1]",
                            "xarray/tests/test_computation.py::test_cov[time-da_a1-da_b1-0]",
                            "xarray/tests/test_computation.py::test_cov[time-da_a1-da_b1-1]",
                            "xarray/tests/test_computation.py::test_cov[time-da_a2-da_b2-0]",
                            "xarray/tests/test_computation.py::test_cov[time-da_a2-da_b2-1]",
                            "xarray/tests/test_computation.py::test_corr[None-da_a0-da_b0]",
                            "xarray/tests/test_computation.py::test_corr[None-da_a1-da_b1]",
                            "xarray/tests/test_computation.py::test_corr[None-da_a2-da_b2]",
                            "xarray/tests/test_computation.py::test_corr[time-da_a0-da_b0]",
                            "xarray/tests/test_computation.py::test_corr[time-da_a1-da_b1]",
                            "xarray/tests/test_computation.py::test_corr[time-da_a2-da_b2]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[None-da_a0-da_b0]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[None-da_a1-da_b1]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[None-da_a2-da_b2]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[None-da_a3-da_b3]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[None-da_a4-da_b4]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[None-da_a5-da_b5]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[None-da_a6-da_b6]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[None-da_a7-da_b7]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[None-da_a8-da_b8]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[time-da_a0-da_b0]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[time-da_a1-da_b1]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[time-da_a2-da_b2]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[time-da_a3-da_b3]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[time-da_a4-da_b4]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[time-da_a5-da_b5]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[time-da_a6-da_b6]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[time-da_a7-da_b7]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[time-da_a8-da_b8]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[x-da_a0-da_b0]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[x-da_a1-da_b1]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[x-da_a2-da_b2]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[x-da_a3-da_b3]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[x-da_a4-da_b4]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[x-da_a5-da_b5]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[x-da_a6-da_b6]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[x-da_a7-da_b7]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[x-da_a8-da_b8]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[None-da_a0-da_b0]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[None-da_a1-da_b1]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[None-da_a2-da_b2]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[None-da_a3-da_b3]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[None-da_a4-da_b4]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[None-da_a5-da_b5]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[None-da_a6-da_b6]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[None-da_a7-da_b7]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[None-da_a8-da_b8]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[time-da_a0-da_b0]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[time-da_a1-da_b1]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[time-da_a2-da_b2]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[time-da_a3-da_b3]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[time-da_a4-da_b4]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[time-da_a5-da_b5]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[time-da_a6-da_b6]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[time-da_a7-da_b7]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[time-da_a8-da_b8]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[x-da_a0-da_b0]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[x-da_a1-da_b1]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[x-da_a2-da_b2]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[x-da_a3-da_b3]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[x-da_a4-da_b4]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[x-da_a5-da_b5]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[x-da_a6-da_b6]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[x-da_a7-da_b7]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[x-da_a8-da_b8]",
                            "xarray/tests/test_computation.py::test_corr_dtype_error",
                            "xarray/tests/test_computation.py::test_autocov[None-da_a0]",
                            "xarray/tests/test_computation.py::test_autocov[None-da_a1]",
                            "xarray/tests/test_computation.py::test_autocov[None-da_a2]",
                            "xarray/tests/test_computation.py::test_autocov[None-da_a3]",
                            "xarray/tests/test_computation.py::test_autocov[None-da_a4]",
                            "xarray/tests/test_computation.py::test_autocov[time-da_a0]",
                            "xarray/tests/test_computation.py::test_autocov[time-da_a1]",
                            "xarray/tests/test_computation.py::test_autocov[time-da_a2]",
                            "xarray/tests/test_computation.py::test_autocov[time-da_a3]",
                            "xarray/tests/test_computation.py::test_autocov[time-da_a4]",
                            "xarray/tests/test_computation.py::test_autocov[x-da_a0]",
                            "xarray/tests/test_computation.py::test_autocov[x-da_a1]",
                            "xarray/tests/test_computation.py::test_autocov[x-da_a2]",
                            "xarray/tests/test_computation.py::test_autocov[x-da_a3]",
                            "xarray/tests/test_computation.py::test_autocov[x-da_a4]",
                            "xarray/tests/test_computation.py::test_autocov[dim3-da_a0]",
                            "xarray/tests/test_computation.py::test_autocov[dim3-da_a1]",
                            "xarray/tests/test_computation.py::test_autocov[dim3-da_a2]",
                            "xarray/tests/test_computation.py::test_autocov[dim3-da_a3]",
                            "xarray/tests/test_computation.py::test_autocov[dim3-da_a4]",
                            "xarray/tests/test_computation.py::test_vectorize_dask_new_output_dims",
                            "xarray/tests/test_computation.py::test_output_wrong_number",
                            "xarray/tests/test_computation.py::test_output_wrong_dims",
                            "xarray/tests/test_computation.py::test_output_wrong_dim_size",
                            "xarray/tests/test_computation.py::test_dot[True]",
                            "xarray/tests/test_computation.py::test_dot[False]",
                            "xarray/tests/test_computation.py::test_dot_align_coords[True]",
                            "xarray/tests/test_computation.py::test_dot_align_coords[False]",
                            "xarray/tests/test_computation.py::test_where",
                            "xarray/tests/test_computation.py::test_where_attrs",
                            "xarray/tests/test_computation.py::test_polyval[simple-False]",
                            "xarray/tests/test_computation.py::test_polyval[simple-True]",
                            "xarray/tests/test_computation.py::test_polyval[broadcast-x-True]",
                            "xarray/tests/test_computation.py::test_polyval[shared-dim-False]",
                            "xarray/tests/test_computation.py::test_polyval[shared-dim-True]",
                            "xarray/tests/test_computation.py::test_polyval[reordered-index-False]",
                            "xarray/tests/test_computation.py::test_polyval[reordered-index-True]",
                            "xarray/tests/test_computation.py::test_polyval[sparse-index-False]",
                            "xarray/tests/test_computation.py::test_polyval[sparse-index-True]",
                            "xarray/tests/test_computation.py::test_polyval[array-dataset-False]",
                            "xarray/tests/test_computation.py::test_polyval[array-dataset-True]",
                            "xarray/tests/test_computation.py::test_polyval[dataset-array-False]",
                            "xarray/tests/test_computation.py::test_polyval[dataset-array-True]",
                            "xarray/tests/test_computation.py::test_polyval[dataset-dataset-False]",
                            "xarray/tests/test_computation.py::test_polyval[dataset-dataset-True]",
                            "xarray/tests/test_computation.py::test_polyval[datetime-False]",
                            "xarray/tests/test_computation.py::test_polyval[datetime-True]",
                            "xarray/tests/test_computation.py::test_polyval[timedelta-False]",
                            "xarray/tests/test_computation.py::test_polyval[timedelta-True]",
                            "xarray/tests/test_computation.py::test_polyval_degree_dim_checks",
                            "xarray/tests/test_computation.py::test_cross[a0-b0-ae0-be0-dim_0--1-False]",
                            "xarray/tests/test_computation.py::test_cross[a0-b0-ae0-be0-dim_0--1-True]",
                            "xarray/tests/test_computation.py::test_cross[a1-b1-ae1-be1-dim_0--1-False]",
                            "xarray/tests/test_computation.py::test_cross[a1-b1-ae1-be1-dim_0--1-True]",
                            "xarray/tests/test_computation.py::test_cross[a2-b2-ae2-be2-dim_0--1-False]",
                            "xarray/tests/test_computation.py::test_cross[a2-b2-ae2-be2-dim_0--1-True]",
                            "xarray/tests/test_computation.py::test_cross[a3-b3-ae3-be3-dim_0--1-False]",
                            "xarray/tests/test_computation.py::test_cross[a3-b3-ae3-be3-dim_0--1-True]",
                            "xarray/tests/test_computation.py::test_cross[a4-b4-ae4-be4-cartesian-1-False]",
                            "xarray/tests/test_computation.py::test_cross[a4-b4-ae4-be4-cartesian-1-True]",
                            "xarray/tests/test_computation.py::test_cross[a5-b5-ae5-be5-cartesian--1-False]",
                            "xarray/tests/test_computation.py::test_cross[a5-b5-ae5-be5-cartesian--1-True]",
                            "xarray/tests/test_computation.py::test_cross[a6-b6-ae6-be6-cartesian--1-False]",
                            "xarray/tests/test_computation.py::test_cross[a6-b6-ae6-be6-cartesian--1-True]"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "pytest-dev__pytest-5692.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "testing/test_junitxml.py::TestPython::test_hostname_in_xml",
                            "testing/test_junitxml.py::TestPython::test_timestamp_in_xml"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "testing/test_junitxml.py::test_mangle_test_address",
                            "testing/test_junitxml.py::test_dont_configure_on_slaves",
                            "testing/test_junitxml.py::test_invalid_xml_escape",
                            "testing/test_junitxml.py::test_logxml_path_expansion",
                            "testing/test_junitxml.py::TestPython::test_summing_simple",
                            "testing/test_junitxml.py::TestPython::test_summing_simple_with_errors",
                            "testing/test_junitxml.py::TestPython::test_timing_function",
                            "testing/test_junitxml.py::TestPython::test_junit_duration_report[call]",
                            "testing/test_junitxml.py::TestPython::test_junit_duration_report[total]",
                            "testing/test_junitxml.py::TestPython::test_setup_error",
                            "testing/test_junitxml.py::TestPython::test_teardown_error",
                            "testing/test_junitxml.py::TestPython::test_call_failure_teardown_error",
                            "testing/test_junitxml.py::TestPython::test_skip_contains_name_reason",
                            "testing/test_junitxml.py::TestPython::test_mark_skip_contains_name_reason",
                            "testing/test_junitxml.py::TestPython::test_mark_skipif_contains_name_reason",
                            "testing/test_junitxml.py::TestPython::test_mark_skip_doesnt_capture_output",
                            "testing/test_junitxml.py::TestPython::test_classname_instance",
                            "testing/test_junitxml.py::TestPython::test_classname_nested_dir",
                            "testing/test_junitxml.py::TestPython::test_internal_error",
                            "testing/test_junitxml.py::TestPython::test_failure_function[no]",
                            "testing/test_junitxml.py::TestPython::test_failure_function[system-out]",
                            "testing/test_junitxml.py::TestPython::test_failure_function[system-err]",
                            "testing/test_junitxml.py::TestPython::test_failure_verbose_message",
                            "testing/test_junitxml.py::TestPython::test_failure_escape",
                            "testing/test_junitxml.py::TestPython::test_junit_prefixing",
                            "testing/test_junitxml.py::TestPython::test_xfailure_function",
                            "testing/test_junitxml.py::TestPython::test_xfailure_marker",
                            "testing/test_junitxml.py::TestPython::test_xfail_captures_output_once",
                            "testing/test_junitxml.py::TestPython::test_xfailure_xpass",
                            "testing/test_junitxml.py::TestPython::test_xfailure_xpass_strict",
                            "testing/test_junitxml.py::TestPython::test_collect_error",
                            "testing/test_junitxml.py::TestPython::test_unicode",
                            "testing/test_junitxml.py::TestPython::test_assertion_binchars",
                            "testing/test_junitxml.py::TestPython::test_pass_captures_stdout",
                            "testing/test_junitxml.py::TestPython::test_pass_captures_stderr",
                            "testing/test_junitxml.py::TestPython::test_setup_error_captures_stdout",
                            "testing/test_junitxml.py::TestPython::test_setup_error_captures_stderr",
                            "testing/test_junitxml.py::TestPython::test_avoid_double_stdout",
                            "testing/test_junitxml.py::TestNonPython::test_summing_simple",
                            "testing/test_junitxml.py::test_nullbyte",
                            "testing/test_junitxml.py::test_nullbyte_replace",
                            "testing/test_junitxml.py::test_logxml_changingdir",
                            "testing/test_junitxml.py::test_logxml_makedir",
                            "testing/test_junitxml.py::test_logxml_check_isdir",
                            "testing/test_junitxml.py::test_escaped_parametrized_names_xml",
                            "testing/test_junitxml.py::test_double_colon_split_function_issue469",
                            "testing/test_junitxml.py::test_double_colon_split_method_issue469",
                            "testing/test_junitxml.py::test_unicode_issue368",
                            "testing/test_junitxml.py::test_record_property",
                            "testing/test_junitxml.py::test_record_property_same_name",
                            "testing/test_junitxml.py::test_record_fixtures_without_junitxml[record_property]",
                            "testing/test_junitxml.py::test_record_fixtures_without_junitxml[record_xml_attribute]",
                            "testing/test_junitxml.py::test_record_attribute",
                            "testing/test_junitxml.py::test_record_fixtures_xunit2[record_xml_attribute]",
                            "testing/test_junitxml.py::test_record_fixtures_xunit2[record_property]",
                            "testing/test_junitxml.py::test_root_testsuites_tag",
                            "testing/test_junitxml.py::test_runs_twice",
                            "testing/test_junitxml.py::test_fancy_items_regression",
                            "testing/test_junitxml.py::test_global_properties",
                            "testing/test_junitxml.py::test_url_property",
                            "testing/test_junitxml.py::test_record_testsuite_property",
                            "testing/test_junitxml.py::test_record_testsuite_property_junit_disabled",
                            "testing/test_junitxml.py::test_record_testsuite_property_type_checking[True]",
                            "testing/test_junitxml.py::test_record_testsuite_property_type_checking[False]",
                            "testing/test_junitxml.py::test_set_suite_name[my_suite]",
                            "testing/test_junitxml.py::test_set_suite_name[]",
                            "testing/test_junitxml.py::test_escaped_skipreason_issue3533",
                            "testing/test_junitxml.py::test_logging_passing_tests_disabled_does_not_log_test_output"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "psf__requests-4356.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "tests/test_requests.py::TestRequests::test_entry_points",
                            "tests/test_requests.py::TestRequests::test_invalid_url[MissingSchema-hiwpefhipowhefopw]",
                            "tests/test_requests.py::TestRequests::test_invalid_url[InvalidSchema-localhost:3128]",
                            "tests/test_requests.py::TestRequests::test_invalid_url[InvalidSchema-localhost.localdomain:3128/]",
                            "tests/test_requests.py::TestRequests::test_invalid_url[InvalidSchema-10.122.1.1:3128/]",
                            "tests/test_requests.py::TestRequests::test_invalid_url[InvalidURL-http://]",
                            "tests/test_requests.py::TestRequests::test_basic_building",
                            "tests/test_requests.py::TestRequests::test_path_is_not_double_encoded",
                            "tests/test_requests.py::TestRequests::test_params_are_added_before_fragment[http://example.com/path#fragment-http://example.com/path?a=b#fragment]",
                            "tests/test_requests.py::TestRequests::test_params_are_added_before_fragment[http://example.com/path?key=value#fragment-http://example.com/path?key=value&a=b#fragment]",
                            "tests/test_requests.py::TestRequests::test_params_original_order_is_preserved_by_default",
                            "tests/test_requests.py::TestRequests::test_params_bytes_are_encoded",
                            "tests/test_requests.py::TestRequests::test_binary_put",
                            "tests/test_requests.py::TestRequests::test_whitespaces_are_removed_from_url",
                            "tests/test_requests.py::TestRequests::test_basicauth_encodes_byte_strings",
                            "tests/test_requests.py::TestRequests::test_errors[http://doesnotexist.google.com-ConnectionError]",
                            "tests/test_requests.py::TestRequests::test_errors[http://localhost:1-ConnectionError]",
                            "tests/test_requests.py::TestRequests::test_errors[http://fe80::5054:ff:fe5a:fc0-InvalidURL]",
                            "tests/test_requests.py::TestRequests::test_proxy_error",
                            "tests/test_requests.py::TestRequests::test_non_prepared_request_error",
                            "tests/test_requests.py::TestRequests::test_prepare_request_with_bytestring_url",
                            "tests/test_requests.py::TestRequests::test_links",
                            "tests/test_requests.py::TestRequests::test_cookie_parameters",
                            "tests/test_requests.py::TestRequests::test_cookie_as_dict_keeps_len",
                            "tests/test_requests.py::TestRequests::test_cookie_as_dict_keeps_items",
                            "tests/test_requests.py::TestRequests::test_cookie_as_dict_keys",
                            "tests/test_requests.py::TestRequests::test_cookie_as_dict_values",
                            "tests/test_requests.py::TestRequests::test_cookie_as_dict_items",
                            "tests/test_requests.py::TestRequests::test_cookie_duplicate_names_different_domains",
                            "tests/test_requests.py::TestRequests::test_cookie_duplicate_names_raises_cookie_conflict_error",
                            "tests/test_requests.py::TestRequests::test_empty_response_has_content_none",
                            "tests/test_requests.py::TestRequests::test_response_is_iterable",
                            "tests/test_requests.py::TestRequests::test_response_decode_unicode",
                            "tests/test_requests.py::TestRequests::test_response_reason_unicode",
                            "tests/test_requests.py::TestRequests::test_response_reason_unicode_fallback",
                            "tests/test_requests.py::TestRequests::test_response_chunk_size_type",
                            "tests/test_requests.py::TestRequests::test_http_error",
                            "tests/test_requests.py::TestRequests::test_transport_adapter_ordering",
                            "tests/test_requests.py::TestRequests::test_long_authinfo_in_url",
                            "tests/test_requests.py::TestRequests::test_nonhttp_schemes_dont_check_URLs",
                            "tests/test_requests.py::TestRequests::test_prepare_body_position_non_stream",
                            "tests/test_requests.py::TestRequests::test_rewind_body",
                            "tests/test_requests.py::TestRequests::test_rewind_partially_read_body",
                            "tests/test_requests.py::TestRequests::test_rewind_body_no_seek",
                            "tests/test_requests.py::TestRequests::test_rewind_body_failed_seek",
                            "tests/test_requests.py::TestRequests::test_rewind_body_failed_tell",
                            "tests/test_requests.py::TestRequests::test_basic_auth_str_is_always_native[test-test-Basic",
                            "tests/test_requests.py::TestRequests::test_basic_auth_str_is_always_native[\\xd0\\xb8\\xd0\\xbc\\xd1\\x8f-\\xd0\\xbf\\xd0\\xb0\\xd1\\x80\\xd0\\xbe\\xd0\\xbb\\xd1\\x8c-Basic",
                            "tests/test_requests.py::TestRequests::test_response_without_release_conn",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_init[cid0]",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_init[cid1]",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_init[cid2]",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_docstring_example",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_len",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_getitem",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_fixes_649",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_delitem",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_contains",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_get",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_update",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_update_retains_unchanged",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_iter",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_equality",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_setdefault",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_lower_items",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_preserve_key_case",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_preserve_last_key_case",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_copy",
                            "tests/test_requests.py::TestMorselToCookieExpires::test_expires_valid_str",
                            "tests/test_requests.py::TestMorselToCookieExpires::test_expires_invalid_int[100-TypeError]",
                            "tests/test_requests.py::TestMorselToCookieExpires::test_expires_invalid_int[woops-ValueError]",
                            "tests/test_requests.py::TestMorselToCookieExpires::test_expires_none",
                            "tests/test_requests.py::TestMorselToCookieMaxAge::test_max_age_valid_int",
                            "tests/test_requests.py::TestMorselToCookieMaxAge::test_max_age_invalid_str",
                            "tests/test_requests.py::TestTimeout::test_connect_timeout[timeout0]",
                            "tests/test_requests.py::TestTimeout::test_connect_timeout[timeout1]",
                            "tests/test_requests.py::TestTimeout::test_total_timeout_connect[timeout0]",
                            "tests/test_requests.py::TestTimeout::test_total_timeout_connect[timeout1]",
                            "tests/test_requests.py::test_json_encodes_as_bytes",
                            "tests/test_requests.py::test_proxy_env_vars_override_default[http_proxy-http://example.com-socks5://proxy.com:9876]",
                            "tests/test_requests.py::test_proxy_env_vars_override_default[https_proxy-https://example.com-socks5://proxy.com:9876]",
                            "tests/test_requests.py::test_proxy_env_vars_override_default[all_proxy-http://example.com-socks5://proxy.com:9876]",
                            "tests/test_requests.py::test_proxy_env_vars_override_default[all_proxy-https://example.com-socks5://proxy.com:9876]",
                            "tests/test_requests.py::test_data_argument_accepts_tuples[data0]",
                            "tests/test_requests.py::test_data_argument_accepts_tuples[data1]",
                            "tests/test_requests.py::test_data_argument_accepts_tuples[data2]",
                            "tests/test_requests.py::test_prepared_copy[None]",
                            "tests/test_requests.py::test_prepared_copy[kwargs1]",
                            "tests/test_requests.py::test_prepared_copy[kwargs2]",
                            "tests/test_requests.py::test_prepared_copy[kwargs3]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://google.com-http://google.com/]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://\\u30b8\\u30a7\\u30fc\\u30d4\\u30fc\\u30cb\\u30c3\\u30af.jp-http://xn--hckqz9bzb1cyrb.jp/]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://xn--n3h.net/-http://xn--n3h.net/0]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://\\xe3\\x82\\xb8\\xe3\\x82\\xa7\\xe3\\x83\\xbc\\xe3\\x83\\x94\\xe3\\x83\\xbc\\xe3\\x83\\x8b\\xe3\\x83\\x83\\xe3\\x82\\xaf.jp-http://xn--hckqz9bzb1cyrb.jp/]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://stra\\xdfe.de/stra\\xdfe-http://xn--strae-oqa.de/stra%C3%9Fe]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://stra\\xc3\\x9fe.de/stra\\xc3\\x9fe-http://xn--strae-oqa.de/stra%C3%9Fe]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://K\\xf6nigsg\\xe4\\xdfchen.de/stra\\xdfe-http://xn--knigsgchen-b4a3dun.de/stra%C3%9Fe]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://K\\xc3\\xb6nigsg\\xc3\\xa4\\xc3\\x9fchen.de/stra\\xc3\\x9fe-http://xn--knigsgchen-b4a3dun.de/stra%C3%9Fe]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://xn--n3h.net/-http://xn--n3h.net/1]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://[1200:0000:ab00:1234:0000:2552:7777:1313]:12345/-http://[1200:0000:ab00:1234:0000:2552:7777:1313]:12345/0]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://[1200:0000:ab00:1234:0000:2552:7777:1313]:12345/-http://[1200:0000:ab00:1234:0000:2552:7777:1313]:12345/1]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_bad_url[http://*.google.com0]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_bad_url[http://*0]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_bad_url[http://*.google.com1]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_bad_url[http://*1]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_bad_url[http://\\u2603.net/]",
                            "tests/test_requests.py::TestPreparingURLs::test_url_mutation[http+unix://%2Fvar%2Frun%2Fsocket/path%7E-http+unix://%2Fvar%2Frun%2Fsocket/path~0]",
                            "tests/test_requests.py::TestPreparingURLs::test_url_mutation[http+unix://%2Fvar%2Frun%2Fsocket/path%7E-http+unix://%2Fvar%2Frun%2Fsocket/path~1]",
                            "tests/test_requests.py::TestPreparingURLs::test_url_mutation[mailto:user@example.org-mailto:user@example.org0]",
                            "tests/test_requests.py::TestPreparingURLs::test_url_mutation[mailto:user@example.org-mailto:user@example.org1]",
                            "tests/test_requests.py::TestPreparingURLs::test_url_mutation[data:SSDimaUgUHl0aG9uIQ==-data:SSDimaUgUHl0aG9uIQ==]",
                            "tests/test_requests.py::TestPreparingURLs::test_parameters_for_nonstandard_schemes[http+unix://%2Fvar%2Frun%2Fsocket/path-params0-http+unix://%2Fvar%2Frun%2Fsocket/path?key=value]",
                            "tests/test_requests.py::TestPreparingURLs::test_parameters_for_nonstandard_schemes[http+unix://%2Fvar%2Frun%2Fsocket/path-params1-http+unix://%2Fvar%2Frun%2Fsocket/path?key=value]",
                            "tests/test_requests.py::TestPreparingURLs::test_parameters_for_nonstandard_schemes[mailto:user@example.org-params2-mailto:user@example.org]",
                            "tests/test_requests.py::TestPreparingURLs::test_parameters_for_nonstandard_schemes[mailto:user@example.org-params3-mailto:user@example.org]"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "pydata__xarray-5233.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_field_access[year]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_field_access[month]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_field_access[day]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_field_access[hour]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_field_access[minute]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_field_access[second]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_field_access[microsecond]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_field_access[nanosecond]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_field_access[week]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_field_access[weekofyear]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_field_access[dayofweek]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_field_access[weekday]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_field_access[dayofyear]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_field_access[quarter]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_field_access[date]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_field_access[time]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_field_access[is_month_start]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_field_access[is_month_end]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_field_access[is_quarter_start]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_field_access[is_quarter_end]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_field_access[is_year_start]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_field_access[is_year_end]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_field_access[is_leap_year]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_calendar",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_strftime",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_not_datetime_type",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_seasons",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_accessor_method[floor-D]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_accessor_method[ceil-D]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_accessor_method[round-D]",
                            "xarray/tests/test_accessor_dt.py::TestTimedeltaAccessor::test_not_datetime_type",
                            "xarray/tests/test_accessor_dt.py::TestTimedeltaAccessor::test_field_access[days]",
                            "xarray/tests/test_accessor_dt.py::TestTimedeltaAccessor::test_field_access[seconds]",
                            "xarray/tests/test_accessor_dt.py::TestTimedeltaAccessor::test_field_access[microseconds]",
                            "xarray/tests/test_accessor_dt.py::TestTimedeltaAccessor::test_field_access[nanoseconds]",
                            "xarray/tests/test_accessor_dt.py::TestTimedeltaAccessor::test_accessor_methods[floor-D]",
                            "xarray/tests/test_accessor_dt.py::TestTimedeltaAccessor::test_accessor_methods[ceil-D]",
                            "xarray/tests/test_accessor_dt.py::TestTimedeltaAccessor::test_accessor_methods[round-D]",
                            "xarray/tests/test_coding_times.py::test_decode_cf_datetime_non_standard_units",
                            "xarray/tests/test_coding_times.py::test_infer_datetime_units[N-nanoseconds]",
                            "xarray/tests/test_coding_times.py::test_infer_datetime_units[U-microseconds]",
                            "xarray/tests/test_coding_times.py::test_infer_datetime_units[L-milliseconds]",
                            "xarray/tests/test_coding_times.py::test_infer_datetime_units[S-seconds]",
                            "xarray/tests/test_coding_times.py::test_infer_datetime_units[T-minutes]",
                            "xarray/tests/test_coding_times.py::test_infer_datetime_units[H-hours]",
                            "xarray/tests/test_coding_times.py::test_infer_datetime_units[D-days]",
                            "xarray/tests/test_coding_times.py::test_infer_datetime_units_with_NaT[dates0-days",
                            "xarray/tests/test_coding_times.py::test_infer_datetime_units_with_NaT[dates1-days",
                            "xarray/tests/test_coding_times.py::test_infer_datetime_units_with_NaT[dates2-days",
                            "xarray/tests/test_coding_times.py::test_cf_timedelta[1D-days-numbers0]",
                            "xarray/tests/test_coding_times.py::test_cf_timedelta[timedeltas1-days-numbers1]",
                            "xarray/tests/test_coding_times.py::test_cf_timedelta[1h-hours-numbers2]",
                            "xarray/tests/test_coding_times.py::test_cf_timedelta[1ms-milliseconds-numbers3]",
                            "xarray/tests/test_coding_times.py::test_cf_timedelta[1us-microseconds-numbers4]",
                            "xarray/tests/test_coding_times.py::test_cf_timedelta[1ns-nanoseconds-numbers5]",
                            "xarray/tests/test_coding_times.py::test_cf_timedelta[timedeltas6-None-numbers6]",
                            "xarray/tests/test_coding_times.py::test_cf_timedelta[timedeltas7-hours-numbers7]",
                            "xarray/tests/test_coding_times.py::test_cf_timedelta[NaT-days-nan]",
                            "xarray/tests/test_coding_times.py::test_cf_timedelta[timedeltas9-days-numbers9]",
                            "xarray/tests/test_coding_times.py::test_cf_timedelta_2d",
                            "xarray/tests/test_coding_times.py::test_infer_timedelta_units[deltas0-days]",
                            "xarray/tests/test_coding_times.py::test_infer_timedelta_units[deltas1-hours]",
                            "xarray/tests/test_coding_times.py::test_infer_timedelta_units[deltas2-minutes]",
                            "xarray/tests/test_coding_times.py::test_infer_timedelta_units[deltas3-seconds]",
                            "xarray/tests/test_coding_times.py::test_decode_cf[360_day]",
                            "xarray/tests/test_coding_times.py::test_decode_cf[365_day]",
                            "xarray/tests/test_coding_times.py::test_decode_cf[366_day]",
                            "xarray/tests/test_coding_times.py::test_decode_cf[all_leap]",
                            "xarray/tests/test_coding_times.py::test_decode_cf[gregorian]",
                            "xarray/tests/test_coding_times.py::test_decode_cf[julian]",
                            "xarray/tests/test_coding_times.py::test_decode_cf[noleap]",
                            "xarray/tests/test_coding_times.py::test_decode_cf[proleptic_gregorian]",
                            "xarray/tests/test_coding_times.py::test_decode_cf[standard]",
                            "xarray/tests/test_coding_times.py::test_decode_cf_time_bounds",
                            "xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_non_cftimes[non_cftime_data0]",
                            "xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_non_cftimes[non_cftime_data1]",
                            "xarray/tests/test_coding_times.py::test_encode_expected_failures",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_pandas_min",
                            "xarray/tests/test_coding_times.py::test_use_cftime_false_standard_calendar_out_of_range[1500-gregorian]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_false_standard_calendar_out_of_range[1500-proleptic_gregorian]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_false_standard_calendar_out_of_range[1500-standard]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_false_standard_calendar_out_of_range[2500-gregorian]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_false_standard_calendar_out_of_range[2500-proleptic_gregorian]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_false_standard_calendar_out_of_range[2500-standard]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[1500-360_day]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[1500-365_day]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[1500-366_day]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[1500-all_leap]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[1500-julian]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[1500-noleap]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[2000-360_day]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[2000-365_day]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[2000-366_day]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[2000-all_leap]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[2000-julian]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[2000-noleap]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[2500-360_day]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[2500-365_day]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[2500-366_day]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[2500-all_leap]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[2500-julian]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[2500-noleap]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-N-nanoseconds]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-N-microseconds]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-N-milliseconds]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-N-seconds]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-N-minutes]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-N-hours]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-N-days]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-U-nanoseconds]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-U-microseconds]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-U-milliseconds]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-U-seconds]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-U-minutes]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-U-hours]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-U-days]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-L-nanoseconds]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-L-microseconds]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-L-milliseconds]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-L-seconds]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-L-minutes]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-L-hours]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-L-days]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-S-nanoseconds]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-S-microseconds]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-S-milliseconds]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-S-seconds]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-S-minutes]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-S-hours]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-S-days]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-T-nanoseconds]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-T-microseconds]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-T-milliseconds]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-T-seconds]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-T-minutes]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-T-hours]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-T-days]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-H-nanoseconds]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-H-microseconds]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-H-milliseconds]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-H-seconds]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-H-minutes]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-H-hours]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-H-days]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-D-nanoseconds]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-D-microseconds]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-D-milliseconds]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-D-seconds]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-D-minutes]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-D-hours]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-D-days]",
                            "xarray/tests/test_coding_times.py::test_encode_decode_roundtrip_datetime64[N]",
                            "xarray/tests/test_coding_times.py::test_encode_decode_roundtrip_datetime64[U]",
                            "xarray/tests/test_coding_times.py::test_encode_decode_roundtrip_datetime64[L]",
                            "xarray/tests/test_coding_times.py::test_encode_decode_roundtrip_datetime64[S]",
                            "xarray/tests/test_coding_times.py::test_encode_decode_roundtrip_datetime64[T]",
                            "xarray/tests/test_coding_times.py::test_encode_decode_roundtrip_datetime64[H]",
                            "xarray/tests/test_coding_times.py::test_encode_decode_roundtrip_datetime64[D]",
                            "xarray/tests/test_coding_times.py::test_decode_encode_roundtrip_with_non_lowercase_letters[gregorian]",
                            "xarray/tests/test_coding_times.py::test_decode_encode_roundtrip_with_non_lowercase_letters[Gregorian]",
                            "xarray/tests/test_coding_times.py::test_decode_encode_roundtrip_with_non_lowercase_letters[GREGORIAN]"
                        ],
                        "failure": [
                            "xarray/tests/test_coding_times.py::test_use_cftime_default_standard_calendar_in_range[gregorian]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_default_standard_calendar_in_range[proleptic_gregorian]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_default_standard_calendar_in_range[standard]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_false_standard_calendar_in_range[gregorian]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_false_standard_calendar_in_range[proleptic_gregorian]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_false_standard_calendar_in_range[standard]"
                        ]
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_isocalendar[year-year]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_isocalendar[week-week]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_isocalendar[weekday-day]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_field_access[year]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_field_access[month]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_field_access[day]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_field_access[hour]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_field_access[minute]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_field_access[second]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_field_access[microsecond]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_field_access[nanosecond]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_field_access[week]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_field_access[weekofyear]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_field_access[dayofweek]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_field_access[weekday]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_field_access[dayofyear]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_field_access[quarter]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_field_access[date]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_field_access[time]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_field_access[is_month_start]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_field_access[is_month_end]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_field_access[is_quarter_start]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_field_access[is_quarter_end]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_field_access[is_year_start]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_field_access[is_year_end]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_field_access[is_leap_year]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_isocalendar_dask[year]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_isocalendar_dask[week]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_isocalendar_dask[weekday]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_accessor_method[floor-D]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_accessor_method[ceil-D]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_accessor_method[round-D]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_accessor_method[strftime-%Y-%m-%d",
                            "xarray/tests/test_accessor_dt.py::TestTimedeltaAccessor::test_dask_field_access[days]",
                            "xarray/tests/test_accessor_dt.py::TestTimedeltaAccessor::test_dask_field_access[seconds]",
                            "xarray/tests/test_accessor_dt.py::TestTimedeltaAccessor::test_dask_field_access[microseconds]",
                            "xarray/tests/test_accessor_dt.py::TestTimedeltaAccessor::test_dask_field_access[nanoseconds]",
                            "xarray/tests/test_accessor_dt.py::TestTimedeltaAccessor::test_dask_accessor_method[floor-D]",
                            "xarray/tests/test_accessor_dt.py::TestTimedeltaAccessor::test_dask_accessor_method[ceil-D]",
                            "xarray/tests/test_accessor_dt.py::TestTimedeltaAccessor::test_dask_accessor_method[round-D]",
                            "xarray/tests/test_accessor_dt.py::test_field_access[365_day-year]",
                            "xarray/tests/test_accessor_dt.py::test_field_access[365_day-month]",
                            "xarray/tests/test_accessor_dt.py::test_field_access[365_day-day]",
                            "xarray/tests/test_accessor_dt.py::test_field_access[365_day-hour]",
                            "xarray/tests/test_accessor_dt.py::test_field_access[365_day-dayofyear]",
                            "xarray/tests/test_accessor_dt.py::test_field_access[365_day-dayofweek]",
                            "xarray/tests/test_accessor_dt.py::test_field_access[360_day-year]",
                            "xarray/tests/test_accessor_dt.py::test_field_access[360_day-month]",
                            "xarray/tests/test_accessor_dt.py::test_field_access[360_day-day]",
                            "xarray/tests/test_accessor_dt.py::test_field_access[360_day-hour]",
                            "xarray/tests/test_accessor_dt.py::test_field_access[360_day-dayofyear]",
                            "xarray/tests/test_accessor_dt.py::test_field_access[360_day-dayofweek]",
                            "xarray/tests/test_accessor_dt.py::test_field_access[julian-year]",
                            "xarray/tests/test_accessor_dt.py::test_field_access[julian-month]",
                            "xarray/tests/test_accessor_dt.py::test_field_access[julian-day]",
                            "xarray/tests/test_accessor_dt.py::test_field_access[julian-hour]",
                            "xarray/tests/test_accessor_dt.py::test_field_access[julian-dayofyear]",
                            "xarray/tests/test_accessor_dt.py::test_field_access[julian-dayofweek]",
                            "xarray/tests/test_accessor_dt.py::test_field_access[all_leap-year]",
                            "xarray/tests/test_accessor_dt.py::test_field_access[all_leap-month]",
                            "xarray/tests/test_accessor_dt.py::test_field_access[all_leap-day]",
                            "xarray/tests/test_accessor_dt.py::test_field_access[all_leap-hour]",
                            "xarray/tests/test_accessor_dt.py::test_field_access[all_leap-dayofyear]",
                            "xarray/tests/test_accessor_dt.py::test_field_access[all_leap-dayofweek]",
                            "xarray/tests/test_accessor_dt.py::test_field_access[366_day-year]",
                            "xarray/tests/test_accessor_dt.py::test_field_access[366_day-month]",
                            "xarray/tests/test_accessor_dt.py::test_field_access[366_day-day]",
                            "xarray/tests/test_accessor_dt.py::test_field_access[366_day-hour]",
                            "xarray/tests/test_accessor_dt.py::test_field_access[366_day-dayofyear]",
                            "xarray/tests/test_accessor_dt.py::test_field_access[366_day-dayofweek]",
                            "xarray/tests/test_accessor_dt.py::test_field_access[gregorian-year]",
                            "xarray/tests/test_accessor_dt.py::test_field_access[gregorian-month]",
                            "xarray/tests/test_accessor_dt.py::test_field_access[gregorian-day]",
                            "xarray/tests/test_accessor_dt.py::test_field_access[gregorian-hour]",
                            "xarray/tests/test_accessor_dt.py::test_field_access[gregorian-dayofyear]",
                            "xarray/tests/test_accessor_dt.py::test_field_access[gregorian-dayofweek]",
                            "xarray/tests/test_accessor_dt.py::test_field_access[proleptic_gregorian-year]",
                            "xarray/tests/test_accessor_dt.py::test_field_access[proleptic_gregorian-month]",
                            "xarray/tests/test_accessor_dt.py::test_field_access[proleptic_gregorian-day]",
                            "xarray/tests/test_accessor_dt.py::test_field_access[proleptic_gregorian-hour]",
                            "xarray/tests/test_accessor_dt.py::test_field_access[proleptic_gregorian-dayofyear]",
                            "xarray/tests/test_accessor_dt.py::test_field_access[proleptic_gregorian-dayofweek]",
                            "xarray/tests/test_accessor_dt.py::test_calendar_cftime[365_day]",
                            "xarray/tests/test_accessor_dt.py::test_calendar_cftime[360_day]",
                            "xarray/tests/test_accessor_dt.py::test_calendar_cftime[julian]",
                            "xarray/tests/test_accessor_dt.py::test_calendar_cftime[all_leap]",
                            "xarray/tests/test_accessor_dt.py::test_calendar_cftime[366_day]",
                            "xarray/tests/test_accessor_dt.py::test_calendar_cftime[gregorian]",
                            "xarray/tests/test_accessor_dt.py::test_calendar_cftime[proleptic_gregorian]",
                            "xarray/tests/test_accessor_dt.py::test_calendar_cftime_2D[365_day]",
                            "xarray/tests/test_accessor_dt.py::test_calendar_cftime_2D[360_day]",
                            "xarray/tests/test_accessor_dt.py::test_calendar_cftime_2D[julian]",
                            "xarray/tests/test_accessor_dt.py::test_calendar_cftime_2D[all_leap]",
                            "xarray/tests/test_accessor_dt.py::test_calendar_cftime_2D[366_day]",
                            "xarray/tests/test_accessor_dt.py::test_calendar_cftime_2D[gregorian]",
                            "xarray/tests/test_accessor_dt.py::test_calendar_cftime_2D[proleptic_gregorian]",
                            "xarray/tests/test_accessor_dt.py::test_calendar_dask",
                            "xarray/tests/test_accessor_dt.py::test_calendar_dask_cftime",
                            "xarray/tests/test_accessor_dt.py::test_isocalendar_cftime[365_day]",
                            "xarray/tests/test_accessor_dt.py::test_isocalendar_cftime[360_day]",
                            "xarray/tests/test_accessor_dt.py::test_isocalendar_cftime[julian]",
                            "xarray/tests/test_accessor_dt.py::test_isocalendar_cftime[all_leap]",
                            "xarray/tests/test_accessor_dt.py::test_isocalendar_cftime[366_day]",
                            "xarray/tests/test_accessor_dt.py::test_isocalendar_cftime[gregorian]",
                            "xarray/tests/test_accessor_dt.py::test_isocalendar_cftime[proleptic_gregorian]",
                            "xarray/tests/test_accessor_dt.py::test_date_cftime[365_day]",
                            "xarray/tests/test_accessor_dt.py::test_date_cftime[360_day]",
                            "xarray/tests/test_accessor_dt.py::test_date_cftime[julian]",
                            "xarray/tests/test_accessor_dt.py::test_date_cftime[all_leap]",
                            "xarray/tests/test_accessor_dt.py::test_date_cftime[366_day]",
                            "xarray/tests/test_accessor_dt.py::test_date_cftime[gregorian]",
                            "xarray/tests/test_accessor_dt.py::test_date_cftime[proleptic_gregorian]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_strftime_access[365_day]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_strftime_access[360_day]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_strftime_access[julian]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_strftime_access[all_leap]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_strftime_access[366_day]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_strftime_access[gregorian]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_strftime_access[proleptic_gregorian]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[365_day-year]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[365_day-month]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[365_day-day]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[365_day-hour]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[365_day-dayofyear]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[365_day-dayofweek]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[360_day-year]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[360_day-month]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[360_day-day]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[360_day-hour]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[360_day-dayofyear]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[360_day-dayofweek]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[julian-year]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[julian-month]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[julian-day]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[julian-hour]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[julian-dayofyear]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[julian-dayofweek]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[all_leap-year]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[all_leap-month]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[all_leap-day]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[all_leap-hour]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[all_leap-dayofyear]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[all_leap-dayofweek]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[366_day-year]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[366_day-month]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[366_day-day]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[366_day-hour]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[366_day-dayofyear]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[366_day-dayofweek]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[gregorian-year]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[gregorian-month]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[gregorian-day]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[gregorian-hour]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[gregorian-dayofyear]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[gregorian-dayofweek]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[proleptic_gregorian-year]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[proleptic_gregorian-month]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[proleptic_gregorian-day]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[proleptic_gregorian-hour]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[proleptic_gregorian-dayofyear]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[proleptic_gregorian-dayofweek]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access[365_day-year]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access[365_day-month]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access[365_day-day]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access[365_day-hour]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access[365_day-dayofyear]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access[365_day-dayofweek]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access[360_day-year]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access[360_day-month]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access[360_day-day]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access[360_day-hour]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access[360_day-dayofyear]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access[360_day-dayofweek]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access[julian-year]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access[julian-month]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access[julian-day]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access[julian-hour]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access[julian-dayofyear]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access[julian-dayofweek]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access[all_leap-year]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access[all_leap-month]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access[all_leap-day]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access[all_leap-hour]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access[all_leap-dayofyear]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access[all_leap-dayofweek]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access[366_day-year]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access[366_day-month]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access[366_day-day]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access[366_day-hour]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access[366_day-dayofyear]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access[366_day-dayofweek]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access[gregorian-year]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access[gregorian-month]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access[gregorian-day]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access[gregorian-hour]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access[gregorian-dayofyear]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access[gregorian-dayofweek]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access[proleptic_gregorian-year]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access[proleptic_gregorian-month]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access[proleptic_gregorian-day]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access[proleptic_gregorian-hour]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access[proleptic_gregorian-dayofyear]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access[proleptic_gregorian-dayofweek]",
                            "xarray/tests/test_accessor_dt.py::test_seasons[365_day]",
                            "xarray/tests/test_accessor_dt.py::test_seasons[360_day]",
                            "xarray/tests/test_accessor_dt.py::test_seasons[julian]",
                            "xarray/tests/test_accessor_dt.py::test_seasons[all_leap]",
                            "xarray/tests/test_accessor_dt.py::test_seasons[366_day]",
                            "xarray/tests/test_accessor_dt.py::test_seasons[gregorian]",
                            "xarray/tests/test_accessor_dt.py::test_seasons[proleptic_gregorian]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_floor_accessor[365_day-False]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_floor_accessor[365_day-True]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_floor_accessor[360_day-False]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_floor_accessor[360_day-True]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_floor_accessor[julian-False]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_floor_accessor[julian-True]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_floor_accessor[all_leap-False]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_floor_accessor[all_leap-True]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_floor_accessor[366_day-False]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_floor_accessor[366_day-True]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_floor_accessor[gregorian-False]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_floor_accessor[gregorian-True]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_floor_accessor[proleptic_gregorian-False]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_floor_accessor[proleptic_gregorian-True]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_ceil_accessor[365_day-False]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_ceil_accessor[365_day-True]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_ceil_accessor[360_day-False]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_ceil_accessor[360_day-True]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_ceil_accessor[julian-False]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_ceil_accessor[julian-True]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_ceil_accessor[all_leap-False]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_ceil_accessor[all_leap-True]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_ceil_accessor[366_day-False]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_ceil_accessor[366_day-True]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_ceil_accessor[gregorian-False]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_ceil_accessor[gregorian-True]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_ceil_accessor[proleptic_gregorian-False]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_ceil_accessor[proleptic_gregorian-True]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_round_accessor[365_day-False]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_round_accessor[365_day-True]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_round_accessor[360_day-False]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_round_accessor[360_day-True]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_round_accessor[julian-False]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_round_accessor[julian-True]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_round_accessor[all_leap-False]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_round_accessor[all_leap-True]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_round_accessor[366_day-False]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_round_accessor[366_day-True]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_round_accessor[gregorian-False]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_round_accessor[gregorian-True]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_round_accessor[proleptic_gregorian-False]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_round_accessor[proleptic_gregorian-True]",
                            "xarray/tests/test_calendar_ops.py::test_convert_calendar[standard-noleap-None-D]",
                            "xarray/tests/test_calendar_ops.py::test_convert_calendar[noleap-proleptic_gregorian-True-D]",
                            "xarray/tests/test_calendar_ops.py::test_convert_calendar[noleap-all_leap-None-D]",
                            "xarray/tests/test_calendar_ops.py::test_convert_calendar[all_leap-proleptic_gregorian-False-4H]",
                            "xarray/tests/test_calendar_ops.py::test_convert_calendar_360_days[date-standard-360_day-D]",
                            "xarray/tests/test_calendar_ops.py::test_convert_calendar_360_days[date-360_day-proleptic_gregorian-D]",
                            "xarray/tests/test_calendar_ops.py::test_convert_calendar_360_days[date-proleptic_gregorian-360_day-4H]",
                            "xarray/tests/test_calendar_ops.py::test_convert_calendar_360_days[year-standard-360_day-D]",
                            "xarray/tests/test_calendar_ops.py::test_convert_calendar_360_days[year-360_day-proleptic_gregorian-D]",
                            "xarray/tests/test_calendar_ops.py::test_convert_calendar_360_days[year-proleptic_gregorian-360_day-4H]",
                            "xarray/tests/test_calendar_ops.py::test_convert_calendar_missing[standard-noleap-D]",
                            "xarray/tests/test_calendar_ops.py::test_convert_calendar_missing[noleap-proleptic_gregorian-4H]",
                            "xarray/tests/test_calendar_ops.py::test_convert_calendar_missing[noleap-all_leap-M]",
                            "xarray/tests/test_calendar_ops.py::test_convert_calendar_missing[360_day-noleap-D]",
                            "xarray/tests/test_calendar_ops.py::test_convert_calendar_missing[noleap-360_day-D]",
                            "xarray/tests/test_calendar_ops.py::test_convert_calendar_errors",
                            "xarray/tests/test_calendar_ops.py::test_convert_calendar_same_calendar",
                            "xarray/tests/test_calendar_ops.py::test_interp_calendar[standard-noleap]",
                            "xarray/tests/test_calendar_ops.py::test_interp_calendar[noleap-proleptic_gregorian]",
                            "xarray/tests/test_calendar_ops.py::test_interp_calendar[standard-360_day]",
                            "xarray/tests/test_calendar_ops.py::test_interp_calendar[360_day-proleptic_gregorian]",
                            "xarray/tests/test_calendar_ops.py::test_interp_calendar[noleap-all_leap]",
                            "xarray/tests/test_calendar_ops.py::test_interp_calendar[360_day-noleap]",
                            "xarray/tests/test_calendar_ops.py::test_interp_calendar_errors",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_offset_constructor_valid_n[<BaseCFTimeOffset:",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_offset_constructor_valid_n[<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_offset_constructor_valid_n[<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_offset_constructor_valid_n[<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_offset_constructor_valid_n[<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_offset_constructor_invalid_n[<class",
                            "xarray/tests/test_cftime_offsets.py::test_year_offset_constructor_valid_month[<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_year_offset_constructor_valid_month[<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_year_offset_constructor_valid_month[<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_year_offset_constructor_valid_month[<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_year_offset_constructor_invalid_month[<class",
                            "xarray/tests/test_cftime_offsets.py::test_rule_code[<BaseCFTimeOffset:",
                            "xarray/tests/test_cftime_offsets.py::test_rule_code[<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rule_code[<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rule_code[<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_str_and_repr[<BaseCFTimeOffset:",
                            "xarray/tests/test_cftime_offsets.py::test_str_and_repr[<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_str_and_repr[<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_offset_input[<BaseCFTimeOffset:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_offset_input[<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_offset_input[<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_offset_input[<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_sub_annual[M-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_sub_annual[2M-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_sub_annual[MS-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_sub_annual[2MS-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_sub_annual[D-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_sub_annual[2D-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_sub_annual[H-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_sub_annual[2H-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_sub_annual[T-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_sub_annual[2T-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_sub_annual[min-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_sub_annual[2min-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_sub_annual[S-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_sub_annual[2S-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_sub_annual[L-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_sub_annual[2L-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_sub_annual[ms-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_sub_annual[2ms-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_sub_annual[U-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_sub_annual[2U-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_sub_annual[us-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_sub_annual[2us-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-None-1-JAN]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-None-2-FEB]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-None-3-MAR]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-None-4-APR]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-None-5-MAY]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-None-6-JUN]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-None-7-JUL]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-None-8-AUG]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-None-9-SEP]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-None-10-OCT]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-None-11-NOV]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-None-12-DEC]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-None-0-]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-2-1-JAN]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-2-2-FEB]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-2-3-MAR]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-2-4-APR]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-2-5-MAY]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-2-6-JUN]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-2-7-JUL]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-2-8-AUG]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-2-9-SEP]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-2-10-OCT]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-2-11-NOV]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-2-12-DEC]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-2-0-]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-None-1-JAN]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-None-2-FEB]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-None-3-MAR]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-None-4-APR]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-None-5-MAY]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-None-6-JUN]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-None-7-JUL]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-None-8-AUG]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-None-9-SEP]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-None-10-OCT]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-None-11-NOV]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-None-12-DEC]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-None-0-]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-2-1-JAN]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-2-2-FEB]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-2-3-MAR]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-2-4-APR]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-2-5-MAY]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-2-6-JUN]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-2-7-JUL]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-2-8-AUG]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-2-9-SEP]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-2-10-OCT]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-2-11-NOV]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-2-12-DEC]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-2-0-]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-None-1-JAN]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-None-2-FEB]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-None-3-MAR]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-None-4-APR]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-None-5-MAY]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-None-6-JUN]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-None-7-JUL]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-None-8-AUG]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-None-9-SEP]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-None-10-OCT]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-None-11-NOV]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-None-12-DEC]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-None-0-]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-2-1-JAN]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-2-2-FEB]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-2-3-MAR]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-2-4-APR]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-2-5-MAY]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-2-6-JUN]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-2-7-JUL]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-2-8-AUG]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-2-9-SEP]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-2-10-OCT]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-2-11-NOV]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-2-12-DEC]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-2-0-]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-None-1-JAN]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-None-2-FEB]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-None-3-MAR]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-None-4-APR]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-None-5-MAY]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-None-6-JUN]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-None-7-JUL]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-None-8-AUG]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-None-9-SEP]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-None-10-OCT]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-None-11-NOV]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-None-12-DEC]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-None-0-]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-2-1-JAN]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-2-2-FEB]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-2-3-MAR]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-2-4-APR]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-2-5-MAY]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-2-6-JUN]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-2-7-JUL]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-2-8-AUG]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-2-9-SEP]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-2-10-OCT]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-2-11-NOV]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-2-12-DEC]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-2-0-]",
                            "xarray/tests/test_cftime_offsets.py::test_invalid_to_offset_str[Z]",
                            "xarray/tests/test_cftime_offsets.py::test_invalid_to_offset_str[7min2]",
                            "xarray/tests/test_cftime_offsets.py::test_invalid_to_offset_str[AM]",
                            "xarray/tests/test_cftime_offsets.py::test_invalid_to_offset_str[M-]",
                            "xarray/tests/test_cftime_offsets.py::test_invalid_to_offset_str[AS-]",
                            "xarray/tests/test_cftime_offsets.py::test_invalid_to_offset_str[QS-]",
                            "xarray/tests/test_cftime_offsets.py::test_invalid_to_offset_str[1H1min]",
                            "xarray/tests/test_cftime_offsets.py::test_to_cftime_datetime[365_day-2000-01-01-(2000,",
                            "xarray/tests/test_cftime_offsets.py::test_to_cftime_datetime[365_day-(2000,",
                            "xarray/tests/test_cftime_offsets.py::test_to_cftime_datetime[360_day-2000-01-01-(2000,",
                            "xarray/tests/test_cftime_offsets.py::test_to_cftime_datetime[360_day-(2000,",
                            "xarray/tests/test_cftime_offsets.py::test_to_cftime_datetime[julian-2000-01-01-(2000,",
                            "xarray/tests/test_cftime_offsets.py::test_to_cftime_datetime[julian-(2000,",
                            "xarray/tests/test_cftime_offsets.py::test_to_cftime_datetime[all_leap-2000-01-01-(2000,",
                            "xarray/tests/test_cftime_offsets.py::test_to_cftime_datetime[all_leap-(2000,",
                            "xarray/tests/test_cftime_offsets.py::test_to_cftime_datetime[366_day-2000-01-01-(2000,",
                            "xarray/tests/test_cftime_offsets.py::test_to_cftime_datetime[366_day-(2000,",
                            "xarray/tests/test_cftime_offsets.py::test_to_cftime_datetime[gregorian-2000-01-01-(2000,",
                            "xarray/tests/test_cftime_offsets.py::test_to_cftime_datetime[gregorian-(2000,",
                            "xarray/tests/test_cftime_offsets.py::test_to_cftime_datetime[proleptic_gregorian-2000-01-01-(2000,",
                            "xarray/tests/test_cftime_offsets.py::test_to_cftime_datetime[proleptic_gregorian-(2000,",
                            "xarray/tests/test_cftime_offsets.py::test_to_cftime_datetime[standard-2000-01-01-(2000,",
                            "xarray/tests/test_cftime_offsets.py::test_to_cftime_datetime[standard-(2000,",
                            "xarray/tests/test_cftime_offsets.py::test_to_cftime_datetime_error_no_calendar",
                            "xarray/tests/test_cftime_offsets.py::test_to_cftime_datetime_error_type_error",
                            "xarray/tests/test_cftime_offsets.py::test_neq[<BaseCFTimeOffset:",
                            "xarray/tests/test_cftime_offsets.py::test_neq[<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_neq[<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_neq[<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_neq[<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_neq[<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_neq[<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_neq[<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_neq[<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_neq[<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_neq[<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_neq[<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_neq[<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_eq[<BaseCFTimeOffset:",
                            "xarray/tests/test_cftime_offsets.py::test_eq[<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_eq[<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_eq[<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_eq[<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_eq[<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_eq[<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_eq[<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_eq[<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_eq[<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_eq[<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_eq[<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_eq[<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_mul[<BaseCFTimeOffset:",
                            "xarray/tests/test_cftime_offsets.py::test_mul[<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_mul[<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_mul[<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_mul[<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_mul[<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_mul[<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_mul[<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_mul[<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_mul[<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_mul[<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_mul[<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_mul[<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rmul[<BaseCFTimeOffset:",
                            "xarray/tests/test_cftime_offsets.py::test_rmul[<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rmul[<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rmul[<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rmul[<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rmul[<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rmul[<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rmul[<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rmul[<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rmul[<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rmul[<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rmul[<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rmul[<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_neg[<BaseCFTimeOffset:",
                            "xarray/tests/test_cftime_offsets.py::test_neg[<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_neg[<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_neg[<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_neg[<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_neg[<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_neg[<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_neg[<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_neg[<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_neg[<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_neg[<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_neg[<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_neg[<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[365_day-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[365_day-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[365_day-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[365_day-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[365_day-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[365_day-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[360_day-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[360_day-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[360_day-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[360_day-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[360_day-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[360_day-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[julian-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[julian-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[julian-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[julian-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[julian-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[julian-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[all_leap-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[all_leap-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[all_leap-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[all_leap-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[all_leap-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[all_leap-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[366_day-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[366_day-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[366_day-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[366_day-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[366_day-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[366_day-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[gregorian-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[gregorian-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[gregorian-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[gregorian-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[gregorian-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[gregorian-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[proleptic_gregorian-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[proleptic_gregorian-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[proleptic_gregorian-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[proleptic_gregorian-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[proleptic_gregorian-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[proleptic_gregorian-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[standard-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[standard-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[standard-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[standard-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[standard-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[standard-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[365_day-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[365_day-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[365_day-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[365_day-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[365_day-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[365_day-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[360_day-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[360_day-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[360_day-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[360_day-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[360_day-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[360_day-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[julian-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[julian-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[julian-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[julian-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[julian-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[julian-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[all_leap-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[all_leap-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[all_leap-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[all_leap-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[all_leap-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[all_leap-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[366_day-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[366_day-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[366_day-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[366_day-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[366_day-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[366_day-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[gregorian-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[gregorian-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[gregorian-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[gregorian-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[gregorian-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[gregorian-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[proleptic_gregorian-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[proleptic_gregorian-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[proleptic_gregorian-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[proleptic_gregorian-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[proleptic_gregorian-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[proleptic_gregorian-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[standard-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[standard-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[standard-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[standard-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[standard-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[standard-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[365_day-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[365_day-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[365_day-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[365_day-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[365_day-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[365_day-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[360_day-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[360_day-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[360_day-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[360_day-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[360_day-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[360_day-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[julian-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[julian-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[julian-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[julian-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[julian-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[julian-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[all_leap-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[all_leap-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[all_leap-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[all_leap-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[all_leap-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[all_leap-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[366_day-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[366_day-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[366_day-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[366_day-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[366_day-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[366_day-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[gregorian-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[gregorian-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[gregorian-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[gregorian-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[gregorian-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[gregorian-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[proleptic_gregorian-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[proleptic_gregorian-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[proleptic_gregorian-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[proleptic_gregorian-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[proleptic_gregorian-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[proleptic_gregorian-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[standard-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[standard-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[standard-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[standard-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[standard-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[standard-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[365_day-<BaseCFTimeOffset:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[365_day-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[365_day-<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[365_day-<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[365_day-<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[365_day-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[365_day-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[365_day-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[365_day-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[365_day-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[365_day-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[365_day-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[365_day-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[360_day-<BaseCFTimeOffset:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[360_day-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[360_day-<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[360_day-<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[360_day-<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[360_day-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[360_day-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[360_day-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[360_day-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[360_day-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[360_day-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[360_day-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[360_day-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[julian-<BaseCFTimeOffset:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[julian-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[julian-<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[julian-<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[julian-<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[julian-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[julian-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[julian-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[julian-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[julian-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[julian-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[julian-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[julian-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[all_leap-<BaseCFTimeOffset:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[all_leap-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[all_leap-<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[all_leap-<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[all_leap-<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[all_leap-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[all_leap-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[all_leap-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[all_leap-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[all_leap-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[all_leap-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[all_leap-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[all_leap-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[366_day-<BaseCFTimeOffset:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[366_day-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[366_day-<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[366_day-<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[366_day-<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[366_day-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[366_day-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[366_day-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[366_day-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[366_day-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[366_day-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[366_day-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[366_day-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[gregorian-<BaseCFTimeOffset:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[gregorian-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[gregorian-<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[gregorian-<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[gregorian-<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[gregorian-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[gregorian-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[gregorian-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[gregorian-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[gregorian-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[gregorian-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[gregorian-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[gregorian-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[proleptic_gregorian-<BaseCFTimeOffset:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[proleptic_gregorian-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[proleptic_gregorian-<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[proleptic_gregorian-<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[proleptic_gregorian-<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[proleptic_gregorian-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[proleptic_gregorian-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[proleptic_gregorian-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[proleptic_gregorian-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[proleptic_gregorian-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[proleptic_gregorian-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[proleptic_gregorian-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[proleptic_gregorian-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[standard-<BaseCFTimeOffset:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[standard-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[standard-<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[standard-<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[standard-<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[standard-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[standard-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[standard-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[standard-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[standard-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[standard-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[standard-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[standard-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset[<BaseCFTimeOffset:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset[<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset[<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset[<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset[<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset[<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset[<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset[<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset[<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset[<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset[<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset[<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset[<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset_error[<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset_error[<BaseCFTimeOffset:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset_error[<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset_error[<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset_error[<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset_error[<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset_error[<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset_error[<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset_error[<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset_error[<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset_error[<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset_error[<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset_error[<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_days_in_month_non_december[365_day]",
                            "xarray/tests/test_cftime_offsets.py::test_days_in_month_non_december[360_day]",
                            "xarray/tests/test_cftime_offsets.py::test_days_in_month_non_december[julian]",
                            "xarray/tests/test_cftime_offsets.py::test_days_in_month_non_december[all_leap]",
                            "xarray/tests/test_cftime_offsets.py::test_days_in_month_non_december[366_day]",
                            "xarray/tests/test_cftime_offsets.py::test_days_in_month_non_december[gregorian]",
                            "xarray/tests/test_cftime_offsets.py::test_days_in_month_non_december[proleptic_gregorian]",
                            "xarray/tests/test_cftime_offsets.py::test_days_in_month_non_december[standard]",
                            "xarray/tests/test_cftime_offsets.py::test_days_in_month_december[365_day]",
                            "xarray/tests/test_cftime_offsets.py::test_days_in_month_december[360_day]",
                            "xarray/tests/test_cftime_offsets.py::test_days_in_month_december[julian]",
                            "xarray/tests/test_cftime_offsets.py::test_days_in_month_december[all_leap]",
                            "xarray/tests/test_cftime_offsets.py::test_days_in_month_december[366_day]",
                            "xarray/tests/test_cftime_offsets.py::test_days_in_month_december[gregorian]",
                            "xarray/tests/test_cftime_offsets.py::test_days_in_month_december[proleptic_gregorian]",
                            "xarray/tests/test_cftime_offsets.py::test_days_in_month_december[standard]",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_begin[365_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_begin[365_day-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_begin[360_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_begin[360_day-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_begin[julian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_begin[julian-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_begin[all_leap-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_begin[all_leap-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_begin[366_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_begin[366_day-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_begin[gregorian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_begin[gregorian-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_begin[proleptic_gregorian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_begin[proleptic_gregorian-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_begin[standard-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_begin[standard-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end[365_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end[365_day-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end[360_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end[360_day-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end[julian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end[julian-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end[all_leap-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end[all_leap-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end[366_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end[366_day-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end[gregorian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end[gregorian-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end[proleptic_gregorian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end[proleptic_gregorian-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end[standard-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end[standard-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end_onOffset[365_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end_onOffset[365_day-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end_onOffset[360_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end_onOffset[360_day-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end_onOffset[julian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end_onOffset[julian-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end_onOffset[all_leap-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end_onOffset[all_leap-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end_onOffset[366_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end_onOffset[366_day-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end_onOffset[gregorian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end_onOffset[gregorian-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end_onOffset[proleptic_gregorian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end_onOffset[proleptic_gregorian-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end_onOffset[standard-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end_onOffset[standard-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_begin[365_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_begin[365_day-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_begin[360_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_begin[360_day-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_begin[julian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_begin[julian-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_begin[all_leap-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_begin[all_leap-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_begin[366_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_begin[366_day-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_begin[gregorian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_begin[gregorian-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_begin[proleptic_gregorian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_begin[proleptic_gregorian-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_begin[standard-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_begin[standard-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end[365_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end[365_day-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end[360_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end[360_day-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end[julian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end[julian-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end[all_leap-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end[all_leap-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end[366_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end[366_day-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end[gregorian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end[gregorian-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end[proleptic_gregorian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end[proleptic_gregorian-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end[standard-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end[standard-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end_onOffset[365_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end_onOffset[365_day-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end_onOffset[365_day-(3,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end_onOffset[360_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end_onOffset[360_day-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end_onOffset[360_day-(3,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end_onOffset[julian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end_onOffset[julian-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end_onOffset[julian-(3,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end_onOffset[all_leap-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end_onOffset[all_leap-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end_onOffset[all_leap-(3,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end_onOffset[366_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end_onOffset[366_day-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end_onOffset[366_day-(3,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end_onOffset[gregorian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end_onOffset[gregorian-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end_onOffset[gregorian-(3,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end_onOffset[proleptic_gregorian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end_onOffset[proleptic_gregorian-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end_onOffset[proleptic_gregorian-(3,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end_onOffset[standard-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end_onOffset[standard-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end_onOffset[standard-(3,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_begin[365_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_begin[365_day-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_begin[360_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_begin[360_day-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_begin[julian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_begin[julian-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_begin[all_leap-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_begin[all_leap-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_begin[366_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_begin[366_day-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_begin[gregorian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_begin[gregorian-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_begin[proleptic_gregorian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_begin[proleptic_gregorian-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_begin[standard-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_begin[standard-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_end[365_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_end[365_day-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_end[360_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_end[360_day-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_end[julian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_end[julian-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_end[all_leap-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_end[all_leap-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_end[366_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_end[366_day-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_end[gregorian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_end[gregorian-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_end[proleptic_gregorian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_end[proleptic_gregorian-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_end[standard-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_end[standard-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_end_onOffset[365_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_end_onOffset[360_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_end_onOffset[julian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_end_onOffset[all_leap-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_end_onOffset[366_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_end_onOffset[gregorian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_end_onOffset[proleptic_gregorian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_end_onOffset[standard-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_onOffset[365_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_onOffset[360_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_onOffset[julian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_onOffset[all_leap-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_onOffset[366_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_onOffset[gregorian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_onOffset[proleptic_gregorian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_onOffset[standard-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_onOffset_month_or_quarter_or_year_end[365_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_onOffset_month_or_quarter_or_year_end[360_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_onOffset_month_or_quarter_or_year_end[julian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_onOffset_month_or_quarter_or_year_end[all_leap-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_onOffset_month_or_quarter_or_year_end[366_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_onOffset_month_or_quarter_or_year_end[gregorian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_onOffset_month_or_quarter_or_year_end[proleptic_gregorian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_onOffset_month_or_quarter_or_year_end[standard-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[365_day-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[365_day-<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[365_day-<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[365_day-<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[365_day-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[365_day-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[365_day-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[365_day-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[365_day-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[365_day-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[365_day-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[365_day-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[360_day-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[360_day-<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[360_day-<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[360_day-<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[360_day-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[360_day-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[360_day-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[360_day-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[360_day-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[360_day-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[360_day-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[360_day-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[julian-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[julian-<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[julian-<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[julian-<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[julian-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[julian-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[julian-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[julian-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[julian-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[julian-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[julian-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[julian-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[all_leap-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[all_leap-<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[all_leap-<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[all_leap-<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[all_leap-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[all_leap-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[all_leap-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[all_leap-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[all_leap-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[all_leap-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[all_leap-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[all_leap-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[366_day-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[366_day-<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[366_day-<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[366_day-<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[366_day-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[366_day-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[366_day-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[366_day-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[366_day-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[366_day-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[366_day-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[366_day-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[gregorian-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[gregorian-<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[gregorian-<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[gregorian-<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[gregorian-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[gregorian-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[gregorian-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[gregorian-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[gregorian-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[gregorian-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[gregorian-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[gregorian-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[proleptic_gregorian-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[proleptic_gregorian-<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[proleptic_gregorian-<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[proleptic_gregorian-<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[proleptic_gregorian-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[proleptic_gregorian-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[proleptic_gregorian-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[proleptic_gregorian-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[proleptic_gregorian-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[proleptic_gregorian-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[proleptic_gregorian-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[proleptic_gregorian-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[standard-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[standard-<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[standard-<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[standard-<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[standard-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[standard-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[standard-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[standard-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[standard-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[standard-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[standard-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[standard-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[365_day-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[365_day-<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[365_day-<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[365_day-<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[365_day-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[365_day-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[365_day-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[365_day-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[365_day-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[365_day-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[365_day-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[365_day-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[360_day-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[360_day-<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[360_day-<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[360_day-<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[360_day-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[360_day-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[360_day-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[360_day-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[360_day-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[360_day-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[360_day-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[360_day-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[julian-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[julian-<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[julian-<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[julian-<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[julian-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[julian-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[julian-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[julian-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[julian-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[julian-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[julian-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[julian-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[all_leap-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[all_leap-<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[all_leap-<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[all_leap-<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[all_leap-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[all_leap-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[all_leap-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[all_leap-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[all_leap-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[all_leap-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[all_leap-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[all_leap-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[366_day-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[366_day-<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[366_day-<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[366_day-<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[366_day-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[366_day-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[366_day-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[366_day-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[366_day-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[366_day-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[366_day-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[366_day-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[gregorian-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[gregorian-<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[gregorian-<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[gregorian-<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[gregorian-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[gregorian-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[gregorian-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[gregorian-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[gregorian-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[gregorian-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[gregorian-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[gregorian-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[proleptic_gregorian-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[proleptic_gregorian-<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[proleptic_gregorian-<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[proleptic_gregorian-<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[proleptic_gregorian-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[proleptic_gregorian-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[proleptic_gregorian-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[proleptic_gregorian-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[proleptic_gregorian-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[proleptic_gregorian-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[proleptic_gregorian-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[proleptic_gregorian-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[standard-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[standard-<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[standard-<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[standard-<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[standard-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[standard-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[standard-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[standard-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[standard-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[standard-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[standard-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[standard-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[365_day-0001-01-01-0001-01-04-None-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[365_day-0001-01-01-0001-01-04-None-D-left-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[365_day-0001-01-01-0001-01-04-None-D-right-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[365_day-0001-01-01T01:00:00-0001-01-04-None-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[365_day-0001-01-01",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[365_day-0001-01-01T01:00:00-0001-01-04-None-D-None-True-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[365_day-0001-01-01-None-4-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[365_day-None-0001-01-04-4-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[365_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[365_day-0001-01-30-0011-02-01-None-3AS-JUN-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[365_day-0001-01-04-0001-01-01-None-D-None-False-[]]",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[365_day-0010-None-4-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[365_day-0001-01-01-0001-01-04-4-None-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[365_day-0001-06-01-None-4-3QS-JUN-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[360_day-0001-01-01-0001-01-04-None-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[360_day-0001-01-01-0001-01-04-None-D-left-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[360_day-0001-01-01-0001-01-04-None-D-right-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[360_day-0001-01-01T01:00:00-0001-01-04-None-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[360_day-0001-01-01",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[360_day-0001-01-01T01:00:00-0001-01-04-None-D-None-True-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[360_day-0001-01-01-None-4-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[360_day-None-0001-01-04-4-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[360_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[360_day-0001-01-30-0011-02-01-None-3AS-JUN-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[360_day-0001-01-04-0001-01-01-None-D-None-False-[]]",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[360_day-0010-None-4-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[360_day-0001-01-01-0001-01-04-4-None-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[360_day-0001-06-01-None-4-3QS-JUN-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[julian-0001-01-01-0001-01-04-None-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[julian-0001-01-01-0001-01-04-None-D-left-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[julian-0001-01-01-0001-01-04-None-D-right-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[julian-0001-01-01T01:00:00-0001-01-04-None-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[julian-0001-01-01",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[julian-0001-01-01T01:00:00-0001-01-04-None-D-None-True-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[julian-0001-01-01-None-4-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[julian-None-0001-01-04-4-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[julian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[julian-0001-01-30-0011-02-01-None-3AS-JUN-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[julian-0001-01-04-0001-01-01-None-D-None-False-[]]",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[julian-0010-None-4-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[julian-0001-01-01-0001-01-04-4-None-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[julian-0001-06-01-None-4-3QS-JUN-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[all_leap-0001-01-01-0001-01-04-None-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[all_leap-0001-01-01-0001-01-04-None-D-left-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[all_leap-0001-01-01-0001-01-04-None-D-right-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[all_leap-0001-01-01T01:00:00-0001-01-04-None-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[all_leap-0001-01-01",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[all_leap-0001-01-01T01:00:00-0001-01-04-None-D-None-True-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[all_leap-0001-01-01-None-4-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[all_leap-None-0001-01-04-4-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[all_leap-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[all_leap-0001-01-30-0011-02-01-None-3AS-JUN-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[all_leap-0001-01-04-0001-01-01-None-D-None-False-[]]",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[all_leap-0010-None-4-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[all_leap-0001-01-01-0001-01-04-4-None-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[all_leap-0001-06-01-None-4-3QS-JUN-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[366_day-0001-01-01-0001-01-04-None-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[366_day-0001-01-01-0001-01-04-None-D-left-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[366_day-0001-01-01-0001-01-04-None-D-right-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[366_day-0001-01-01T01:00:00-0001-01-04-None-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[366_day-0001-01-01",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[366_day-0001-01-01T01:00:00-0001-01-04-None-D-None-True-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[366_day-0001-01-01-None-4-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[366_day-None-0001-01-04-4-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[366_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[366_day-0001-01-30-0011-02-01-None-3AS-JUN-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[366_day-0001-01-04-0001-01-01-None-D-None-False-[]]",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[366_day-0010-None-4-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[366_day-0001-01-01-0001-01-04-4-None-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[366_day-0001-06-01-None-4-3QS-JUN-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[gregorian-0001-01-01-0001-01-04-None-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[gregorian-0001-01-01-0001-01-04-None-D-left-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[gregorian-0001-01-01-0001-01-04-None-D-right-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[gregorian-0001-01-01T01:00:00-0001-01-04-None-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[gregorian-0001-01-01",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[gregorian-0001-01-01T01:00:00-0001-01-04-None-D-None-True-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[gregorian-0001-01-01-None-4-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[gregorian-None-0001-01-04-4-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[gregorian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[gregorian-0001-01-30-0011-02-01-None-3AS-JUN-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[gregorian-0001-01-04-0001-01-01-None-D-None-False-[]]",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[gregorian-0010-None-4-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[gregorian-0001-01-01-0001-01-04-4-None-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[gregorian-0001-06-01-None-4-3QS-JUN-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[proleptic_gregorian-0001-01-01-0001-01-04-None-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[proleptic_gregorian-0001-01-01-0001-01-04-None-D-left-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[proleptic_gregorian-0001-01-01-0001-01-04-None-D-right-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[proleptic_gregorian-0001-01-01T01:00:00-0001-01-04-None-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[proleptic_gregorian-0001-01-01",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[proleptic_gregorian-0001-01-01T01:00:00-0001-01-04-None-D-None-True-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[proleptic_gregorian-0001-01-01-None-4-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[proleptic_gregorian-None-0001-01-04-4-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[proleptic_gregorian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[proleptic_gregorian-0001-01-30-0011-02-01-None-3AS-JUN-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[proleptic_gregorian-0001-01-04-0001-01-01-None-D-None-False-[]]",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[proleptic_gregorian-0010-None-4-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[proleptic_gregorian-0001-01-01-0001-01-04-4-None-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[proleptic_gregorian-0001-06-01-None-4-3QS-JUN-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[standard-0001-01-01-0001-01-04-None-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[standard-0001-01-01-0001-01-04-None-D-left-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[standard-0001-01-01-0001-01-04-None-D-right-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[standard-0001-01-01T01:00:00-0001-01-04-None-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[standard-0001-01-01",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[standard-0001-01-01T01:00:00-0001-01-04-None-D-None-True-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[standard-0001-01-01-None-4-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[standard-None-0001-01-04-4-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[standard-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[standard-0001-01-30-0011-02-01-None-3AS-JUN-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[standard-0001-01-04-0001-01-01-None-D-None-False-[]]",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[standard-0010-None-4-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[standard-0001-01-01-0001-01-04-4-None-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[standard-0001-06-01-None-4-3QS-JUN-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range_name",
                            "xarray/tests/test_cftime_offsets.py::test_invalid_cftime_range_inputs[None-None-5-A-None]",
                            "xarray/tests/test_cftime_offsets.py::test_invalid_cftime_range_inputs[2000-None-None-A-None]",
                            "xarray/tests/test_cftime_offsets.py::test_invalid_cftime_range_inputs[None-2000-None-A-None]",
                            "xarray/tests/test_cftime_offsets.py::test_invalid_cftime_range_inputs[2000-2001-None-None-None]",
                            "xarray/tests/test_cftime_offsets.py::test_invalid_cftime_range_inputs[None-None-None-None-None]",
                            "xarray/tests/test_cftime_offsets.py::test_invalid_cftime_range_inputs[2000-2001-None-A-up]",
                            "xarray/tests/test_cftime_offsets.py::test_invalid_cftime_range_inputs[2000-2001-5-A-None]",
                            "xarray/tests/test_cftime_offsets.py::test_calendar_specific_month_end[2M-noleap-[(2,",
                            "xarray/tests/test_cftime_offsets.py::test_calendar_specific_month_end[2M-all_leap-[(2,",
                            "xarray/tests/test_cftime_offsets.py::test_calendar_specific_month_end[2M-360_day-[(2,",
                            "xarray/tests/test_cftime_offsets.py::test_calendar_specific_month_end[2M-standard-[(2,",
                            "xarray/tests/test_cftime_offsets.py::test_calendar_specific_month_end[2M-gregorian-[(2,",
                            "xarray/tests/test_cftime_offsets.py::test_calendar_specific_month_end[2M-julian-[(2,",
                            "xarray/tests/test_cftime_offsets.py::test_calendar_year_length[noleap-2000-2001-365]",
                            "xarray/tests/test_cftime_offsets.py::test_calendar_year_length[all_leap-2000-2001-366]",
                            "xarray/tests/test_cftime_offsets.py::test_calendar_year_length[360_day-2000-2001-360]",
                            "xarray/tests/test_cftime_offsets.py::test_calendar_year_length[standard-2000-2001-366]",
                            "xarray/tests/test_cftime_offsets.py::test_calendar_year_length[gregorian-2000-2001-366]",
                            "xarray/tests/test_cftime_offsets.py::test_calendar_year_length[julian-2000-2001-366]",
                            "xarray/tests/test_cftime_offsets.py::test_calendar_year_length[noleap-2001-2002-365]",
                            "xarray/tests/test_cftime_offsets.py::test_calendar_year_length[all_leap-2001-2002-366]",
                            "xarray/tests/test_cftime_offsets.py::test_calendar_year_length[360_day-2001-2002-360]",
                            "xarray/tests/test_cftime_offsets.py::test_calendar_year_length[standard-2001-2002-365]",
                            "xarray/tests/test_cftime_offsets.py::test_calendar_year_length[gregorian-2001-2002-365]",
                            "xarray/tests/test_cftime_offsets.py::test_calendar_year_length[julian-2001-2002-365]",
                            "xarray/tests/test_cftime_offsets.py::test_dayofweek_after_cftime_range[A]",
                            "xarray/tests/test_cftime_offsets.py::test_dayofweek_after_cftime_range[M]",
                            "xarray/tests/test_cftime_offsets.py::test_dayofweek_after_cftime_range[D]",
                            "xarray/tests/test_cftime_offsets.py::test_dayofyear_after_cftime_range[A]",
                            "xarray/tests/test_cftime_offsets.py::test_dayofyear_after_cftime_range[M]",
                            "xarray/tests/test_cftime_offsets.py::test_dayofyear_after_cftime_range[D]",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range_standard_calendar_refers_to_gregorian",
                            "xarray/tests/test_cftime_offsets.py::test_date_range[1990-01-01-standard-None-DatetimeIndex]",
                            "xarray/tests/test_cftime_offsets.py::test_date_range[1990-01-01-proleptic_gregorian-True-CFTimeIndex]",
                            "xarray/tests/test_cftime_offsets.py::test_date_range[1990-01-01-noleap-None-CFTimeIndex]",
                            "xarray/tests/test_cftime_offsets.py::test_date_range[1990-01-01-gregorian-False-DatetimeIndex]",
                            "xarray/tests/test_cftime_offsets.py::test_date_range[1400-01-01-standard-None-CFTimeIndex]",
                            "xarray/tests/test_cftime_offsets.py::test_date_range[3400-01-01-standard-None-CFTimeIndex]",
                            "xarray/tests/test_cftime_offsets.py::test_date_range_errors",
                            "xarray/tests/test_cftime_offsets.py::test_date_range_like[2020-02-01-4M-standard-noleap-None-2020-02-28-False]",
                            "xarray/tests/test_cftime_offsets.py::test_date_range_like[2020-02-01-M-noleap-gregorian-True-2020-02-29-True]",
                            "xarray/tests/test_cftime_offsets.py::test_date_range_like[2020-02-28-3H-all_leap-gregorian-False-2020-02-28-True]",
                            "xarray/tests/test_cftime_offsets.py::test_date_range_like[2020-03-30-M-360_day-gregorian-False-2020-03-31-True]",
                            "xarray/tests/test_cftime_offsets.py::test_date_range_like[2020-03-31-M-gregorian-360_day-None-2020-03-30-False]",
                            "xarray/tests/test_cftime_offsets.py::test_date_range_like_same_calendar",
                            "xarray/tests/test_cftime_offsets.py::test_date_range_like_errors",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates0-days",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates1-days",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates2-days",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates3-days",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates4-days",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates5-days",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates6-days",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates7-days",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates8-days",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates9-days",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates10-days",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates11-days",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates12-hours",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates13-hours",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates14-hours",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates15-hour",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates16-hour",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates17-hour",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates18-Hour",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates19-Hour",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates20-Hour",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates21-",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates22-",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates23-",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[10-days",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates27-daYs",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates28-daYs",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates29-daYs",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates30-days",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates31-days",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates32-days",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates33-days",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates34-days",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates35-days",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates36-days",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates37-days",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates38-days",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[0-days",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates42-days",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates43-days",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates44-days",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates45-days",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates46-days",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates47-days",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates48-days",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates49-days",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates50-days",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates51-days",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates52-days",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates53-days",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates54-days",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates55-days",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates56-days",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[17093352.0-hours",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates60-hours",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates61-hours",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates62-hours",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[0-milliseconds",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[0-microseconds",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates69-seconds",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates70-seconds",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates71-seconds",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates72-hour",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates73-hour",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates74-hour",
                            "xarray/tests/test_coding_times.py::test_decode_cf_datetime_non_iso_strings",
                            "xarray/tests/test_coding_times.py::test_decode_standard_calendar_inside_timestamp_range[gregorian]",
                            "xarray/tests/test_coding_times.py::test_decode_standard_calendar_inside_timestamp_range[proleptic_gregorian]",
                            "xarray/tests/test_coding_times.py::test_decode_standard_calendar_inside_timestamp_range[standard]",
                            "xarray/tests/test_coding_times.py::test_decode_non_standard_calendar_inside_timestamp_range[360_day]",
                            "xarray/tests/test_coding_times.py::test_decode_non_standard_calendar_inside_timestamp_range[365_day]",
                            "xarray/tests/test_coding_times.py::test_decode_non_standard_calendar_inside_timestamp_range[366_day]",
                            "xarray/tests/test_coding_times.py::test_decode_non_standard_calendar_inside_timestamp_range[all_leap]",
                            "xarray/tests/test_coding_times.py::test_decode_non_standard_calendar_inside_timestamp_range[julian]",
                            "xarray/tests/test_coding_times.py::test_decode_non_standard_calendar_inside_timestamp_range[noleap]",
                            "xarray/tests/test_coding_times.py::test_decode_dates_outside_timestamp_range[360_day]",
                            "xarray/tests/test_coding_times.py::test_decode_dates_outside_timestamp_range[365_day]",
                            "xarray/tests/test_coding_times.py::test_decode_dates_outside_timestamp_range[366_day]",
                            "xarray/tests/test_coding_times.py::test_decode_dates_outside_timestamp_range[all_leap]",
                            "xarray/tests/test_coding_times.py::test_decode_dates_outside_timestamp_range[gregorian]",
                            "xarray/tests/test_coding_times.py::test_decode_dates_outside_timestamp_range[julian]",
                            "xarray/tests/test_coding_times.py::test_decode_dates_outside_timestamp_range[noleap]",
                            "xarray/tests/test_coding_times.py::test_decode_dates_outside_timestamp_range[proleptic_gregorian]",
                            "xarray/tests/test_coding_times.py::test_decode_dates_outside_timestamp_range[standard]",
                            "xarray/tests/test_coding_times.py::test_decode_standard_calendar_single_element_inside_timestamp_range[gregorian]",
                            "xarray/tests/test_coding_times.py::test_decode_standard_calendar_single_element_inside_timestamp_range[proleptic_gregorian]",
                            "xarray/tests/test_coding_times.py::test_decode_standard_calendar_single_element_inside_timestamp_range[standard]",
                            "xarray/tests/test_coding_times.py::test_decode_non_standard_calendar_single_element_inside_timestamp_range[360_day]",
                            "xarray/tests/test_coding_times.py::test_decode_non_standard_calendar_single_element_inside_timestamp_range[365_day]",
                            "xarray/tests/test_coding_times.py::test_decode_non_standard_calendar_single_element_inside_timestamp_range[366_day]",
                            "xarray/tests/test_coding_times.py::test_decode_non_standard_calendar_single_element_inside_timestamp_range[all_leap]",
                            "xarray/tests/test_coding_times.py::test_decode_non_standard_calendar_single_element_inside_timestamp_range[julian]",
                            "xarray/tests/test_coding_times.py::test_decode_non_standard_calendar_single_element_inside_timestamp_range[noleap]",
                            "xarray/tests/test_coding_times.py::test_decode_single_element_outside_timestamp_range[360_day]",
                            "xarray/tests/test_coding_times.py::test_decode_single_element_outside_timestamp_range[365_day]",
                            "xarray/tests/test_coding_times.py::test_decode_single_element_outside_timestamp_range[366_day]",
                            "xarray/tests/test_coding_times.py::test_decode_single_element_outside_timestamp_range[all_leap]",
                            "xarray/tests/test_coding_times.py::test_decode_single_element_outside_timestamp_range[julian]",
                            "xarray/tests/test_coding_times.py::test_decode_single_element_outside_timestamp_range[noleap]",
                            "xarray/tests/test_coding_times.py::test_decode_standard_calendar_multidim_time_inside_timestamp_range[gregorian]",
                            "xarray/tests/test_coding_times.py::test_decode_standard_calendar_multidim_time_inside_timestamp_range[proleptic_gregorian]",
                            "xarray/tests/test_coding_times.py::test_decode_standard_calendar_multidim_time_inside_timestamp_range[standard]",
                            "xarray/tests/test_coding_times.py::test_decode_nonstandard_calendar_multidim_time_inside_timestamp_range[360_day]",
                            "xarray/tests/test_coding_times.py::test_decode_nonstandard_calendar_multidim_time_inside_timestamp_range[365_day]",
                            "xarray/tests/test_coding_times.py::test_decode_nonstandard_calendar_multidim_time_inside_timestamp_range[366_day]",
                            "xarray/tests/test_coding_times.py::test_decode_nonstandard_calendar_multidim_time_inside_timestamp_range[all_leap]",
                            "xarray/tests/test_coding_times.py::test_decode_nonstandard_calendar_multidim_time_inside_timestamp_range[julian]",
                            "xarray/tests/test_coding_times.py::test_decode_nonstandard_calendar_multidim_time_inside_timestamp_range[noleap]",
                            "xarray/tests/test_coding_times.py::test_decode_multidim_time_outside_timestamp_range[360_day]",
                            "xarray/tests/test_coding_times.py::test_decode_multidim_time_outside_timestamp_range[365_day]",
                            "xarray/tests/test_coding_times.py::test_decode_multidim_time_outside_timestamp_range[366_day]",
                            "xarray/tests/test_coding_times.py::test_decode_multidim_time_outside_timestamp_range[all_leap]",
                            "xarray/tests/test_coding_times.py::test_decode_multidim_time_outside_timestamp_range[gregorian]",
                            "xarray/tests/test_coding_times.py::test_decode_multidim_time_outside_timestamp_range[julian]",
                            "xarray/tests/test_coding_times.py::test_decode_multidim_time_outside_timestamp_range[noleap]",
                            "xarray/tests/test_coding_times.py::test_decode_multidim_time_outside_timestamp_range[proleptic_gregorian]",
                            "xarray/tests/test_coding_times.py::test_decode_multidim_time_outside_timestamp_range[standard]",
                            "xarray/tests/test_coding_times.py::test_decode_non_standard_calendar_single_element[360_day-720058.0]",
                            "xarray/tests/test_coding_times.py::test_decode_non_standard_calendar_single_element[all_leap-732059.0]",
                            "xarray/tests/test_coding_times.py::test_decode_non_standard_calendar_single_element[366_day-732059.0]",
                            "xarray/tests/test_coding_times.py::test_decode_360_day_calendar",
                            "xarray/tests/test_coding_times.py::test_decode_abbreviation",
                            "xarray/tests/test_coding_times.py::test_cf_datetime_nan[num_dates0-days",
                            "xarray/tests/test_coding_times.py::test_cf_datetime_nan[num_dates1-days",
                            "xarray/tests/test_coding_times.py::test_cf_datetime_nan[num_dates2-days",
                            "xarray/tests/test_coding_times.py::test_decoded_cf_datetime_array_2d",
                            "xarray/tests/test_coding_times.py::test_infer_cftime_datetime_units[date_args0-days",
                            "xarray/tests/test_coding_times.py::test_infer_cftime_datetime_units[date_args1-seconds",
                            "xarray/tests/test_coding_times.py::test_infer_cftime_datetime_units[date_args2-days",
                            "xarray/tests/test_coding_times.py::test_format_cftime_datetime[date_args0-0001-02-03",
                            "xarray/tests/test_coding_times.py::test_format_cftime_datetime[date_args1-0010-02-03",
                            "xarray/tests/test_coding_times.py::test_format_cftime_datetime[date_args2-0100-02-03",
                            "xarray/tests/test_coding_times.py::test_format_cftime_datetime[date_args3-1000-02-03",
                            "xarray/tests/test_coding_times.py::test_encode_time_bounds",
                            "xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_1d[360_day]",
                            "xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_1d[365_day]",
                            "xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_1d[366_day]",
                            "xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_1d[all_leap]",
                            "xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_1d[gregorian]",
                            "xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_1d[julian]",
                            "xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_1d[noleap]",
                            "xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_1d[proleptic_gregorian]",
                            "xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_1d[standard]",
                            "xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_1d[360_day]",
                            "xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_1d[365_day]",
                            "xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_1d[366_day]",
                            "xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_1d[all_leap]",
                            "xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_1d[gregorian]",
                            "xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_1d[julian]",
                            "xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_1d[noleap]",
                            "xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_1d[proleptic_gregorian]",
                            "xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_1d[standard]",
                            "xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_3d[360_day]",
                            "xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_3d[365_day]",
                            "xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_3d[366_day]",
                            "xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_3d[all_leap]",
                            "xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_3d[gregorian]",
                            "xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_3d[julian]",
                            "xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_3d[noleap]",
                            "xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_3d[proleptic_gregorian]",
                            "xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_3d[standard]",
                            "xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_3d[360_day]",
                            "xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_3d[365_day]",
                            "xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_3d[366_day]",
                            "xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_3d[all_leap]",
                            "xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_3d[gregorian]",
                            "xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_3d[julian]",
                            "xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_3d[noleap]",
                            "xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_3d[proleptic_gregorian]",
                            "xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_3d[standard]",
                            "xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_non_cftimes_dask[non_cftime_data0]",
                            "xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_non_cftimes_dask[non_cftime_data1]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_invalid_pandas_valid_cftime",
                            "xarray/tests/test_coding_times.py::test_time_units_with_timezone_roundtrip[360_day]",
                            "xarray/tests/test_coding_times.py::test_time_units_with_timezone_roundtrip[365_day]",
                            "xarray/tests/test_coding_times.py::test_time_units_with_timezone_roundtrip[366_day]",
                            "xarray/tests/test_coding_times.py::test_time_units_with_timezone_roundtrip[all_leap]",
                            "xarray/tests/test_coding_times.py::test_time_units_with_timezone_roundtrip[gregorian]",
                            "xarray/tests/test_coding_times.py::test_time_units_with_timezone_roundtrip[julian]",
                            "xarray/tests/test_coding_times.py::test_time_units_with_timezone_roundtrip[noleap]",
                            "xarray/tests/test_coding_times.py::test_time_units_with_timezone_roundtrip[proleptic_gregorian]",
                            "xarray/tests/test_coding_times.py::test_time_units_with_timezone_roundtrip[standard]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_default_standard_calendar_out_of_range[1500-gregorian]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_default_standard_calendar_out_of_range[1500-proleptic_gregorian]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_default_standard_calendar_out_of_range[1500-standard]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_default_standard_calendar_out_of_range[2500-gregorian]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_default_standard_calendar_out_of_range[2500-proleptic_gregorian]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_default_standard_calendar_out_of_range[2500-standard]",
                            "xarray/tests/test_coding_times.py::test_decode_ambiguous_time_warns[gregorian]",
                            "xarray/tests/test_coding_times.py::test_decode_ambiguous_time_warns[proleptic_gregorian]",
                            "xarray/tests/test_coding_times.py::test_decode_ambiguous_time_warns[standard]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-U-microseconds]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-U-milliseconds]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-U-seconds]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-U-minutes]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-U-hours]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-U-days]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-L-microseconds]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-L-milliseconds]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-L-seconds]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-L-minutes]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-L-hours]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-L-days]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-S-microseconds]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-S-milliseconds]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-S-seconds]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-S-minutes]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-S-hours]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-S-days]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-T-microseconds]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-T-milliseconds]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-T-seconds]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-T-minutes]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-T-hours]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-T-days]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-H-microseconds]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-H-milliseconds]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-H-seconds]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-H-minutes]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-H-hours]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-H-days]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-D-microseconds]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-D-milliseconds]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-D-seconds]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-D-minutes]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-D-hours]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-D-days]",
                            "xarray/tests/test_coding_times.py::test_encode_decode_roundtrip_cftime[U]",
                            "xarray/tests/test_coding_times.py::test_encode_decode_roundtrip_cftime[L]",
                            "xarray/tests/test_coding_times.py::test_encode_decode_roundtrip_cftime[S]",
                            "xarray/tests/test_coding_times.py::test_encode_decode_roundtrip_cftime[T]",
                            "xarray/tests/test_coding_times.py::test_encode_decode_roundtrip_cftime[H]",
                            "xarray/tests/test_coding_times.py::test_encode_decode_roundtrip_cftime[D]",
                            "xarray/tests/test_coding_times.py::test__encode_datetime_with_cftime",
                            "xarray/tests/test_coding_times.py::test_should_cftime_be_used_source_outside_range",
                            "xarray/tests/test_coding_times.py::test_should_cftime_be_used_target_not_npable"
                        ],
                        "failure": [
                            "xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[1500-360_day]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[1500-365_day]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[1500-366_day]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[1500-all_leap]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[1500-julian]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[1500-noleap]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[2000-360_day]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[2000-365_day]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[2000-366_day]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[2000-all_leap]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[2000-julian]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[2000-noleap]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[2500-360_day]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[2500-365_day]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[2500-366_day]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[2500-all_leap]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[2500-julian]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[2500-noleap]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_true[1500-360_day]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_true[1500-365_day]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_true[1500-366_day]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_true[1500-all_leap]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_true[1500-gregorian]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_true[1500-julian]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_true[1500-noleap]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_true[1500-proleptic_gregorian]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_true[1500-standard]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_true[2000-360_day]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_true[2000-365_day]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_true[2000-366_day]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_true[2000-all_leap]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_true[2000-gregorian]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_true[2000-julian]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_true[2000-noleap]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_true[2000-proleptic_gregorian]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_true[2000-standard]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_true[2500-360_day]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_true[2500-365_day]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_true[2500-366_day]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_true[2500-all_leap]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_true[2500-gregorian]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_true[2500-julian]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_true[2500-noleap]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_true[2500-proleptic_gregorian]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_true[2500-standard]",
                            "xarray/tests/test_coding_times.py::test_decode_ambiguous_time_warns[360_day]",
                            "xarray/tests/test_coding_times.py::test_decode_ambiguous_time_warns[365_day]",
                            "xarray/tests/test_coding_times.py::test_decode_ambiguous_time_warns[366_day]",
                            "xarray/tests/test_coding_times.py::test_decode_ambiguous_time_warns[all_leap]",
                            "xarray/tests/test_coding_times.py::test_decode_ambiguous_time_warns[julian]",
                            "xarray/tests/test_coding_times.py::test_decode_ambiguous_time_warns[noleap]"
                        ]
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "matplotlib__matplotlib-17810.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [],
                        "failure": [
                            "lib/matplotlib/tests/test_animation.py::test_exhausted_animation",
                            "lib/matplotlib/tests/test_animation.py::test_no_frame_warning"
                        ]
                    },
                    "PASS_TO_PASS": {
                        "success": [],
                        "failure": [
                            "lib/matplotlib/tests/test_animation.py::test_null_movie_writer",
                            "lib/matplotlib/tests/test_animation.py::test_animation_delete[anim0]",
                            "lib/matplotlib/tests/test_animation.py::test_movie_writer_dpi_default",
                            "lib/matplotlib/tests/test_animation.py::test_animation_repr_html[anim0-none-None-ffmpeg]",
                            "lib/matplotlib/tests/test_animation.py::test_animation_repr_html[anim0-none-None-imagemagick]",
                            "lib/matplotlib/tests/test_animation.py::test_animation_repr_html[anim0-html5-<video",
                            "lib/matplotlib/tests/test_animation.py::test_animation_repr_html[anim0-jshtml-<script",
                            "lib/matplotlib/tests/test_animation.py::test_no_length_frames[anim0]",
                            "lib/matplotlib/tests/test_animation.py::test_movie_writer_registry",
                            "lib/matplotlib/tests/test_animation.py::test_embed_limit[anim0-to_html5_video]",
                            "lib/matplotlib/tests/test_animation.py::test_embed_limit[anim0-to_jshtml]",
                            "lib/matplotlib/tests/test_animation.py::test_cleanup_temporaries[anim0-to_html5_video]",
                            "lib/matplotlib/tests/test_animation.py::test_cleanup_temporaries[anim0-to_jshtml]",
                            "lib/matplotlib/tests/test_animation.py::test_failing_ffmpeg",
                            "lib/matplotlib/tests/test_animation.py::test_funcanimation_cache_frame_data[False]",
                            "lib/matplotlib/tests/test_animation.py::test_funcanimation_cache_frame_data[True]",
                            "lib/matplotlib/tests/test_animation.py::test_draw_frame[None]",
                            "lib/matplotlib/tests/test_animation.py::test_draw_frame[string]",
                            "lib/matplotlib/tests/test_animation.py::test_draw_frame[1]",
                            "lib/matplotlib/tests/test_animation.py::test_draw_frame[return_value3]",
                            "lib/matplotlib/tests/test_animation.py::test_draw_frame[artist]"
                        ]
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "django__django-14855.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "test_readonly_foreignkey_links_custom_admin_site (admin_views.tests.ReadonlyTest)"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "test_explicitly_provided_pk (admin_views.tests.GetFormsetsWithInlinesArgumentTest)",
                            "test_implicitly_generated_pk (admin_views.tests.GetFormsetsWithInlinesArgumentTest)",
                            "test_should_be_able_to_edit_related_objects_on_add_view (admin_views.tests.AdminCustomSaveRelatedTests)",
                            "test_should_be_able_to_edit_related_objects_on_change_view (admin_views.tests.AdminCustomSaveRelatedTests)",
                            "test_should_be_able_to_edit_related_objects_on_changelist_view (admin_views.tests.AdminCustomSaveRelatedTests)",
                            "Admin index views don't break when user's ModelAdmin removes standard urls",
                            "Test for ticket 2445 changes to admin.",
                            "test_lang_name_present (admin_views.tests.ValidXHTMLTests)",
                            "The delete_view handles non-ASCII characters",
                            "A test to ensure that POST on edit_view handles non-ASCII characters.",
                            "InlineModelAdmin broken?",
                            "test_secure_view_shows_login_if_not_logged_in (admin_views.tests.SecureViewTests)",
                            "Staff_member_required decorator works with an argument",
                            "test_generic_content_object_in_list_display (admin_views.tests.TestGenericRelations)",
                            "Inline models which inherit from a common parent are correctly handled.",
                            "test_client_logout_url_can_be_used_to_login (admin_views.tests.AdminViewLogoutTests)",
                            "test_logout (admin_views.tests.AdminViewLogoutTests)",
                            "Validate that a custom ChangeList class can be used (#9749)",
                            "change_view has form_url in response.context",
                            "The behavior for setting initial form data can be overridden in the",
                            "test_all_fields_hidden (admin_views.tests.TestLabelVisibility)",
                            "test_all_fields_visible (admin_views.tests.TestLabelVisibility)",
                            "test_mixin (admin_views.tests.TestLabelVisibility)",
                            "The minified versions of the JS files are only used when DEBUG is False.",
                            "test_form_has_multipart_enctype (admin_views.tests.AdminInlineFileUploadTest)",
                            "Inline file uploads correctly display prior data (#10002).",
                            "test_known_url_missing_slash_redirects_login_if_not_authenticated (admin_views.tests.AdminSiteFinalCatchAllPatternTests)",
                            "test_known_url_missing_slash_redirects_with_slash_if_not_authenticated_without_final_catch_all_view (admin_views.tests.AdminSiteFinalCatchAllPatternTests)",
                            "test_known_url_redirects_login_if_not_authenticated (admin_views.tests.AdminSiteFinalCatchAllPatternTests)",
                            "test_known_url_redirects_login_if_not_authenticated_without_final_catch_all_view (admin_views.tests.AdminSiteFinalCatchAllPatternTests)",
                            "test_missing_slash_append_slash_false (admin_views.tests.AdminSiteFinalCatchAllPatternTests)",
                            "test_missing_slash_append_slash_false_without_final_catch_all_view (admin_views.tests.AdminSiteFinalCatchAllPatternTests)",
                            "test_missing_slash_append_slash_true (admin_views.tests.AdminSiteFinalCatchAllPatternTests)",
                            "test_missing_slash_append_slash_true_force_script_name (admin_views.tests.AdminSiteFinalCatchAllPatternTests)",
                            "test_missing_slash_append_slash_true_non_staff_user (admin_views.tests.AdminSiteFinalCatchAllPatternTests)",
                            "test_missing_slash_append_slash_true_script_name (admin_views.tests.AdminSiteFinalCatchAllPatternTests)",
                            "test_missing_slash_append_slash_true_unknown_url (admin_views.tests.AdminSiteFinalCatchAllPatternTests)",
                            "test_missing_slash_append_slash_true_unknown_url_without_final_catch_all_view (admin_views.tests.AdminSiteFinalCatchAllPatternTests)",
                            "test_missing_slash_append_slash_true_without_final_catch_all_view (admin_views.tests.AdminSiteFinalCatchAllPatternTests)",
                            "test_non_admin_url_404_if_not_authenticated (admin_views.tests.AdminSiteFinalCatchAllPatternTests)",
                            "test_non_admin_url_shares_url_prefix (admin_views.tests.AdminSiteFinalCatchAllPatternTests)",
                            "test_non_admin_url_shares_url_prefix_without_final_catch_all_view (admin_views.tests.AdminSiteFinalCatchAllPatternTests)",
                            "test_single_model_no_append_slash (admin_views.tests.AdminSiteFinalCatchAllPatternTests)",
                            "test_unknown_url_404_if_authenticated (admin_views.tests.AdminSiteFinalCatchAllPatternTests)",
                            "test_unknown_url_404_if_authenticated_without_final_catch_all_view (admin_views.tests.AdminSiteFinalCatchAllPatternTests)",
                            "test_unknown_url_404_if_not_authenticated_without_final_catch_all_view (admin_views.tests.AdminSiteFinalCatchAllPatternTests)",
                            "test_unknown_url_redirects_login_if_not_authenticated (admin_views.tests.AdminSiteFinalCatchAllPatternTests)",
                            "test_unkown_url_without_trailing_slash_if_not_authenticated (admin_views.tests.AdminSiteFinalCatchAllPatternTests)",
                            "test_unkown_url_without_trailing_slash_if_not_authenticated_without_final_catch_all_view (admin_views.tests.AdminSiteFinalCatchAllPatternTests)",
                            "test_url_without_trailing_slash_if_not_authenticated (admin_views.tests.AdminSiteFinalCatchAllPatternTests)",
                            "test_url_without_trailing_slash_if_not_authenticated_without_final_catch_all_view (admin_views.tests.AdminSiteFinalCatchAllPatternTests)",
                            "Regression test for #15938: if USE_THOUSAND_SEPARATOR is set, make sure",
                            "test_prepopulated_off (admin_views.tests.PrePopulatedTest)",
                            "test_prepopulated_on (admin_views.tests.PrePopulatedTest)",
                            "PrePopulatedPostReadOnlyAdmin.prepopulated_fields includes 'slug'",
                            "PrePopulatedPostReadOnlyAdmin.prepopulated_fields includes 'slug'. That",
                            "test_add (admin_views.tests.AdminViewProxyModelPermissionsTests)",
                            "test_change (admin_views.tests.AdminViewProxyModelPermissionsTests)",
                            "test_delete (admin_views.tests.AdminViewProxyModelPermissionsTests)",
                            "test_view (admin_views.tests.AdminViewProxyModelPermissionsTests)",
                            "The right link is displayed if view_on_site is a callable",
                            "The 'View on site' button is not displayed if view_on_site is False",
                            "The 'View on site' button is displayed if view_on_site is True",
                            "test_custom_admin_site_app_index_view_and_template (admin_views.tests.CustomModelAdminTest)",
                            "test_custom_admin_site_index_view_and_template (admin_views.tests.CustomModelAdminTest)",
                            "test_custom_admin_site_login_form (admin_views.tests.CustomModelAdminTest)",
                            "test_custom_admin_site_login_template (admin_views.tests.CustomModelAdminTest)",
                            "test_custom_admin_site_logout_template (admin_views.tests.CustomModelAdminTest)",
                            "test_custom_admin_site_password_change_done_template (admin_views.tests.CustomModelAdminTest)",
                            "test_custom_admin_site_password_change_template (admin_views.tests.CustomModelAdminTest)",
                            "test_custom_admin_site_password_change_with_extra_context (admin_views.tests.CustomModelAdminTest)",
                            "test_custom_admin_site_view (admin_views.tests.CustomModelAdminTest)",
                            "test_pwd_change_custom_template (admin_views.tests.CustomModelAdminTest)",
                            "test_group_permission_performance (admin_views.tests.GroupAdminTest)",
                            "test_save_button (admin_views.tests.GroupAdminTest)",
                            "Regression test for 14880",
                            "Regression test for 20182",
                            "Should be able to use a ModelAdmin method in list_display that has the",
                            "Saving a new object using \"Save as new\" redirects to the changelist",
                            "'save as' creates a new person",
                            "test_save_as_new_with_inlines_with_validation_errors (admin_views.tests.SaveAsTests)",
                            "When you click \"Save as new\" and have a validation error,",
                            "test_save_as_new_with_validation_errors_with_inlines (admin_views.tests.SaveAsTests)",
                            "Issue #20522",
                            "The view_on_site value is either a boolean or a callable",
                            "None is returned if model doesn't have get_absolute_url",
                            "The default behavior is followed if view_on_site is True",
                            "test_message_debug (admin_views.tests.AdminUserMessageTest)",
                            "test_message_error (admin_views.tests.AdminUserMessageTest)",
                            "test_message_extra_tags (admin_views.tests.AdminUserMessageTest)",
                            "test_message_info (admin_views.tests.AdminUserMessageTest)",
                            "test_message_success (admin_views.tests.AdminUserMessageTest)",
                            "test_message_warning (admin_views.tests.AdminUserMessageTest)",
                            "Check the never-cache status of the JavaScript i18n view",
                            "Check the never-cache status of the main index",
                            "Check the never-cache status of an application index",
                            "Check the never-cache status of login views",
                            "Check the never-cache status of logout view",
                            "Check the never-cache status of a model add page",
                            "Check the never-cache status of a model delete page",
                            "Check the never-cache status of a model history page",
                            "Check the never-cache status of a model index",
                            "Check the never-cache status of a model edit page",
                            "Check the never-cache status of the password change view",
                            "Check the never-cache status of the password change done view",
                            "Ensure app and model tag are correctly read by app_index template",
                            "Ensure app and model tag are correctly read by delete_confirmation",
                            "Ensure app and model tag are correctly read by",
                            "Ensure app and model tag are correctly read by change_form template",
                            "Ensure app and model tag are correctly read by change_list template",
                            "Cells of the change list table should contain the field name in their class attribute",
                            "Fields have a CSS class name with a 'field-' prefix.",
                            "CSS class names are used for each app and model on the admin index",
                            "Object history button link should work and contain the pk value quoted.",
                            "Link to the changeform of the object in changelist should use reverse() and be quoted -- #18072",
                            "The link from the delete confirmation page referring back to the changeform of the object should be quoted",
                            "Retrieving the object using urlencoded form of primary key should work",
                            "Retrieving the history for an object using urlencoded form of primary",
                            "The link from the recent actions list referring to the changeform of the object should be quoted",
                            "As soon as an object is added using \"Save and continue editing\"",
                            "'View on site should' work properly with char fields",
                            "A model with a primary key that ends with add or is `add` should be visible",
                            "A model with a primary key that ends with delete should be visible",
                            "A model with a primary key that ends with history should be visible",
                            "No date hierarchy links display with empty changelist.",
                            "year-level links appear for year-spanning changelist.",
                            "test_related_field (admin_views.tests.DateHierarchyTests)",
                            "Single day-level date hierarchy appears for single object.",
                            "day-level links appear for changelist within single month.",
                            "month-level links appear for changelist within single year.",
                            "Cyclic relationships should still cause each object to only be",
                            "The delete view uses ModelAdmin.get_deleted_objects().",
                            "If a deleted object has GenericForeignKeys pointing to it,",
                            "If a deleted object has GenericForeignKey with",
                            "In the case of an inherited model, if either the child or",
                            "If a deleted object has two relationships pointing to it from",
                            "If a deleted object has two relationships from another model,",
                            "Objects should be nested to display the relationships that",
                            "test_not_registered (admin_views.tests.AdminViewDeletedObjectsTest)",
                            "test_perms_needed (admin_views.tests.AdminViewDeletedObjectsTest)",
                            "A POST request to delete protected objects should display the page",
                            "test_post_delete_restricted (admin_views.tests.AdminViewDeletedObjectsTest)",
                            "test_protected (admin_views.tests.AdminViewDeletedObjectsTest)",
                            "test_restricted (admin_views.tests.AdminViewDeletedObjectsTest)",
                            "test_change_password_template (admin_views.tests.AdminCustomTemplateTests)",
                            "test_custom_model_admin_templates (admin_views.tests.AdminCustomTemplateTests)",
                            "The admin/change_list.html' template uses block.super",
                            "The admin/change_form.html template uses block.super in the",
                            "The admin/delete_confirmation.html template uses",
                            "The admin/delete_selected_confirmation.html template uses",
                            "The admin/index.html template uses block.super in the bodyclass block.",
                            "The admin/login.html template uses block.super in the",
                            "A custom template can be used to render an admin filter.",
                            "test_changelist_input_html (admin_views.tests.AdminViewListEditable)",
                            "test_custom_pk (admin_views.tests.AdminViewListEditable)",
                            "test_inheritance (admin_views.tests.AdminViewListEditable)",
                            "test_inheritance_2 (admin_views.tests.AdminViewListEditable)",
                            "test_list_editable_action_choices (admin_views.tests.AdminViewListEditable)",
                            "test_list_editable_action_submit (admin_views.tests.AdminViewListEditable)",
                            "test_list_editable_ordering (admin_views.tests.AdminViewListEditable)",
                            "Pagination works for list_editable items.",
                            "Fields should not be list-editable in popups.",
                            "Non-field errors are displayed for each of the forms in the",
                            "test_non_form_errors (admin_views.tests.AdminViewListEditable)",
                            "test_non_form_errors_is_errorlist (admin_views.tests.AdminViewListEditable)",
                            "hidden pk fields aren't displayed in the table body and their",
                            "Similarly as test_pk_hidden_fields, but when the hidden pk fields are",
                            "test_post_messages (admin_views.tests.AdminViewListEditable)",
                            "test_post_submission (admin_views.tests.AdminViewListEditable)",
                            "test_filters (admin_views.tests.AdminDocsTest)",
                            "test_tags (admin_views.tests.AdminDocsTest)",
                            "test_beginning_matches (admin_views.tests.AdminSearchTest)",
                            "test_exact_matches (admin_views.tests.AdminSearchTest)",
                            "#8408 -- \"Show all\" should be displayed instead of the total count if",
                            "test_pluggable_search (admin_views.tests.AdminSearchTest)",
                            "Test presence of reset link in search bar (\"1 result (_x total_)\").",
                            "A search that mentions sibling models",
                            "test_search_with_spaces (admin_views.tests.AdminSearchTest)",
                            "The to_field GET parameter is preserved when a search is performed.",
                            "A model with a character PK can be saved as inlines. Regression for #10992",
                            "A model with an explicit autofield primary key can be saved as inlines. Regression for #8093",
                            "An inherited model can be saved as inlines. Regression for #11042",
                            "A model with an integer PK can be saved as inlines. Regression for #10992",
                            "An inline with an editable ordering fields is updated correctly.",
                            "A simple model can be saved as inlines",
                            "test_add_view (admin_views.tests.NamespacedAdminKeepChangeListFiltersTests)",
                            "test_add_view_without_preserved_filters (admin_views.tests.NamespacedAdminKeepChangeListFiltersTests)",
                            "test_assert_url_equal (admin_views.tests.NamespacedAdminKeepChangeListFiltersTests)",
                            "test_change_view (admin_views.tests.NamespacedAdminKeepChangeListFiltersTests)",
                            "test_change_view_without_preserved_filters (admin_views.tests.NamespacedAdminKeepChangeListFiltersTests)",
                            "test_changelist_view (admin_views.tests.NamespacedAdminKeepChangeListFiltersTests)",
                            "test_delete_view (admin_views.tests.NamespacedAdminKeepChangeListFiltersTests)",
                            "test_url_prefix (admin_views.tests.NamespacedAdminKeepChangeListFiltersTests)",
                            "test_form_url_present_in_context (admin_views.tests.UserAdminTest)",
                            "test_password_mismatch (admin_views.tests.UserAdminTest)",
                            "test_save_add_another_button (admin_views.tests.UserAdminTest)",
                            "test_save_button (admin_views.tests.UserAdminTest)",
                            "test_save_continue_editing_button (admin_views.tests.UserAdminTest)",
                            "User addition through a FK popup should return the appropriate JavaScript response.",
                            "User change through a FK popup should return the appropriate JavaScript response.",
                            "User deletion through a FK popup should return the appropriate JavaScript response.",
                            "test_user_permission_performance (admin_views.tests.UserAdminTest)",
                            "test_add_view (admin_views.tests.AdminKeepChangeListFiltersTests)",
                            "test_add_view_without_preserved_filters (admin_views.tests.AdminKeepChangeListFiltersTests)",
                            "test_assert_url_equal (admin_views.tests.AdminKeepChangeListFiltersTests)",
                            "test_change_view (admin_views.tests.AdminKeepChangeListFiltersTests)",
                            "test_change_view_without_preserved_filters (admin_views.tests.AdminKeepChangeListFiltersTests)",
                            "test_changelist_view (admin_views.tests.AdminKeepChangeListFiltersTests)",
                            "test_delete_view (admin_views.tests.AdminKeepChangeListFiltersTests)",
                            "test_url_prefix (admin_views.tests.AdminKeepChangeListFiltersTests)",
                            "test_add_model_modeladmin_defer_qs (admin_views.tests.AdminCustomQuerysetTest)",
                            "test_add_model_modeladmin_only_qs (admin_views.tests.AdminCustomQuerysetTest)",
                            "test_change_view (admin_views.tests.AdminCustomQuerysetTest)",
                            "test_changelist_view (admin_views.tests.AdminCustomQuerysetTest)",
                            "test_changelist_view_count_queries (admin_views.tests.AdminCustomQuerysetTest)",
                            "test_edit_model_modeladmin_defer_qs (admin_views.tests.AdminCustomQuerysetTest)",
                            "test_edit_model_modeladmin_only_qs (admin_views.tests.AdminCustomQuerysetTest)",
                            "Custom querysets are considered for the admin history view.",
                            "Regression test for #17911.",
                            "Make sure that non-field readonly elements are properly autoescaped (#24461)",
                            "test_label_suffix_translated (admin_views.tests.ReadonlyTest)",
                            "Regression test for #22087 - ModelForm Meta overrides are ignored by",
                            "test_readonly_foreignkey_links_default_admin_site (admin_views.tests.ReadonlyTest)",
                            "test_readonly_get (admin_views.tests.ReadonlyTest)",
                            "Regression test for #13004",
                            "Regression test for #16433 - backwards references for related objects",
                            "test_readonly_manytomany_forwards_ref (admin_views.tests.ReadonlyTest)",
                            "Can reference a reverse OneToOneField in ModelAdmin.readonly_fields.",
                            "test_readonly_post (admin_views.tests.ReadonlyTest)",
                            "test_readonly_text_field (admin_views.tests.ReadonlyTest)",
                            "test_user_password_change_limited_queryset (admin_views.tests.ReadonlyTest)",
                            "Test add view restricts access and actually adds items.",
                            "User with add permission to a section but view-only for inlines.",
                            "If a user has no module perms, the app list returns a 404.",
                            "Change view should restrict access and allow users to edit items.",
                            "'Save as new' should raise PermissionDenied for users without the 'add'",
                            "User has view and add permissions on the inline model.",
                            "User has view and delete permissions on the inline model.",
                            "User with change permission to a section but view-only for inlines.",
                            "The object should be read-only if the user has permission to view it",
                            "The foreign key widget should only show the \"add related\" button if the",
                            "The foreign key widget should only show the \"change related\" button if",
                            "The foreign key widget should only show the \"delete related\" button if",
                            "Delete view should restrict access and actually delete items.",
                            "test_delete_view_nonexistent_obj (admin_views.tests.AdminViewPermissionsTest)",
                            "The delete view allows users to delete collected objects without a",
                            "test_disabled_permissions_when_logged_in (admin_views.tests.AdminViewPermissionsTest)",
                            "test_disabled_staff_permissions_when_logged_in (admin_views.tests.AdminViewPermissionsTest)",
                            "Regression test for #19327",
                            "has_module_permission() returns True for all users who",
                            "History view should restrict access.",
                            "test_history_view_bad_url (admin_views.tests.AdminViewPermissionsTest)",
                            "Make sure only staff members can log in.",
                            "test_login_has_permission (admin_views.tests.AdminViewPermissionsTest)",
                            "A logged-in non-staff user trying to access the admin index should be",
                            "Login redirect should be to the admin index page when going directly to",
                            "test_login_successfully_redirects_to_original_URL (admin_views.tests.AdminViewPermissionsTest)",
                            "If has_module_permission() always returns False, the module shouldn't",
                            "Post-save message shouldn't contain a link to the change form if the",
                            "Only admin users should be able to use the admin shortcut view.",
                            "test_add_with_GET_args (admin_views.tests.AdminViewBasicTest)",
                            "#13749 - Admin should display link to front-end site 'View site'",
                            "Regressions test for ticket 15103 - filtering on fields defined in a",
                            "AttributeErrors are allowed to bubble when raised inside a change list",
                            "test_app_index_context (admin_views.tests.AdminViewBasicTest)",
                            "A smoke test to ensure GET on the add_view works.",
                            "A smoke test to ensure POST on add_view works.",
                            "A smoke test to ensure GET on the change_view works.",
                            "The change URL changed in Django 1.9, but the old one still redirects.",
                            "GET on the change_view (when passing a string as the PK argument for a",
                            "A smoke test to ensure POST on edit_view works.",
                            "GET on the change_view (for inherited models) redirects to the index",
                            "test_change_list_column_field_classes (admin_views.tests.AdminViewBasicTest)",
                            "test_change_list_null_boolean_display (admin_views.tests.AdminViewBasicTest)",
                            "Ensure we can sort on a list_display field that is a callable",
                            "Query expressions may be used for admin_order_field.",
                            "test_change_list_sorting_callable_query_expression_reverse (admin_views.tests.AdminViewBasicTest)",
                            "Ensure we can sort on a list_display field that is a Model method",
                            "Ensure we can sort on a list_display field that is a ModelAdmin method",
                            "Ensure we can sort on a list_display field that is a ModelAdmin",
                            "test_change_list_sorting_model_meta (admin_views.tests.AdminViewBasicTest)",
                            "test_change_list_sorting_multiple (admin_views.tests.AdminViewBasicTest)",
                            "test_change_list_sorting_override_model_admin (admin_views.tests.AdminViewBasicTest)",
                            "If no ordering is defined in `ModelAdmin.ordering` or in the query",
                            "Sort on a list_display field that is a property (column 10 is",
                            "Changes to ManyToManyFields are included in the object's history.",
                            "test_change_view_subtitle_per_object (admin_views.tests.AdminViewBasicTest)",
                            "The 'show_delete' context variable in the admin's change view controls",
                            "ModelAdmin.changelist_view shouldn't result in a NoReverseMatch if url",
                            "test_date_hierarchy_empty_queryset (admin_views.tests.AdminViewBasicTest)",
                            "test_date_hierarchy_local_date_differ_from_utc (admin_views.tests.AdminViewBasicTest)",
                            "test_date_hierarchy_timezone_dst (admin_views.tests.AdminViewBasicTest)",
                            "test_disallowed_filtering (admin_views.tests.AdminViewBasicTest)",
                            "test_disallowed_to_field (admin_views.tests.AdminViewBasicTest)",
                            "test_display_decorator_with_boolean_and_empty_value (admin_views.tests.AdminViewBasicTest)",
                            "Test \"save as\".",
                            "Should be able to \"Save as new\" while also deleting an inline.",
                            "test_formset_kwargs_can_be_overridden (admin_views.tests.AdminViewBasicTest)",
                            "test_get_sortable_by_columns_subset (admin_views.tests.AdminViewBasicTest)",
                            "test_get_sortable_by_no_column (admin_views.tests.AdminViewBasicTest)",
                            "Joins shouldn't be performed for <FK>_id fields in list display.",
                            "Joins shouldn't be performed for <O2O>_id fields in list display.",
                            "Tests if the \"change password\" link in the admin is hidden if the User",
                            "Check if the JavaScript i18n view returns an empty language catalog",
                            "Makes sure that the fallback language is still working properly",
                            "Ensure incorrect lookup parameters are handled gracefully.",
                            "#21056 -- URL reversing shouldn't work for nonexistent apps.",
                            "Ensure is_null is handled correctly.",
                            "The JavaScript i18n view doesn't return localized date/time formats",
                            "test_jsi18n_with_context (admin_views.tests.AdminViewBasicTest)",
                            "Ensure admin changelist filters do not contain objects excluded via limit_choices_to.",
                            "test_logout_and_password_change_URLs (admin_views.tests.AdminViewBasicTest)",
                            "test_multiple_sort_same_field (admin_views.tests.AdminViewBasicTest)",
                            "Ensures the admin changelist shows correct values in the relevant column",
                            "Ensures the filter UI shows correctly when at least one named group has",
                            "Ensure http response from a popup is properly escaped.",
                            "Regression test for ticket 20664 - ensure the pk is properly quoted.",
                            "test_relation_spanning_filters (admin_views.tests.AdminViewBasicTest)",
                            "test_render_views_no_subtitle (admin_views.tests.AdminViewBasicTest)",
                            "test_resolve_admin_views (admin_views.tests.AdminViewBasicTest)",
                            "The admin shows default sort indicators for all kinds of 'ordering'",
                            "test_sortable_by_columns_subset (admin_views.tests.AdminViewBasicTest)",
                            "test_sortable_by_no_column (admin_views.tests.AdminViewBasicTest)",
                            "If you leave off the trailing slash, app should redirect and add it.",
                            "test_view_subtitle_per_object (admin_views.tests.AdminViewBasicTest)"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "sympy__sympy-24723.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "test_MatrixNormal"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "test_MatrixPSpace",
                            "test_MatrixGamma",
                            "test_Wishart",
                            "test_MatrixStudentT"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "sphinx-doc__sphinx-8058.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "tests/test_build_gettext.py::test_build_single_pot"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "tests/test_build_gettext.py::test_build_gettext",
                            "tests/test_build_gettext.py::test_gettext_index_entries",
                            "tests/test_build_gettext.py::test_gettext_disable_index_entries",
                            "tests/test_build_gettext.py::test_gettext_template",
                            "tests/test_build_gettext.py::test_gettext_template_msgid_order_in_sphinxpot"
                        ],
                        "failure": [
                            "tests/test_build_gettext.py::test_msgfmt"
                        ]
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "astropy__astropy-11693.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "astropy/wcs/wcsapi/tests/test_fitswcs.py::test_non_convergence_warning"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "astropy/wcs/wcsapi/tests/test_fitswcs.py::test_empty",
                            "astropy/wcs/wcsapi/tests/test_fitswcs.py::test_simple_celestial",
                            "astropy/wcs/wcsapi/tests/test_fitswcs.py::test_time_1d_values[tai]",
                            "astropy/wcs/wcsapi/tests/test_fitswcs.py::test_time_1d_values[tcb]",
                            "astropy/wcs/wcsapi/tests/test_fitswcs.py::test_time_1d_values[tcg]",
                            "astropy/wcs/wcsapi/tests/test_fitswcs.py::test_time_1d_values[tdb]",
                            "astropy/wcs/wcsapi/tests/test_fitswcs.py::test_time_1d_values[tt]",
                            "astropy/wcs/wcsapi/tests/test_fitswcs.py::test_time_1d_values[ut1]",
                            "astropy/wcs/wcsapi/tests/test_fitswcs.py::test_time_1d_values[utc]",
                            "astropy/wcs/wcsapi/tests/test_fitswcs.py::test_time_1d_values[local]",
                            "astropy/wcs/wcsapi/tests/test_fitswcs.py::test_time_1d_values_gps",
                            "astropy/wcs/wcsapi/tests/test_fitswcs.py::test_time_1d_values_deprecated",
                            "astropy/wcs/wcsapi/tests/test_fitswcs.py::test_time_1d_values_time",
                            "astropy/wcs/wcsapi/tests/test_fitswcs.py::test_time_1d_high_precision",
                            "astropy/wcs/wcsapi/tests/test_fitswcs.py::test_time_1d_location_geodetic",
                            "astropy/wcs/wcsapi/tests/test_fitswcs.py::test_time_1d_location_geocentric",
                            "astropy/wcs/wcsapi/tests/test_fitswcs.py::test_time_1d_location_geocenter",
                            "astropy/wcs/wcsapi/tests/test_fitswcs.py::test_time_1d_location_missing",
                            "astropy/wcs/wcsapi/tests/test_fitswcs.py::test_time_1d_location_incomplete",
                            "astropy/wcs/wcsapi/tests/test_fitswcs.py::test_time_1d_location_unsupported",
                            "astropy/wcs/wcsapi/tests/test_fitswcs.py::test_time_1d_unsupported_ctype",
                            "astropy/wcs/wcsapi/tests/test_fitswcs.py::test_unrecognized_unit",
                            "astropy/wcs/wcsapi/tests/test_fitswcs.py::test_distortion_correlations",
                            "astropy/wcs/wcsapi/tests/test_fitswcs.py::test_custom_ctype_to_ucd_mappings",
                            "astropy/wcs/wcsapi/tests/test_fitswcs.py::test_caching_components_and_classes",
                            "astropy/wcs/wcsapi/tests/test_fitswcs.py::test_sub_wcsapi_attributes",
                            "astropy/wcs/wcsapi/tests/test_fitswcs.py::test_phys_type_polarization"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "psf__requests-2931.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "test_requests.py::TestRequests::test_binary_put"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "test_requests.py::TestRequests::test_entry_points",
                            "test_requests.py::TestRequests::test_invalid_url",
                            "test_requests.py::TestRequests::test_basic_building",
                            "test_requests.py::TestRequests::test_path_is_not_double_encoded",
                            "test_requests.py::TestRequests::test_params_are_added_before_fragment",
                            "test_requests.py::TestRequests::test_params_original_order_is_preserved_by_default",
                            "test_requests.py::TestRequests::test_params_bytes_are_encoded",
                            "test_requests.py::TestRequests::test_connection_error_invalid_domain",
                            "test_requests.py::TestRequests::test_connection_error_invalid_port",
                            "test_requests.py::TestRequests::test_LocationParseError",
                            "test_requests.py::TestRequests::test_links",
                            "test_requests.py::TestRequests::test_cookie_parameters",
                            "test_requests.py::TestRequests::test_cookie_as_dict_keeps_len",
                            "test_requests.py::TestRequests::test_cookie_as_dict_keeps_items",
                            "test_requests.py::TestRequests::test_cookie_as_dict_keys",
                            "test_requests.py::TestRequests::test_cookie_as_dict_values",
                            "test_requests.py::TestRequests::test_cookie_as_dict_items",
                            "test_requests.py::TestRequests::test_response_is_iterable",
                            "test_requests.py::TestRequests::test_response_decode_unicode",
                            "test_requests.py::TestRequests::test_get_auth_from_url",
                            "test_requests.py::TestRequests::test_get_auth_from_url_encoded_spaces",
                            "test_requests.py::TestRequests::test_get_auth_from_url_not_encoded_spaces",
                            "test_requests.py::TestRequests::test_get_auth_from_url_percent_chars",
                            "test_requests.py::TestRequests::test_get_auth_from_url_encoded_hashes",
                            "test_requests.py::TestRequests::test_http_error",
                            "test_requests.py::TestRequests::test_transport_adapter_ordering",
                            "test_requests.py::TestRequests::test_long_authinfo_in_url",
                            "test_requests.py::TestRequests::test_nonhttp_schemes_dont_check_URLs",
                            "test_requests.py::TestRequests::test_basic_auth_str_is_always_native",
                            "test_requests.py::TestContentEncodingDetection::test_html4_pragma",
                            "test_requests.py::TestContentEncodingDetection::test_html_charset",
                            "test_requests.py::TestContentEncodingDetection::test_none",
                            "test_requests.py::TestContentEncodingDetection::test_precedence",
                            "test_requests.py::TestContentEncodingDetection::test_xhtml_pragma",
                            "test_requests.py::TestContentEncodingDetection::test_xml",
                            "test_requests.py::TestCaseInsensitiveDict::test_contains",
                            "test_requests.py::TestCaseInsensitiveDict::test_copy",
                            "test_requests.py::TestCaseInsensitiveDict::test_delitem",
                            "test_requests.py::TestCaseInsensitiveDict::test_docstring_example",
                            "test_requests.py::TestCaseInsensitiveDict::test_equality",
                            "test_requests.py::TestCaseInsensitiveDict::test_fixes_649",
                            "test_requests.py::TestCaseInsensitiveDict::test_get",
                            "test_requests.py::TestCaseInsensitiveDict::test_getitem",
                            "test_requests.py::TestCaseInsensitiveDict::test_iter",
                            "test_requests.py::TestCaseInsensitiveDict::test_iterable_init",
                            "test_requests.py::TestCaseInsensitiveDict::test_kwargs_init",
                            "test_requests.py::TestCaseInsensitiveDict::test_len",
                            "test_requests.py::TestCaseInsensitiveDict::test_lower_items",
                            "test_requests.py::TestCaseInsensitiveDict::test_mapping_init",
                            "test_requests.py::TestCaseInsensitiveDict::test_preserve_key_case",
                            "test_requests.py::TestCaseInsensitiveDict::test_preserve_last_key_case",
                            "test_requests.py::TestCaseInsensitiveDict::test_setdefault",
                            "test_requests.py::TestCaseInsensitiveDict::test_update",
                            "test_requests.py::TestCaseInsensitiveDict::test_update_retains_unchanged",
                            "test_requests.py::UtilsTestCase::test_address_in_network",
                            "test_requests.py::UtilsTestCase::test_dotted_netmask",
                            "test_requests.py::UtilsTestCase::test_get_auth_from_url",
                            "test_requests.py::UtilsTestCase::test_get_environ_proxies",
                            "test_requests.py::UtilsTestCase::test_get_environ_proxies_ip_ranges",
                            "test_requests.py::UtilsTestCase::test_guess_filename_when_filename_is_an_int",
                            "test_requests.py::UtilsTestCase::test_guess_filename_when_int",
                            "test_requests.py::UtilsTestCase::test_guess_filename_with_file_like_obj",
                            "test_requests.py::UtilsTestCase::test_guess_filename_with_unicode_name",
                            "test_requests.py::UtilsTestCase::test_is_ipv4_address",
                            "test_requests.py::UtilsTestCase::test_is_valid_cidr",
                            "test_requests.py::UtilsTestCase::test_requote_uri_properly_requotes",
                            "test_requests.py::UtilsTestCase::test_requote_uri_with_unquoted_percents",
                            "test_requests.py::UtilsTestCase::test_select_proxies",
                            "test_requests.py::UtilsTestCase::test_super_len_correctly_calculates_len_of_partially_read_file",
                            "test_requests.py::UtilsTestCase::test_super_len_io_streams",
                            "test_requests.py::TestMorselToCookieExpires::test_expires_invalid_int",
                            "test_requests.py::TestMorselToCookieExpires::test_expires_invalid_str",
                            "test_requests.py::TestMorselToCookieExpires::test_expires_none",
                            "test_requests.py::TestMorselToCookieExpires::test_expires_valid_str",
                            "test_requests.py::TestMorselToCookieMaxAge::test_max_age_invalid_str",
                            "test_requests.py::TestMorselToCookieMaxAge::test_max_age_valid_int",
                            "test_requests.py::TestTimeout::test_connect_timeout",
                            "test_requests.py::TestTimeout::test_total_timeout_connect",
                            "test_requests.py::test_data_argument_accepts_tuples",
                            "test_requests.py::test_prepared_request_empty_copy",
                            "test_requests.py::test_prepared_request_no_cookies_copy",
                            "test_requests.py::test_prepared_request_complete_copy",
                            "test_requests.py::test_prepare_unicode_url",
                            "test_requests.py::test_vendor_aliases"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "pylint-dev__pylint-8124.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "tests/checkers/unittest_imports.py::TestImportsChecker::test_allow_reexport_package"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "tests/checkers/unittest_imports.py::TestImportsChecker::test_relative_beyond_top_level",
                            "tests/checkers/unittest_imports.py::TestImportsChecker::test_relative_beyond_top_level_two",
                            "tests/checkers/unittest_imports.py::TestImportsChecker::test_relative_beyond_top_level_three",
                            "tests/checkers/unittest_imports.py::TestImportsChecker::test_relative_beyond_top_level_four",
                            "tests/checkers/unittest_imports.py::TestImportsChecker::test_wildcard_import_init",
                            "tests/checkers/unittest_imports.py::TestImportsChecker::test_wildcard_import_non_init",
                            "tests/checkers/unittest_imports.py::TestImportsChecker::test_preferred_module"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "pytest-dev__pytest-6214.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "testing/python/setup_plan.py::test_show_multi_test_fixture_setup_and_teardown_correctly_simple",
                            "testing/python/setup_plan.py::test_show_multi_test_fixture_setup_and_teardown_same_as_setup_show"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "testing/python/setup_plan.py::test_show_fixtures_and_test"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "django__django-5158.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "alternate: django-admin can't execute user commands unless settings are provided",
                            "default: django-admin can't execute user commands if it isn't provided settings",
                            "fulldefault: django-admin can't execute user commands unless settings are provided",
                            "minimal: django-admin can't execute user commands unless settings are provided",
                            "directory: django-admin can't execute user commands unless settings are provided"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "test_custom_project_destination_missing (admin_scripts.tests.StartProject)",
                            "Make sure the startproject management command is able to use a different project template",
                            "Make sure template context variables are rendered with proper values",
                            "Make sure the startproject management command is able to use a different project template from a tarball",
                            "Make sure the startproject management command is able to use a different project template from a tarball via a url",
                            "Startproject can use a project template from a tarball and create it in a specified location",
                            "Ticket 18091: Make sure the startproject management command is able to render templates with non-ASCII content",
                            "Make sure the startproject management command is able to render custom files",
                            "Make sure the startproject management command validates a project name",
                            "Make sure template context variables are not html escaped",
                            "Startproject management command handles project template tar/zip balls from non-canonical urls",
                            "Make sure the startproject management command creates a project",
                            "Make sure the startproject management command creates a project in a specific directory",
                            "Ticket 17475: Template dir passed has a trailing path separator",
                            "Make sure passing the wrong kinds of arguments outputs an error and prints usage",
                            "Options passed before settings are correctly handled.",
                            "Options are correctly handled when they are passed before and after",
                            "Options passed after settings are correctly handled.",
                            "Short options passed after settings are correctly handled.",
                            "Short options passed before settings are correctly handled.",
                            "User AppCommands can execute when a single app name is provided",
                            "User AppCommands raise an error when multiple app names are provided",
                            "User AppCommands raise an error when no app name is provided",
                            "User AppCommands can execute when some of the provided app names are invalid",
                            "User BaseCommands can execute when a label is provided",
                            "User BaseCommands can execute when no labels are provided",
                            "User BaseCommands can execute with options when a label is provided",
                            "User BaseCommands can execute with multiple options when a label is provided",
                            "User BaseCommands outputs command usage when wrong option is specified",
                            "test_base_run_from_argv (admin_scripts.tests.CommandTypes)",
                            "test_color_style (admin_scripts.tests.CommandTypes)",
                            "test_command_color (admin_scripts.tests.CommandTypes)",
                            "--no-color prevent colorization of the output",
                            "test_custom_stderr (admin_scripts.tests.CommandTypes)",
                            "test_custom_stdout (admin_scripts.tests.CommandTypes)",
                            "help is handled as a special case",
                            "--help is equivalent to help",
                            "help --commands shows the list of all available commands",
                            "-h is handled as a short form of --help",
                            "User LabelCommands can execute when a label is provided",
                            "User LabelCommands are executed multiple times if multiple labels are provided",
                            "User LabelCommands raise an error if no label is provided",
                            "NoArg Commands can be executed",
                            "NoArg Commands raise an error if an argument is provided",
                            "test_run_from_argv_closes_connections (admin_scripts.tests.CommandTypes)",
                            "test_run_from_argv_non_ascii_error (admin_scripts.tests.CommandTypes)",
                            "--help can be used on a specific command",
                            "version is handled as a special case",
                            "--version is equivalent to version",
                            "The all option also shows settings with the default value.",
                            "Runs without error and emits settings diff.",
                            "alternate: django-admin builtin commands fail with an error when no settings provided",
                            "alternate: django-admin builtin commands fail if settings file (from environment) doesn't exist",
                            "alternate: django-admin builtin commands fail if settings file (from argument) doesn't exist",
                            "alternate: django-admin builtin commands succeed if settings are provided in the environment",
                            "alternate: django-admin builtin commands succeed if settings are provided as argument",
                            "alternate: django-admin can execute user commands if settings are provided in environment",
                            "alternate: django-admin can execute user commands if settings are provided as argument",
                            "default: django-admin builtin commands fail with an error when no settings provided",
                            "default: django-admin builtin commands fail if settings file (from environment) doesn't exist",
                            "default: django-admin builtin commands fail if settings file (from argument) doesn't exist",
                            "default: django-admin builtin commands succeed if settings are provided in the environment",
                            "default: django-admin builtin commands succeed if settings are provided as argument",
                            "default: django-admin can execute user commands if settings are provided in environment",
                            "default: django-admin can execute user commands if settings are provided as argument",
                            "fulldefault: django-admin builtin commands fail with an error when no settings provided",
                            "fulldefault: django-admin builtin commands fail if settings file (from environment) doesn't exist",
                            "fulldefault: django-admin builtin commands fail if settings file (from argument) doesn't exist",
                            "fulldefault: django-admin builtin commands succeed if the environment contains settings",
                            "fulldefault: django-admin builtin commands succeed if a settings file is provided",
                            "fulldefault: django-admin can execute user commands if settings are provided in environment",
                            "fulldefault: django-admin can execute user commands if settings are provided as argument",
                            "minimal: django-admin builtin commands fail with an error when no settings provided",
                            "minimal: django-admin builtin commands fail if settings file (from environment) doesn't exist",
                            "minimal: django-admin builtin commands fail if settings file (from argument) doesn't exist",
                            "minimal: django-admin builtin commands fail if settings are provided in the environment",
                            "minimal: django-admin builtin commands fail if settings are provided as argument",
                            "minimal: django-admin can't execute user commands, even if settings are provided in environment",
                            "minimal: django-admin can't execute user commands, even if settings are provided as argument",
                            "no settings: django-admin builtin commands fail with an error when no settings provided",
                            "no settings: django-admin builtin commands fail if settings file (from environment) doesn't exist",
                            "no settings: django-admin builtin commands fail if settings file (from argument) doesn't exist",
                            "directory: django-admin builtin commands fail with an error when no settings provided",
                            "directory: django-admin builtin commands fail if settings file (from environment) doesn't exist",
                            "directory: django-admin builtin commands fail if settings file (from argument) doesn't exist",
                            "directory: django-admin builtin commands succeed if settings are provided in the environment",
                            "directory: django-admin builtin commands succeed if settings are provided as argument",
                            "directory: startapp creates the correct directory",
                            "directory: startapp creates the correct directory with a custom template",
                            "Regression for #20509",
                            "alternate: manage.py builtin commands fail with an error when no default settings provided",
                            "alternate: manage.py builtin commands fail if settings file (from environment) doesn't exist",
                            "alternate: manage.py builtin commands fail if settings file (from argument) doesn't exist",
                            "alternate: manage.py builtin commands work if settings are provided in the environment",
                            "alternate: manage.py builtin commands work with settings provided as argument",
                            "alternate: manage.py can't execute user commands without settings",
                            "alternate: manage.py output syntax color can be deactivated with the `--no-color` option",
                            "alternate: manage.py can execute user commands if settings are provided in environment",
                            "alternate: manage.py can execute user commands if settings are provided as argument",
                            "manage.py check does not raise errors when an app imports a base",
                            "manage.py check reports an ImportError if an app's models.py",
                            "manage.py check does not raise an ImportError validating a",
                            "manage.py check reports an error on a non-existent app in",
                            "All errors/warnings should be sorted by level and by message.",
                            "test_warning_does_not_halt (admin_scripts.tests.ManageCheck)",
                            "default: manage.py builtin commands succeed when default settings are appropriate",
                            "default: manage.py builtin commands fail if settings file (from environment) doesn't exist",
                            "default: manage.py builtin commands succeed if settings file (from argument) doesn't exist",
                            "default: manage.py builtin commands succeed if settings are provided in the environment",
                            "default: manage.py builtin commands succeed if settings are provided as argument",
                            "default: manage.py can execute user commands when default settings are appropriate",
                            "default: manage.py can execute user commands when settings are provided in environment",
                            "default: manage.py can execute user commands when settings are provided as argument",
                            "fulldefault: manage.py builtin commands succeed when default settings are appropriate",
                            "fulldefault: manage.py builtin commands fail if settings file (from environment) doesn't exist",
                            "fulldefault: manage.py builtin commands succeed if settings file (from argument) doesn't exist",
                            "fulldefault: manage.py builtin commands succeed if settings are provided in the environment",
                            "fulldefault: manage.py builtin commands succeed if settings are provided as argument",
                            "fulldefault: manage.py can execute user commands when default settings are appropriate",
                            "fulldefault: manage.py can execute user commands when settings are provided in environment",
                            "fulldefault: manage.py can execute user commands when settings are provided as argument",
                            "minimal: manage.py builtin commands fail with an error when no settings provided",
                            "minimal: manage.py builtin commands fail if settings file (from environment) doesn't exist",
                            "minimal: manage.py builtin commands fail if settings file (from argument) doesn't exist",
                            "minimal: manage.py builtin commands fail if settings are provided in the environment",
                            "minimal: manage.py builtin commands fail if settings are provided as argument",
                            "minimal: manage.py can't execute user commands without appropriate settings",
                            "minimal: manage.py can't execute user commands, even if settings are provided in environment",
                            "minimal: manage.py can't execute user commands, even if settings are provided as argument",
                            "multiple: manage.py builtin commands fail with an error when no settings provided",
                            "multiple: manage.py builtin commands fail if settings file (from environment) doesn't exist",
                            "multiple: manage.py builtin commands fail if settings file (from argument) doesn't exist",
                            "multiple: manage.py can execute builtin commands if settings are provided in the environment",
                            "multiple: manage.py builtin commands succeed if settings are provided as argument",
                            "multiple: manage.py can't execute user commands using default settings",
                            "multiple: manage.py can execute user commands if settings are provided in environment",
                            "multiple: manage.py can execute user commands if settings are provided as argument",
                            "no settings: manage.py builtin commands fail with an error when no settings provided",
                            "no settings: manage.py builtin commands fail if settings file (from environment) doesn't exist",
                            "no settings: manage.py builtin commands fail if settings file (from argument) doesn't exist",
                            "test_no_database (admin_scripts.tests.ManageRunserver)",
                            "test_readonly_database (admin_scripts.tests.ManageRunserver)",
                            "test_runner_addrport_ipv6 (admin_scripts.tests.ManageRunserver)",
                            "test_runner_ambiguous (admin_scripts.tests.ManageRunserver)",
                            "test_runner_hostname (admin_scripts.tests.ManageRunserver)",
                            "test_runner_hostname_ipv6 (admin_scripts.tests.ManageRunserver)",
                            "test_runserver_addrport (admin_scripts.tests.ManageRunserver)",
                            "test_empty_allowed_hosts_error (admin_scripts.tests.ManageRunserverEmptyAllowedHosts)",
                            "test_attribute_error (admin_scripts.tests.ManageSettingsWithSettingsErrors)",
                            "test_help (admin_scripts.tests.ManageSettingsWithSettingsErrors)",
                            "test_import_error (admin_scripts.tests.ManageSettingsWithSettingsErrors)",
                            "test_key_error (admin_scripts.tests.ManageSettingsWithSettingsErrors)",
                            "test_liveserver (admin_scripts.tests.ManageTestCommand)",
                            "test_testserver_handle_params (admin_scripts.tests.ManageTestserver)"
                        ],
                        "failure": [
                            "test_precedence (admin_scripts.tests.Discovery)"
                        ]
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "matplotlib__matplotlib-23742.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "lib/matplotlib/tests/test_backend_webagg.py::test_webagg_core_no_toolbar"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "lib/matplotlib/tests/test_backend_webagg.py::test_webagg_fallback[webagg]",
                            "lib/matplotlib/tests/test_backend_webagg.py::test_webagg_fallback[nbagg]"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "pytest-dev__pytest-7468.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "testing/logging/test_reporting.py::test_log_file_cli_subdirectories_are_successfully_created"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "[100%]",
                            "[",
                            "[100%]------------------------------",
                            "testing/logging/test_reporting.py::test_live_logging_suspends_capture[True]",
                            "testing/logging/test_reporting.py::test_live_logging_suspends_capture[False]",
                            "testing/logging/test_reporting.py::test_nothing_logged",
                            "testing/logging/test_reporting.py::test_messages_logged",
                            "testing/logging/test_reporting.py::test_root_logger_affected",
                            "testing/logging/test_reporting.py::test_log_cli_level_log_level_interaction",
                            "testing/logging/test_reporting.py::test_setup_logging",
                            "testing/logging/test_reporting.py::test_teardown_logging",
                            "testing/logging/test_reporting.py::test_log_cli_enabled_disabled[True]",
                            "testing/logging/test_reporting.py::test_log_cli_enabled_disabled[False]",
                            "testing/logging/test_reporting.py::test_log_cli_default_level",
                            "testing/logging/test_reporting.py::test_log_cli_default_level_multiple_tests",
                            "testing/logging/test_reporting.py::test_log_cli_default_level_sections",
                            "testing/logging/test_reporting.py::test_live_logs_unknown_sections",
                            "testing/logging/test_reporting.py::test_sections_single_new_line_after_test_outcome",
                            "testing/logging/test_reporting.py::test_log_cli_level",
                            "testing/logging/test_reporting.py::test_log_cli_ini_level",
                            "testing/logging/test_reporting.py::test_log_cli_auto_enable[]",
                            "testing/logging/test_reporting.py::test_log_cli_auto_enable[--log-level=WARNING]",
                            "testing/logging/test_reporting.py::test_log_cli_auto_enable[--log-file-level=WARNING]",
                            "testing/logging/test_reporting.py::test_log_cli_auto_enable[--log-cli-level=WARNING]",
                            "testing/logging/test_reporting.py::test_log_file_cli",
                            "testing/logging/test_reporting.py::test_log_file_cli_level",
                            "testing/logging/test_reporting.py::test_log_level_not_changed_by_default",
                            "testing/logging/test_reporting.py::test_log_file_ini",
                            "testing/logging/test_reporting.py::test_log_file_ini_level",
                            "testing/logging/test_reporting.py::test_log_file_unicode",
                            "testing/logging/test_reporting.py::test_collection_live_logging",
                            "testing/logging/test_reporting.py::test_collection_collect_only_live_logging[]",
                            "testing/logging/test_reporting.py::test_collection_collect_only_live_logging[-q]",
                            "testing/logging/test_reporting.py::test_collection_collect_only_live_logging[-qq]",
                            "testing/logging/test_reporting.py::test_collection_logging_to_file",
                            "testing/logging/test_reporting.py::test_log_in_hooks",
                            "testing/logging/test_reporting.py::test_log_in_runtest_logreport",
                            "testing/logging/test_reporting.py::test_log_set_path",
                            "testing/logging/test_reporting.py::test_colored_captured_log",
                            "testing/logging/test_reporting.py::test_colored_ansi_esc_caplogtext",
                            "testing/logging/test_reporting.py::test_logging_emit_error",
                            "testing/logging/test_reporting.py::test_logging_emit_error_supressed"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "scikit-learn__scikit-learn-13915.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_upcast[dense-dense-None]",
                            "sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_upcast[dense-dense-5]",
                            "sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_upcast[dense-dense-7]",
                            "sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_upcast[dense-dense-101]",
                            "sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_upcast[dense-sparse-None]",
                            "sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_upcast[dense-sparse-5]",
                            "sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_upcast[dense-sparse-7]",
                            "sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_upcast[dense-sparse-101]",
                            "sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_upcast[sparse-dense-None]",
                            "sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_upcast[sparse-dense-5]",
                            "sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_upcast[sparse-dense-7]",
                            "sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_upcast[sparse-dense-101]",
                            "sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_upcast[sparse-sparse-None]",
                            "sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_upcast[sparse-sparse-5]",
                            "sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_upcast[sparse-sparse-7]",
                            "sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_upcast[sparse-sparse-101]",
                            "sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_upcast_sym[dense-None]",
                            "sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_upcast_sym[dense-5]",
                            "sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_upcast_sym[dense-7]",
                            "sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_upcast_sym[dense-101]",
                            "sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_upcast_sym[sparse-None]",
                            "sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_upcast_sym[sparse-5]",
                            "sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_upcast_sym[sparse-7]",
                            "sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_upcast_sym[sparse-101]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_feature_names_drop[first]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_feature_names_drop[manual]"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "sklearn/cross_decomposition/tests/test_pls.py::test_pls",
                            "sklearn/cross_decomposition/tests/test_pls.py::test_convergence_fail",
                            "sklearn/cross_decomposition/tests/test_pls.py::test_PLSSVD",
                            "sklearn/cross_decomposition/tests/test_pls.py::test_univariate_pls_regression",
                            "sklearn/cross_decomposition/tests/test_pls.py::test_predict_transform_copy",
                            "sklearn/cross_decomposition/tests/test_pls.py::test_scale_and_stability",
                            "sklearn/cross_decomposition/tests/test_pls.py::test_pls_errors",
                            "sklearn/cross_decomposition/tests/test_pls.py::test_pls_scaling",
                            "sklearn/decomposition/tests/test_fastica.py::test_gs",
                            "sklearn/decomposition/tests/test_fastica.py::test_fastica_simple[0-True]",
                            "sklearn/decomposition/tests/test_fastica.py::test_fastica_simple[0-False]",
                            "sklearn/decomposition/tests/test_fastica.py::test_fastica_nowhiten",
                            "sklearn/decomposition/tests/test_fastica.py::test_fastica_convergence_fail",
                            "sklearn/decomposition/tests/test_fastica.py::test_non_square_fastica",
                            "sklearn/decomposition/tests/test_fastica.py::test_fit_transform",
                            "sklearn/decomposition/tests/test_fastica.py::test_inverse_transform",
                            "sklearn/decomposition/tests/test_fastica.py::test_fastica_errors",
                            "sklearn/linear_model/tests/test_least_angle.py::test_simple",
                            "sklearn/linear_model/tests/test_least_angle.py::test_simple_precomputed",
                            "sklearn/linear_model/tests/test_least_angle.py::test_lars_path_gram_equivalent[True-lar]",
                            "sklearn/linear_model/tests/test_least_angle.py::test_lars_path_gram_equivalent[True-lasso]",
                            "sklearn/linear_model/tests/test_least_angle.py::test_lars_path_gram_equivalent[False-lar]",
                            "sklearn/linear_model/tests/test_least_angle.py::test_lars_path_gram_equivalent[False-lasso]",
                            "sklearn/linear_model/tests/test_least_angle.py::test_x_none_gram_none_raises_value_error",
                            "sklearn/linear_model/tests/test_least_angle.py::test_all_precomputed",
                            "sklearn/linear_model/tests/test_least_angle.py::test_lars_lstsq",
                            "sklearn/linear_model/tests/test_least_angle.py::test_lasso_gives_lstsq_solution",
                            "sklearn/linear_model/tests/test_least_angle.py::test_collinearity",
                            "sklearn/linear_model/tests/test_least_angle.py::test_no_path",
                            "sklearn/linear_model/tests/test_least_angle.py::test_no_path_precomputed",
                            "sklearn/linear_model/tests/test_least_angle.py::test_no_path_all_precomputed",
                            "sklearn/linear_model/tests/test_least_angle.py::test_lars_precompute[Lars]",
                            "sklearn/linear_model/tests/test_least_angle.py::test_lars_precompute[LarsCV]",
                            "sklearn/linear_model/tests/test_least_angle.py::test_lars_precompute[LassoLarsIC]",
                            "sklearn/linear_model/tests/test_least_angle.py::test_singular_matrix",
                            "sklearn/linear_model/tests/test_least_angle.py::test_rank_deficient_design",
                            "sklearn/linear_model/tests/test_least_angle.py::test_lasso_lars_vs_lasso_cd",
                            "sklearn/linear_model/tests/test_least_angle.py::test_lasso_lars_vs_lasso_cd_early_stopping",
                            "sklearn/linear_model/tests/test_least_angle.py::test_lasso_lars_path_length",
                            "sklearn/linear_model/tests/test_least_angle.py::test_lasso_lars_vs_lasso_cd_ill_conditioned",
                            "sklearn/linear_model/tests/test_least_angle.py::test_lasso_lars_vs_lasso_cd_ill_conditioned2",
                            "sklearn/linear_model/tests/test_least_angle.py::test_lars_add_features",
                            "sklearn/linear_model/tests/test_least_angle.py::test_lars_n_nonzero_coefs",
                            "sklearn/linear_model/tests/test_least_angle.py::test_multitarget",
                            "sklearn/linear_model/tests/test_least_angle.py::test_lars_cv",
                            "sklearn/linear_model/tests/test_least_angle.py::test_lars_cv_max_iter",
                            "sklearn/linear_model/tests/test_least_angle.py::test_lasso_lars_ic",
                            "sklearn/linear_model/tests/test_least_angle.py::test_lars_path_readonly_data",
                            "sklearn/linear_model/tests/test_least_angle.py::test_lars_path_positive_constraint",
                            "sklearn/linear_model/tests/test_least_angle.py::test_estimatorclasses_positive_constraint",
                            "sklearn/linear_model/tests/test_least_angle.py::test_lasso_lars_vs_lasso_cd_positive",
                            "sklearn/linear_model/tests/test_least_angle.py::test_lasso_lars_vs_R_implementation",
                            "sklearn/linear_model/tests/test_least_angle.py::test_lasso_lars_copyX_behaviour[True]",
                            "sklearn/linear_model/tests/test_least_angle.py::test_lasso_lars_copyX_behaviour[False]",
                            "sklearn/linear_model/tests/test_least_angle.py::test_lasso_lars_fit_copyX_behaviour[True]",
                            "sklearn/linear_model/tests/test_least_angle.py::test_lasso_lars_fit_copyX_behaviour[False]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_boolean_distance[dice]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_boolean_distance[jaccard]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_boolean_distance[kulsinski]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_boolean_distance[matching]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_boolean_distance[rogerstanimoto]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_boolean_distance[russellrao]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_boolean_distance[sokalmichener]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_boolean_distance[sokalsneath]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_boolean_distance[yule]",
                            "sklearn/metrics/tests/test_pairwise.py::test_no_data_conversion_warning",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_precomputed[pairwise_distances]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_precomputed[pairwise_kernels]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_precomputed_non_negative",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_parallel[float64-csr_matrix-pairwise_distances-euclidean-kwds0]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_parallel[float64-csr_matrix-pairwise_distances-wminkowski-kwds1]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_parallel[float64-csr_matrix-pairwise_distances-wminkowski-kwds2]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_parallel[float64-csr_matrix-pairwise_kernels-polynomial-kwds3]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_parallel[float64-csr_matrix-pairwise_kernels-callable_rbf_kernel-kwds4]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_parallel[int-csr_matrix-pairwise_distances-euclidean-kwds0]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_parallel[int-csr_matrix-pairwise_distances-wminkowski-kwds1]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_parallel[int-csr_matrix-pairwise_distances-wminkowski-kwds2]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_parallel[int-csr_matrix-pairwise_kernels-polynomial-kwds3]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_parallel[int-csr_matrix-pairwise_kernels-callable_rbf_kernel-kwds4]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_callable_nonstrict_metric",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_kernels[rbf]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_kernels[laplacian]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_kernels[sigmoid]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_kernels[polynomial]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_kernels[linear]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_kernels[chi2]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_kernels[additive_chi2]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_kernels_callable",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_kernels_filter_param",
                            "sklearn/metrics/tests/test_pairwise.py::test_paired_distances[cosine-paired_cosine_distances]",
                            "sklearn/metrics/tests/test_pairwise.py::test_paired_distances[euclidean-paired_euclidean_distances]",
                            "sklearn/metrics/tests/test_pairwise.py::test_paired_distances[l2-paired_euclidean_distances]",
                            "sklearn/metrics/tests/test_pairwise.py::test_paired_distances[l1-paired_manhattan_distances]",
                            "sklearn/metrics/tests/test_pairwise.py::test_paired_distances[manhattan-paired_manhattan_distances]",
                            "sklearn/metrics/tests/test_pairwise.py::test_paired_distances[cityblock-paired_manhattan_distances]",
                            "sklearn/metrics/tests/test_pairwise.py::test_paired_distances_callable",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_argmin_min",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_chunked_reduce",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_chunked_reduce_valid[<lambda>0]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_chunked_reduce_valid[<lambda>1]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_chunked_reduce_valid[<lambda>2]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_chunked_reduce_valid[<lambda>3]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_chunked_reduce_valid[<lambda>4]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_chunked_reduce_invalid[<lambda>-ValueError-length",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_chunked_reduce_invalid[<lambda>-TypeError-returned",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_chunked_reduce_invalid[<lambda>-TypeError-,",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_chunked_diagonal[euclidean]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_chunked_diagonal[l2]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_chunked_diagonal[sqeuclidean]",
                            "sklearn/metrics/tests/test_pairwise.py::test_parallel_pairwise_distances_diagonal[euclidean]",
                            "sklearn/metrics/tests/test_pairwise.py::test_parallel_pairwise_distances_diagonal[l2]",
                            "sklearn/metrics/tests/test_pairwise.py::test_parallel_pairwise_distances_diagonal[sqeuclidean]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_chunked",
                            "sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_known_result[dense-dense]",
                            "sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_known_result[dense-sparse]",
                            "sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_known_result[sparse-dense]",
                            "sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_known_result[sparse-sparse]",
                            "sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_with_norms[dense-float32]",
                            "sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_with_norms[dense-float64]",
                            "sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_with_norms[sparse-float32]",
                            "sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_with_norms[sparse-float64]",
                            "sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances[dense-dense-float32]",
                            "sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances[dense-dense-float64]",
                            "sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances[dense-sparse-float32]",
                            "sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances[dense-sparse-float64]",
                            "sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances[sparse-dense-float32]",
                            "sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances[sparse-dense-float64]",
                            "sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances[sparse-sparse-float32]",
                            "sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances[sparse-sparse-float64]",
                            "sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_sym[dense-float32]",
                            "sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_sym[dense-float64]",
                            "sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_sym[sparse-float32]",
                            "sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_sym[sparse-float64]",
                            "sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_extreme_values[1-float32-0.0001-1e-05]",
                            "sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_extreme_values[1000000-float32-0.0001-1e-05]",
                            "sklearn/metrics/tests/test_pairwise.py::test_cosine_distances",
                            "sklearn/metrics/tests/test_pairwise.py::test_haversine_distances",
                            "sklearn/metrics/tests/test_pairwise.py::test_paired_euclidean_distances",
                            "sklearn/metrics/tests/test_pairwise.py::test_paired_manhattan_distances",
                            "sklearn/metrics/tests/test_pairwise.py::test_chi_square_kernel",
                            "sklearn/metrics/tests/test_pairwise.py::test_kernel_symmetry[linear_kernel]",
                            "sklearn/metrics/tests/test_pairwise.py::test_kernel_symmetry[polynomial_kernel]",
                            "sklearn/metrics/tests/test_pairwise.py::test_kernel_symmetry[rbf_kernel]",
                            "sklearn/metrics/tests/test_pairwise.py::test_kernel_symmetry[laplacian_kernel]",
                            "sklearn/metrics/tests/test_pairwise.py::test_kernel_symmetry[sigmoid_kernel]",
                            "sklearn/metrics/tests/test_pairwise.py::test_kernel_symmetry[cosine_similarity]",
                            "sklearn/metrics/tests/test_pairwise.py::test_kernel_sparse[linear_kernel]",
                            "sklearn/metrics/tests/test_pairwise.py::test_kernel_sparse[polynomial_kernel]",
                            "sklearn/metrics/tests/test_pairwise.py::test_kernel_sparse[rbf_kernel]",
                            "sklearn/metrics/tests/test_pairwise.py::test_kernel_sparse[laplacian_kernel]",
                            "sklearn/metrics/tests/test_pairwise.py::test_kernel_sparse[sigmoid_kernel]",
                            "sklearn/metrics/tests/test_pairwise.py::test_kernel_sparse[cosine_similarity]",
                            "sklearn/metrics/tests/test_pairwise.py::test_linear_kernel",
                            "sklearn/metrics/tests/test_pairwise.py::test_rbf_kernel",
                            "sklearn/metrics/tests/test_pairwise.py::test_laplacian_kernel",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_similarity_sparse_output[linear-linear_kernel]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_similarity_sparse_output[cosine-cosine_similarity]",
                            "sklearn/metrics/tests/test_pairwise.py::test_cosine_similarity",
                            "sklearn/metrics/tests/test_pairwise.py::test_check_dense_matrices",
                            "sklearn/metrics/tests/test_pairwise.py::test_check_XB_returned",
                            "sklearn/metrics/tests/test_pairwise.py::test_check_different_dimensions",
                            "sklearn/metrics/tests/test_pairwise.py::test_check_invalid_dimensions",
                            "sklearn/metrics/tests/test_pairwise.py::test_check_sparse_arrays",
                            "sklearn/metrics/tests/test_pairwise.py::test_check_tuple_input",
                            "sklearn/metrics/tests/test_pairwise.py::test_check_preserve_type",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_data_derived_params[Y",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_sparse",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_dense",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_deprecationwarnings",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_force_new_behaviour",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_categorical_features",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_categorical_features_ignore_unknown",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_handle_unknown",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_not_fitted",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_no_categorical_features",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_handle_unknown_strings",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_dtype[int32-int32]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_dtype[int32-float32]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_dtype[int32-float64]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_dtype[float32-int32]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_dtype[float32-float32]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_dtype[float32-float64]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_dtype[float64-int32]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_dtype[float64-float32]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_dtype[float64-float64]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_dtype_pandas[int32]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_dtype_pandas[float32]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_dtype_pandas[float64]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_set_params",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder[mixed]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder[numeric]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder[object]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_inverse[None-False]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_inverse[None-True]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_inverse[first-False]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_inverse[first-True]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_X_is_not_1D[X0-fit]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_X_is_not_1D[X0-fit_transform]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_X_is_not_1D[X1-fit]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_X_is_not_1D[X1-fit_transform]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_X_is_not_1D_pandas[fit]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_X_is_not_1D_pandas[fit_transform]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_categories[mixed]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_categories[numeric]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_categories[object]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_categories[string]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_specified_categories[object]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_specified_categories[numeric]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_specified_categories[object-string-cat]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_unsorted_categories",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_specified_categories_mixed_columns",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_pandas",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_feature_names",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_feature_names_unicode",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_raise_missing[error-array-numeric]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_raise_missing[error-array-object]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_raise_missing[error-dataframe-numeric]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_raise_missing[error-dataframe-object]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_raise_missing[ignore-array-numeric]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_raise_missing[ignore-array-object]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_raise_missing[ignore-dataframe-numeric]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_raise_missing[ignore-dataframe-object]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_ordinal_encoder[mixed]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_ordinal_encoder[numeric]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_ordinal_encoder[object]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_ordinal_encoder_specified_categories[object]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_ordinal_encoder_specified_categories[numeric]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_ordinal_encoder_specified_categories[object-string-cat]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_ordinal_encoder_inverse",
                            "sklearn/preprocessing/tests/test_encoders.py::test_ordinal_encoder_raise_missing[numeric]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_ordinal_encoder_raise_missing[object]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_ordinal_encoder_raise_categories_shape",
                            "sklearn/preprocessing/tests/test_encoders.py::test_encoder_dtypes",
                            "sklearn/preprocessing/tests/test_encoders.py::test_encoder_dtypes_pandas",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_warning",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_drop_manual",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_invalid_params",
                            "sklearn/preprocessing/tests/test_encoders.py::test_invalid_drop_length[drop0]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_invalid_drop_length[drop1]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_categories[first-sparse]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_categories[first-dense]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_categories[manual-sparse]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_categories[manual-dense]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_mean_variance_axis0",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_mean_variance_axis1",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_incr_mean_variance_axis",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_incr_mean_variance_axis_ignore_nan[csc_matrix-0]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_incr_mean_variance_axis_ignore_nan[csc_matrix-1]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_incr_mean_variance_axis_ignore_nan[csr_matrix-0]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_incr_mean_variance_axis_ignore_nan[csr_matrix-1]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_mean_variance_illegal_axis",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_densify_rows",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_inplace_column_scale",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_inplace_row_scale",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_inplace_swap_row",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_inplace_swap_column",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max[True-0-amin-amax-False-csr_matrix-0-float32]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max[True-0-amin-amax-False-csr_matrix-0-float64]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max[True-0-amin-amax-False-csr_matrix-1-float32]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max[True-0-amin-amax-False-csr_matrix-1-float64]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max[True-0-amin-amax-False-csr_matrix-None-float32]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max[True-0-amin-amax-False-csr_matrix-None-float64]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max[True-0-amin-amax-False-csc_matrix-0-float32]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max[True-0-amin-amax-False-csc_matrix-0-float64]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max[True-0-amin-amax-False-csc_matrix-1-float32]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max[True-0-amin-amax-False-csc_matrix-1-float64]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max[True-0-amin-amax-False-csc_matrix-None-float32]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max[True-0-amin-amax-False-csc_matrix-None-float64]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max[True-nan-nanmin-nanmax-True-csr_matrix-0-float32]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max[True-nan-nanmin-nanmax-True-csr_matrix-0-float64]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max[True-nan-nanmin-nanmax-True-csr_matrix-1-float32]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max[True-nan-nanmin-nanmax-True-csr_matrix-1-float64]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max[True-nan-nanmin-nanmax-True-csr_matrix-None-float32]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max[True-nan-nanmin-nanmax-True-csr_matrix-None-float64]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max[True-nan-nanmin-nanmax-True-csc_matrix-0-float32]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max[True-nan-nanmin-nanmax-True-csc_matrix-0-float64]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max[True-nan-nanmin-nanmax-True-csc_matrix-1-float32]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max[True-nan-nanmin-nanmax-True-csc_matrix-1-float64]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max[True-nan-nanmin-nanmax-True-csc_matrix-None-float32]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max[True-nan-nanmin-nanmax-True-csc_matrix-None-float64]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max[False-0-amin-amax-False-csr_matrix-0-float32]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max[False-0-amin-amax-False-csr_matrix-0-float64]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max[False-0-amin-amax-False-csr_matrix-1-float32]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max[False-0-amin-amax-False-csr_matrix-1-float64]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max[False-0-amin-amax-False-csr_matrix-None-float32]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max[False-0-amin-amax-False-csr_matrix-None-float64]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max[False-0-amin-amax-False-csc_matrix-0-float32]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max[False-0-amin-amax-False-csc_matrix-0-float64]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max[False-0-amin-amax-False-csc_matrix-1-float32]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max[False-0-amin-amax-False-csc_matrix-1-float64]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max[False-0-amin-amax-False-csc_matrix-None-float32]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max[False-0-amin-amax-False-csc_matrix-None-float64]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max[False-nan-nanmin-nanmax-True-csr_matrix-0-float32]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max[False-nan-nanmin-nanmax-True-csr_matrix-0-float64]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max[False-nan-nanmin-nanmax-True-csr_matrix-1-float32]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max[False-nan-nanmin-nanmax-True-csr_matrix-1-float64]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max[False-nan-nanmin-nanmax-True-csr_matrix-None-float32]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max[False-nan-nanmin-nanmax-True-csr_matrix-None-float64]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max[False-nan-nanmin-nanmax-True-csc_matrix-0-float32]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max[False-nan-nanmin-nanmax-True-csc_matrix-0-float64]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max[False-nan-nanmin-nanmax-True-csc_matrix-1-float32]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max[False-nan-nanmin-nanmax-True-csc_matrix-1-float64]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max[False-nan-nanmin-nanmax-True-csc_matrix-None-float32]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max[False-nan-nanmin-nanmax-True-csc_matrix-None-float64]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max_axis_errors",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_count_nonzero",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_csc_row_median",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_inplace_normalize"
                        ],
                        "failure": [
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_parallel[float64-array-pairwise_distances-euclidean-kwds0]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_parallel[float64-array-pairwise_distances-wminkowski-kwds1]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_parallel[float64-array-pairwise_distances-wminkowski-kwds2]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_parallel[float64-array-pairwise_kernels-polynomial-kwds3]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_parallel[float64-array-pairwise_kernels-callable_rbf_kernel-kwds4]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_parallel[int-array-pairwise_distances-euclidean-kwds0]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_parallel[int-array-pairwise_distances-wminkowski-kwds1]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_parallel[int-array-pairwise_distances-wminkowski-kwds2]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_parallel[int-array-pairwise_kernels-polynomial-kwds3]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_parallel[int-array-pairwise_kernels-callable_rbf_kernel-kwds4]"
                        ]
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "pytest-dev__pytest-10758.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "testing/test_assertrewrite.py::TestIssue10743::test_assertion_walrus_operator",
                            "testing/test_assertrewrite.py::TestIssue10743::test_assertion_inline_walrus_operator",
                            "testing/test_assertrewrite.py::TestIssue10743::test_assertion_walrus_operator_true_assertion_and_changes_variable_value",
                            "testing/test_assertrewrite.py::TestIssue10743::test_assertion_walrus_operator_fail_assertion",
                            "testing/test_assertrewrite.py::TestIssue10743::test_assertion_walrus_operator_compare_boolean_fails",
                            "testing/test_assertrewrite.py::TestIssue10743::test_assertion_walrus_operator_boolean_none_fails"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "testing/test_assertrewrite.py::TestAssertionRewrite::test_place_initial_imports",
                            "testing/test_assertrewrite.py::TestAssertionRewrite::test_location_is_set",
                            "testing/test_assertrewrite.py::TestAssertionRewrite::test_dont_rewrite",
                            "testing/test_assertrewrite.py::TestAssertionRewrite::test_name",
                            "testing/test_assertrewrite.py::TestAssertionRewrite::test_assertrepr_compare_same_width",
                            "testing/test_assertrewrite.py::TestAssertionRewrite::test_dont_rewrite_if_hasattr_fails",
                            "testing/test_assertrewrite.py::TestAssertionRewrite::test_assert_already_has_message",
                            "testing/test_assertrewrite.py::TestAssertionRewrite::test_boolop",
                            "testing/test_assertrewrite.py::TestAssertionRewrite::test_short_circuit_evaluation",
                            "testing/test_assertrewrite.py::TestAssertionRewrite::test_unary_op",
                            "testing/test_assertrewrite.py::TestAssertionRewrite::test_binary_op",
                            "testing/test_assertrewrite.py::TestAssertionRewrite::test_boolop_percent",
                            "testing/test_assertrewrite.py::TestAssertionRewrite::test_call",
                            "testing/test_assertrewrite.py::TestAssertionRewrite::test_attribute",
                            "testing/test_assertrewrite.py::TestAssertionRewrite::test_comparisons",
                            "testing/test_assertrewrite.py::TestAssertionRewrite::test_len",
                            "testing/test_assertrewrite.py::TestAssertionRewrite::test_custom_reprcompare",
                            "testing/test_assertrewrite.py::TestAssertionRewrite::test_assert_raising__bool__in_comparison",
                            "testing/test_assertrewrite.py::TestAssertionRewrite::test_formatchar",
                            "testing/test_assertrewrite.py::TestAssertionRewrite::test_custom_repr",
                            "testing/test_assertrewrite.py::TestAssertionRewrite::test_custom_repr_non_ascii",
                            "testing/test_assertrewrite.py::TestAssertionRewriteHookDetails::test_read_pyc",
                            "testing/test_assertrewrite.py::TestAssertionRewriteHookDetails::test_read_pyc_more_invalid",
                            "testing/test_assertrewrite.py::test_get_assertion_exprs[trivial]",
                            "testing/test_assertrewrite.py::test_get_assertion_exprs[assert",
                            "testing/test_assertrewrite.py::test_get_assertion_exprs[multiple",
                            "testing/test_assertrewrite.py::test_get_assertion_exprs[latin1",
                            "testing/test_assertrewrite.py::test_get_assertion_exprs[utf-8",
                            "testing/test_assertrewrite.py::test_get_assertion_exprs[multi-line",
                            "testing/test_assertrewrite.py::test_get_assertion_exprs[multi",
                            "testing/test_assertrewrite.py::test_get_assertion_exprs[backslash",
                            "testing/test_assertrewrite.py::test_get_assertion_exprs[assertion",
                            "testing/test_assertrewrite.py::test_get_assertion_exprs[escaped",
                            "testing/test_assertrewrite.py::test_get_assertion_exprs[no",
                            "testing/test_assertrewrite.py::test_try_makedirs",
                            "testing/test_assertrewrite.py::TestPyCacheDir::test_get_cache_dir[c:/tmp/pycs-d:/projects/src/foo.py-c:/tmp/pycs/projects/src]",
                            "testing/test_assertrewrite.py::TestPyCacheDir::test_get_cache_dir[None-d:/projects/src/foo.py-d:/projects/src/__pycache__]",
                            "testing/test_assertrewrite.py::TestPyCacheDir::test_get_cache_dir[/tmp/pycs-/home/projects/src/foo.py-/tmp/pycs/home/projects/src]",
                            "testing/test_assertrewrite.py::TestPyCacheDir::test_get_cache_dir[None-/home/projects/src/foo.py-/home/projects/src/__pycache__]",
                            "testing/test_assertrewrite.py::TestReprSizeVerbosity::test_get_maxsize_for_saferepr[0-240]",
                            "testing/test_assertrewrite.py::TestReprSizeVerbosity::test_get_maxsize_for_saferepr[1-2400]",
                            "testing/test_assertrewrite.py::TestReprSizeVerbosity::test_get_maxsize_for_saferepr[2-None]",
                            "testing/test_assertrewrite.py::TestReprSizeVerbosity::test_get_maxsize_for_saferepr[3-None]",
                            "testing/test_assertrewrite.py::TestAssertionRewrite::test_rewrites_plugin_as_a_package",
                            "testing/test_assertrewrite.py::TestAssertionRewrite::test_honors_pep_235",
                            "testing/test_assertrewrite.py::TestAssertionRewrite::test_assertion_message",
                            "testing/test_assertrewrite.py::TestAssertionRewrite::test_assertion_message_multiline",
                            "testing/test_assertrewrite.py::TestAssertionRewrite::test_assertion_message_tuple",
                            "testing/test_assertrewrite.py::TestAssertionRewrite::test_assertion_message_expr",
                            "testing/test_assertrewrite.py::TestAssertionRewrite::test_assertion_message_escape",
                            "testing/test_assertrewrite.py::TestAssertionRewrite::test_assertion_messages_bytes",
                            "testing/test_assertrewrite.py::TestAssertionRewrite::test_at_operator_issue1290",
                            "testing/test_assertrewrite.py::TestAssertionRewrite::test_starred_with_side_effect",
                            "testing/test_assertrewrite.py::TestRewriteOnImport::test_pycache_is_a_file",
                            "testing/test_assertrewrite.py::TestRewriteOnImport::test_pycache_is_readonly",
                            "testing/test_assertrewrite.py::TestRewriteOnImport::test_zipfile",
                            "testing/test_assertrewrite.py::TestRewriteOnImport::test_load_resource_via_files_with_rewrite",
                            "testing/test_assertrewrite.py::TestRewriteOnImport::test_readonly",
                            "testing/test_assertrewrite.py::TestRewriteOnImport::test_orphaned_pyc_file",
                            "testing/test_assertrewrite.py::TestRewriteOnImport::test_package",
                            "testing/test_assertrewrite.py::TestRewriteOnImport::test_translate_newlines",
                            "testing/test_assertrewrite.py::TestRewriteOnImport::test_package_without__init__py",
                            "testing/test_assertrewrite.py::TestRewriteOnImport::test_remember_rewritten_modules",
                            "testing/test_assertrewrite.py::TestAssertionRewriteHookDetails::test_sys_meta_path_munged",
                            "testing/test_assertrewrite.py::TestAssertionRewriteHookDetails::test_write_pyc",
                            "testing/test_assertrewrite.py::TestAssertionRewriteHookDetails::test_read_pyc_success",
                            "testing/test_assertrewrite.py::TestAssertionRewriteHookDetails::test_reload_is_same_and_reloads",
                            "testing/test_assertrewrite.py::TestAssertionRewriteHookDetails::test_get_data_support",
                            "testing/test_assertrewrite.py::test_issue731",
                            "testing/test_assertrewrite.py::TestIssue925::test_simple_case",
                            "testing/test_assertrewrite.py::TestIssue925::test_long_case",
                            "testing/test_assertrewrite.py::TestIssue925::test_many_brackets",
                            "testing/test_assertrewrite.py::TestIssue2121::test_rewrite_python_files_contain_subdirs",
                            "testing/test_assertrewrite.py::TestIssue10743::test_assertion_walrus_operator_dont_rewrite",
                            "testing/test_assertrewrite.py::TestIssue10743::test_assertion_inline_walrus_operator_reverse",
                            "testing/test_assertrewrite.py::TestIssue10743::test_assertion_walrus_no_variable_name_conflict",
                            "testing/test_assertrewrite.py::TestIssue10743::test_assertion_walrus_operator_boolean_composite",
                            "testing/test_assertrewrite.py::TestIssue10743::test_assertion_walrus_operator_value_changes_cleared_after_each_test",
                            "testing/test_assertrewrite.py::test_source_mtime_long_long[-1]",
                            "testing/test_assertrewrite.py::test_source_mtime_long_long[1]",
                            "testing/test_assertrewrite.py::test_rewrite_infinite_recursion",
                            "testing/test_assertrewrite.py::TestEarlyRewriteBailout::test_basic",
                            "testing/test_assertrewrite.py::TestEarlyRewriteBailout::test_pattern_contains_subdirectories",
                            "testing/test_assertrewrite.py::TestEarlyRewriteBailout::test_cwd_changed",
                            "testing/test_assertrewrite.py::TestAssertionPass::test_option_default",
                            "testing/test_assertrewrite.py::TestAssertionPass::test_hook_call",
                            "testing/test_assertrewrite.py::TestAssertionPass::test_hook_call_with_parens",
                            "testing/test_assertrewrite.py::TestAssertionPass::test_hook_not_called_without_hookimpl",
                            "testing/test_assertrewrite.py::TestAssertionPass::test_hook_not_called_without_cmd_option",
                            "testing/test_assertrewrite.py::TestPyCacheDir::test_sys_pycache_prefix_integration",
                            "testing/test_assertrewrite.py::TestReprSizeVerbosity::test_default_verbosity",
                            "testing/test_assertrewrite.py::TestReprSizeVerbosity::test_increased_verbosity",
                            "testing/test_assertrewrite.py::TestReprSizeVerbosity::test_max_increased_verbosity",
                            "testing/test_assertrewrite.py::TestAssertionRewrite::test_dont_rewrite_plugin",
                            "testing/test_assertrewrite.py::TestRewriteOnImport::test_dont_write_bytecode",
                            "testing/test_assertrewrite.py::TestRewriteOnImport::test_cached_pyc_includes_pytest_version",
                            "testing/test_assertrewrite.py::TestRewriteOnImport::test_pyc_vs_pyo",
                            "testing/test_assertrewrite.py::TestRewriteOnImport::test_rewrite_warning",
                            "testing/test_assertrewrite.py::TestRewriteOnImport::test_rewrite_module_imported_from_conftest",
                            "testing/test_assertrewrite.py::TestRewriteOnImport::test_rewrite_warning_using_pytest_plugins",
                            "testing/test_assertrewrite.py::TestRewriteOnImport::test_rewrite_warning_using_pytest_plugins_env_var",
                            "testing/test_assertrewrite.py::TestAssertionRewriteHookDetails::test_resources_provider_for_loader"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "pylint-dev__pylint-7993.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "tests/reporters/unittest_reporting.py::test_template_option_with_header"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "tests/reporters/unittest_reporting.py::test_template_option",
                            "tests/reporters/unittest_reporting.py::test_template_option_default",
                            "tests/reporters/unittest_reporting.py::test_template_option_end_line",
                            "tests/reporters/unittest_reporting.py::test_template_option_non_existing",
                            "tests/reporters/unittest_reporting.py::test_deprecation_set_output",
                            "tests/reporters/unittest_reporting.py::test_parseable_output_deprecated",
                            "tests/reporters/unittest_reporting.py::test_parseable_output_regression",
                            "tests/reporters/unittest_reporting.py::test_multi_format_output",
                            "tests/reporters/unittest_reporting.py::test_multi_reporter_independant_messages",
                            "tests/reporters/unittest_reporting.py::test_display_results_is_renamed"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "pytest-dev__pytest-11217.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "testing/test_skipping.py::test_skipped_reasons_functional"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "testing/test_skipping.py::test_importorskip",
                            "testing/test_skipping.py::TestEvaluation::test_no_marker",
                            "testing/test_skipping.py::TestEvaluation::test_marked_xfail_no_args",
                            "testing/test_skipping.py::TestEvaluation::test_marked_skipif_no_args",
                            "testing/test_skipping.py::TestEvaluation::test_marked_one_arg",
                            "testing/test_skipping.py::TestEvaluation::test_marked_one_arg_with_reason",
                            "testing/test_skipping.py::TestEvaluation::test_marked_one_arg_twice",
                            "testing/test_skipping.py::TestEvaluation::test_marked_one_arg_twice2",
                            "testing/test_skipping.py::TestEvaluation::test_marked_skipif_with_boolean_without_reason",
                            "testing/test_skipping.py::TestEvaluation::test_marked_skipif_with_invalid_boolean",
                            "testing/test_skipping.py::TestEvaluation::test_skipif_class",
                            "testing/test_skipping.py::TestEvaluation::test_skipif_markeval_namespace",
                            "testing/test_skipping.py::TestEvaluation::test_skipif_markeval_namespace_multiple",
                            "testing/test_skipping.py::TestEvaluation::test_skipif_markeval_namespace_ValueError",
                            "testing/test_skipping.py::TestXFail::test_xfail_simple[True]",
                            "testing/test_skipping.py::TestXFail::test_xfail_simple[False]",
                            "testing/test_skipping.py::TestXFail::test_xfail_xpassed",
                            "testing/test_skipping.py::TestXFail::test_xfail_using_platform",
                            "testing/test_skipping.py::TestXFail::test_xfail_xpassed_strict",
                            "testing/test_skipping.py::TestXFail::test_xfail_run_anyway",
                            "testing/test_skipping.py::TestXFail::test_xfail_run_with_skip_mark[test_input0-expected0]",
                            "testing/test_skipping.py::TestXFail::test_xfail_run_with_skip_mark[test_input1-expected1]",
                            "testing/test_skipping.py::TestXFail::test_xfail_evalfalse_but_fails",
                            "testing/test_skipping.py::TestXFail::test_xfail_not_report_default",
                            "testing/test_skipping.py::TestXFail::test_xfail_not_run_xfail_reporting",
                            "testing/test_skipping.py::TestXFail::test_xfail_not_run_no_setup_run",
                            "testing/test_skipping.py::TestXFail::test_xfail_xpass",
                            "testing/test_skipping.py::TestXFail::test_xfail_imperative",
                            "testing/test_skipping.py::TestXFail::test_xfail_imperative_in_setup_function",
                            "testing/test_skipping.py::TestXFail::test_dynamic_xfail_no_run",
                            "testing/test_skipping.py::TestXFail::test_dynamic_xfail_set_during_funcarg_setup",
                            "testing/test_skipping.py::TestXFail::test_dynamic_xfail_set_during_runtest_failed",
                            "testing/test_skipping.py::TestXFail::test_dynamic_xfail_set_during_runtest_passed_strict",
                            "testing/test_skipping.py::TestXFail::test_xfail_raises[TypeError-TypeError-*1",
                            "testing/test_skipping.py::TestXFail::test_xfail_raises[(AttributeError,",
                            "testing/test_skipping.py::TestXFail::test_xfail_raises[TypeError-IndexError-*1",
                            "testing/test_skipping.py::TestXFail::test_strict_sanity",
                            "testing/test_skipping.py::TestXFail::test_strict_xfail[True]",
                            "testing/test_skipping.py::TestXFail::test_strict_xfail[False]",
                            "testing/test_skipping.py::TestXFail::test_strict_xfail_condition[True]",
                            "testing/test_skipping.py::TestXFail::test_strict_xfail_condition[False]",
                            "testing/test_skipping.py::TestXFail::test_xfail_condition_keyword[True]",
                            "testing/test_skipping.py::TestXFail::test_xfail_condition_keyword[False]",
                            "testing/test_skipping.py::TestXFail::test_strict_xfail_default_from_file[true]",
                            "testing/test_skipping.py::TestXFail::test_strict_xfail_default_from_file[false]",
                            "testing/test_skipping.py::TestXFail::test_xfail_markeval_namespace",
                            "testing/test_skipping.py::TestXFailwithSetupTeardown::test_failing_setup_issue9",
                            "testing/test_skipping.py::TestXFailwithSetupTeardown::test_failing_teardown_issue9",
                            "testing/test_skipping.py::TestSkip::test_skip_class",
                            "testing/test_skipping.py::TestSkip::test_skips_on_false_string",
                            "testing/test_skipping.py::TestSkip::test_arg_as_reason",
                            "testing/test_skipping.py::TestSkip::test_skip_no_reason",
                            "testing/test_skipping.py::TestSkip::test_skip_with_reason",
                            "testing/test_skipping.py::TestSkip::test_only_skips_marked_test",
                            "testing/test_skipping.py::TestSkip::test_strict_and_skip",
                            "testing/test_skipping.py::TestSkip::test_wrong_skip_usage",
                            "testing/test_skipping.py::TestSkipif::test_skipif_conditional",
                            "testing/test_skipping.py::TestSkipif::test_skipif_reporting[\"hasattr(sys,",
                            "testing/test_skipping.py::TestSkipif::test_skipif_reporting[True,",
                            "testing/test_skipping.py::TestSkipif::test_skipif_using_platform",
                            "testing/test_skipping.py::TestSkipif::test_skipif_reporting_multiple[skipif-SKIP-skipped]",
                            "testing/test_skipping.py::TestSkipif::test_skipif_reporting_multiple[xfail-XPASS-xpassed]",
                            "testing/test_skipping.py::test_skip_not_report_default",
                            "testing/test_skipping.py::test_skipif_class",
                            "testing/test_skipping.py::test_skipped_folding",
                            "testing/test_skipping.py::test_reportchars",
                            "testing/test_skipping.py::test_reportchars_error",
                            "testing/test_skipping.py::test_reportchars_all",
                            "testing/test_skipping.py::test_reportchars_all_error",
                            "testing/test_skipping.py::test_errors_in_xfail_skip_expressions",
                            "testing/test_skipping.py::test_xfail_skipif_with_globals",
                            "testing/test_skipping.py::test_default_markers",
                            "testing/test_skipping.py::test_xfail_test_setup_exception",
                            "testing/test_skipping.py::test_imperativeskip_on_xfail_test",
                            "testing/test_skipping.py::TestBooleanCondition::test_skipif",
                            "testing/test_skipping.py::TestBooleanCondition::test_skipif_noreason",
                            "testing/test_skipping.py::TestBooleanCondition::test_xfail",
                            "testing/test_skipping.py::test_xfail_item",
                            "testing/test_skipping.py::test_module_level_skip_error",
                            "testing/test_skipping.py::test_module_level_skip_with_allow_module_level",
                            "testing/test_skipping.py::test_invalid_skip_keyword_parameter",
                            "testing/test_skipping.py::test_mark_xfail_item",
                            "testing/test_skipping.py::test_summary_list_after_errors",
                            "testing/test_skipping.py::test_relpath_rootdir",
                            "testing/test_skipping.py::test_skip_from_fixture",
                            "testing/test_skipping.py::test_skip_using_reason_works_ok",
                            "testing/test_skipping.py::test_fail_using_reason_works_ok",
                            "testing/test_skipping.py::test_fail_fails_with_msg_and_reason",
                            "testing/test_skipping.py::test_skip_fails_with_msg_and_reason",
                            "testing/test_skipping.py::test_exit_with_msg_and_reason_fails",
                            "testing/test_skipping.py::test_exit_with_reason_works_ok"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "sphinx-doc__sphinx-7859.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "tests/test_ext_autodoc_configs.py::test_autodoc_typehints_description_for_invalid_node"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "tests/test_ext_autodoc_configs.py::test_autoclass_content_class",
                            "tests/test_ext_autodoc_configs.py::test_autoclass_content_init",
                            "tests/test_ext_autodoc_configs.py::test_autoclass_content_both",
                            "tests/test_ext_autodoc_configs.py::test_autodoc_inherit_docstrings",
                            "tests/test_ext_autodoc_configs.py::test_autodoc_docstring_signature",
                            "tests/test_ext_autodoc_configs.py::test_autoclass_content_and_docstring_signature_class",
                            "tests/test_ext_autodoc_configs.py::test_autoclass_content_and_docstring_signature_init",
                            "tests/test_ext_autodoc_configs.py::test_autoclass_content_and_docstring_signature_both",
                            "tests/test_ext_autodoc_configs.py::test_mocked_module_imports",
                            "tests/test_ext_autodoc_configs.py::test_autodoc_typehints_signature",
                            "tests/test_ext_autodoc_configs.py::test_autodoc_typehints_none",
                            "tests/test_ext_autodoc_configs.py::test_autodoc_typehints_description",
                            "tests/test_ext_autodoc_configs.py::test_autodoc_default_options",
                            "tests/test_ext_autodoc_configs.py::test_autodoc_default_options_with_values"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "sympy__sympy-21260.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "test_core_basic",
                            "test_core_Str",
                            "test_core_symbol",
                            "test_core_numbers",
                            "test_core_float_copy",
                            "test_core_relational",
                            "test_core_add",
                            "test_core_mul",
                            "test_core_power",
                            "test_core_function",
                            "test_core_interval",
                            "test_functions",
                            "test_geometry",
                            "test_integrals",
                            "test_physics",
                            "test_pickling_polys_polytools",
                            "test_pickling_polys_numberfields",
                            "test_pickling_polys_rootoftools",
                            "test_series",
                            "test_concrete"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "test_Singleton",
                            "test_singleton_redefinition",
                            "test_core_undefinedfunctions",
                            "test_core_multidimensional",
                            "test_Singletons",
                            "test_logic",
                            "test_matrices",
                            "test_ntheory",
                            "test_pickling_polys_polyclasses",
                            "test_pickling_polys_fields",
                            "test_pickling_polys_elements",
                            "test_pickling_polys_domains",
                            "test_pickling_polys_orderings",
                            "test_pickling_polys_monomials",
                            "test_pickling_polys_errors",
                            "test_printing",
                            "test_deprecation_warning"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "sphinx-doc__sphinx-9467.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "tests/test_build_linkcheck.py::test_connect_to_selfsigned_with_tls_verify_false",
                            "tests/test_build_linkcheck.py::test_TooManyRedirects_on_HEAD",
                            "tests/test_build_linkcheck.py::test_too_many_requests_retry_after_int_delay",
                            "tests/test_build_linkcheck.py::test_get_after_head_raises_connection_error"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "tests/test_build_linkcheck.py::test_defaults_json",
                            "tests/test_build_linkcheck.py::test_raises_for_invalid_status",
                            "tests/test_build_linkcheck.py::test_auth_header_uses_first_match",
                            "tests/test_build_linkcheck.py::test_auth_header_no_match",
                            "tests/test_build_linkcheck.py::test_linkcheck_request_headers",
                            "tests/test_build_linkcheck.py::test_linkcheck_request_headers_no_slash",
                            "tests/test_build_linkcheck.py::test_linkcheck_request_headers_default",
                            "tests/test_build_linkcheck.py::test_follows_redirects_on_HEAD",
                            "tests/test_build_linkcheck.py::test_follows_redirects_on_GET",
                            "tests/test_build_linkcheck.py::test_linkcheck_allowed_redirects",
                            "tests/test_build_linkcheck.py::test_invalid_ssl",
                            "tests/test_build_linkcheck.py::test_connect_to_selfsigned_fails",
                            "tests/test_build_linkcheck.py::test_connect_to_selfsigned_with_tls_cacerts",
                            "tests/test_build_linkcheck.py::test_connect_to_selfsigned_with_requests_env_var",
                            "tests/test_build_linkcheck.py::test_connect_to_selfsigned_nonexistent_cert_file",
                            "tests/test_build_linkcheck.py::test_too_many_requests_retry_after_HTTP_date",
                            "tests/test_build_linkcheck.py::test_too_many_requests_retry_after_without_header",
                            "tests/test_build_linkcheck.py::test_too_many_requests_user_timeout",
                            "tests/test_build_linkcheck.py::test_limit_rate_default_sleep",
                            "tests/test_build_linkcheck.py::test_limit_rate_user_max_delay",
                            "tests/test_build_linkcheck.py::test_limit_rate_doubles_previous_wait_time",
                            "tests/test_build_linkcheck.py::test_limit_rate_clips_wait_time_to_max_time",
                            "tests/test_build_linkcheck.py::test_limit_rate_bails_out_after_waiting_max_time"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "scikit-learn__scikit-learn-15625.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "sklearn/metrics/tests/test_classification.py::test_confusion_matrix_normalize[true-f-0.333333333]",
                            "sklearn/metrics/tests/test_classification.py::test_confusion_matrix_normalize[pred-f-0.333333333]",
                            "sklearn/metrics/tests/test_classification.py::test_confusion_matrix_normalize[all-f-0.1111111111]",
                            "sklearn/metrics/tests/test_classification.py::test_confusion_matrix_normalize[None-i-2]",
                            "sklearn/metrics/tests/test_classification.py::test_confusion_matrix_normalize_single_class"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "sklearn/metrics/tests/test_classification.py::test_classification_report_dictionary_output",
                            "sklearn/metrics/tests/test_classification.py::test_multilabel_accuracy_score_subset_accuracy",
                            "sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_score_binary",
                            "sklearn/metrics/tests/test_classification.py::test_precision_recall_f_binary_single_class",
                            "sklearn/metrics/tests/test_classification.py::test_precision_recall_f_extra_labels",
                            "sklearn/metrics/tests/test_classification.py::test_precision_recall_f_ignored_labels",
                            "sklearn/metrics/tests/test_classification.py::test_average_precision_score_score_non_binary_class",
                            "sklearn/metrics/tests/test_classification.py::test_average_precision_score_duplicate_values",
                            "sklearn/metrics/tests/test_classification.py::test_average_precision_score_tied_values",
                            "sklearn/metrics/tests/test_classification.py::test_precision_recall_fscore_support_errors",
                            "sklearn/metrics/tests/test_classification.py::test_precision_recall_f_unused_pos_label",
                            "sklearn/metrics/tests/test_classification.py::test_confusion_matrix_binary",
                            "sklearn/metrics/tests/test_classification.py::test_multilabel_confusion_matrix_binary",
                            "sklearn/metrics/tests/test_classification.py::test_multilabel_confusion_matrix_multiclass",
                            "sklearn/metrics/tests/test_classification.py::test_multilabel_confusion_matrix_multilabel",
                            "sklearn/metrics/tests/test_classification.py::test_multilabel_confusion_matrix_errors",
                            "sklearn/metrics/tests/test_classification.py::test_cohen_kappa",
                            "sklearn/metrics/tests/test_classification.py::test_matthews_corrcoef_nan",
                            "sklearn/metrics/tests/test_classification.py::test_matthews_corrcoef_against_numpy_corrcoef",
                            "sklearn/metrics/tests/test_classification.py::test_matthews_corrcoef_against_jurman",
                            "sklearn/metrics/tests/test_classification.py::test_matthews_corrcoef",
                            "sklearn/metrics/tests/test_classification.py::test_matthews_corrcoef_multiclass",
                            "sklearn/metrics/tests/test_classification.py::test_matthews_corrcoef_overflow[100]",
                            "sklearn/metrics/tests/test_classification.py::test_matthews_corrcoef_overflow[10000]",
                            "sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_score_multiclass",
                            "sklearn/metrics/tests/test_classification.py::test_precision_refcall_f1_score_multilabel_unordered_labels[samples]",
                            "sklearn/metrics/tests/test_classification.py::test_precision_refcall_f1_score_multilabel_unordered_labels[micro]",
                            "sklearn/metrics/tests/test_classification.py::test_precision_refcall_f1_score_multilabel_unordered_labels[macro]",
                            "sklearn/metrics/tests/test_classification.py::test_precision_refcall_f1_score_multilabel_unordered_labels[weighted]",
                            "sklearn/metrics/tests/test_classification.py::test_precision_refcall_f1_score_multilabel_unordered_labels[None]",
                            "sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_score_binary_averaged",
                            "sklearn/metrics/tests/test_classification.py::test_zero_precision_recall",
                            "sklearn/metrics/tests/test_classification.py::test_confusion_matrix_multiclass_subset_labels",
                            "sklearn/metrics/tests/test_classification.py::test_confusion_matrix_dtype",
                            "sklearn/metrics/tests/test_classification.py::test_classification_report_multiclass",
                            "sklearn/metrics/tests/test_classification.py::test_classification_report_multiclass_balanced",
                            "sklearn/metrics/tests/test_classification.py::test_classification_report_multiclass_with_label_detection",
                            "sklearn/metrics/tests/test_classification.py::test_classification_report_multiclass_with_digits",
                            "sklearn/metrics/tests/test_classification.py::test_classification_report_multiclass_with_string_label",
                            "sklearn/metrics/tests/test_classification.py::test_classification_report_multiclass_with_unicode_label",
                            "sklearn/metrics/tests/test_classification.py::test_classification_report_multiclass_with_long_string_label",
                            "sklearn/metrics/tests/test_classification.py::test_classification_report_labels_target_names_unequal_length",
                            "sklearn/metrics/tests/test_classification.py::test_classification_report_no_labels_target_names_unequal_length",
                            "sklearn/metrics/tests/test_classification.py::test_multilabel_classification_report",
                            "sklearn/metrics/tests/test_classification.py::test_multilabel_zero_one_loss_subset",
                            "sklearn/metrics/tests/test_classification.py::test_multilabel_hamming_loss",
                            "sklearn/metrics/tests/test_classification.py::test_jaccard_score_validation",
                            "sklearn/metrics/tests/test_classification.py::test_multilabel_jaccard_score",
                            "sklearn/metrics/tests/test_classification.py::test_multiclass_jaccard_score",
                            "sklearn/metrics/tests/test_classification.py::test_average_binary_jaccard_score",
                            "sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_score_multilabel_1",
                            "sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_score_multilabel_2",
                            "sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_score_with_an_empty_prediction[warn]",
                            "sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_score_with_an_empty_prediction[0]",
                            "sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_score_with_an_empty_prediction[1]",
                            "sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_no_labels[0-macro-1]",
                            "sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_no_labels[0-micro-1]",
                            "sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_no_labels[0-weighted-1]",
                            "sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_no_labels[0-samples-1]",
                            "sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_no_labels[1-macro-1]",
                            "sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_no_labels[1-micro-1]",
                            "sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_no_labels[1-weighted-1]",
                            "sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_no_labels[1-samples-1]",
                            "sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_no_labels_check_warnings[macro]",
                            "sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_no_labels_check_warnings[micro]",
                            "sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_no_labels_check_warnings[weighted]",
                            "sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_no_labels_check_warnings[samples]",
                            "sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_no_labels_average_none[0]",
                            "sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_no_labels_average_none[1]",
                            "sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_no_labels_average_none_warn",
                            "sklearn/metrics/tests/test_classification.py::test_prf_warnings",
                            "sklearn/metrics/tests/test_classification.py::test_prf_no_warnings_if_zero_division_set[0]",
                            "sklearn/metrics/tests/test_classification.py::test_prf_no_warnings_if_zero_division_set[1]",
                            "sklearn/metrics/tests/test_classification.py::test_recall_warnings[warn]",
                            "sklearn/metrics/tests/test_classification.py::test_recall_warnings[0]",
                            "sklearn/metrics/tests/test_classification.py::test_recall_warnings[1]",
                            "sklearn/metrics/tests/test_classification.py::test_precision_warnings[warn]",
                            "sklearn/metrics/tests/test_classification.py::test_precision_warnings[0]",
                            "sklearn/metrics/tests/test_classification.py::test_precision_warnings[1]",
                            "sklearn/metrics/tests/test_classification.py::test_fscore_warnings[warn]",
                            "sklearn/metrics/tests/test_classification.py::test_fscore_warnings[0]",
                            "sklearn/metrics/tests/test_classification.py::test_fscore_warnings[1]",
                            "sklearn/metrics/tests/test_classification.py::test_prf_average_binary_data_non_binary",
                            "sklearn/metrics/tests/test_classification.py::test__check_targets",
                            "sklearn/metrics/tests/test_classification.py::test__check_targets_multiclass_with_both_y_true_and_y_pred_binary",
                            "sklearn/metrics/tests/test_classification.py::test_hinge_loss_binary",
                            "sklearn/metrics/tests/test_classification.py::test_hinge_loss_multiclass",
                            "sklearn/metrics/tests/test_classification.py::test_hinge_loss_multiclass_missing_labels_with_labels_none",
                            "sklearn/metrics/tests/test_classification.py::test_hinge_loss_multiclass_with_missing_labels",
                            "sklearn/metrics/tests/test_classification.py::test_hinge_loss_multiclass_invariance_lists",
                            "sklearn/metrics/tests/test_classification.py::test_log_loss",
                            "sklearn/metrics/tests/test_classification.py::test_log_loss_pandas_input",
                            "sklearn/metrics/tests/test_classification.py::test_brier_score_loss",
                            "sklearn/metrics/tests/test_classification.py::test_balanced_accuracy_score_unseen",
                            "sklearn/metrics/tests/test_classification.py::test_balanced_accuracy_score[y_true0-y_pred0]",
                            "sklearn/metrics/tests/test_classification.py::test_balanced_accuracy_score[y_true1-y_pred1]",
                            "sklearn/metrics/tests/test_classification.py::test_balanced_accuracy_score[y_true2-y_pred2]",
                            "sklearn/metrics/tests/test_classification.py::test_multilabel_jaccard_similarity_score_deprecation"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "django__django-5470.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "test_script_prefix_set_in_commands (user_commands.tests.CommandRunTests)"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "test_no_existent_external_program (user_commands.tests.UtilsTests)",
                            "test_call_command_no_checks (user_commands.tests.CommandTests)",
                            "test_call_command_option_parsing (user_commands.tests.CommandTests)",
                            "test_call_command_option_parsing_non_string_arg (user_commands.tests.CommandTests)",
                            "test_calling_a_command_with_no_app_labels_and_parameters_should_raise_a_command_error (user_commands.tests.CommandTests)",
                            "test_calling_a_command_with_only_empty_parameter_should_ends_gracefully (user_commands.tests.CommandTests)",
                            "test_calling_command_with_app_labels_and_parameters_should_be_ok (user_commands.tests.CommandTests)",
                            "test_calling_command_with_parameters_and_app_labels_at_the_end_should_be_ok (user_commands.tests.CommandTests)",
                            "test_command (user_commands.tests.CommandTests)",
                            "test_command_style (user_commands.tests.CommandTests)",
                            "test_configured_locale_preserved (user_commands.tests.CommandTests)",
                            "test_deactivate_locale_set (user_commands.tests.CommandTests)",
                            "test_discover_commands_in_eggs (user_commands.tests.CommandTests)",
                            "Test that an unknown command raises CommandError",
                            "test_find_command_without_PATH (user_commands.tests.CommandTests)",
                            "test_language_preserved (user_commands.tests.CommandTests)",
                            "test_output_transaction (user_commands.tests.CommandTests)",
                            "Exception raised in a command should raise CommandError with"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "django__django-15695.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "test_rename_index_unnamed_index (migrations.test_operations.OperationTests)"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "test_reference_field_by_through_fields (migrations.test_operations.FieldOperationTests)",
                            "test_references_field_by_from_fields (migrations.test_operations.FieldOperationTests)",
                            "test_references_field_by_name (migrations.test_operations.FieldOperationTests)",
                            "test_references_field_by_remote_field_model (migrations.test_operations.FieldOperationTests)",
                            "test_references_field_by_through (migrations.test_operations.FieldOperationTests)",
                            "test_references_field_by_to_fields (migrations.test_operations.FieldOperationTests)",
                            "test_references_model (migrations.test_operations.FieldOperationTests)",
                            "test_references_model_mixin (migrations.test_operations.TestCreateModel)",
                            "Tests the AddField operation.",
                            "The CreateTable operation ignores swapped models.",
                            "Tests the DeleteModel operation ignores swapped models.",
                            "Add/RemoveIndex operations ignore swapped models.",
                            "Tests the AddField operation on TextField/BinaryField.",
                            "Tests the AddField operation on TextField.",
                            "test_add_constraint (migrations.test_operations.OperationTests)",
                            "test_add_constraint_combinable (migrations.test_operations.OperationTests)",
                            "test_add_constraint_percent_escaping (migrations.test_operations.OperationTests)",
                            "test_add_covering_unique_constraint (migrations.test_operations.OperationTests)",
                            "test_add_deferred_unique_constraint (migrations.test_operations.OperationTests)",
                            "Tests the AddField operation with a ManyToManyField.",
                            "Tests the AddField operation's state alteration",
                            "test_add_func_index (migrations.test_operations.OperationTests)",
                            "test_add_func_unique_constraint (migrations.test_operations.OperationTests)",
                            "Test the AddIndex operation.",
                            "test_add_index_state_forwards (migrations.test_operations.OperationTests)",
                            "test_add_or_constraint (migrations.test_operations.OperationTests)",
                            "test_add_partial_unique_constraint (migrations.test_operations.OperationTests)",
                            "Tests the AlterField operation.",
                            "AlterField operation is a noop when adding only a db_column and the",
                            "test_alter_field_m2m (migrations.test_operations.OperationTests)",
                            "The AlterField operation on primary keys (things like PostgreSQL's",
                            "Tests the AlterField operation on primary keys changes any FKs pointing to it.",
                            "AlterField operation of db_collation on primary keys changes any FKs",
                            "test_alter_field_pk_mti_and_fk_to_base (migrations.test_operations.OperationTests)",
                            "test_alter_field_pk_mti_fk (migrations.test_operations.OperationTests)",
                            "test_alter_field_reloads_state_fk_with_to_field_related_name_target_type_change (migrations.test_operations.OperationTests)",
                            "If AlterField doesn't reload state appropriately, the second AlterField",
                            "test_alter_field_reloads_state_on_fk_with_to_field_target_type_change (migrations.test_operations.OperationTests)",
                            "test_alter_field_with_func_index (migrations.test_operations.OperationTests)",
                            "test_alter_field_with_func_unique_constraint (migrations.test_operations.OperationTests)",
                            "Test AlterField operation with an index to ensure indexes created via",
                            "Creating and then altering an FK works correctly",
                            "Altering an FK to a non-FK works (#23244)",
                            "Tests the AlterIndexTogether operation.",
                            "test_alter_index_together_remove (migrations.test_operations.OperationTests)",
                            "test_alter_index_together_remove_with_unique_together (migrations.test_operations.OperationTests)",
                            "The managers on a model are set.",
                            "Tests the AlterModelOptions operation.",
                            "The AlterModelOptions operation removes keys from the dict (#23121)",
                            "Tests the AlterModelTable operation.",
                            "AlterModelTable should rename auto-generated M2M tables.",
                            "Tests the AlterModelTable operation if the table name is set to None.",
                            "Tests the AlterModelTable operation if the table name is not changed.",
                            "Tests the AlterOrderWithRespectTo operation.",
                            "Tests the AlterUniqueTogether operation.",
                            "test_alter_unique_together_remove (migrations.test_operations.OperationTests)",
                            "A field may be migrated from AutoField to BigAutoField.",
                            "Column names that are SQL keywords shouldn't cause problems when used",
                            "Creation of models with a FK to a PK with db_collation.",
                            "Tests the CreateModel operation.",
                            "Tests the CreateModel operation on a multi-table inheritance setup.",
                            "Test the creation of a model with a ManyToMany field and the",
                            "test_create_model_with_boolean_expression_in_check_constraint (migrations.test_operations.OperationTests)",
                            "test_create_model_with_constraint (migrations.test_operations.OperationTests)",
                            "test_create_model_with_deferred_unique_constraint (migrations.test_operations.OperationTests)",
                            "test_create_model_with_duplicate_base (migrations.test_operations.OperationTests)",
                            "test_create_model_with_duplicate_field_name (migrations.test_operations.OperationTests)",
                            "test_create_model_with_duplicate_manager_name (migrations.test_operations.OperationTests)",
                            "test_create_model_with_partial_unique_constraint (migrations.test_operations.OperationTests)",
                            "Tests the CreateModel operation directly followed by an",
                            "CreateModel ignores proxy models.",
                            "CreateModel ignores unmanaged models.",
                            "Tests the DeleteModel operation.",
                            "test_delete_mti_model (migrations.test_operations.OperationTests)",
                            "Tests the DeleteModel operation ignores proxy models.",
                            "A model with BigAutoField can be created.",
                            "test_remove_constraint (migrations.test_operations.OperationTests)",
                            "test_remove_covering_unique_constraint (migrations.test_operations.OperationTests)",
                            "test_remove_deferred_unique_constraint (migrations.test_operations.OperationTests)",
                            "Tests the RemoveField operation.",
                            "test_remove_field_m2m (migrations.test_operations.OperationTests)",
                            "test_remove_field_m2m_with_through (migrations.test_operations.OperationTests)",
                            "Tests the RemoveField operation on a foreign key.",
                            "test_remove_func_index (migrations.test_operations.OperationTests)",
                            "test_remove_func_unique_constraint (migrations.test_operations.OperationTests)",
                            "Test the RemoveIndex operation.",
                            "test_remove_index_state_forwards (migrations.test_operations.OperationTests)",
                            "test_remove_partial_unique_constraint (migrations.test_operations.OperationTests)",
                            "Tests the RenameField operation.",
                            "test_rename_field_case (migrations.test_operations.OperationTests)",
                            "If RenameField doesn't reload state appropriately, the AlterField",
                            "test_rename_field_with_db_column (migrations.test_operations.OperationTests)",
                            "test_rename_index (migrations.test_operations.OperationTests)",
                            "test_rename_index_arguments (migrations.test_operations.OperationTests)",
                            "test_rename_index_state_forwards (migrations.test_operations.OperationTests)",
                            "test_rename_index_state_forwards_unnamed_index (migrations.test_operations.OperationTests)",
                            "test_rename_index_unknown_unnamed_index (migrations.test_operations.OperationTests)",
                            "RenameModel renames a many-to-many column after a RenameField.",
                            "test_rename_m2m_target_model (migrations.test_operations.OperationTests)",
                            "test_rename_m2m_through_model (migrations.test_operations.OperationTests)",
                            "test_rename_missing_field (migrations.test_operations.OperationTests)",
                            "Tests the RenameModel operation.",
                            "RenameModel operations shouldn't trigger the caching of rendered apps",
                            "test_rename_model_with_db_table_noop (migrations.test_operations.OperationTests)",
                            "test_rename_model_with_m2m (migrations.test_operations.OperationTests)",
                            "Tests the RenameModel operation on model with self referential FK.",
                            "test_rename_model_with_self_referential_m2m (migrations.test_operations.OperationTests)",
                            "Tests the RenameModel operation on a model which has a superclass that",
                            "test_rename_referenced_field_state_forward (migrations.test_operations.OperationTests)",
                            "test_repoint_field_m2m (migrations.test_operations.OperationTests)",
                            "Tests the RunPython operation",
                            "Tests the RunPython operation correctly handles the \"atomic\" keyword",
                            "#24098 - Tests no-op RunPython operations.",
                            "#24282 - Model changes to a FK reverse side update the model",
                            "Tests the RunSQL operation.",
                            "test_run_sql_add_missing_semicolon_on_collect_sql (migrations.test_operations.OperationTests)",
                            "#24098 - Tests no-op RunSQL operations.",
                            "#23426 - RunSQL should accept parameters.",
                            "#23426 - RunSQL should fail when a list of statements with an incorrect",
                            "Tests the SeparateDatabaseAndState operation.",
                            "A complex SeparateDatabaseAndState operation: Multiple operations both",
                            "A field may be migrated from SmallAutoField to AutoField.",
                            "A field may be migrated from SmallAutoField to BigAutoField."
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "django__django-13199.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "test_delete_cookie_samesite (responses.test_cookie.DeleteCookieTests)",
                            "test_session_delete_on_end (sessions_tests.tests.SessionMiddlewareTests)",
                            "test_session_delete_on_end_with_custom_domain_and_path (sessions_tests.tests.SessionMiddlewareTests)",
                            "test_cookie_setings (messages_tests.test_cookie.CookieTests)"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "test_default (responses.test_cookie.DeleteCookieTests)",
                            "test_delete_cookie_secure_prefix (responses.test_cookie.DeleteCookieTests)",
                            "set_cookie() accepts an aware datetime as expiration time.",
                            "Setting a cookie after deletion clears the expiry date.",
                            "Cookie will expire when a distant expiration time is provided.",
                            "test_httponly_cookie (responses.test_cookie.SetCookieTests)",
                            "test_invalid_samesite (responses.test_cookie.SetCookieTests)",
                            "Cookie will expire if max_age is provided.",
                            "Cookie will expire when a near expiration time is provided.",
                            "test_samesite (responses.test_cookie.SetCookieTests)",
                            "HttpResponse.set_cookie() works with unicode data.",
                            "test_clear (sessions_tests.tests.CookieSessionTests)",
                            "test_custom_expiry_datetime (sessions_tests.tests.CookieSessionTests)",
                            "test_custom_expiry_reset (sessions_tests.tests.CookieSessionTests)",
                            "test_custom_expiry_seconds (sessions_tests.tests.CookieSessionTests)",
                            "test_custom_expiry_timedelta (sessions_tests.tests.CookieSessionTests)",
                            "test_cycle (sessions_tests.tests.CookieSessionTests)",
                            "test_cycle_with_no_session_cache (sessions_tests.tests.CookieSessionTests)",
                            "test_decode (sessions_tests.tests.CookieSessionTests)",
                            "test_decode_failure_logged_to_security (sessions_tests.tests.CookieSessionTests)",
                            "test_default_expiry (sessions_tests.tests.CookieSessionTests)",
                            "test_delete (sessions_tests.tests.CookieSessionTests)",
                            "test_flush (sessions_tests.tests.CookieSessionTests)",
                            "test_get_empty (sessions_tests.tests.CookieSessionTests)",
                            "test_get_expire_at_browser_close (sessions_tests.tests.CookieSessionTests)",
                            "test_has_key (sessions_tests.tests.CookieSessionTests)",
                            "test_invalid_key (sessions_tests.tests.CookieSessionTests)",
                            "test_items (sessions_tests.tests.CookieSessionTests)",
                            "test_keys (sessions_tests.tests.CookieSessionTests)",
                            "test_new_session (sessions_tests.tests.CookieSessionTests)",
                            "test_pop (sessions_tests.tests.CookieSessionTests)",
                            "test_pop_default (sessions_tests.tests.CookieSessionTests)",
                            "test_pop_default_named_argument (sessions_tests.tests.CookieSessionTests)",
                            "test_pop_no_default_keyerror_raised (sessions_tests.tests.CookieSessionTests)",
                            "test_save (sessions_tests.tests.CookieSessionTests)",
                            "test_save_doesnt_clear_data (sessions_tests.tests.CookieSessionTests)",
                            "Falsey values (Such as an empty string) are rejected.",
                            "test_session_key_is_read_only (sessions_tests.tests.CookieSessionTests)",
                            "Strings shorter than 8 characters are rejected.",
                            "Strings of length 8 and up are accepted and stored.",
                            "test_setdefault (sessions_tests.tests.CookieSessionTests)",
                            "test_store (sessions_tests.tests.CookieSessionTests)",
                            "test_unpickling_exception (sessions_tests.tests.CookieSessionTests)",
                            "test_update (sessions_tests.tests.CookieSessionTests)",
                            "test_values (sessions_tests.tests.CookieSessionTests)",
                            "test_empty_session_saved (sessions_tests.tests.SessionMiddlewareTests)",
                            "test_flush_empty_without_session_cookie_doesnt_set_cookie (sessions_tests.tests.SessionMiddlewareTests)",
                            "test_httponly_session_cookie (sessions_tests.tests.SessionMiddlewareTests)",
                            "test_no_httponly_session_cookie (sessions_tests.tests.SessionMiddlewareTests)",
                            "test_samesite_session_cookie (sessions_tests.tests.SessionMiddlewareTests)",
                            "test_secure_session_cookie (sessions_tests.tests.SessionMiddlewareTests)",
                            "test_session_save_on_500 (sessions_tests.tests.SessionMiddlewareTests)",
                            "test_session_update_error_redirect (sessions_tests.tests.SessionMiddlewareTests)",
                            "test_actual_expiry (sessions_tests.tests.CacheSessionTests)",
                            "test_clear (sessions_tests.tests.CacheSessionTests)",
                            "test_create_and_save (sessions_tests.tests.CacheSessionTests)",
                            "test_custom_expiry_datetime (sessions_tests.tests.CacheSessionTests)",
                            "test_custom_expiry_reset (sessions_tests.tests.CacheSessionTests)",
                            "test_custom_expiry_seconds (sessions_tests.tests.CacheSessionTests)",
                            "test_custom_expiry_timedelta (sessions_tests.tests.CacheSessionTests)",
                            "test_cycle (sessions_tests.tests.CacheSessionTests)",
                            "test_cycle_with_no_session_cache (sessions_tests.tests.CacheSessionTests)",
                            "test_decode (sessions_tests.tests.CacheSessionTests)",
                            "test_decode_failure_logged_to_security (sessions_tests.tests.CacheSessionTests)",
                            "test_default_cache (sessions_tests.tests.CacheSessionTests)",
                            "test_default_expiry (sessions_tests.tests.CacheSessionTests)",
                            "test_delete (sessions_tests.tests.CacheSessionTests)",
                            "test_flush (sessions_tests.tests.CacheSessionTests)",
                            "test_get_empty (sessions_tests.tests.CacheSessionTests)",
                            "test_get_expire_at_browser_close (sessions_tests.tests.CacheSessionTests)",
                            "test_has_key (sessions_tests.tests.CacheSessionTests)",
                            "test_invalid_key (sessions_tests.tests.CacheSessionTests)",
                            "test_items (sessions_tests.tests.CacheSessionTests)",
                            "test_keys (sessions_tests.tests.CacheSessionTests)",
                            "test_load_overlong_key (sessions_tests.tests.CacheSessionTests)",
                            "test_new_session (sessions_tests.tests.CacheSessionTests)",
                            "test_non_default_cache (sessions_tests.tests.CacheSessionTests)",
                            "test_pop (sessions_tests.tests.CacheSessionTests)",
                            "test_pop_default (sessions_tests.tests.CacheSessionTests)",
                            "test_pop_default_named_argument (sessions_tests.tests.CacheSessionTests)",
                            "test_pop_no_default_keyerror_raised (sessions_tests.tests.CacheSessionTests)",
                            "test_save (sessions_tests.tests.CacheSessionTests)",
                            "test_save_doesnt_clear_data (sessions_tests.tests.CacheSessionTests)",
                            "test_session_key_is_read_only (sessions_tests.tests.CacheSessionTests)",
                            "test_session_load_does_not_create_record (sessions_tests.tests.CacheSessionTests)",
                            "test_session_save_does_not_resurrect_session_logged_out_in_other_context (sessions_tests.tests.CacheSessionTests)",
                            "test_setdefault (sessions_tests.tests.CacheSessionTests)",
                            "test_store (sessions_tests.tests.CacheSessionTests)",
                            "test_update (sessions_tests.tests.CacheSessionTests)",
                            "test_values (sessions_tests.tests.CacheSessionTests)",
                            "test_actual_expiry (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)",
                            "test_clear (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)",
                            "test_custom_expiry_datetime (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)",
                            "test_custom_expiry_reset (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)",
                            "test_custom_expiry_seconds (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)",
                            "test_custom_expiry_timedelta (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)",
                            "test_cycle (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)",
                            "test_cycle_with_no_session_cache (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)",
                            "test_decode (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)",
                            "test_decode_failure_logged_to_security (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)",
                            "test_default_expiry (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)",
                            "test_delete (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)",
                            "test_exists_searches_cache_first (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)",
                            "test_flush (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)",
                            "test_get_empty (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)",
                            "test_get_expire_at_browser_close (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)",
                            "test_has_key (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)",
                            "test_invalid_key (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)",
                            "test_items (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)",
                            "test_keys (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)",
                            "test_load_overlong_key (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)",
                            "test_new_session (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)",
                            "test_non_default_cache (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)",
                            "test_pop (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)",
                            "test_pop_default (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)",
                            "test_pop_default_named_argument (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)",
                            "test_pop_no_default_keyerror_raised (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)",
                            "test_save (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)",
                            "test_save_doesnt_clear_data (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)",
                            "test_session_key_is_read_only (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)",
                            "test_session_load_does_not_create_record (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)",
                            "test_session_save_does_not_resurrect_session_logged_out_in_other_context (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)",
                            "test_setdefault (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)",
                            "test_store (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)",
                            "test_update (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)",
                            "test_values (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)",
                            "test_actual_expiry (sessions_tests.tests.CacheDBSessionTests)",
                            "test_clear (sessions_tests.tests.CacheDBSessionTests)",
                            "test_custom_expiry_datetime (sessions_tests.tests.CacheDBSessionTests)",
                            "test_custom_expiry_reset (sessions_tests.tests.CacheDBSessionTests)",
                            "test_custom_expiry_seconds (sessions_tests.tests.CacheDBSessionTests)",
                            "test_custom_expiry_timedelta (sessions_tests.tests.CacheDBSessionTests)",
                            "test_cycle (sessions_tests.tests.CacheDBSessionTests)",
                            "test_cycle_with_no_session_cache (sessions_tests.tests.CacheDBSessionTests)",
                            "test_decode (sessions_tests.tests.CacheDBSessionTests)",
                            "test_decode_failure_logged_to_security (sessions_tests.tests.CacheDBSessionTests)",
                            "test_default_expiry (sessions_tests.tests.CacheDBSessionTests)",
                            "test_delete (sessions_tests.tests.CacheDBSessionTests)",
                            "test_exists_searches_cache_first (sessions_tests.tests.CacheDBSessionTests)",
                            "test_flush (sessions_tests.tests.CacheDBSessionTests)",
                            "test_get_empty (sessions_tests.tests.CacheDBSessionTests)",
                            "test_get_expire_at_browser_close (sessions_tests.tests.CacheDBSessionTests)",
                            "test_has_key (sessions_tests.tests.CacheDBSessionTests)",
                            "test_invalid_key (sessions_tests.tests.CacheDBSessionTests)",
                            "test_items (sessions_tests.tests.CacheDBSessionTests)",
                            "test_keys (sessions_tests.tests.CacheDBSessionTests)",
                            "test_load_overlong_key (sessions_tests.tests.CacheDBSessionTests)",
                            "test_new_session (sessions_tests.tests.CacheDBSessionTests)",
                            "test_non_default_cache (sessions_tests.tests.CacheDBSessionTests)",
                            "test_pop (sessions_tests.tests.CacheDBSessionTests)",
                            "test_pop_default (sessions_tests.tests.CacheDBSessionTests)",
                            "test_pop_default_named_argument (sessions_tests.tests.CacheDBSessionTests)",
                            "test_pop_no_default_keyerror_raised (sessions_tests.tests.CacheDBSessionTests)",
                            "test_save (sessions_tests.tests.CacheDBSessionTests)",
                            "test_save_doesnt_clear_data (sessions_tests.tests.CacheDBSessionTests)",
                            "test_session_key_is_read_only (sessions_tests.tests.CacheDBSessionTests)",
                            "test_session_load_does_not_create_record (sessions_tests.tests.CacheDBSessionTests)",
                            "test_session_save_does_not_resurrect_session_logged_out_in_other_context (sessions_tests.tests.CacheDBSessionTests)",
                            "test_setdefault (sessions_tests.tests.CacheDBSessionTests)",
                            "test_store (sessions_tests.tests.CacheDBSessionTests)",
                            "test_update (sessions_tests.tests.CacheDBSessionTests)",
                            "test_values (sessions_tests.tests.CacheDBSessionTests)",
                            "test_actual_expiry (sessions_tests.tests.FileSessionTests)",
                            "test_clear (sessions_tests.tests.FileSessionTests)",
                            "test_clearsessions_command (sessions_tests.tests.FileSessionTests)",
                            "test_configuration_check (sessions_tests.tests.FileSessionTests)",
                            "test_custom_expiry_datetime (sessions_tests.tests.FileSessionTests)",
                            "test_custom_expiry_reset (sessions_tests.tests.FileSessionTests)",
                            "test_custom_expiry_seconds (sessions_tests.tests.FileSessionTests)",
                            "test_custom_expiry_timedelta (sessions_tests.tests.FileSessionTests)",
                            "test_cycle (sessions_tests.tests.FileSessionTests)",
                            "test_cycle_with_no_session_cache (sessions_tests.tests.FileSessionTests)",
                            "test_decode (sessions_tests.tests.FileSessionTests)",
                            "test_decode_failure_logged_to_security (sessions_tests.tests.FileSessionTests)",
                            "test_default_expiry (sessions_tests.tests.FileSessionTests)",
                            "test_delete (sessions_tests.tests.FileSessionTests)",
                            "test_flush (sessions_tests.tests.FileSessionTests)",
                            "test_get_empty (sessions_tests.tests.FileSessionTests)",
                            "test_get_expire_at_browser_close (sessions_tests.tests.FileSessionTests)",
                            "test_has_key (sessions_tests.tests.FileSessionTests)",
                            "test_invalid_key (sessions_tests.tests.FileSessionTests)",
                            "test_invalid_key_backslash (sessions_tests.tests.FileSessionTests)",
                            "test_invalid_key_forwardslash (sessions_tests.tests.FileSessionTests)",
                            "test_items (sessions_tests.tests.FileSessionTests)",
                            "test_keys (sessions_tests.tests.FileSessionTests)",
                            "test_new_session (sessions_tests.tests.FileSessionTests)",
                            "test_pop (sessions_tests.tests.FileSessionTests)",
                            "test_pop_default (sessions_tests.tests.FileSessionTests)",
                            "test_pop_default_named_argument (sessions_tests.tests.FileSessionTests)",
                            "test_pop_no_default_keyerror_raised (sessions_tests.tests.FileSessionTests)",
                            "test_save (sessions_tests.tests.FileSessionTests)",
                            "test_save_doesnt_clear_data (sessions_tests.tests.FileSessionTests)",
                            "test_session_key_is_read_only (sessions_tests.tests.FileSessionTests)",
                            "test_session_load_does_not_create_record (sessions_tests.tests.FileSessionTests)",
                            "test_session_save_does_not_resurrect_session_logged_out_in_other_context (sessions_tests.tests.FileSessionTests)",
                            "test_setdefault (sessions_tests.tests.FileSessionTests)",
                            "test_store (sessions_tests.tests.FileSessionTests)",
                            "test_update (sessions_tests.tests.FileSessionTests)",
                            "test_values (sessions_tests.tests.FileSessionTests)",
                            "test_actual_expiry (sessions_tests.tests.DatabaseSessionTests)",
                            "test_clear (sessions_tests.tests.DatabaseSessionTests)",
                            "test_clearsessions_command (sessions_tests.tests.DatabaseSessionTests)",
                            "test_custom_expiry_datetime (sessions_tests.tests.DatabaseSessionTests)",
                            "test_custom_expiry_reset (sessions_tests.tests.DatabaseSessionTests)",
                            "test_custom_expiry_seconds (sessions_tests.tests.DatabaseSessionTests)",
                            "test_custom_expiry_timedelta (sessions_tests.tests.DatabaseSessionTests)",
                            "test_cycle (sessions_tests.tests.DatabaseSessionTests)",
                            "test_cycle_with_no_session_cache (sessions_tests.tests.DatabaseSessionTests)",
                            "test_decode (sessions_tests.tests.DatabaseSessionTests)",
                            "test_decode_failure_logged_to_security (sessions_tests.tests.DatabaseSessionTests)",
                            "test_default_expiry (sessions_tests.tests.DatabaseSessionTests)",
                            "test_delete (sessions_tests.tests.DatabaseSessionTests)",
                            "test_flush (sessions_tests.tests.DatabaseSessionTests)",
                            "test_get_empty (sessions_tests.tests.DatabaseSessionTests)",
                            "test_get_expire_at_browser_close (sessions_tests.tests.DatabaseSessionTests)",
                            "test_has_key (sessions_tests.tests.DatabaseSessionTests)",
                            "test_invalid_key (sessions_tests.tests.DatabaseSessionTests)",
                            "test_items (sessions_tests.tests.DatabaseSessionTests)",
                            "test_keys (sessions_tests.tests.DatabaseSessionTests)",
                            "test_new_session (sessions_tests.tests.DatabaseSessionTests)",
                            "test_pop (sessions_tests.tests.DatabaseSessionTests)",
                            "test_pop_default (sessions_tests.tests.DatabaseSessionTests)",
                            "test_pop_default_named_argument (sessions_tests.tests.DatabaseSessionTests)",
                            "test_pop_no_default_keyerror_raised (sessions_tests.tests.DatabaseSessionTests)",
                            "test_save (sessions_tests.tests.DatabaseSessionTests)",
                            "test_save_doesnt_clear_data (sessions_tests.tests.DatabaseSessionTests)",
                            "test_session_get_decoded (sessions_tests.tests.DatabaseSessionTests)",
                            "test_session_key_is_read_only (sessions_tests.tests.DatabaseSessionTests)",
                            "test_session_load_does_not_create_record (sessions_tests.tests.DatabaseSessionTests)",
                            "test_session_save_does_not_resurrect_session_logged_out_in_other_context (sessions_tests.tests.DatabaseSessionTests)",
                            "Session repr should be the session key.",
                            "test_sessionmanager_save (sessions_tests.tests.DatabaseSessionTests)",
                            "test_setdefault (sessions_tests.tests.DatabaseSessionTests)",
                            "test_store (sessions_tests.tests.DatabaseSessionTests)",
                            "test_update (sessions_tests.tests.DatabaseSessionTests)",
                            "test_values (sessions_tests.tests.DatabaseSessionTests)",
                            "test_actual_expiry (sessions_tests.tests.CustomDatabaseSessionTests)",
                            "test_clear (sessions_tests.tests.CustomDatabaseSessionTests)",
                            "test_clearsessions_command (sessions_tests.tests.CustomDatabaseSessionTests)",
                            "test_custom_expiry_datetime (sessions_tests.tests.CustomDatabaseSessionTests)",
                            "test_custom_expiry_reset (sessions_tests.tests.CustomDatabaseSessionTests)",
                            "test_custom_expiry_seconds (sessions_tests.tests.CustomDatabaseSessionTests)",
                            "test_custom_expiry_timedelta (sessions_tests.tests.CustomDatabaseSessionTests)",
                            "test_cycle (sessions_tests.tests.CustomDatabaseSessionTests)",
                            "test_cycle_with_no_session_cache (sessions_tests.tests.CustomDatabaseSessionTests)",
                            "test_decode (sessions_tests.tests.CustomDatabaseSessionTests)",
                            "test_decode_failure_logged_to_security (sessions_tests.tests.CustomDatabaseSessionTests)",
                            "test_default_expiry (sessions_tests.tests.CustomDatabaseSessionTests)",
                            "test_delete (sessions_tests.tests.CustomDatabaseSessionTests)",
                            "test_extra_session_field (sessions_tests.tests.CustomDatabaseSessionTests)",
                            "test_flush (sessions_tests.tests.CustomDatabaseSessionTests)",
                            "test_get_empty (sessions_tests.tests.CustomDatabaseSessionTests)",
                            "test_get_expire_at_browser_close (sessions_tests.tests.CustomDatabaseSessionTests)",
                            "test_has_key (sessions_tests.tests.CustomDatabaseSessionTests)",
                            "test_invalid_key (sessions_tests.tests.CustomDatabaseSessionTests)",
                            "test_items (sessions_tests.tests.CustomDatabaseSessionTests)",
                            "test_keys (sessions_tests.tests.CustomDatabaseSessionTests)",
                            "test_new_session (sessions_tests.tests.CustomDatabaseSessionTests)",
                            "test_pop (sessions_tests.tests.CustomDatabaseSessionTests)",
                            "test_pop_default (sessions_tests.tests.CustomDatabaseSessionTests)",
                            "test_pop_default_named_argument (sessions_tests.tests.CustomDatabaseSessionTests)",
                            "test_pop_no_default_keyerror_raised (sessions_tests.tests.CustomDatabaseSessionTests)",
                            "test_save (sessions_tests.tests.CustomDatabaseSessionTests)",
                            "test_save_doesnt_clear_data (sessions_tests.tests.CustomDatabaseSessionTests)",
                            "test_session_get_decoded (sessions_tests.tests.CustomDatabaseSessionTests)",
                            "test_session_key_is_read_only (sessions_tests.tests.CustomDatabaseSessionTests)",
                            "test_session_load_does_not_create_record (sessions_tests.tests.CustomDatabaseSessionTests)",
                            "test_session_save_does_not_resurrect_session_logged_out_in_other_context (sessions_tests.tests.CustomDatabaseSessionTests)",
                            "test_sessionmanager_save (sessions_tests.tests.CustomDatabaseSessionTests)",
                            "test_setdefault (sessions_tests.tests.CustomDatabaseSessionTests)",
                            "test_store (sessions_tests.tests.CustomDatabaseSessionTests)",
                            "test_update (sessions_tests.tests.CustomDatabaseSessionTests)",
                            "test_values (sessions_tests.tests.CustomDatabaseSessionTests)",
                            "test_actual_expiry (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)",
                            "test_clear (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)",
                            "test_clearsessions_command (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)",
                            "test_custom_expiry_datetime (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)",
                            "test_custom_expiry_reset (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)",
                            "test_custom_expiry_seconds (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)",
                            "test_custom_expiry_timedelta (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)",
                            "test_cycle (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)",
                            "test_cycle_with_no_session_cache (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)",
                            "test_decode (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)",
                            "test_decode_failure_logged_to_security (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)",
                            "test_default_expiry (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)",
                            "test_delete (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)",
                            "test_flush (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)",
                            "test_get_empty (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)",
                            "test_get_expire_at_browser_close (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)",
                            "test_has_key (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)",
                            "test_invalid_key (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)",
                            "test_items (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)",
                            "test_keys (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)",
                            "test_new_session (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)",
                            "test_pop (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)",
                            "test_pop_default (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)",
                            "test_pop_default_named_argument (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)",
                            "test_pop_no_default_keyerror_raised (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)",
                            "test_save (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)",
                            "test_save_doesnt_clear_data (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)",
                            "test_session_get_decoded (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)",
                            "test_session_key_is_read_only (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)",
                            "test_session_load_does_not_create_record (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)",
                            "test_session_save_does_not_resurrect_session_logged_out_in_other_context (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)",
                            "test_sessionmanager_save (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)",
                            "test_setdefault (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)",
                            "test_store (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)",
                            "test_update (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)",
                            "test_values (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)",
                            "test_add (messages_tests.test_cookie.CookieTests)",
                            "test_add_lazy_translation (messages_tests.test_cookie.CookieTests)",
                            "test_add_update (messages_tests.test_cookie.CookieTests)",
                            "test_context_processor_message_levels (messages_tests.test_cookie.CookieTests)",
                            "test_custom_tags (messages_tests.test_cookie.CookieTests)",
                            "test_default_level (messages_tests.test_cookie.CookieTests)",
                            "test_existing_add (messages_tests.test_cookie.CookieTests)",
                            "test_existing_add_read_update (messages_tests.test_cookie.CookieTests)",
                            "test_existing_read (messages_tests.test_cookie.CookieTests)",
                            "test_existing_read_add_update (messages_tests.test_cookie.CookieTests)",
                            "test_full_request_response_cycle (messages_tests.test_cookie.CookieTests)",
                            "test_get (messages_tests.test_cookie.CookieTests)",
                            "test_get_bad_cookie (messages_tests.test_cookie.CookieTests)",
                            "test_high_level (messages_tests.test_cookie.CookieTests)",
                            "test_json_encoder_decoder (messages_tests.test_cookie.CookieTests)",
                            "test_level_tag (messages_tests.test_cookie.CookieTests)",
                            "test_low_level (messages_tests.test_cookie.CookieTests)",
                            "test_max_cookie_length (messages_tests.test_cookie.CookieTests)",
                            "test_middleware_disabled (messages_tests.test_cookie.CookieTests)",
                            "test_middleware_disabled_fail_silently (messages_tests.test_cookie.CookieTests)",
                            "test_multiple_posts (messages_tests.test_cookie.CookieTests)",
                            "test_no_update (messages_tests.test_cookie.CookieTests)",
                            "test_pre_1_5_message_format (messages_tests.test_cookie.CookieTests)",
                            "test_safedata (messages_tests.test_cookie.CookieTests)",
                            "test_settings_level (messages_tests.test_cookie.CookieTests)",
                            "test_tags (messages_tests.test_cookie.CookieTests)",
                            "test_with_template_response (messages_tests.test_cookie.CookieTests)"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "matplotlib__matplotlib-14623.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "lib/matplotlib/tests/test_axes.py::test_inverted_limits"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "lib/matplotlib/tests/test_axes.py::test_get_labels",
                            "lib/matplotlib/tests/test_axes.py::test_spy_invalid_kwargs",
                            "lib/matplotlib/tests/test_axes.py::test_twinx_cla",
                            "lib/matplotlib/tests/test_axes.py::test_twin_inherit_autoscale_setting",
                            "lib/matplotlib/tests/test_axes.py::test_inverted_cla",
                            "lib/matplotlib/tests/test_axes.py::test_autoscale_tight",
                            "lib/matplotlib/tests/test_axes.py::test_autoscale_log_shared",
                            "lib/matplotlib/tests/test_axes.py::test_use_sticky_edges",
                            "lib/matplotlib/tests/test_axes.py::test_arrow_empty",
                            "lib/matplotlib/tests/test_axes.py::test_annotate_default_arrow",
                            "lib/matplotlib/tests/test_axes.py::test_structured_data",
                            "lib/matplotlib/tests/test_axes.py::test_hexbin_pickable",
                            "lib/matplotlib/tests/test_axes.py::test_fill_between_input[2d_x_input]",
                            "lib/matplotlib/tests/test_axes.py::test_fill_between_input[2d_y1_input]",
                            "lib/matplotlib/tests/test_axes.py::test_fill_between_input[2d_y2_input]",
                            "lib/matplotlib/tests/test_axes.py::test_fill_betweenx_input[2d_y_input]",
                            "lib/matplotlib/tests/test_axes.py::test_fill_betweenx_input[2d_x1_input]",
                            "lib/matplotlib/tests/test_axes.py::test_fill_betweenx_input[2d_x2_input]",
                            "lib/matplotlib/tests/test_axes.py::test_pcolorargs_5205",
                            "lib/matplotlib/tests/test_axes.py::test_pcolorargs",
                            "lib/matplotlib/tests/test_axes.py::test_bar_ticklabel_fail",
                            "lib/matplotlib/tests/test_axes.py::test_bar_color_none_alpha",
                            "lib/matplotlib/tests/test_axes.py::test_bar_edgecolor_none_alpha",
                            "lib/matplotlib/tests/test_axes.py::test_bar_timedelta",
                            "lib/matplotlib/tests/test_axes.py::test_hist_unequal_bins_density",
                            "lib/matplotlib/tests/test_axes.py::test_hist_datetime_datasets",
                            "lib/matplotlib/tests/test_axes.py::test_hist_with_empty_input[data0-1]",
                            "lib/matplotlib/tests/test_axes.py::test_hist_with_empty_input[data1-1]",
                            "lib/matplotlib/tests/test_axes.py::test_hist_with_empty_input[data2-2]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[0.5-None]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[rgby-None]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[rgb-shape]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[rgbrgb-shape]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case4-conversion]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[red-None]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[none-None]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[None-None]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case8-None]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[jaune-conversion]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case10-conversion]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case11-conversion]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case12-None]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case13-None]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case14-shape]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case15-None]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case16-None]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case17-conversion]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case18-None]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case19-shape]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case20-None]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case21-shape]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case22-None]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case23-shape]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case24-None]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case25-shape]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case26-None]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case27-shape]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case28-None]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case29-shape]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case30-conversion]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case31-conversion]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case32-conversion]",
                            "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params0-expected_result0]",
                            "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params1-expected_result1]",
                            "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params2-expected_result2]",
                            "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params3-expected_result3]",
                            "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params4-expected_result4]",
                            "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs0-None]",
                            "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs1-None]",
                            "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs2-r]",
                            "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs3-expected_edgecolors3]",
                            "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs4-r]",
                            "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs5-face]",
                            "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs6-none]",
                            "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs7-r]",
                            "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs8-r]",
                            "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs9-r]",
                            "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs10-g]",
                            "lib/matplotlib/tests/test_axes.py::test_pyplot_axes",
                            "lib/matplotlib/tests/test_axes.py::test_bxp_bad_widths",
                            "lib/matplotlib/tests/test_axes.py::test_bxp_bad_positions",
                            "lib/matplotlib/tests/test_axes.py::test_boxplot_bad_medians_1",
                            "lib/matplotlib/tests/test_axes.py::test_boxplot_bad_medians_2",
                            "lib/matplotlib/tests/test_axes.py::test_boxplot_bad_ci_1",
                            "lib/matplotlib/tests/test_axes.py::test_boxplot_zorder",
                            "lib/matplotlib/tests/test_axes.py::test_boxplot_bad_ci_2",
                            "lib/matplotlib/tests/test_axes.py::test_violinplot_bad_positions",
                            "lib/matplotlib/tests/test_axes.py::test_violinplot_bad_widths",
                            "lib/matplotlib/tests/test_axes.py::test_manage_xticks",
                            "lib/matplotlib/tests/test_axes.py::test_boxplot_not_single",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_colorcycle",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_shape",
                            "lib/matplotlib/tests/test_axes.py::test_errobar_nonefmt",
                            "lib/matplotlib/tests/test_axes.py::test_stem_args",
                            "lib/matplotlib/tests/test_axes.py::test_stem_dates",
                            "lib/matplotlib/tests/test_axes.py::test_hist_normed_density[False-False]",
                            "lib/matplotlib/tests/test_axes.py::test_hist_normed_density[False-True]",
                            "lib/matplotlib/tests/test_axes.py::test_hist_normed_density[True-False]",
                            "lib/matplotlib/tests/test_axes.py::test_hist_normed_density[True-True]",
                            "lib/matplotlib/tests/test_axes.py::test_hist_labels",
                            "lib/matplotlib/tests/test_axes.py::test_mollweide_forward_inverse_closure",
                            "lib/matplotlib/tests/test_axes.py::test_mollweide_inverse_forward_closure",
                            "lib/matplotlib/tests/test_axes.py::test_eventplot_colors[colors0]",
                            "lib/matplotlib/tests/test_axes.py::test_eventplot_colors[colors1]",
                            "lib/matplotlib/tests/test_axes.py::test_eventplot_colors[colors2]",
                            "lib/matplotlib/tests/test_axes.py::test_eventplot_colors[colors3]",
                            "lib/matplotlib/tests/test_axes.py::test_empty_eventplot",
                            "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data0-_empty]",
                            "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data1-vertical]",
                            "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data2-horizontal]",
                            "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data3-None]",
                            "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data4-none]",
                            "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data5-_empty]",
                            "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data6-vertical]",
                            "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data7-horizontal]",
                            "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data8-None]",
                            "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data9-none]",
                            "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data10-_empty]",
                            "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data11-vertical]",
                            "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data12-horizontal]",
                            "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data13-None]",
                            "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data14-none]",
                            "lib/matplotlib/tests/test_axes.py::test_subplot_key_hash",
                            "lib/matplotlib/tests/test_axes.py::test_rcparam_grid_minor",
                            "lib/matplotlib/tests/test_axes.py::test_vline_limit",
                            "lib/matplotlib/tests/test_axes.py::test_empty_shared_subplots",
                            "lib/matplotlib/tests/test_axes.py::test_shared_with_aspect_1",
                            "lib/matplotlib/tests/test_axes.py::test_shared_with_aspect_2",
                            "lib/matplotlib/tests/test_axes.py::test_shared_with_aspect_3",
                            "lib/matplotlib/tests/test_axes.py::test_twin_with_aspect[x]",
                            "lib/matplotlib/tests/test_axes.py::test_twin_with_aspect[y]",
                            "lib/matplotlib/tests/test_axes.py::test_relim_visible_only",
                            "lib/matplotlib/tests/test_axes.py::test_text_labelsize",
                            "lib/matplotlib/tests/test_axes.py::test_pie_textprops",
                            "lib/matplotlib/tests/test_axes.py::test_tick_label_update",
                            "lib/matplotlib/tests/test_axes.py::test_margins",
                            "lib/matplotlib/tests/test_axes.py::test_length_one_hist",
                            "lib/matplotlib/tests/test_axes.py::test_color_None",
                            "lib/matplotlib/tests/test_axes.py::test_color_alias",
                            "lib/matplotlib/tests/test_axes.py::test_numerical_hist_label",
                            "lib/matplotlib/tests/test_axes.py::test_unicode_hist_label",
                            "lib/matplotlib/tests/test_axes.py::test_move_offsetlabel",
                            "lib/matplotlib/tests/test_axes.py::test_rc_tick",
                            "lib/matplotlib/tests/test_axes.py::test_rc_major_minor_tick",
                            "lib/matplotlib/tests/test_axes.py::test_no_None",
                            "lib/matplotlib/tests/test_axes.py::test_pcolorfast_colormapped[xy0-AxesImage]",
                            "lib/matplotlib/tests/test_axes.py::test_pcolorfast_colormapped[xy1-AxesImage]",
                            "lib/matplotlib/tests/test_axes.py::test_pcolorfast_colormapped[xy2-AxesImage]",
                            "lib/matplotlib/tests/test_axes.py::test_pcolorfast_colormapped[xy3-PcolorImage]",
                            "lib/matplotlib/tests/test_axes.py::test_pcolorfast_colormapped[xy4-QuadMesh]",
                            "lib/matplotlib/tests/test_axes.py::test_shared_scale",
                            "lib/matplotlib/tests/test_axes.py::test_violin_point_mass",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs0]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs1]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs2]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs3]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs4]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs5]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs6]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs7]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs8]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs9]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs10]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs11]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs12]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs13]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs14]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs15]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs16]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs17]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs18]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs19]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs20]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs21]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs22]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs23]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs24]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs25]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs26]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs27]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs28]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs29]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs30]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs31]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs32]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs33]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs34]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs35]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs36]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs37]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs38]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs39]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs40]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs41]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs42]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs43]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs44]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs45]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs46]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs47]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs48]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs49]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs50]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs51]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs52]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs53]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs54]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs55]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs56]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs57]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs58]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs59]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs60]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs61]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs62]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs63]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs64]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs65]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs66]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs67]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs68]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs69]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs70]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs71]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs72]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs73]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs74]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs75]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs76]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs77]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs78]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs79]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs80]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs81]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs82]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs83]",
                            "lib/matplotlib/tests/test_axes.py::test_title_pad",
                            "lib/matplotlib/tests/test_axes.py::test_title_location_roundtrip",
                            "lib/matplotlib/tests/test_axes.py::test_axes_margins",
                            "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[gca-x]",
                            "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[gca-y]",
                            "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots-x]",
                            "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots-y]",
                            "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots_shared-x]",
                            "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots_shared-y]",
                            "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[add_axes-x]",
                            "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[add_axes-y]",
                            "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes_relim",
                            "lib/matplotlib/tests/test_axes.py::test_shared_axes_autoscale",
                            "lib/matplotlib/tests/test_axes.py::test_adjust_numtick_aspect",
                            "lib/matplotlib/tests/test_axes.py::test_broken_barh_empty",
                            "lib/matplotlib/tests/test_axes.py::test_broken_barh_timedelta",
                            "lib/matplotlib/tests/test_axes.py::test_axis_set_tick_params_labelsize_labelcolor",
                            "lib/matplotlib/tests/test_axes.py::test_axes_tick_params_gridlines",
                            "lib/matplotlib/tests/test_axes.py::test_axes_tick_params_ylabelside",
                            "lib/matplotlib/tests/test_axes.py::test_axes_tick_params_xlabelside",
                            "lib/matplotlib/tests/test_axes.py::test_none_kwargs",
                            "lib/matplotlib/tests/test_axes.py::test_ls_ds_conflict",
                            "lib/matplotlib/tests/test_axes.py::test_bar_uint8",
                            "lib/matplotlib/tests/test_axes.py::test_titlesetpos",
                            "lib/matplotlib/tests/test_axes.py::test_title_xticks_top",
                            "lib/matplotlib/tests/test_axes.py::test_title_xticks_top_both",
                            "lib/matplotlib/tests/test_axes.py::test_offset_label_color",
                            "lib/matplotlib/tests/test_axes.py::test_large_offset",
                            "lib/matplotlib/tests/test_axes.py::test_barb_units",
                            "lib/matplotlib/tests/test_axes.py::test_quiver_units",
                            "lib/matplotlib/tests/test_axes.py::test_bar_color_cycle",
                            "lib/matplotlib/tests/test_axes.py::test_tick_param_label_rotation",
                            "lib/matplotlib/tests/test_axes.py::test_fillbetween_cycle",
                            "lib/matplotlib/tests/test_axes.py::test_log_margins",
                            "lib/matplotlib/tests/test_axes.py::test_color_length_mismatch",
                            "lib/matplotlib/tests/test_axes.py::test_eventplot_legend",
                            "lib/matplotlib/tests/test_axes.py::test_bar_broadcast_args",
                            "lib/matplotlib/tests/test_axes.py::test_invalid_axis_limits",
                            "lib/matplotlib/tests/test_axes.py::test_minorticks_on[symlog-symlog]",
                            "lib/matplotlib/tests/test_axes.py::test_minorticks_on[symlog-log]",
                            "lib/matplotlib/tests/test_axes.py::test_minorticks_on[log-symlog]",
                            "lib/matplotlib/tests/test_axes.py::test_minorticks_on[log-log]",
                            "lib/matplotlib/tests/test_axes.py::test_twinx_knows_limits",
                            "lib/matplotlib/tests/test_axes.py::test_zero_linewidth",
                            "lib/matplotlib/tests/test_axes.py::test_empty_errorbar_legend",
                            "lib/matplotlib/tests/test_axes.py::test_plot_columns_cycle_deprecation",
                            "lib/matplotlib/tests/test_axes.py::test_tick_padding_tightbbox",
                            "lib/matplotlib/tests/test_axes.py::test_zoom_inset",
                            "lib/matplotlib/tests/test_axes.py::test_set_position",
                            "lib/matplotlib/tests/test_axes.py::test_spines_properbbox_after_zoom",
                            "lib/matplotlib/tests/test_axes.py::test_cartopy_backcompat",
                            "lib/matplotlib/tests/test_axes.py::test_gettightbbox_ignoreNaN",
                            "lib/matplotlib/tests/test_axes.py::test_scatter_empty_data",
                            "lib/matplotlib/tests/test_axes.py::test_deprecated_uppercase_colors",
                            "lib/matplotlib/tests/test_axes.py::test_secondary_fail",
                            "lib/matplotlib/tests/test_axes.py::test_secondary_resize",
                            "lib/matplotlib/tests/test_axes.py::test_nodecorator",
                            "lib/matplotlib/tests/test_axes.py::test_displaced_spine",
                            "lib/matplotlib/tests/test_axes.py::test_tickdirs",
                            "lib/matplotlib/tests/test_axes.py::test_minor_accountedfor",
                            "lib/matplotlib/tests/test_axes.py::test_axis_extent_arg",
                            "lib/matplotlib/tests/test_axes.py::test_datetime_masked",
                            "lib/matplotlib/tests/test_axes.py::test_hist_nan_data",
                            "lib/matplotlib/tests/test_axes.py::test_hist_range_and_density",
                            "lib/matplotlib/tests/test_axes.py::test_bar_errbar_zorder"
                        ],
                        "failure": [
                            "lib/matplotlib/tests/test_axes.py::test_twinx_axis_scales[png]",
                            "lib/matplotlib/tests/test_axes.py::test_minorticks_on_rcParams_both[png]",
                            "lib/matplotlib/tests/test_axes.py::test_autoscale_tiny_range[png]",
                            "lib/matplotlib/tests/test_axes.py::test_arrow_simple[png]",
                            "lib/matplotlib/tests/test_axes.py::test_hexbin_extent[png]",
                            "lib/matplotlib/tests/test_axes.py::test_hexbin_empty[png]",
                            "lib/matplotlib/tests/test_axes.py::test_imshow[png]",
                            "lib/matplotlib/tests/test_axes.py::test_polycollection_joinstyle[png]",
                            "lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate[png]",
                            "lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate_decreasing[png]",
                            "lib/matplotlib/tests/test_axes.py::test_pcolormesh[png]",
                            "lib/matplotlib/tests/test_axes.py::test_arc_angles[png]",
                            "lib/matplotlib/tests/test_axes.py::test_arc_ellipse[png]",
                            "lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales[png]",
                            "lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales_zoomed[png]",
                            "lib/matplotlib/tests/test_axes.py::test_markevery_log_scales[png]",
                            "lib/matplotlib/tests/test_axes.py::test_marker_edges[png]",
                            "lib/matplotlib/tests/test_axes.py::test_hist_log[png]",
                            "lib/matplotlib/tests/test_axes.py::test_hist_bar_empty[png]",
                            "lib/matplotlib/tests/test_axes.py::test_hist_step_empty[png]",
                            "lib/matplotlib/tests/test_axes.py::test_hist_step_filled[png]",
                            "lib/matplotlib/tests/test_axes.py::test_hist_step_log_bottom[png]",
                            "lib/matplotlib/tests/test_axes.py::test_contour_hatching[png]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_plot[png]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_2D[png]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_invalid_color[png]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_no_invalid_color[png]",
                            "lib/matplotlib/tests/test_axes.py::test_stackplot_baseline[png]",
                            "lib/matplotlib/tests/test_axes.py::test_bxp_horizontal[png]",
                            "lib/matplotlib/tests/test_axes.py::test_bxp_patchartist[png]",
                            "lib/matplotlib/tests/test_axes.py::test_bxp_custompatchartist[png]",
                            "lib/matplotlib/tests/test_axes.py::test_bxp_customoutlier[png]",
                            "lib/matplotlib/tests/test_axes.py::test_bxp_showcustommean[png]",
                            "lib/matplotlib/tests/test_axes.py::test_bxp_custombox[png]",
                            "lib/matplotlib/tests/test_axes.py::test_bxp_custommedian[png]",
                            "lib/matplotlib/tests/test_axes.py::test_bxp_customcap[png]",
                            "lib/matplotlib/tests/test_axes.py::test_bxp_customwhisker[png]",
                            "lib/matplotlib/tests/test_axes.py::test_bxp_shownotches[png]",
                            "lib/matplotlib/tests/test_axes.py::test_bxp_nocaps[png]",
                            "lib/matplotlib/tests/test_axes.py::test_bxp_nobox[png]",
                            "lib/matplotlib/tests/test_axes.py::test_bxp_no_flier_stats[png]",
                            "lib/matplotlib/tests/test_axes.py::test_bxp_showmean[png]",
                            "lib/matplotlib/tests/test_axes.py::test_bxp_showmeanasline[png]",
                            "lib/matplotlib/tests/test_axes.py::test_bxp_scalarwidth[png]",
                            "lib/matplotlib/tests/test_axes.py::test_bxp_customwidths[png]",
                            "lib/matplotlib/tests/test_axes.py::test_bxp_custompositions[png]",
                            "lib/matplotlib/tests/test_axes.py::test_boxplot_sym2[png]",
                            "lib/matplotlib/tests/test_axes.py::test_boxplot_sym[png]",
                            "lib/matplotlib/tests/test_axes.py::test_boxplot_rc_parameters[png]",
                            "lib/matplotlib/tests/test_axes.py::test_boxplot_with_CIarray[png]",
                            "lib/matplotlib/tests/test_axes.py::test_boxplot_no_weird_whisker[png]",
                            "lib/matplotlib/tests/test_axes.py::test_boxplot_mod_artist_after_plotting[png]",
                            "lib/matplotlib/tests/test_axes.py::test_tick_space_size_0",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_with_prop_cycle[png]",
                            "lib/matplotlib/tests/test_axes.py::test_hist_step[png]",
                            "lib/matplotlib/tests/test_axes.py::test_stem[png-w/",
                            "lib/matplotlib/tests/test_axes.py::test_stem[png-w/o",
                            "lib/matplotlib/tests/test_axes.py::test_stem_params[png]",
                            "lib/matplotlib/tests/test_axes.py::test_hist_step_bottom[png]",
                            "lib/matplotlib/tests/test_axes.py::test_transparent_markers[png]",
                            "lib/matplotlib/tests/test_axes.py::test_rgba_markers[png]",
                            "lib/matplotlib/tests/test_axes.py::test_mollweide_grid[png]",
                            "lib/matplotlib/tests/test_axes.py::test_alpha[png]",
                            "lib/matplotlib/tests/test_axes.py::test_eventplot[png]",
                            "lib/matplotlib/tests/test_axes.py::test_eventplot_defaults[png]",
                            "lib/matplotlib/tests/test_axes.py::test_eventplot_problem_kwargs[png]",
                            "lib/matplotlib/tests/test_axes.py::test_marker_styles[png]",
                            "lib/matplotlib/tests/test_axes.py::test_vertex_markers[png]",
                            "lib/matplotlib/tests/test_axes.py::test_step_linestyle[png]",
                            "lib/matplotlib/tests/test_axes.py::test_mixed_collection[png]",
                            "lib/matplotlib/tests/test_axes.py::test_specgram_freqs[png]",
                            "lib/matplotlib/tests/test_axes.py::test_specgram_noise[png]",
                            "lib/matplotlib/tests/test_axes.py::test_specgram_magnitude_freqs[png]",
                            "lib/matplotlib/tests/test_axes.py::test_specgram_magnitude_noise[png]",
                            "lib/matplotlib/tests/test_axes.py::test_specgram_angle_freqs[png]",
                            "lib/matplotlib/tests/test_axes.py::test_specgram_noise_angle[png]",
                            "lib/matplotlib/tests/test_axes.py::test_specgram_freqs_phase[png]",
                            "lib/matplotlib/tests/test_axes.py::test_specgram_noise_phase[png]",
                            "lib/matplotlib/tests/test_axes.py::test_psd_freqs[png]",
                            "lib/matplotlib/tests/test_axes.py::test_psd_noise[png]",
                            "lib/matplotlib/tests/test_axes.py::test_csd_freqs[png]",
                            "lib/matplotlib/tests/test_axes.py::test_csd_noise[png]",
                            "lib/matplotlib/tests/test_axes.py::test_magnitude_spectrum_freqs[png]",
                            "lib/matplotlib/tests/test_axes.py::test_magnitude_spectrum_noise[png]",
                            "lib/matplotlib/tests/test_axes.py::test_angle_spectrum_freqs[png]",
                            "lib/matplotlib/tests/test_axes.py::test_angle_spectrum_noise[png]",
                            "lib/matplotlib/tests/test_axes.py::test_phase_spectrum_freqs[png]",
                            "lib/matplotlib/tests/test_axes.py::test_phase_spectrum_noise[png]",
                            "lib/matplotlib/tests/test_axes.py::test_twin_spines[png]",
                            "lib/matplotlib/tests/test_axes.py::test_twin_spines_on_top[png]",
                            "lib/matplotlib/tests/test_axes.py::test_pathological_hexbin",
                            "lib/matplotlib/tests/test_axes.py::test_dash_offset[png]",
                            "lib/matplotlib/tests/test_axes.py::test_loglog[png]",
                            "lib/matplotlib/tests/test_axes.py::test_loglog_nonpos[png]",
                            "lib/matplotlib/tests/test_axes.py::test_axisbelow[png]",
                            "lib/matplotlib/tests/test_axes.py::test_markerfacecolor_none_alpha[png]",
                            "lib/matplotlib/tests/test_axes.py::test_annotate_across_transforms[png]",
                            "lib/matplotlib/tests/test_axes.py::test_axis_bool_arguments[png]"
                        ]
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "pylint-dev__pylint-4516.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "tests/lint/unittest_expand_modules.py::test__is_in_ignore_list_re_match",
                            "tests/lint/unittest_expand_modules.py::test__is_in_ignore_list_re_nomatch",
                            "tests/lint/unittest_expand_modules.py::test_expand_modules[files_or_modules0-expected0]",
                            "tests/lint/unittest_expand_modules.py::test_expand_modules[files_or_modules1-expected1]"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "psf__requests-2466.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "test_requests.py::RequestsTestCase::test_DIGEST_AUTH_RETURNS_COOKIE",
                            "test_requests.py::RequestsTestCase::test_auth_is_retained_for_redirect_on_host",
                            "test_requests.py::RequestsTestCase::test_auth_is_stripped_on_redirect_off_host",
                            "test_requests.py::RequestsTestCase::test_cookie_quote_wrapped",
                            "test_requests.py::RequestsTestCase::test_json_param_post_content_type_works",
                            "test_requests.py::RequestsTestCase::test_user_agent_transfers",
                            "test_requests.py::test_vendor_aliases"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "test_requests.py::RequestsTestCase::test_BASICAUTH_TUPLE_HTTP_200_OK_GET",
                            "test_requests.py::RequestsTestCase::test_DIGESTAUTH_QUOTES_QOP_VALUE",
                            "test_requests.py::RequestsTestCase::test_DIGESTAUTH_WRONG_HTTP_401_GET",
                            "test_requests.py::RequestsTestCase::test_DIGEST_AUTH_SETS_SESSION_COOKIES",
                            "test_requests.py::RequestsTestCase::test_DIGEST_HTTP_200_OK_GET",
                            "test_requests.py::RequestsTestCase::test_DIGEST_STREAM",
                            "test_requests.py::RequestsTestCase::test_HTTP_200_OK_GET_ALTERNATIVE",
                            "test_requests.py::RequestsTestCase::test_HTTP_200_OK_GET_WITH_MIXED_PARAMS",
                            "test_requests.py::RequestsTestCase::test_HTTP_200_OK_GET_WITH_PARAMS",
                            "test_requests.py::RequestsTestCase::test_HTTP_200_OK_HEAD",
                            "test_requests.py::RequestsTestCase::test_HTTP_200_OK_PUT",
                            "test_requests.py::RequestsTestCase::test_HTTP_302_ALLOW_REDIRECT_GET",
                            "test_requests.py::RequestsTestCase::test_LocationParseError",
                            "test_requests.py::RequestsTestCase::test_POSTBIN_GET_POST_FILES",
                            "test_requests.py::RequestsTestCase::test_POSTBIN_GET_POST_FILES_WITH_DATA",
                            "test_requests.py::RequestsTestCase::test_autoset_header_values_are_native",
                            "test_requests.py::RequestsTestCase::test_basic_auth_str_is_always_native",
                            "test_requests.py::RequestsTestCase::test_basic_building",
                            "test_requests.py::RequestsTestCase::test_can_send_file_object_with_non_string_filename",
                            "test_requests.py::RequestsTestCase::test_can_send_nonstring_objects_with_files",
                            "test_requests.py::RequestsTestCase::test_cannot_send_unprepared_requests",
                            "test_requests.py::RequestsTestCase::test_connection_error_invalid_domain",
                            "test_requests.py::RequestsTestCase::test_connection_error_invalid_port",
                            "test_requests.py::RequestsTestCase::test_cookie_as_dict_items",
                            "test_requests.py::RequestsTestCase::test_cookie_as_dict_keeps_items",
                            "test_requests.py::RequestsTestCase::test_cookie_as_dict_keeps_len",
                            "test_requests.py::RequestsTestCase::test_cookie_as_dict_keys",
                            "test_requests.py::RequestsTestCase::test_cookie_as_dict_values",
                            "test_requests.py::RequestsTestCase::test_cookie_parameters",
                            "test_requests.py::RequestsTestCase::test_cookie_persists_via_api",
                            "test_requests.py::RequestsTestCase::test_cookie_removed_on_expire",
                            "test_requests.py::RequestsTestCase::test_cookie_sent_on_redirect",
                            "test_requests.py::RequestsTestCase::test_custom_content_type",
                            "test_requests.py::RequestsTestCase::test_decompress_gzip",
                            "test_requests.py::RequestsTestCase::test_different_encodings_dont_break_post",
                            "test_requests.py::RequestsTestCase::test_entry_points",
                            "test_requests.py::RequestsTestCase::test_fixes_1329",
                            "test_requests.py::RequestsTestCase::test_generic_cookiejar_works",
                            "test_requests.py::RequestsTestCase::test_get_auth_from_url",
                            "test_requests.py::RequestsTestCase::test_get_auth_from_url_encoded_hashes",
                            "test_requests.py::RequestsTestCase::test_get_auth_from_url_encoded_spaces",
                            "test_requests.py::RequestsTestCase::test_get_auth_from_url_not_encoded_spaces",
                            "test_requests.py::RequestsTestCase::test_get_auth_from_url_percent_chars",
                            "test_requests.py::RequestsTestCase::test_header_keys_are_native",
                            "test_requests.py::RequestsTestCase::test_header_remove_is_case_insensitive",
                            "test_requests.py::RequestsTestCase::test_headers_on_session_with_None_are_not_sent",
                            "test_requests.py::RequestsTestCase::test_history_is_always_a_list",
                            "test_requests.py::RequestsTestCase::test_hook_receives_request_arguments",
                            "test_requests.py::RequestsTestCase::test_http_error",
                            "test_requests.py::RequestsTestCase::test_invalid_url",
                            "test_requests.py::RequestsTestCase::test_links",
                            "test_requests.py::RequestsTestCase::test_long_authinfo_in_url",
                            "test_requests.py::RequestsTestCase::test_manual_redirect_with_partial_body_read",
                            "test_requests.py::RequestsTestCase::test_mixed_case_scheme_acceptable",
                            "test_requests.py::RequestsTestCase::test_no_content_length",
                            "test_requests.py::RequestsTestCase::test_nonhttp_schemes_dont_check_URLs",
                            "test_requests.py::RequestsTestCase::test_override_content_length",
                            "test_requests.py::RequestsTestCase::test_param_cookiejar_works",
                            "test_requests.py::RequestsTestCase::test_params_are_added_before_fragment",
                            "test_requests.py::RequestsTestCase::test_params_are_merged_case_sensitive",
                            "test_requests.py::RequestsTestCase::test_path_is_not_double_encoded",
                            "test_requests.py::RequestsTestCase::test_prepare_request_with_bytestring_url",
                            "test_requests.py::RequestsTestCase::test_prepared_from_session",
                            "test_requests.py::RequestsTestCase::test_prepared_request_hook",
                            "test_requests.py::RequestsTestCase::test_pyopenssl_redirect",
                            "test_requests.py::RequestsTestCase::test_redirect_with_wrong_gzipped_header",
                            "test_requests.py::RequestsTestCase::test_request_and_response_are_pickleable",
                            "test_requests.py::RequestsTestCase::test_request_cookie_overrides_session_cookie",
                            "test_requests.py::RequestsTestCase::test_request_cookies_not_persisted",
                            "test_requests.py::RequestsTestCase::test_request_ok_set",
                            "test_requests.py::RequestsTestCase::test_requests_history_is_saved",
                            "test_requests.py::RequestsTestCase::test_requests_in_history_are_not_overridden",
                            "test_requests.py::RequestsTestCase::test_response_decode_unicode",
                            "test_requests.py::RequestsTestCase::test_response_is_iterable",
                            "test_requests.py::RequestsTestCase::test_session_hooks_are_overriden_by_request_hooks",
                            "test_requests.py::RequestsTestCase::test_session_hooks_are_used_with_no_request_hooks",
                            "test_requests.py::RequestsTestCase::test_session_pickling",
                            "test_requests.py::RequestsTestCase::test_set_cookie_on_301",
                            "test_requests.py::RequestsTestCase::test_status_raising",
                            "test_requests.py::RequestsTestCase::test_time_elapsed_blank",
                            "test_requests.py::RequestsTestCase::test_transport_adapter_ordering",
                            "test_requests.py::RequestsTestCase::test_unicode_get",
                            "test_requests.py::RequestsTestCase::test_unicode_header_name",
                            "test_requests.py::RequestsTestCase::test_unicode_method_name",
                            "test_requests.py::RequestsTestCase::test_unicode_multipart_post_fieldnames",
                            "test_requests.py::RequestsTestCase::test_uppercase_scheme_redirect",
                            "test_requests.py::RequestsTestCase::test_urlencoded_get_query_multivalued_param",
                            "test_requests.py::TestContentEncodingDetection::test_html4_pragma",
                            "test_requests.py::TestContentEncodingDetection::test_html_charset",
                            "test_requests.py::TestContentEncodingDetection::test_none",
                            "test_requests.py::TestContentEncodingDetection::test_precedence",
                            "test_requests.py::TestContentEncodingDetection::test_xhtml_pragma",
                            "test_requests.py::TestContentEncodingDetection::test_xml",
                            "test_requests.py::TestCaseInsensitiveDict::test_contains",
                            "test_requests.py::TestCaseInsensitiveDict::test_delitem",
                            "test_requests.py::TestCaseInsensitiveDict::test_docstring_example",
                            "test_requests.py::TestCaseInsensitiveDict::test_equality",
                            "test_requests.py::TestCaseInsensitiveDict::test_fixes_649",
                            "test_requests.py::TestCaseInsensitiveDict::test_get",
                            "test_requests.py::TestCaseInsensitiveDict::test_getitem",
                            "test_requests.py::TestCaseInsensitiveDict::test_iter",
                            "test_requests.py::TestCaseInsensitiveDict::test_iterable_init",
                            "test_requests.py::TestCaseInsensitiveDict::test_kwargs_init",
                            "test_requests.py::TestCaseInsensitiveDict::test_len",
                            "test_requests.py::TestCaseInsensitiveDict::test_lower_items",
                            "test_requests.py::TestCaseInsensitiveDict::test_mapping_init",
                            "test_requests.py::TestCaseInsensitiveDict::test_preserve_key_case",
                            "test_requests.py::TestCaseInsensitiveDict::test_preserve_last_key_case",
                            "test_requests.py::TestCaseInsensitiveDict::test_setdefault",
                            "test_requests.py::TestCaseInsensitiveDict::test_update",
                            "test_requests.py::TestCaseInsensitiveDict::test_update_retains_unchanged",
                            "test_requests.py::UtilsTestCase::test_address_in_network",
                            "test_requests.py::UtilsTestCase::test_dotted_netmask",
                            "test_requests.py::UtilsTestCase::test_get_auth_from_url",
                            "test_requests.py::UtilsTestCase::test_get_environ_proxies",
                            "test_requests.py::UtilsTestCase::test_get_environ_proxies_ip_ranges",
                            "test_requests.py::UtilsTestCase::test_guess_filename_when_filename_is_an_int",
                            "test_requests.py::UtilsTestCase::test_guess_filename_when_int",
                            "test_requests.py::UtilsTestCase::test_guess_filename_with_file_like_obj",
                            "test_requests.py::UtilsTestCase::test_guess_filename_with_unicode_name",
                            "test_requests.py::UtilsTestCase::test_is_ipv4_address",
                            "test_requests.py::UtilsTestCase::test_is_valid_cidr",
                            "test_requests.py::UtilsTestCase::test_requote_uri_properly_requotes",
                            "test_requests.py::UtilsTestCase::test_requote_uri_with_unquoted_percents",
                            "test_requests.py::UtilsTestCase::test_super_len_io_streams",
                            "test_requests.py::TestMorselToCookieExpires::test_expires_invalid_int",
                            "test_requests.py::TestMorselToCookieExpires::test_expires_invalid_str",
                            "test_requests.py::TestMorselToCookieExpires::test_expires_none",
                            "test_requests.py::TestMorselToCookieExpires::test_expires_valid_str",
                            "test_requests.py::TestMorselToCookieMaxAge::test_max_age_invalid_str",
                            "test_requests.py::TestMorselToCookieMaxAge::test_max_age_valid_int",
                            "test_requests.py::TestTimeout::test_stream_timeout",
                            "test_requests.py::TestTimeout::test_invalid_timeout",
                            "test_requests.py::TestTimeout::test_read_timeout",
                            "test_requests.py::TestTimeout::test_connect_timeout",
                            "test_requests.py::TestTimeout::test_total_timeout_connect",
                            "test_requests.py::TestTimeout::test_encoded_methods",
                            "test_requests.py::TestRedirects::test_requests_are_updated_each_time",
                            "test_requests.py::test_data_argument_accepts_tuples",
                            "test_requests.py::test_prepared_request_empty_copy",
                            "test_requests.py::test_prepared_request_no_cookies_copy",
                            "test_requests.py::test_prepared_request_complete_copy",
                            "test_requests.py::test_prepare_unicode_url"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "pylint-dev__pylint-8929.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "tests/reporters/unittest_json_reporter.py::test_simple_json_output_no_score",
                            "tests/reporters/unittest_json_reporter.py::test_simple_json_output_no_score_with_end_line",
                            "tests/reporters/unittest_json_reporter.py::test_serialize_deserialize[everything-defined]",
                            "tests/reporters/unittest_json_reporter.py::test_simple_json2_output",
                            "tests/reporters/unittest_json_reporter.py::test_serialize_deserialize_for_v2[everything-defined]",
                            "tests/reporters/unittest_json_reporter.py::test_serialize_deserialize_for_v2[not-everything-defined]",
                            "tests/reporters/unittest_json_reporter.py::test_json2_result_with_broken_score",
                            "tests/reporters/unittest_reporting.py::test_template_option",
                            "tests/reporters/unittest_reporting.py::test_template_option_default",
                            "tests/reporters/unittest_reporting.py::test_template_option_end_line",
                            "tests/reporters/unittest_reporting.py::test_template_option_non_existing",
                            "tests/reporters/unittest_reporting.py::test_template_option_with_header",
                            "tests/reporters/unittest_reporting.py::test_parseable_output_deprecated",
                            "tests/reporters/unittest_reporting.py::test_parseable_output_regression",
                            "tests/reporters/unittest_reporting.py::test_multi_format_output",
                            "tests/reporters/unittest_reporting.py::test_multi_reporter_independant_messages",
                            "tests/reporters/unittest_reporting.py::test_display_results_is_renamed",
                            "tests/test_self.py::TestRunTC::test_pkginfo",
                            "tests/test_self.py::TestRunTC::test_all",
                            "tests/test_self.py::TestRunTC::test_no_ext_file",
                            "tests/test_self.py::TestRunTC::test_w0704_ignored",
                            "tests/test_self.py::TestRunTC::test_exit_zero",
                            "tests/test_self.py::TestRunTC::test_nonexistent_config_file",
                            "tests/test_self.py::TestRunTC::test_error_missing_arguments",
                            "tests/test_self.py::TestRunTC::test_disable_all",
                            "tests/test_self.py::TestRunTC::test_no_out_encoding",
                            "tests/test_self.py::TestRunTC::test_parallel_execution",
                            "tests/test_self.py::TestRunTC::test_parallel_execution_missing_arguments",
                            "tests/test_self.py::TestRunTC::test_enable_all_works",
                            "tests/test_self.py::TestRunTC::test_wrong_import_position_when_others_disabled",
                            "tests/test_self.py::TestRunTC::test_type_annotation_names",
                            "tests/test_self.py::TestRunTC::test_import_itself_not_accounted_for_relative_imports",
                            "tests/test_self.py::TestRunTC::test_reject_empty_indent_strings",
                            "tests/test_self.py::TestRunTC::test_json_report_when_file_has_syntax_error",
                            "tests/test_self.py::TestRunTC::test_json_report_when_file_is_missing",
                            "tests/test_self.py::TestRunTC::test_json_report_does_not_escape_quotes",
                            "tests/test_self.py::TestRunTC::test_information_category_disabled_by_default",
                            "tests/test_self.py::TestRunTC::test_error_mode_shows_no_score",
                            "tests/test_self.py::TestRunTC::test_evaluation_score_shown_by_default",
                            "tests/test_self.py::TestRunTC::test_confidence_levels",
                            "tests/test_self.py::TestRunTC::test_bom_marker",
                            "tests/test_self.py::TestRunTC::test_pylintrc_plugin_duplicate_options",
                            "tests/test_self.py::TestRunTC::test_pylintrc_comments_in_values",
                            "tests/test_self.py::TestRunTC::test_no_crash_with_formatting_regex_defaults",
                            "tests/test_self.py::TestRunTC::test_getdefaultencoding_crashes_with_lc_ctype_utf8",
                            "tests/test_self.py::TestRunTC::test_parseable_file_path",
                            "tests/test_self.py::TestRunTC::test_stdin[/mymodule.py]",
                            "tests/test_self.py::TestRunTC::test_stdin[mymodule.py-mymodule-mymodule.py]",
                            "tests/test_self.py::TestRunTC::test_stdin_missing_modulename",
                            "tests/test_self.py::TestRunTC::test_relative_imports[False]",
                            "tests/test_self.py::TestRunTC::test_relative_imports[True]",
                            "tests/test_self.py::TestRunTC::test_stdin_syntax_error",
                            "tests/test_self.py::TestRunTC::test_version",
                            "tests/test_self.py::TestRunTC::test_fail_under",
                            "tests/test_self.py::TestRunTC::test_fail_on[-10-missing-function-docstring-fail_under_plus7_5.py-16]",
                            "tests/test_self.py::TestRunTC::test_fail_on[6-missing-function-docstring-fail_under_plus7_5.py-16]",
                            "tests/test_self.py::TestRunTC::test_fail_on[7.5-missing-function-docstring-fail_under_plus7_5.py-16]",
                            "tests/test_self.py::TestRunTC::test_fail_on[7.6-missing-function-docstring-fail_under_plus7_5.py-16]",
                            "tests/test_self.py::TestRunTC::test_fail_on[-11-missing-function-docstring-fail_under_minus10.py-22]",
                            "tests/test_self.py::TestRunTC::test_fail_on[-10-missing-function-docstring-fail_under_minus10.py-22]",
                            "tests/test_self.py::TestRunTC::test_fail_on[-9-missing-function-docstring-fail_under_minus10.py-22]",
                            "tests/test_self.py::TestRunTC::test_fail_on[-5-missing-function-docstring-fail_under_minus10.py-22]",
                            "tests/test_self.py::TestRunTC::test_fail_on[-10-broad-exception-caught-fail_under_plus7_5.py-0]",
                            "tests/test_self.py::TestRunTC::test_fail_on[6-broad-exception-caught-fail_under_plus7_5.py-0]",
                            "tests/test_self.py::TestRunTC::test_fail_on[7.5-broad-exception-caught-fail_under_plus7_5.py-0]",
                            "tests/test_self.py::TestRunTC::test_fail_on[7.6-broad-exception-caught-fail_under_plus7_5.py-16]",
                            "tests/test_self.py::TestRunTC::test_fail_on[-11-broad-exception-caught-fail_under_minus10.py-0]",
                            "tests/test_self.py::TestRunTC::test_fail_on[-10-broad-exception-caught-fail_under_minus10.py-0]",
                            "tests/test_self.py::TestRunTC::test_fail_on[-9-broad-exception-caught-fail_under_minus10.py-22]",
                            "tests/test_self.py::TestRunTC::test_fail_on[-5-broad-exception-caught-fail_under_minus10.py-22]",
                            "tests/test_self.py::TestRunTC::test_fail_on[-10-C0116-fail_under_plus7_5.py-16]",
                            "tests/test_self.py::TestRunTC::test_fail_on[-10-C-fail_under_plus7_5.py-16]",
                            "tests/test_self.py::TestRunTC::test_fail_on[-10-fake1,C,fake2-fail_under_plus7_5.py-16]",
                            "tests/test_self.py::TestRunTC::test_fail_on[-10-C0115-fail_under_plus7_5.py-0]",
                            "tests/test_self.py::TestRunTC::test_fail_on_edge_case[opts0-0]",
                            "tests/test_self.py::TestRunTC::test_fail_on_edge_case[opts1-0]",
                            "tests/test_self.py::TestRunTC::test_fail_on_edge_case[opts2-16]",
                            "tests/test_self.py::TestRunTC::test_fail_on_edge_case[opts3-16]",
                            "tests/test_self.py::TestRunTC::test_modify_sys_path",
                            "tests/test_self.py::TestRunTC::test_plugin_that_imports_from_open",
                            "tests/test_self.py::TestRunTC::test_do_not_import_files_from_local_directory[args0]",
                            "tests/test_self.py::TestRunTC::test_do_not_import_files_from_local_directory[args1]",
                            "tests/test_self.py::TestRunTC::test_import_plugin_from_local_directory_if_pythonpath_cwd",
                            "tests/test_self.py::TestRunTC::test_allow_import_of_files_found_in_modules_during_parallel_check",
                            "tests/test_self.py::TestRunTC::test_can_list_directories_without_dunder_init",
                            "tests/test_self.py::TestRunTC::test_jobs_score",
                            "tests/test_self.py::TestRunTC::test_regression_parallel_mode_without_filepath",
                            "tests/test_self.py::TestRunTC::test_output_file_valid_path",
                            "tests/test_self.py::TestRunTC::test_output_file_invalid_path_exits_with_code_32",
                            "tests/test_self.py::TestRunTC::test_fail_on_exit_code[args0-0]",
                            "tests/test_self.py::TestRunTC::test_fail_on_exit_code[args1-0]",
                            "tests/test_self.py::TestRunTC::test_fail_on_exit_code[args2-0]",
                            "tests/test_self.py::TestRunTC::test_fail_on_exit_code[args3-6]",
                            "tests/test_self.py::TestRunTC::test_fail_on_exit_code[args4-6]",
                            "tests/test_self.py::TestRunTC::test_fail_on_exit_code[args5-22]",
                            "tests/test_self.py::TestRunTC::test_fail_on_exit_code[args6-22]",
                            "tests/test_self.py::TestRunTC::test_fail_on_exit_code[args7-6]",
                            "tests/test_self.py::TestRunTC::test_fail_on_exit_code[args8-22]",
                            "tests/test_self.py::TestRunTC::test_one_module_fatal_error",
                            "tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args0-0]",
                            "tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args1-0]",
                            "tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args2-0]",
                            "tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args3-0]",
                            "tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args4-0]",
                            "tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args5-0]",
                            "tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args6-0]",
                            "tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args7-1]",
                            "tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args8-1]",
                            "tests/test_self.py::TestRunTC::test_output_file_can_be_combined_with_output_format_option[text-{path}:4:4:",
                            "tests/test_self.py::TestRunTC::test_output_file_can_be_combined_with_output_format_option[parseable-{path}:4:",
                            "tests/test_self.py::TestRunTC::test_output_file_can_be_combined_with_output_format_option[msvs-{path}(4):",
                            "tests/test_self.py::TestRunTC::test_output_file_can_be_combined_with_output_format_option[colorized-{path}:4:4:",
                            "tests/test_self.py::TestRunTC::test_output_file_can_be_combined_with_output_format_option[json-\"message\":",
                            "tests/test_self.py::TestRunTC::test_output_file_can_be_combined_with_output_format_option[json2-\"message\":",
                            "tests/test_self.py::TestRunTC::test_output_file_can_be_combined_with_custom_reporter",
                            "tests/test_self.py::TestRunTC::test_output_file_specified_in_rcfile",
                            "tests/test_self.py::TestRunTC::test_load_text_repoter_if_not_provided",
                            "tests/test_self.py::TestRunTC::test_regex_paths_csv_validator",
                            "tests/test_self.py::TestRunTC::test_max_inferred_for_complicated_class_hierarchy",
                            "tests/test_self.py::TestRunTC::test_recursive",
                            "tests/test_self.py::TestRunTC::test_recursive_globbing",
                            "tests/test_self.py::TestRunTC::test_ignore_recursive[ignored_subdirectory]",
                            "tests/test_self.py::TestRunTC::test_ignore_recursive[failing.py]",
                            "tests/test_self.py::TestRunTC::test_ignore_pattern_recursive[ignored_.*]",
                            "tests/test_self.py::TestRunTC::test_ignore_pattern_recursive[failing.*]",
                            "tests/test_self.py::TestRunTC::test_ignore_pattern_from_stdin",
                            "tests/test_self.py::TestRunTC::test_ignore_path_recursive[.*ignored.*]",
                            "tests/test_self.py::TestRunTC::test_ignore_path_recursive[.*failing.*]",
                            "tests/test_self.py::TestRunTC::test_recursive_current_dir",
                            "tests/test_self.py::TestRunTC::test_ignore_path_recursive_current_dir",
                            "tests/test_self.py::TestRunTC::test_syntax_error_invalid_encoding",
                            "tests/test_self.py::TestRunTC::test_encoding[good.py-]",
                            "tests/test_self.py::TestRunTC::test_encoding[bad_wrong_num.py-(syntax-error)]",
                            "tests/test_self.py::TestRunTC::test_encoding[bad_missing_num.py-(bad-file-encoding)]",
                            "tests/test_self.py::TestRunTC::test_line_too_long_useless_suppression",
                            "tests/test_self.py::TestRunTC::test_output_no_header",
                            "tests/test_self.py::TestRunTC::test_no_name_in_module",
                            "tests/test_self.py::TestCallbackOptions::test_output_of_callback_options[command0-Emittable",
                            "tests/test_self.py::TestCallbackOptions::test_output_of_callback_options[command1-Enabled",
                            "tests/test_self.py::TestCallbackOptions::test_output_of_callback_options[command2-nonascii-checker]",
                            "tests/test_self.py::TestCallbackOptions::test_output_of_callback_options[command3-Confidence(name='HIGH',",
                            "tests/test_self.py::TestCallbackOptions::test_output_of_callback_options[command4-pylint.extensions.empty_comment]",
                            "tests/test_self.py::TestCallbackOptions::test_output_of_callback_options[command5-Pylint",
                            "tests/test_self.py::TestCallbackOptions::test_output_of_callback_options[command6-Environment",
                            "tests/test_self.py::TestCallbackOptions::test_help_msg[args0-:unreachable",
                            "tests/test_self.py::TestCallbackOptions::test_help_msg[args1-No",
                            "tests/test_self.py::TestCallbackOptions::test_help_msg[args2---help-msg:",
                            "tests/test_self.py::TestCallbackOptions::test_help_msg[args3-:invalid-name",
                            "tests/test_self.py::TestCallbackOptions::test_generate_rcfile",
                            "tests/test_self.py::TestCallbackOptions::test_generate_config_disable_symbolic_names",
                            "tests/test_self.py::TestCallbackOptions::test_generate_toml_config",
                            "tests/test_self.py::TestCallbackOptions::test_generate_toml_config_disable_symbolic_names",
                            "tests/test_self.py::TestCallbackOptions::test_errors_only",
                            "tests/test_self.py::TestCallbackOptions::test_errors_only_functions_as_disable",
                            "tests/test_self.py::TestCallbackOptions::test_verbose",
                            "tests/test_self.py::TestCallbackOptions::test_enable_all_extensions"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "psf__requests-2873.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "test_requests.py::UtilsTestCase::test_super_len_correctly_calculates_len_of_partially_read_file"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "test_requests.py::TestRequests::test_entry_points",
                            "test_requests.py::TestRequests::test_invalid_url",
                            "test_requests.py::TestRequests::test_basic_building",
                            "test_requests.py::TestRequests::test_path_is_not_double_encoded",
                            "test_requests.py::TestRequests::test_params_are_added_before_fragment",
                            "test_requests.py::TestRequests::test_params_original_order_is_preserved_by_default",
                            "test_requests.py::TestRequests::test_params_bytes_are_encoded",
                            "test_requests.py::TestRequests::test_connection_error_invalid_domain",
                            "test_requests.py::TestRequests::test_connection_error_invalid_port",
                            "test_requests.py::TestRequests::test_LocationParseError",
                            "test_requests.py::TestRequests::test_links",
                            "test_requests.py::TestRequests::test_cookie_parameters",
                            "test_requests.py::TestRequests::test_cookie_as_dict_keeps_len",
                            "test_requests.py::TestRequests::test_cookie_as_dict_keeps_items",
                            "test_requests.py::TestRequests::test_cookie_as_dict_keys",
                            "test_requests.py::TestRequests::test_cookie_as_dict_values",
                            "test_requests.py::TestRequests::test_cookie_as_dict_items",
                            "test_requests.py::TestRequests::test_response_is_iterable",
                            "test_requests.py::TestRequests::test_response_decode_unicode",
                            "test_requests.py::TestRequests::test_get_auth_from_url",
                            "test_requests.py::TestRequests::test_get_auth_from_url_encoded_spaces",
                            "test_requests.py::TestRequests::test_get_auth_from_url_not_encoded_spaces",
                            "test_requests.py::TestRequests::test_get_auth_from_url_percent_chars",
                            "test_requests.py::TestRequests::test_get_auth_from_url_encoded_hashes",
                            "test_requests.py::TestRequests::test_http_error",
                            "test_requests.py::TestRequests::test_transport_adapter_ordering",
                            "test_requests.py::TestRequests::test_long_authinfo_in_url",
                            "test_requests.py::TestRequests::test_nonhttp_schemes_dont_check_URLs",
                            "test_requests.py::TestRequests::test_basic_auth_str_is_always_native",
                            "test_requests.py::TestContentEncodingDetection::test_html4_pragma",
                            "test_requests.py::TestContentEncodingDetection::test_html_charset",
                            "test_requests.py::TestContentEncodingDetection::test_none",
                            "test_requests.py::TestContentEncodingDetection::test_precedence",
                            "test_requests.py::TestContentEncodingDetection::test_xhtml_pragma",
                            "test_requests.py::TestContentEncodingDetection::test_xml",
                            "test_requests.py::TestCaseInsensitiveDict::test_contains",
                            "test_requests.py::TestCaseInsensitiveDict::test_copy",
                            "test_requests.py::TestCaseInsensitiveDict::test_delitem",
                            "test_requests.py::TestCaseInsensitiveDict::test_docstring_example",
                            "test_requests.py::TestCaseInsensitiveDict::test_equality",
                            "test_requests.py::TestCaseInsensitiveDict::test_fixes_649",
                            "test_requests.py::TestCaseInsensitiveDict::test_get",
                            "test_requests.py::TestCaseInsensitiveDict::test_getitem",
                            "test_requests.py::TestCaseInsensitiveDict::test_iter",
                            "test_requests.py::TestCaseInsensitiveDict::test_iterable_init",
                            "test_requests.py::TestCaseInsensitiveDict::test_kwargs_init",
                            "test_requests.py::TestCaseInsensitiveDict::test_len",
                            "test_requests.py::TestCaseInsensitiveDict::test_lower_items",
                            "test_requests.py::TestCaseInsensitiveDict::test_mapping_init",
                            "test_requests.py::TestCaseInsensitiveDict::test_preserve_key_case",
                            "test_requests.py::TestCaseInsensitiveDict::test_preserve_last_key_case",
                            "test_requests.py::TestCaseInsensitiveDict::test_setdefault",
                            "test_requests.py::TestCaseInsensitiveDict::test_update",
                            "test_requests.py::TestCaseInsensitiveDict::test_update_retains_unchanged",
                            "test_requests.py::UtilsTestCase::test_address_in_network",
                            "test_requests.py::UtilsTestCase::test_dotted_netmask",
                            "test_requests.py::UtilsTestCase::test_get_auth_from_url",
                            "test_requests.py::UtilsTestCase::test_get_environ_proxies",
                            "test_requests.py::UtilsTestCase::test_get_environ_proxies_ip_ranges",
                            "test_requests.py::UtilsTestCase::test_guess_filename_when_filename_is_an_int",
                            "test_requests.py::UtilsTestCase::test_guess_filename_when_int",
                            "test_requests.py::UtilsTestCase::test_guess_filename_with_file_like_obj",
                            "test_requests.py::UtilsTestCase::test_guess_filename_with_unicode_name",
                            "test_requests.py::UtilsTestCase::test_is_ipv4_address",
                            "test_requests.py::UtilsTestCase::test_is_valid_cidr",
                            "test_requests.py::UtilsTestCase::test_requote_uri_properly_requotes",
                            "test_requests.py::UtilsTestCase::test_requote_uri_with_unquoted_percents",
                            "test_requests.py::UtilsTestCase::test_select_proxies",
                            "test_requests.py::UtilsTestCase::test_super_len_io_streams",
                            "test_requests.py::TestMorselToCookieExpires::test_expires_invalid_int",
                            "test_requests.py::TestMorselToCookieExpires::test_expires_invalid_str",
                            "test_requests.py::TestMorselToCookieExpires::test_expires_none",
                            "test_requests.py::TestMorselToCookieExpires::test_expires_valid_str",
                            "test_requests.py::TestMorselToCookieMaxAge::test_max_age_invalid_str",
                            "test_requests.py::TestMorselToCookieMaxAge::test_max_age_valid_int",
                            "test_requests.py::TestTimeout::test_connect_timeout",
                            "test_requests.py::TestTimeout::test_total_timeout_connect",
                            "test_requests.py::test_data_argument_accepts_tuples",
                            "test_requests.py::test_prepared_request_empty_copy",
                            "test_requests.py::test_prepared_request_no_cookies_copy",
                            "test_requests.py::test_prepared_request_complete_copy",
                            "test_requests.py::test_prepare_unicode_url",
                            "test_requests.py::test_vendor_aliases"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "django__django-12869.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "test_collectstatis_check (staticfiles_tests.test_management.TestConfiguration)"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "test_no_files_created (staticfiles_tests.test_management.TestCollectionDryRun)",
                            "test_local_storage_detection_helper (staticfiles_tests.test_management.TestConfiguration)",
                            "test_location_empty (staticfiles_tests.test_management.TestConfiguration)",
                            "test_no_files_created (staticfiles_tests.test_management.TestCollectionDryRunManifestStaticFilesStorage)",
                            "test_no_warning (staticfiles_tests.test_management.TestCollectionOverwriteWarning)",
                            "test_warning (staticfiles_tests.test_management.TestCollectionOverwriteWarning)",
                            "test_skips_newer_files_in_remote_storage (staticfiles_tests.test_management.TestCollectionNeverCopyStorage)",
                            "test_no_files_created (staticfiles_tests.test_management.TestCollectionNonLocalStorage)",
                            "test_storage_properties (staticfiles_tests.test_management.TestCollectionNonLocalStorage)",
                            "test_custom_ignore_patterns (staticfiles_tests.test_management.TestCollectionCustomIgnorePatterns)",
                            "test_ordering_override (staticfiles_tests.test_management.TestCollectionFilesOverride)",
                            "test_cleared_not_found (staticfiles_tests.test_management.TestCollectionClear)",
                            "test_dir_not_exists (staticfiles_tests.test_management.TestCollectionClear)",
                            "test_handle_path_notimplemented (staticfiles_tests.test_management.TestCollectionClear)",
                            "test_404_response (staticfiles_tests.test_management.TestRunserver)",
                            "test_middleware_loaded_only_once (staticfiles_tests.test_management.TestRunserver)",
                            "test_app_files (staticfiles_tests.test_management.TestCollectionLinks)",
                            "test_broken_symlink (staticfiles_tests.test_management.TestCollectionLinks)",
                            "test_camelcase_filenames (staticfiles_tests.test_management.TestCollectionLinks)",
                            "test_clear_broken_symlink (staticfiles_tests.test_management.TestCollectionLinks)",
                            "test_filename_with_percent_sign (staticfiles_tests.test_management.TestCollectionLinks)",
                            "test_links_created (staticfiles_tests.test_management.TestCollectionLinks)",
                            "test_no_remote_link (staticfiles_tests.test_management.TestCollectionLinks)",
                            "test_nonascii_filenames (staticfiles_tests.test_management.TestCollectionLinks)",
                            "test_staticfiles_dirs (staticfiles_tests.test_management.TestCollectionLinks)",
                            "test_staticfiles_dirs_priority (staticfiles_tests.test_management.TestCollectionLinks)",
                            "test_staticfiles_dirs_subdir (staticfiles_tests.test_management.TestCollectionLinks)",
                            "test_symlinks_and_files_replaced (staticfiles_tests.test_management.TestCollectionLinks)",
                            "test_app_files (staticfiles_tests.test_management.TestCollectionExcludeNoDefaultIgnore)",
                            "test_camelcase_filenames (staticfiles_tests.test_management.TestCollectionExcludeNoDefaultIgnore)",
                            "test_filename_with_percent_sign (staticfiles_tests.test_management.TestCollectionExcludeNoDefaultIgnore)",
                            "test_no_common_ignore_patterns (staticfiles_tests.test_management.TestCollectionExcludeNoDefaultIgnore)",
                            "test_nonascii_filenames (staticfiles_tests.test_management.TestCollectionExcludeNoDefaultIgnore)",
                            "test_staticfiles_dirs (staticfiles_tests.test_management.TestCollectionExcludeNoDefaultIgnore)",
                            "test_staticfiles_dirs_priority (staticfiles_tests.test_management.TestCollectionExcludeNoDefaultIgnore)",
                            "test_staticfiles_dirs_subdir (staticfiles_tests.test_management.TestCollectionExcludeNoDefaultIgnore)",
                            "test_verbosity_0 (staticfiles_tests.test_management.TestCollectionVerbosity)",
                            "test_verbosity_1 (staticfiles_tests.test_management.TestCollectionVerbosity)",
                            "test_verbosity_1_with_post_process (staticfiles_tests.test_management.TestCollectionVerbosity)",
                            "test_verbosity_2 (staticfiles_tests.test_management.TestCollectionVerbosity)",
                            "test_verbosity_2_with_post_process (staticfiles_tests.test_management.TestCollectionVerbosity)",
                            "test_cancelled (staticfiles_tests.test_management.TestInteractiveMessages)",
                            "test_no_warning_for_empty_staticdir (staticfiles_tests.test_management.TestInteractiveMessages)",
                            "test_no_warning_when_staticdir_does_not_exist (staticfiles_tests.test_management.TestInteractiveMessages)",
                            "test_warning_when_clearing_staticdir (staticfiles_tests.test_management.TestInteractiveMessages)",
                            "test_warning_when_overwriting_files_in_staticdir (staticfiles_tests.test_management.TestInteractiveMessages)",
                            "test_all_files (staticfiles_tests.test_management.TestFindStatic)",
                            "test_all_files_less_verbose (staticfiles_tests.test_management.TestFindStatic)",
                            "test_all_files_more_verbose (staticfiles_tests.test_management.TestFindStatic)",
                            "test_app_files (staticfiles_tests.test_management.TestFindStatic)",
                            "test_camelcase_filenames (staticfiles_tests.test_management.TestFindStatic)",
                            "test_filename_with_percent_sign (staticfiles_tests.test_management.TestFindStatic)",
                            "test_nonascii_filenames (staticfiles_tests.test_management.TestFindStatic)",
                            "test_staticfiles_dirs (staticfiles_tests.test_management.TestFindStatic)",
                            "test_staticfiles_dirs_priority (staticfiles_tests.test_management.TestFindStatic)",
                            "test_staticfiles_dirs_subdir (staticfiles_tests.test_management.TestFindStatic)",
                            "test_app_files (staticfiles_tests.test_management.TestCollection)",
                            "test_camelcase_filenames (staticfiles_tests.test_management.TestCollection)",
                            "test_common_ignore_patterns (staticfiles_tests.test_management.TestCollection)",
                            "test_filename_with_percent_sign (staticfiles_tests.test_management.TestCollection)",
                            "test_ignore (staticfiles_tests.test_management.TestCollection)",
                            "test_nonascii_filenames (staticfiles_tests.test_management.TestCollection)",
                            "test_pathlib (staticfiles_tests.test_management.TestCollection)",
                            "test_staticfiles_dirs (staticfiles_tests.test_management.TestCollection)",
                            "test_staticfiles_dirs_priority (staticfiles_tests.test_management.TestCollection)",
                            "test_staticfiles_dirs_subdir (staticfiles_tests.test_management.TestCollection)",
                            "test_app_files (staticfiles_tests.test_management.TestCollectionPathLib)",
                            "test_camelcase_filenames (staticfiles_tests.test_management.TestCollectionPathLib)",
                            "test_common_ignore_patterns (staticfiles_tests.test_management.TestCollectionPathLib)",
                            "test_filename_with_percent_sign (staticfiles_tests.test_management.TestCollectionPathLib)",
                            "test_ignore (staticfiles_tests.test_management.TestCollectionPathLib)",
                            "test_nonascii_filenames (staticfiles_tests.test_management.TestCollectionPathLib)",
                            "test_pathlib (staticfiles_tests.test_management.TestCollectionPathLib)",
                            "test_staticfiles_dirs (staticfiles_tests.test_management.TestCollectionPathLib)",
                            "test_staticfiles_dirs_priority (staticfiles_tests.test_management.TestCollectionPathLib)",
                            "test_staticfiles_dirs_subdir (staticfiles_tests.test_management.TestCollectionPathLib)",
                            "test_missing_settings_dont_prevent_help (staticfiles_tests.test_management.TestCollectionHelpSubcommand)"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "pytest-dev__pytest-11125.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "testing/test_conftest.py::TestConftestValueAccessGlobal::test_value_access_not_existing[global]",
                            "testing/test_conftest.py::TestConftestValueAccessGlobal::test_value_access_by_path[global]",
                            "testing/test_conftest.py::TestConftestValueAccessGlobal::test_value_access_with_confmod[global]",
                            "testing/test_conftest.py::TestConftestValueAccessGlobal::test_value_access_not_existing[inpackage]",
                            "testing/test_conftest.py::TestConftestValueAccessGlobal::test_value_access_by_path[inpackage]",
                            "testing/test_conftest.py::TestConftestValueAccessGlobal::test_value_access_with_confmod[inpackage]",
                            "testing/test_conftest.py::test_conftest_in_nonpkg_with_init",
                            "testing/test_collection.py::test_initial_conftests_with_testpaths",
                            "testing/test_conftest.py::test_doubledash_considered",
                            "testing/test_conftest.py::test_issue151_load_all_conftests",
                            "testing/test_conftest.py::test_conftestcutdir",
                            "testing/test_conftest.py::test_conftestcutdir_inplace_considered",
                            "testing/test_conftest.py::test_setinitial_conftest_subdirs[test]",
                            "testing/test_conftest.py::test_setinitial_conftest_subdirs[tests]",
                            "testing/test_conftest.py::test_setinitial_conftest_subdirs[whatever]",
                            "testing/test_conftest.py::test_setinitial_conftest_subdirs[.dotdir]"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "testing/test_collection.py::TestCollector::test_collect_versus_item",
                            "testing/test_conftest.py::TestConftestValueAccessGlobal::test_basic_init[global]",
                            "testing/test_conftest.py::TestConftestValueAccessGlobal::test_immediate_initialiation_and_incremental_are_the_same[global]",
                            "testing/test_conftest.py::TestConftestValueAccessGlobal::test_basic_init[inpackage]",
                            "testing/test_conftest.py::TestConftestValueAccessGlobal::test_immediate_initialiation_and_incremental_are_the_same[inpackage]",
                            "testing/test_collection.py::TestCollector::test_check_equality",
                            "testing/test_collection.py::TestCollector::test_getparent_and_accessors",
                            "testing/test_collection.py::TestCollector::test_getcustomfile_roundtrip",
                            "testing/test_collection.py::TestCollector::test_can_skip_class_with_test_attr",
                            "testing/test_collection.py::TestCollectFS::test_ignored_certain_directories",
                            "testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs[activate]",
                            "testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs[activate.csh]",
                            "testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs[activate.fish]",
                            "testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs[Activate]",
                            "testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs[Activate.bat]",
                            "testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs[Activate.ps1]",
                            "testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs_norecursedirs_precedence[activate]",
                            "testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs_norecursedirs_precedence[activate.csh]",
                            "testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs_norecursedirs_precedence[activate.fish]",
                            "testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs_norecursedirs_precedence[Activate]",
                            "testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs_norecursedirs_precedence[Activate.bat]",
                            "testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs_norecursedirs_precedence[Activate.ps1]",
                            "testing/test_collection.py::TestCollectFS::test__in_venv[activate]",
                            "testing/test_collection.py::TestCollectFS::test__in_venv[activate.csh]",
                            "testing/test_collection.py::TestCollectFS::test__in_venv[activate.fish]",
                            "testing/test_collection.py::TestCollectFS::test__in_venv[Activate]",
                            "testing/test_collection.py::TestCollectFS::test__in_venv[Activate.bat]",
                            "testing/test_collection.py::TestCollectFS::test__in_venv[Activate.ps1]",
                            "testing/test_collection.py::TestCollectFS::test_custom_norecursedirs",
                            "testing/test_collection.py::TestCollectFS::test_testpaths_ini",
                            "testing/test_collection.py::TestCollectPluginHookRelay::test_pytest_collect_file",
                            "testing/test_collection.py::TestPrunetraceback::test_custom_repr_failure",
                            "testing/test_collection.py::TestCustomConftests::test_ignore_collect_path",
                            "testing/test_collection.py::TestCustomConftests::test_ignore_collect_not_called_on_argument",
                            "testing/test_collection.py::TestCustomConftests::test_collectignore_exclude_on_option",
                            "testing/test_collection.py::TestCustomConftests::test_collectignoreglob_exclude_on_option",
                            "testing/test_collection.py::TestCustomConftests::test_pytest_fs_collect_hooks_are_seen",
                            "testing/test_collection.py::TestCustomConftests::test_pytest_collect_file_from_sister_dir",
                            "testing/test_collection.py::TestSession::test_collect_topdir",
                            "testing/test_collection.py::TestSession::test_collect_protocol_single_function",
                            "testing/test_collection.py::TestSession::test_collect_protocol_method",
                            "testing/test_collection.py::TestSession::test_collect_custom_nodes_multi_id",
                            "testing/test_collection.py::TestSession::test_collect_subdir_event_ordering",
                            "testing/test_collection.py::TestSession::test_collect_two_commandline_args",
                            "testing/test_collection.py::TestSession::test_serialization_byid",
                            "testing/test_collection.py::TestSession::test_find_byid_without_instance_parents",
                            "testing/test_collection.py::Test_getinitialnodes::test_global_file",
                            "testing/test_collection.py::Test_getinitialnodes::test_pkgfile",
                            "testing/test_collection.py::Test_genitems::test_check_collect_hashes",
                            "testing/test_collection.py::Test_genitems::test_example_items1",
                            "testing/test_collection.py::Test_genitems::test_classmethod_is_discovered",
                            "testing/test_collection.py::Test_genitems::test_class_and_functions_discovery_using_glob",
                            "testing/test_collection.py::test_matchnodes_two_collections_same_file",
                            "testing/test_collection.py::TestNodeKeywords::test_no_under",
                            "testing/test_collection.py::TestNodeKeywords::test_issue345",
                            "testing/test_collection.py::TestNodeKeywords::test_keyword_matching_is_case_insensitive_by_default",
                            "testing/test_collection.py::TestNodeKeywords::test_duplicates_handled_correctly",
                            "testing/test_collection.py::TestNodeKeywords::test_unpacked_marks_added_to_keywords",
                            "testing/test_collection.py::test_exit_on_collection_error",
                            "testing/test_collection.py::test_exit_on_collection_with_maxfail_smaller_than_n_errors",
                            "testing/test_collection.py::test_exit_on_collection_with_maxfail_bigger_than_n_errors",
                            "testing/test_collection.py::test_continue_on_collection_errors",
                            "testing/test_collection.py::test_continue_on_collection_errors_maxfail",
                            "testing/test_collection.py::test_fixture_scope_sibling_conftests",
                            "testing/test_collection.py::test_collect_init_tests",
                            "testing/test_collection.py::test_collect_invalid_signature_message",
                            "testing/test_collection.py::test_collect_handles_raising_on_dunder_class",
                            "testing/test_collection.py::test_collect_with_chdir_during_import",
                            "testing/test_collection.py::test_large_option_breaks_initial_conftests",
                            "testing/test_collection.py::test_collect_symlink_file_arg",
                            "testing/test_collection.py::test_collect_symlink_out_of_tree",
                            "testing/test_collection.py::test_collectignore_via_conftest",
                            "testing/test_collection.py::test_collect_pkg_init_and_file_in_args",
                            "testing/test_collection.py::test_collect_pkg_init_only",
                            "testing/test_collection.py::test_collect_sub_with_symlinks[True]",
                            "testing/test_collection.py::test_collect_sub_with_symlinks[False]",
                            "testing/test_collection.py::test_collector_respects_tbstyle",
                            "testing/test_collection.py::test_does_not_eagerly_collect_packages",
                            "testing/test_collection.py::test_does_not_put_src_on_path",
                            "testing/test_collection.py::test_fscollector_from_parent",
                            "testing/test_collection.py::test_class_from_parent",
                            "testing/test_collection.py::TestImportModeImportlib::test_collect_duplicate_names",
                            "testing/test_collection.py::TestImportModeImportlib::test_conftest",
                            "testing/test_collection.py::TestImportModeImportlib::test_modules_importable_as_side_effect",
                            "testing/test_collection.py::TestImportModeImportlib::test_modules_not_importable_as_side_effect",
                            "testing/test_collection.py::TestImportModeImportlib::test_using_python_path",
                            "testing/test_collection.py::test_does_not_crash_on_error_from_decorated_function",
                            "testing/test_collection.py::test_does_not_crash_on_recursive_symlink",
                            "testing/test_conftest.py::test_conftest_global_import",
                            "testing/test_conftest.py::test_conftest_confcutdir",
                            "testing/test_conftest.py::test_installed_conftest_is_picked_up",
                            "testing/test_conftest.py::test_conftest_symlink",
                            "testing/test_conftest.py::test_conftest_symlink_files",
                            "testing/test_conftest.py::test_conftest_uppercase",
                            "testing/test_conftest.py::test_no_conftest",
                            "testing/test_conftest.py::test_conftest_existing_junitxml",
                            "testing/test_conftest.py::test_conftest_import_order",
                            "testing/test_conftest.py::test_fixture_dependency",
                            "testing/test_conftest.py::test_conftest_found_with_double_dash",
                            "testing/test_conftest.py::TestConftestVisibility::test_parsefactories_relative_node_ids[runner-..-3]",
                            "testing/test_conftest.py::TestConftestVisibility::test_parsefactories_relative_node_ids[package-..-3]",
                            "testing/test_conftest.py::TestConftestVisibility::test_parsefactories_relative_node_ids[swc-../..-3]",
                            "testing/test_conftest.py::TestConftestVisibility::test_parsefactories_relative_node_ids[snc-../..-3]",
                            "testing/test_conftest.py::TestConftestVisibility::test_parsefactories_relative_node_ids[runner-../package-3]",
                            "testing/test_conftest.py::TestConftestVisibility::test_parsefactories_relative_node_ids[package-.-3]",
                            "testing/test_conftest.py::TestConftestVisibility::test_parsefactories_relative_node_ids[swc-..-3]",
                            "testing/test_conftest.py::TestConftestVisibility::test_parsefactories_relative_node_ids[snc-..-3]",
                            "testing/test_conftest.py::TestConftestVisibility::test_parsefactories_relative_node_ids[runner-../package/swc-1]",
                            "testing/test_conftest.py::TestConftestVisibility::test_parsefactories_relative_node_ids[package-./swc-1]",
                            "testing/test_conftest.py::TestConftestVisibility::test_parsefactories_relative_node_ids[swc-.-1]",
                            "testing/test_conftest.py::TestConftestVisibility::test_parsefactories_relative_node_ids[snc-../swc-1]",
                            "testing/test_conftest.py::TestConftestVisibility::test_parsefactories_relative_node_ids[runner-../package/snc-1]",
                            "testing/test_conftest.py::TestConftestVisibility::test_parsefactories_relative_node_ids[package-./snc-1]",
                            "testing/test_conftest.py::TestConftestVisibility::test_parsefactories_relative_node_ids[swc-../snc-1]",
                            "testing/test_conftest.py::TestConftestVisibility::test_parsefactories_relative_node_ids[snc-.-1]",
                            "testing/test_conftest.py::test_search_conftest_up_to_inifile[.-2-0]",
                            "testing/test_conftest.py::test_search_conftest_up_to_inifile[src-1-1]",
                            "testing/test_conftest.py::test_search_conftest_up_to_inifile[None-1-1]",
                            "testing/test_conftest.py::test_issue1073_conftest_special_objects",
                            "testing/test_conftest.py::test_conftest_exception_handling",
                            "testing/test_conftest.py::test_hook_proxy",
                            "testing/test_conftest.py::test_required_option_help",
                            "testing/test_collection.py::test_collect_pyargs_with_testpaths"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "psf__requests-5414.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "tests/test_requests.py::TestRequests::test_invalid_url[InvalidURL-http://.example.com]"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "tests/test_requests.py::TestRequests::test_entry_points",
                            "tests/test_requests.py::TestRequests::test_invalid_url[MissingSchema-hiwpefhipowhefopw]",
                            "tests/test_requests.py::TestRequests::test_invalid_url[InvalidSchema-localhost:3128]",
                            "tests/test_requests.py::TestRequests::test_invalid_url[InvalidSchema-localhost.localdomain:3128/]",
                            "tests/test_requests.py::TestRequests::test_invalid_url[InvalidSchema-10.122.1.1:3128/]",
                            "tests/test_requests.py::TestRequests::test_invalid_url[InvalidURL-http://]",
                            "tests/test_requests.py::TestRequests::test_invalid_url[InvalidURL-http://*example.com]",
                            "tests/test_requests.py::TestRequests::test_basic_building",
                            "tests/test_requests.py::TestRequests::test_path_is_not_double_encoded",
                            "tests/test_requests.py::TestRequests::test_params_are_added_before_fragment[http://example.com/path#fragment-http://example.com/path?a=b#fragment]",
                            "tests/test_requests.py::TestRequests::test_params_are_added_before_fragment[http://example.com/path?key=value#fragment-http://example.com/path?key=value&a=b#fragment]",
                            "tests/test_requests.py::TestRequests::test_params_original_order_is_preserved_by_default",
                            "tests/test_requests.py::TestRequests::test_params_bytes_are_encoded",
                            "tests/test_requests.py::TestRequests::test_binary_put",
                            "tests/test_requests.py::TestRequests::test_whitespaces_are_removed_from_url",
                            "tests/test_requests.py::TestRequests::test_basicauth_encodes_byte_strings",
                            "tests/test_requests.py::TestRequests::test_errors[http://doesnotexist.google.com-ConnectionError]",
                            "tests/test_requests.py::TestRequests::test_errors[http://localhost:1-ConnectionError]",
                            "tests/test_requests.py::TestRequests::test_errors[http://fe80::5054:ff:fe5a:fc0-InvalidURL]",
                            "tests/test_requests.py::TestRequests::test_proxy_error",
                            "tests/test_requests.py::TestRequests::test_non_prepared_request_error",
                            "tests/test_requests.py::TestRequests::test_prepare_request_with_bytestring_url",
                            "tests/test_requests.py::TestRequests::test_links",
                            "tests/test_requests.py::TestRequests::test_cookie_parameters",
                            "tests/test_requests.py::TestRequests::test_cookie_as_dict_keeps_len",
                            "tests/test_requests.py::TestRequests::test_cookie_as_dict_keeps_items",
                            "tests/test_requests.py::TestRequests::test_cookie_as_dict_keys",
                            "tests/test_requests.py::TestRequests::test_cookie_as_dict_values",
                            "tests/test_requests.py::TestRequests::test_cookie_as_dict_items",
                            "tests/test_requests.py::TestRequests::test_cookie_duplicate_names_different_domains",
                            "tests/test_requests.py::TestRequests::test_cookie_duplicate_names_raises_cookie_conflict_error",
                            "tests/test_requests.py::TestRequests::test_cookie_policy_copy",
                            "tests/test_requests.py::TestRequests::test_empty_response_has_content_none",
                            "tests/test_requests.py::TestRequests::test_response_is_iterable",
                            "tests/test_requests.py::TestRequests::test_response_decode_unicode",
                            "tests/test_requests.py::TestRequests::test_response_reason_unicode",
                            "tests/test_requests.py::TestRequests::test_response_reason_unicode_fallback",
                            "tests/test_requests.py::TestRequests::test_response_chunk_size_type",
                            "tests/test_requests.py::TestRequests::test_http_error",
                            "tests/test_requests.py::TestRequests::test_transport_adapter_ordering",
                            "tests/test_requests.py::TestRequests::test_session_get_adapter_prefix_matching",
                            "tests/test_requests.py::TestRequests::test_session_get_adapter_prefix_matching_mixed_case",
                            "tests/test_requests.py::TestRequests::test_session_get_adapter_prefix_matching_is_case_insensitive",
                            "tests/test_requests.py::TestRequests::test_long_authinfo_in_url",
                            "tests/test_requests.py::TestRequests::test_nonhttp_schemes_dont_check_URLs",
                            "tests/test_requests.py::TestRequests::test_should_strip_auth_host_change",
                            "tests/test_requests.py::TestRequests::test_should_strip_auth_http_downgrade",
                            "tests/test_requests.py::TestRequests::test_should_strip_auth_https_upgrade",
                            "tests/test_requests.py::TestRequests::test_should_strip_auth_port_change",
                            "tests/test_requests.py::TestRequests::test_should_strip_auth_default_port[https://example.com:443/foo-https://example.com/bar]",
                            "tests/test_requests.py::TestRequests::test_should_strip_auth_default_port[http://example.com:80/foo-http://example.com/bar]",
                            "tests/test_requests.py::TestRequests::test_should_strip_auth_default_port[https://example.com/foo-https://example.com:443/bar]",
                            "tests/test_requests.py::TestRequests::test_should_strip_auth_default_port[http://example.com/foo-http://example.com:80/bar]",
                            "tests/test_requests.py::TestRequests::test_prepare_body_position_non_stream",
                            "tests/test_requests.py::TestRequests::test_rewind_body",
                            "tests/test_requests.py::TestRequests::test_rewind_partially_read_body",
                            "tests/test_requests.py::TestRequests::test_rewind_body_no_seek",
                            "tests/test_requests.py::TestRequests::test_rewind_body_failed_seek",
                            "tests/test_requests.py::TestRequests::test_rewind_body_failed_tell",
                            "tests/test_requests.py::TestRequests::test_basic_auth_str_is_always_native[test-test-Basic",
                            "tests/test_requests.py::TestRequests::test_basic_auth_str_is_always_native[\\xd0\\xb8\\xd0\\xbc\\xd1\\x8f-\\xd0\\xbf\\xd0\\xb0\\xd1\\x80\\xd0\\xbe\\xd0\\xbb\\xd1\\x8c-Basic",
                            "tests/test_requests.py::TestRequests::test_proxy_auth",
                            "tests/test_requests.py::TestRequests::test_proxy_auth_empty_pass",
                            "tests/test_requests.py::TestRequests::test_response_without_release_conn",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_init[cid0]",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_init[cid1]",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_init[cid2]",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_docstring_example",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_len",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_getitem",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_fixes_649",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_delitem",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_contains",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_get",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_update",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_update_retains_unchanged",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_iter",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_equality",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_setdefault",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_lower_items",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_preserve_key_case",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_preserve_last_key_case",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_copy",
                            "tests/test_requests.py::TestMorselToCookieExpires::test_expires_valid_str",
                            "tests/test_requests.py::TestMorselToCookieExpires::test_expires_invalid_int[100-TypeError]",
                            "tests/test_requests.py::TestMorselToCookieExpires::test_expires_invalid_int[woops-ValueError]",
                            "tests/test_requests.py::TestMorselToCookieExpires::test_expires_none",
                            "tests/test_requests.py::TestMorselToCookieMaxAge::test_max_age_valid_int",
                            "tests/test_requests.py::TestMorselToCookieMaxAge::test_max_age_invalid_str",
                            "tests/test_requests.py::TestTimeout::test_connect_timeout[timeout0]",
                            "tests/test_requests.py::TestTimeout::test_connect_timeout[timeout1]",
                            "tests/test_requests.py::TestTimeout::test_total_timeout_connect[timeout0]",
                            "tests/test_requests.py::TestTimeout::test_total_timeout_connect[timeout1]",
                            "tests/test_requests.py::test_json_encodes_as_bytes",
                            "tests/test_requests.py::test_proxy_env_vars_override_default[http_proxy-http://example.com-socks5://proxy.com:9876]",
                            "tests/test_requests.py::test_proxy_env_vars_override_default[https_proxy-https://example.com-socks5://proxy.com:9876]",
                            "tests/test_requests.py::test_proxy_env_vars_override_default[all_proxy-http://example.com-socks5://proxy.com:9876]",
                            "tests/test_requests.py::test_proxy_env_vars_override_default[all_proxy-https://example.com-socks5://proxy.com:9876]",
                            "tests/test_requests.py::test_data_argument_accepts_tuples[data0]",
                            "tests/test_requests.py::test_data_argument_accepts_tuples[data1]",
                            "tests/test_requests.py::test_data_argument_accepts_tuples[data2]",
                            "tests/test_requests.py::test_prepared_copy[None]",
                            "tests/test_requests.py::test_prepared_copy[kwargs1]",
                            "tests/test_requests.py::test_prepared_copy[kwargs2]",
                            "tests/test_requests.py::test_prepared_copy[kwargs3]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://google.com-http://google.com/]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://\\u30b8\\u30a7\\u30fc\\u30d4\\u30fc\\u30cb\\u30c3\\u30af.jp-http://xn--hckqz9bzb1cyrb.jp/]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://xn--n3h.net/-http://xn--n3h.net/0]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://\\xe3\\x82\\xb8\\xe3\\x82\\xa7\\xe3\\x83\\xbc\\xe3\\x83\\x94\\xe3\\x83\\xbc\\xe3\\x83\\x8b\\xe3\\x83\\x83\\xe3\\x82\\xaf.jp-http://xn--hckqz9bzb1cyrb.jp/]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://stra\\xdfe.de/stra\\xdfe-http://xn--strae-oqa.de/stra%C3%9Fe]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://stra\\xc3\\x9fe.de/stra\\xc3\\x9fe-http://xn--strae-oqa.de/stra%C3%9Fe]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://K\\xf6nigsg\\xe4\\xdfchen.de/stra\\xdfe-http://xn--knigsgchen-b4a3dun.de/stra%C3%9Fe]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://K\\xc3\\xb6nigsg\\xc3\\xa4\\xc3\\x9fchen.de/stra\\xc3\\x9fe-http://xn--knigsgchen-b4a3dun.de/stra%C3%9Fe]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://xn--n3h.net/-http://xn--n3h.net/1]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://[1200:0000:ab00:1234:0000:2552:7777:1313]:12345/-http://[1200:0000:ab00:1234:0000:2552:7777:1313]:12345/0]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://[1200:0000:ab00:1234:0000:2552:7777:1313]:12345/-http://[1200:0000:ab00:1234:0000:2552:7777:1313]:12345/1]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_bad_url[http://*.google.com0]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_bad_url[http://*0]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_bad_url[http://*.google.com1]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_bad_url[http://*1]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_bad_url[http://\\u2603.net/]",
                            "tests/test_requests.py::TestPreparingURLs::test_url_mutation[http+unix://%2Fvar%2Frun%2Fsocket/path%7E-http+unix://%2Fvar%2Frun%2Fsocket/path~0]",
                            "tests/test_requests.py::TestPreparingURLs::test_url_mutation[http+unix://%2Fvar%2Frun%2Fsocket/path%7E-http+unix://%2Fvar%2Frun%2Fsocket/path~1]",
                            "tests/test_requests.py::TestPreparingURLs::test_url_mutation[mailto:user@example.org-mailto:user@example.org0]",
                            "tests/test_requests.py::TestPreparingURLs::test_url_mutation[mailto:user@example.org-mailto:user@example.org1]",
                            "tests/test_requests.py::TestPreparingURLs::test_url_mutation[data:SSDimaUgUHl0aG9uIQ==-data:SSDimaUgUHl0aG9uIQ==]",
                            "tests/test_requests.py::TestPreparingURLs::test_parameters_for_nonstandard_schemes[http+unix://%2Fvar%2Frun%2Fsocket/path-params0-http+unix://%2Fvar%2Frun%2Fsocket/path?key=value]",
                            "tests/test_requests.py::TestPreparingURLs::test_parameters_for_nonstandard_schemes[http+unix://%2Fvar%2Frun%2Fsocket/path-params1-http+unix://%2Fvar%2Frun%2Fsocket/path?key=value]",
                            "tests/test_requests.py::TestPreparingURLs::test_parameters_for_nonstandard_schemes[mailto:user@example.org-params2-mailto:user@example.org]",
                            "tests/test_requests.py::TestPreparingURLs::test_parameters_for_nonstandard_schemes[mailto:user@example.org-params3-mailto:user@example.org]"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "sphinx-doc__sphinx-8282.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "tests/test_ext_autodoc_configs.py::test_autodoc_typehints_none_for_overload"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "tests/test_ext_autodoc_configs.py::test_autoclass_content_class",
                            "tests/test_ext_autodoc_configs.py::test_autoclass_content_init",
                            "tests/test_ext_autodoc_configs.py::test_autoclass_content_both",
                            "tests/test_ext_autodoc_configs.py::test_autodoc_inherit_docstrings",
                            "tests/test_ext_autodoc_configs.py::test_autodoc_docstring_signature",
                            "tests/test_ext_autodoc_configs.py::test_autoclass_content_and_docstring_signature_class",
                            "tests/test_ext_autodoc_configs.py::test_autoclass_content_and_docstring_signature_init",
                            "tests/test_ext_autodoc_configs.py::test_autoclass_content_and_docstring_signature_both",
                            "tests/test_ext_autodoc_configs.py::test_mocked_module_imports",
                            "tests/test_ext_autodoc_configs.py::test_autodoc_typehints_signature",
                            "tests/test_ext_autodoc_configs.py::test_autodoc_typehints_none",
                            "tests/test_ext_autodoc_configs.py::test_autodoc_typehints_description",
                            "tests/test_ext_autodoc_configs.py::test_autodoc_typehints_description_for_invalid_node",
                            "tests/test_ext_autodoc_configs.py::test_autodoc_type_aliases",
                            "tests/test_ext_autodoc_configs.py::test_autodoc_default_options",
                            "tests/test_ext_autodoc_configs.py::test_autodoc_default_options_with_values"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "pylint-dev__pylint-5231.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_args_without_type_numpy"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_missing_func_params_in_sphinx_docstring",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_missing_func_params_in_google_docstring",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_missing_type_doc_google_docstring_exempt_kwonly_args",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_missing_func_params_with_annotations_in_google_docstring",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_default_arg_with_annotations_in_google_docstring",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_missing_func_params_with_partial_annotations_in_google_docstring",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_non_builtin_annotations_in_google_docstring",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_non_builtin_annotations_for_returntype_in_google_docstring",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_func_params_and_keyword_params_in_google_docstring",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_func_params_and_wrong_keyword_params_in_google_docstring",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_missing_func_params_in_numpy_docstring",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_tolerate_no_param_documentation_at_all",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_don_t_tolerate_no_param_documentation_at_all",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_see_tolerate_no_param_documentation_at_all",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_missing_method_params_in_sphinx_docstring",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_missing_method_params_in_google_docstring",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_missing_method_params_in_numpy_docstring",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_existing_func_params_in_sphinx_docstring",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_existing_func_params_in_google_docstring",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_existing_func_params_in_numpy_docstring",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_wrong_name_of_func_params_in_sphinx_docstring",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_wrong_name_of_func_params_in_google_docstring",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_wrong_name_of_func_params_in_numpy_docstring",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_see_sentence_for_func_params_in_sphinx_docstring",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_see_sentence_for_func_params_in_google_docstring",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_see_sentence_for_func_params_in_numpy_docstring",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_constr_params_in_class_sphinx",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_constr_params_in_class_google",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_constr_params_in_class_numpy",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_constr_params_and_attributes_in_class_numpy",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_constr_params_in_init_sphinx",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_constr_params_in_init_google",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_constr_params_in_init_numpy",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_see_sentence_for_constr_params_in_class",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_see_sentence_for_constr_params_in_init",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_constr_params_in_class_and_init_sphinx",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_constr_params_in_class_and_init_google",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_constr_params_in_class_and_init_numpy",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_kwonlyargs_are_taken_in_account",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_warns_missing_args_sphinx",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_warns_missing_kwargs_sphinx",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_warns_missing_args_google",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_warns_missing_kwargs_google",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_warns_missing_args_numpy",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_warns_missing_kwargs_numpy",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_args_without_type_sphinx",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_kwargs_without_type_sphinx",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_args_without_type_google",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_kwargs_without_type_google",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_args_with_xref_type_google",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_args_with_xref_type_numpy",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_kwargs_without_type_numpy",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_sphinx[dict(str,str)]",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_sphinx[dict[str,str]]",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_sphinx[tuple(int)]",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_sphinx[list[tokenize.TokenInfo]]",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_sphinx[dict(str,",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_sphinx[dict[str,",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_sphinx[int",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_sphinx[tuple(int",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_sphinx[tuple(int)",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_google[dict(str,str)]",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_google[dict[str,str]]",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_google[tuple(int)]",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_google[list[tokenize.TokenInfo]]",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_google[dict(str,",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_google[dict[str,",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_google[int",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_google[tuple(int",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_google[tuple(int)",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_numpy[dict(str,str)]",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_numpy[dict[str,str]]",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_numpy[tuple(int)]",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_numpy[list[tokenize.TokenInfo]]",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_numpy[dict(str,",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_numpy[dict[str,",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_numpy[int",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_numpy[tuple(int",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_numpy[tuple(int)",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_compact_container_types_sphinx[dict(str,str)]",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_compact_container_types_sphinx[dict[str,str]]",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_compact_container_types_sphinx[tuple(int)]",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_compact_container_types_sphinx[list[tokenize.TokenInfo]]",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_ignores_optional_specifier_google",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_ignores_optional_specifier_numpy",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_short_name_exception",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_missing_raises_from_setter_sphinx",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_missing_raises_from_setter_google",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_missing_raises_from_setter_numpy",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_missing_raises_in_setter_sphinx",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_missing_raises_from_setter_google_2",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_missing_raises_from_setter_numpy_2",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_property_return_type_sphinx",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_property_return_type_google",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_property_return_type_numpy",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_annotation_property_return_type_sphinx",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_missing_property_return_type_sphinx",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_annotation_property_return_type_google",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_missing_property_return_type_google",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_missing_property_return_type_numpy",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_ignores_non_property_return_type_sphinx",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_ignores_non_property_return_type_google",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_ignores_non_property_return_type_numpy",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_non_property_annotation_return_type_numpy",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_ignores_return_in_abstract_method_sphinx",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_ignores_return_in_abstract_method_google",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_ignores_return_in_abstract_method_numpy",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_ignores_raise_notimplementederror_sphinx",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_ignores_return_in_abstract_method_google_2",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_ignores_return_in_abstract_method_numpy_2",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_ignores_ignored_argument_names_sphinx",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_ignores_ignored_argument_names_google",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_ignores_ignored_argument_names_numpy",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_useless_docs_ignored_argument_names_sphinx",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_useless_docs_ignored_argument_names_google",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_useless_docs_ignored_argument_names_numpy",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_skip_no_docstring_rgx",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_all_docstring_rgx",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_fail_empty_docstring_rgx",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_fail_docparams_check_init",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_no_docstring_rgx",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_skip_docstring_min_length"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "sympy__sympy-12812.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "test_products",
                            "test_helpers_and_coordinate_dependent"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "test_point",
                            "test_commutator",
                            "test_differential",
                            "test_lie_derivative",
                            "test_correct_arguments"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "mwaskom__seaborn-3407.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "tests/test_axisgrid.py::TestPairGrid::test_pairplot_column_multiindex"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "tests/test_axisgrid.py::TestFacetGrid::test_self_data",
                            "tests/test_axisgrid.py::TestFacetGrid::test_self_figure",
                            "tests/test_axisgrid.py::TestFacetGrid::test_self_axes",
                            "tests/test_axisgrid.py::TestFacetGrid::test_axes_array_size",
                            "tests/test_axisgrid.py::TestFacetGrid::test_single_axes",
                            "tests/test_axisgrid.py::TestFacetGrid::test_col_wrap",
                            "tests/test_axisgrid.py::TestFacetGrid::test_normal_axes",
                            "tests/test_axisgrid.py::TestFacetGrid::test_wrapped_axes",
                            "tests/test_axisgrid.py::TestFacetGrid::test_axes_dict",
                            "tests/test_axisgrid.py::TestFacetGrid::test_figure_size",
                            "tests/test_axisgrid.py::TestFacetGrid::test_figure_size_with_legend",
                            "tests/test_axisgrid.py::TestFacetGrid::test_legend_data",
                            "tests/test_axisgrid.py::TestFacetGrid::test_legend_data_missing_level",
                            "tests/test_axisgrid.py::TestFacetGrid::test_get_boolean_legend_data",
                            "tests/test_axisgrid.py::TestFacetGrid::test_legend_tuples",
                            "tests/test_axisgrid.py::TestFacetGrid::test_legend_options",
                            "tests/test_axisgrid.py::TestFacetGrid::test_legendout_with_colwrap",
                            "tests/test_axisgrid.py::TestFacetGrid::test_legend_tight_layout",
                            "tests/test_axisgrid.py::TestFacetGrid::test_subplot_kws",
                            "tests/test_axisgrid.py::TestFacetGrid::test_gridspec_kws",
                            "tests/test_axisgrid.py::TestFacetGrid::test_gridspec_kws_col_wrap",
                            "tests/test_axisgrid.py::TestFacetGrid::test_data_generator",
                            "tests/test_axisgrid.py::TestFacetGrid::test_map",
                            "tests/test_axisgrid.py::TestFacetGrid::test_map_dataframe",
                            "tests/test_axisgrid.py::TestFacetGrid::test_set",
                            "tests/test_axisgrid.py::TestFacetGrid::test_set_titles",
                            "tests/test_axisgrid.py::TestFacetGrid::test_set_titles_margin_titles",
                            "tests/test_axisgrid.py::TestFacetGrid::test_set_ticklabels",
                            "tests/test_axisgrid.py::TestFacetGrid::test_set_axis_labels",
                            "tests/test_axisgrid.py::TestFacetGrid::test_axis_lims",
                            "tests/test_axisgrid.py::TestFacetGrid::test_data_orders",
                            "tests/test_axisgrid.py::TestFacetGrid::test_palette",
                            "tests/test_axisgrid.py::TestFacetGrid::test_hue_kws",
                            "tests/test_axisgrid.py::TestFacetGrid::test_dropna",
                            "tests/test_axisgrid.py::TestFacetGrid::test_categorical_column_missing_categories",
                            "tests/test_axisgrid.py::TestFacetGrid::test_categorical_warning",
                            "tests/test_axisgrid.py::TestFacetGrid::test_refline",
                            "tests/test_axisgrid.py::TestFacetGrid::test_apply",
                            "tests/test_axisgrid.py::TestFacetGrid::test_pipe",
                            "tests/test_axisgrid.py::TestFacetGrid::test_tick_params",
                            "tests/test_axisgrid.py::TestPairGrid::test_self_data",
                            "tests/test_axisgrid.py::TestPairGrid::test_ignore_datelike_data",
                            "tests/test_axisgrid.py::TestPairGrid::test_self_figure",
                            "tests/test_axisgrid.py::TestPairGrid::test_self_axes",
                            "tests/test_axisgrid.py::TestPairGrid::test_default_axes",
                            "tests/test_axisgrid.py::TestPairGrid::test_specific_square_axes[vars0]",
                            "tests/test_axisgrid.py::TestPairGrid::test_specific_square_axes[vars1]",
                            "tests/test_axisgrid.py::TestPairGrid::test_remove_hue_from_default",
                            "tests/test_axisgrid.py::TestPairGrid::test_specific_nonsquare_axes[x_vars0-y_vars0]",
                            "tests/test_axisgrid.py::TestPairGrid::test_specific_nonsquare_axes[x_vars1-z]",
                            "tests/test_axisgrid.py::TestPairGrid::test_specific_nonsquare_axes[x_vars2-y_vars2]",
                            "tests/test_axisgrid.py::TestPairGrid::test_corner",
                            "tests/test_axisgrid.py::TestPairGrid::test_size",
                            "tests/test_axisgrid.py::TestPairGrid::test_empty_grid",
                            "tests/test_axisgrid.py::TestPairGrid::test_map",
                            "tests/test_axisgrid.py::TestPairGrid::test_map_nonsquare",
                            "tests/test_axisgrid.py::TestPairGrid::test_map_lower",
                            "tests/test_axisgrid.py::TestPairGrid::test_map_upper",
                            "tests/test_axisgrid.py::TestPairGrid::test_map_mixed_funcsig",
                            "tests/test_axisgrid.py::TestPairGrid::test_map_diag",
                            "tests/test_axisgrid.py::TestPairGrid::test_map_diag_rectangular",
                            "tests/test_axisgrid.py::TestPairGrid::test_map_diag_color",
                            "tests/test_axisgrid.py::TestPairGrid::test_map_diag_palette",
                            "tests/test_axisgrid.py::TestPairGrid::test_map_diag_and_offdiag",
                            "tests/test_axisgrid.py::TestPairGrid::test_diag_sharey",
                            "tests/test_axisgrid.py::TestPairGrid::test_map_diag_matplotlib",
                            "tests/test_axisgrid.py::TestPairGrid::test_palette",
                            "tests/test_axisgrid.py::TestPairGrid::test_hue_kws",
                            "tests/test_axisgrid.py::TestPairGrid::test_hue_order",
                            "tests/test_axisgrid.py::TestPairGrid::test_hue_order_missing_level",
                            "tests/test_axisgrid.py::TestPairGrid::test_hue_in_map",
                            "tests/test_axisgrid.py::TestPairGrid::test_nondefault_index",
                            "tests/test_axisgrid.py::TestPairGrid::test_dropna[scatterplot]",
                            "tests/test_axisgrid.py::TestPairGrid::test_dropna[scatter]",
                            "tests/test_axisgrid.py::TestPairGrid::test_histplot_legend",
                            "tests/test_axisgrid.py::TestPairGrid::test_pairplot",
                            "tests/test_axisgrid.py::TestPairGrid::test_pairplot_reg",
                            "tests/test_axisgrid.py::TestPairGrid::test_pairplot_reg_hue",
                            "tests/test_axisgrid.py::TestPairGrid::test_pairplot_diag_kde",
                            "tests/test_axisgrid.py::TestPairGrid::test_pairplot_kde",
                            "tests/test_axisgrid.py::TestPairGrid::test_pairplot_hist",
                            "tests/test_axisgrid.py::TestPairGrid::test_pairplot_markers",
                            "tests/test_axisgrid.py::TestPairGrid::test_corner_despine",
                            "tests/test_axisgrid.py::TestPairGrid::test_corner_set",
                            "tests/test_axisgrid.py::TestPairGrid::test_legend",
                            "tests/test_axisgrid.py::TestPairGrid::test_tick_params",
                            "tests/test_axisgrid.py::TestJointGrid::test_margin_grid_from_lists",
                            "tests/test_axisgrid.py::TestJointGrid::test_margin_grid_from_arrays",
                            "tests/test_axisgrid.py::TestJointGrid::test_margin_grid_from_series",
                            "tests/test_axisgrid.py::TestJointGrid::test_margin_grid_from_dataframe",
                            "tests/test_axisgrid.py::TestJointGrid::test_margin_grid_from_dataframe_bad_variable",
                            "tests/test_axisgrid.py::TestJointGrid::test_margin_grid_axis_labels",
                            "tests/test_axisgrid.py::TestJointGrid::test_dropna",
                            "tests/test_axisgrid.py::TestJointGrid::test_axlims",
                            "tests/test_axisgrid.py::TestJointGrid::test_marginal_ticks",
                            "tests/test_axisgrid.py::TestJointGrid::test_bivariate_plot",
                            "tests/test_axisgrid.py::TestJointGrid::test_univariate_plot",
                            "tests/test_axisgrid.py::TestJointGrid::test_univariate_plot_distplot",
                            "tests/test_axisgrid.py::TestJointGrid::test_univariate_plot_matplotlib",
                            "tests/test_axisgrid.py::TestJointGrid::test_plot",
                            "tests/test_axisgrid.py::TestJointGrid::test_space",
                            "tests/test_axisgrid.py::TestJointGrid::test_hue[True]",
                            "tests/test_axisgrid.py::TestJointGrid::test_hue[False]",
                            "tests/test_axisgrid.py::TestJointGrid::test_refline",
                            "tests/test_axisgrid.py::TestJointPlot::test_scatter",
                            "tests/test_axisgrid.py::TestJointPlot::test_scatter_hue",
                            "tests/test_axisgrid.py::TestJointPlot::test_reg",
                            "tests/test_axisgrid.py::TestJointPlot::test_resid",
                            "tests/test_axisgrid.py::TestJointPlot::test_hist",
                            "tests/test_axisgrid.py::TestJointPlot::test_hex",
                            "tests/test_axisgrid.py::TestJointPlot::test_kde",
                            "tests/test_axisgrid.py::TestJointPlot::test_kde_hue",
                            "tests/test_axisgrid.py::TestJointPlot::test_color",
                            "tests/test_axisgrid.py::TestJointPlot::test_palette",
                            "tests/test_axisgrid.py::TestJointPlot::test_hex_customise",
                            "tests/test_axisgrid.py::TestJointPlot::test_bad_kind",
                            "tests/test_axisgrid.py::TestJointPlot::test_unsupported_hue_kind",
                            "tests/test_axisgrid.py::TestJointPlot::test_leaky_dict",
                            "tests/test_axisgrid.py::TestJointPlot::test_distplot_kwarg_warning",
                            "tests/test_axisgrid.py::TestJointPlot::test_ax_warning"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "pytest-dev__pytest-8124.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "testing/test_skipping.py::TestEvaluation::test_skipif_markeval_namespace",
                            "testing/test_skipping.py::TestEvaluation::test_skipif_markeval_namespace_multiple",
                            "testing/test_skipping.py::TestEvaluation::test_skipif_markeval_namespace_ValueError",
                            "testing/test_skipping.py::TestXFail::test_xfail_markeval_namespace"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "testing/test_skipping.py::test_importorskip",
                            "testing/test_skipping.py::TestEvaluation::test_no_marker",
                            "testing/test_skipping.py::TestEvaluation::test_marked_xfail_no_args",
                            "testing/test_skipping.py::TestEvaluation::test_marked_skipif_no_args",
                            "testing/test_skipping.py::TestEvaluation::test_marked_one_arg",
                            "testing/test_skipping.py::TestEvaluation::test_marked_one_arg_with_reason",
                            "testing/test_skipping.py::TestEvaluation::test_marked_one_arg_twice",
                            "testing/test_skipping.py::TestEvaluation::test_marked_one_arg_twice2",
                            "testing/test_skipping.py::TestEvaluation::test_marked_skipif_with_boolean_without_reason",
                            "testing/test_skipping.py::TestEvaluation::test_marked_skipif_with_invalid_boolean",
                            "testing/test_skipping.py::TestEvaluation::test_skipif_class",
                            "testing/test_skipping.py::TestXFail::test_xfail_simple[True]",
                            "testing/test_skipping.py::TestXFail::test_xfail_simple[False]",
                            "testing/test_skipping.py::TestXFail::test_xfail_xpassed",
                            "testing/test_skipping.py::TestXFail::test_xfail_using_platform",
                            "testing/test_skipping.py::TestXFail::test_xfail_xpassed_strict",
                            "testing/test_skipping.py::TestXFail::test_xfail_run_anyway",
                            "testing/test_skipping.py::TestXFail::test_xfail_run_with_skip_mark[test_input0-expected0]",
                            "testing/test_skipping.py::TestXFail::test_xfail_run_with_skip_mark[test_input1-expected1]",
                            "testing/test_skipping.py::TestXFail::test_xfail_evalfalse_but_fails",
                            "testing/test_skipping.py::TestXFail::test_xfail_not_report_default",
                            "testing/test_skipping.py::TestXFail::test_xfail_not_run_xfail_reporting",
                            "testing/test_skipping.py::TestXFail::test_xfail_not_run_no_setup_run",
                            "testing/test_skipping.py::TestXFail::test_xfail_xpass",
                            "testing/test_skipping.py::TestXFail::test_xfail_imperative",
                            "testing/test_skipping.py::TestXFail::test_xfail_imperative_in_setup_function",
                            "testing/test_skipping.py::TestXFail::test_dynamic_xfail_no_run",
                            "testing/test_skipping.py::TestXFail::test_dynamic_xfail_set_during_funcarg_setup",
                            "testing/test_skipping.py::TestXFail::test_dynamic_xfail_set_during_runtest_failed",
                            "testing/test_skipping.py::TestXFail::test_dynamic_xfail_set_during_runtest_passed_strict",
                            "testing/test_skipping.py::TestXFail::test_xfail_raises[TypeError-TypeError-*1",
                            "testing/test_skipping.py::TestXFail::test_xfail_raises[(AttributeError,",
                            "testing/test_skipping.py::TestXFail::test_xfail_raises[TypeError-IndexError-*1",
                            "testing/test_skipping.py::TestXFail::test_strict_sanity",
                            "testing/test_skipping.py::TestXFail::test_strict_xfail[True]",
                            "testing/test_skipping.py::TestXFail::test_strict_xfail[False]",
                            "testing/test_skipping.py::TestXFail::test_strict_xfail_condition[True]",
                            "testing/test_skipping.py::TestXFail::test_strict_xfail_condition[False]",
                            "testing/test_skipping.py::TestXFail::test_xfail_condition_keyword[True]",
                            "testing/test_skipping.py::TestXFail::test_xfail_condition_keyword[False]",
                            "testing/test_skipping.py::TestXFail::test_strict_xfail_default_from_file[true]",
                            "testing/test_skipping.py::TestXFail::test_strict_xfail_default_from_file[false]",
                            "testing/test_skipping.py::TestXFailwithSetupTeardown::test_failing_setup_issue9",
                            "testing/test_skipping.py::TestXFailwithSetupTeardown::test_failing_teardown_issue9",
                            "testing/test_skipping.py::TestSkip::test_skip_class",
                            "testing/test_skipping.py::TestSkip::test_skips_on_false_string",
                            "testing/test_skipping.py::TestSkip::test_arg_as_reason",
                            "testing/test_skipping.py::TestSkip::test_skip_no_reason",
                            "testing/test_skipping.py::TestSkip::test_skip_with_reason",
                            "testing/test_skipping.py::TestSkip::test_only_skips_marked_test",
                            "testing/test_skipping.py::TestSkip::test_strict_and_skip",
                            "testing/test_skipping.py::TestSkipif::test_skipif_conditional",
                            "testing/test_skipping.py::TestSkipif::test_skipif_reporting[\"hasattr(sys,",
                            "testing/test_skipping.py::TestSkipif::test_skipif_reporting[True,",
                            "testing/test_skipping.py::TestSkipif::test_skipif_using_platform",
                            "testing/test_skipping.py::TestSkipif::test_skipif_reporting_multiple[skipif-SKIP-skipped]",
                            "testing/test_skipping.py::TestSkipif::test_skipif_reporting_multiple[xfail-XPASS-xpassed]",
                            "testing/test_skipping.py::test_skip_not_report_default",
                            "testing/test_skipping.py::test_skipif_class",
                            "testing/test_skipping.py::test_skipped_reasons_functional",
                            "testing/test_skipping.py::test_skipped_folding",
                            "testing/test_skipping.py::test_reportchars",
                            "testing/test_skipping.py::test_reportchars_error",
                            "testing/test_skipping.py::test_reportchars_all",
                            "testing/test_skipping.py::test_reportchars_all_error",
                            "testing/test_skipping.py::test_errors_in_xfail_skip_expressions",
                            "testing/test_skipping.py::test_xfail_skipif_with_globals",
                            "testing/test_skipping.py::test_default_markers",
                            "testing/test_skipping.py::test_xfail_test_setup_exception",
                            "testing/test_skipping.py::test_imperativeskip_on_xfail_test",
                            "testing/test_skipping.py::TestBooleanCondition::test_skipif",
                            "testing/test_skipping.py::TestBooleanCondition::test_skipif_noreason",
                            "testing/test_skipping.py::TestBooleanCondition::test_xfail",
                            "testing/test_skipping.py::test_xfail_item",
                            "testing/test_skipping.py::test_module_level_skip_error",
                            "testing/test_skipping.py::test_module_level_skip_with_allow_module_level",
                            "testing/test_skipping.py::test_invalid_skip_keyword_parameter",
                            "testing/test_skipping.py::test_mark_xfail_item",
                            "testing/test_skipping.py::test_summary_list_after_errors",
                            "testing/test_skipping.py::test_relpath_rootdir"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "pylint-dev__pylint-8312.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "tests/lint/unittest_lint.py::test_globbing",
                            "tests/test_self.py::TestRunTC::test_recursive_globbing"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "tests/lint/unittest_lint.py::test_deprecated",
                            "tests/lint/unittest_lint.py::test_no_args",
                            "tests/lint/unittest_lint.py::test_one_arg[case0]",
                            "tests/lint/unittest_lint.py::test_one_arg[case1]",
                            "tests/lint/unittest_lint.py::test_one_arg[case2]",
                            "tests/lint/unittest_lint.py::test_one_arg[case3]",
                            "tests/lint/unittest_lint.py::test_one_arg[case4]",
                            "tests/lint/unittest_lint.py::test_two_similar_args[case0]",
                            "tests/lint/unittest_lint.py::test_two_similar_args[case1]",
                            "tests/lint/unittest_lint.py::test_two_similar_args[case2]",
                            "tests/lint/unittest_lint.py::test_two_similar_args[case3]",
                            "tests/lint/unittest_lint.py::test_more_args[case0]",
                            "tests/lint/unittest_lint.py::test_more_args[case1]",
                            "tests/lint/unittest_lint.py::test_more_args[case2]",
                            "tests/lint/unittest_lint.py::test_pylint_visit_method_taken_in_account",
                            "tests/lint/unittest_lint.py::test_enable_message",
                            "tests/lint/unittest_lint.py::test_enable_message_category",
                            "tests/lint/unittest_lint.py::test_message_state_scope",
                            "tests/lint/unittest_lint.py::test_enable_message_block",
                            "tests/lint/unittest_lint.py::test_enable_by_symbol",
                            "tests/lint/unittest_lint.py::test_enable_report",
                            "tests/lint/unittest_lint.py::test_report_output_format_aliased",
                            "tests/lint/unittest_lint.py::test_set_unsupported_reporter",
                            "tests/lint/unittest_lint.py::test_set_option_1",
                            "tests/lint/unittest_lint.py::test_set_option_2",
                            "tests/lint/unittest_lint.py::test_enable_checkers",
                            "tests/lint/unittest_lint.py::test_errors_only",
                            "tests/lint/unittest_lint.py::test_disable_similar",
                            "tests/lint/unittest_lint.py::test_disable_alot",
                            "tests/lint/unittest_lint.py::test_addmessage",
                            "tests/lint/unittest_lint.py::test_addmessage_invalid",
                            "tests/lint/unittest_lint.py::test_load_plugin_command_line",
                            "tests/lint/unittest_lint.py::test_load_plugin_path_manipulation_case_6",
                            "tests/lint/unittest_lint.py::test_load_plugin_path_manipulation_case_3",
                            "tests/lint/unittest_lint.py::test_load_plugin_pylintrc_order_independent",
                            "tests/lint/unittest_lint.py::test_load_plugin_command_line_before_init_hook",
                            "tests/lint/unittest_lint.py::test_load_plugin_command_line_with_init_hook_command_line",
                            "tests/lint/unittest_lint.py::test_load_plugin_config_file",
                            "tests/lint/unittest_lint.py::test_load_plugin_configuration",
                            "tests/lint/unittest_lint.py::test_init_hooks_called_before_load_plugins",
                            "tests/lint/unittest_lint.py::test_analyze_explicit_script",
                            "tests/lint/unittest_lint.py::test_full_documentation",
                            "tests/lint/unittest_lint.py::test_list_msgs_enabled",
                            "tests/lint/unittest_lint.py::test_pylint_home",
                            "tests/lint/unittest_lint.py::test_pylint_home_from_environ",
                            "tests/lint/unittest_lint.py::test_warn_about_old_home",
                            "tests/lint/unittest_lint.py::test_pylintrc",
                            "tests/lint/unittest_lint.py::test_pylintrc_parentdir",
                            "tests/lint/unittest_lint.py::test_pylintrc_parentdir_no_package",
                            "tests/lint/unittest_lint.py::test_custom_should_analyze_file",
                            "tests/lint/unittest_lint.py::test_multiprocessing[1]",
                            "tests/lint/unittest_lint.py::test_multiprocessing[2]",
                            "tests/lint/unittest_lint.py::test_filename_with__init__",
                            "tests/lint/unittest_lint.py::test_by_module_statement_value",
                            "tests/lint/unittest_lint.py::test_recursive_ignore[--ignore-failing.py]",
                            "tests/lint/unittest_lint.py::test_recursive_ignore[--ignore-ignored_subdirectory]",
                            "tests/lint/unittest_lint.py::test_recursive_ignore[--ignore-patterns-failing.*]",
                            "tests/lint/unittest_lint.py::test_recursive_ignore[--ignore-patterns-ignored_*]",
                            "tests/lint/unittest_lint.py::test_recursive_ignore[--ignore-paths-.*directory/ignored.*]",
                            "tests/lint/unittest_lint.py::test_recursive_ignore[--ignore-paths-.*ignored.*/failing.*]",
                            "tests/lint/unittest_lint.py::test_source_roots_globbing",
                            "tests/lint/unittest_lint.py::test_recursive_implicit_namespace",
                            "tests/lint/unittest_lint.py::test_lint_namespace_package_under_dir",
                            "tests/lint/unittest_lint.py::test_lint_namespace_package_under_dir_on_path",
                            "tests/test_self.py::TestRunTC::test_pkginfo",
                            "tests/test_self.py::TestRunTC::test_all",
                            "tests/test_self.py::TestRunTC::test_no_ext_file",
                            "tests/test_self.py::TestRunTC::test_w0704_ignored",
                            "tests/test_self.py::TestRunTC::test_exit_zero",
                            "tests/test_self.py::TestRunTC::test_nonexistent_config_file",
                            "tests/test_self.py::TestRunTC::test_error_missing_arguments",
                            "tests/test_self.py::TestRunTC::test_no_out_encoding",
                            "tests/test_self.py::TestRunTC::test_parallel_execution",
                            "tests/test_self.py::TestRunTC::test_parallel_execution_missing_arguments",
                            "tests/test_self.py::TestRunTC::test_enable_all_works",
                            "tests/test_self.py::TestRunTC::test_wrong_import_position_when_others_disabled",
                            "tests/test_self.py::TestRunTC::test_type_annotation_names",
                            "tests/test_self.py::TestRunTC::test_import_itself_not_accounted_for_relative_imports",
                            "tests/test_self.py::TestRunTC::test_reject_empty_indent_strings",
                            "tests/test_self.py::TestRunTC::test_json_report_when_file_has_syntax_error",
                            "tests/test_self.py::TestRunTC::test_json_report_when_file_is_missing",
                            "tests/test_self.py::TestRunTC::test_json_report_does_not_escape_quotes",
                            "tests/test_self.py::TestRunTC::test_information_category_disabled_by_default",
                            "tests/test_self.py::TestRunTC::test_error_mode_shows_no_score",
                            "tests/test_self.py::TestRunTC::test_evaluation_score_shown_by_default",
                            "tests/test_self.py::TestRunTC::test_confidence_levels",
                            "tests/test_self.py::TestRunTC::test_bom_marker",
                            "tests/test_self.py::TestRunTC::test_pylintrc_plugin_duplicate_options",
                            "tests/test_self.py::TestRunTC::test_pylintrc_comments_in_values",
                            "tests/test_self.py::TestRunTC::test_no_crash_with_formatting_regex_defaults",
                            "tests/test_self.py::TestRunTC::test_getdefaultencoding_crashes_with_lc_ctype_utf8",
                            "tests/test_self.py::TestRunTC::test_parseable_file_path",
                            "tests/test_self.py::TestRunTC::test_stdin[/mymodule.py]",
                            "tests/test_self.py::TestRunTC::test_stdin[mymodule.py-mymodule-mymodule.py]",
                            "tests/test_self.py::TestRunTC::test_stdin_missing_modulename",
                            "tests/test_self.py::TestRunTC::test_relative_imports[False]",
                            "tests/test_self.py::TestRunTC::test_relative_imports[True]",
                            "tests/test_self.py::TestRunTC::test_stdin_syntax_error",
                            "tests/test_self.py::TestRunTC::test_version",
                            "tests/test_self.py::TestRunTC::test_fail_under",
                            "tests/test_self.py::TestRunTC::test_fail_on[-10-missing-function-docstring-fail_under_plus7_5.py-16]",
                            "tests/test_self.py::TestRunTC::test_fail_on[6-missing-function-docstring-fail_under_plus7_5.py-16]",
                            "tests/test_self.py::TestRunTC::test_fail_on[7.5-missing-function-docstring-fail_under_plus7_5.py-16]",
                            "tests/test_self.py::TestRunTC::test_fail_on[7.6-missing-function-docstring-fail_under_plus7_5.py-16]",
                            "tests/test_self.py::TestRunTC::test_fail_on[-11-missing-function-docstring-fail_under_minus10.py-22]",
                            "tests/test_self.py::TestRunTC::test_fail_on[-10-missing-function-docstring-fail_under_minus10.py-22]",
                            "tests/test_self.py::TestRunTC::test_fail_on[-9-missing-function-docstring-fail_under_minus10.py-22]",
                            "tests/test_self.py::TestRunTC::test_fail_on[-5-missing-function-docstring-fail_under_minus10.py-22]",
                            "tests/test_self.py::TestRunTC::test_fail_on[-10-broad-exception-caught-fail_under_plus7_5.py-0]",
                            "tests/test_self.py::TestRunTC::test_fail_on[6-broad-exception-caught-fail_under_plus7_5.py-0]",
                            "tests/test_self.py::TestRunTC::test_fail_on[7.5-broad-exception-caught-fail_under_plus7_5.py-0]",
                            "tests/test_self.py::TestRunTC::test_fail_on[7.6-broad-exception-caught-fail_under_plus7_5.py-16]",
                            "tests/test_self.py::TestRunTC::test_fail_on[-11-broad-exception-caught-fail_under_minus10.py-0]",
                            "tests/test_self.py::TestRunTC::test_fail_on[-10-broad-exception-caught-fail_under_minus10.py-0]",
                            "tests/test_self.py::TestRunTC::test_fail_on[-9-broad-exception-caught-fail_under_minus10.py-22]",
                            "tests/test_self.py::TestRunTC::test_fail_on[-5-broad-exception-caught-fail_under_minus10.py-22]",
                            "tests/test_self.py::TestRunTC::test_fail_on[-10-C0116-fail_under_plus7_5.py-16]",
                            "tests/test_self.py::TestRunTC::test_fail_on[-10-C-fail_under_plus7_5.py-16]",
                            "tests/test_self.py::TestRunTC::test_fail_on[-10-fake1,C,fake2-fail_under_plus7_5.py-16]",
                            "tests/test_self.py::TestRunTC::test_fail_on[-10-C0115-fail_under_plus7_5.py-0]",
                            "tests/test_self.py::TestRunTC::test_fail_on_edge_case[opts0-0]",
                            "tests/test_self.py::TestRunTC::test_fail_on_edge_case[opts1-0]",
                            "tests/test_self.py::TestRunTC::test_fail_on_edge_case[opts2-16]",
                            "tests/test_self.py::TestRunTC::test_fail_on_edge_case[opts3-16]",
                            "tests/test_self.py::TestRunTC::test_modify_sys_path",
                            "tests/test_self.py::TestRunTC::test_plugin_that_imports_from_open",
                            "tests/test_self.py::TestRunTC::test_do_not_import_files_from_local_directory[args0]",
                            "tests/test_self.py::TestRunTC::test_do_not_import_files_from_local_directory[args1]",
                            "tests/test_self.py::TestRunTC::test_import_plugin_from_local_directory_if_pythonpath_cwd",
                            "tests/test_self.py::TestRunTC::test_allow_import_of_files_found_in_modules_during_parallel_check",
                            "tests/test_self.py::TestRunTC::test_can_list_directories_without_dunder_init",
                            "tests/test_self.py::TestRunTC::test_jobs_score",
                            "tests/test_self.py::TestRunTC::test_regression_parallel_mode_without_filepath",
                            "tests/test_self.py::TestRunTC::test_output_file_valid_path",
                            "tests/test_self.py::TestRunTC::test_output_file_invalid_path_exits_with_code_32",
                            "tests/test_self.py::TestRunTC::test_fail_on_exit_code[args0-0]",
                            "tests/test_self.py::TestRunTC::test_fail_on_exit_code[args1-0]",
                            "tests/test_self.py::TestRunTC::test_fail_on_exit_code[args2-0]",
                            "tests/test_self.py::TestRunTC::test_fail_on_exit_code[args3-6]",
                            "tests/test_self.py::TestRunTC::test_fail_on_exit_code[args4-6]",
                            "tests/test_self.py::TestRunTC::test_fail_on_exit_code[args5-22]",
                            "tests/test_self.py::TestRunTC::test_fail_on_exit_code[args6-22]",
                            "tests/test_self.py::TestRunTC::test_fail_on_exit_code[args7-6]",
                            "tests/test_self.py::TestRunTC::test_fail_on_exit_code[args8-22]",
                            "tests/test_self.py::TestRunTC::test_one_module_fatal_error",
                            "tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args0-0]",
                            "tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args1-0]",
                            "tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args2-0]",
                            "tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args3-0]",
                            "tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args4-0]",
                            "tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args5-0]",
                            "tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args6-0]",
                            "tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args7-1]",
                            "tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args8-1]",
                            "tests/test_self.py::TestRunTC::test_output_file_can_be_combined_with_output_format_option[text-{path}:4:4:",
                            "tests/test_self.py::TestRunTC::test_output_file_can_be_combined_with_output_format_option[parseable-{path}:4:",
                            "tests/test_self.py::TestRunTC::test_output_file_can_be_combined_with_output_format_option[msvs-{path}(4):",
                            "tests/test_self.py::TestRunTC::test_output_file_can_be_combined_with_output_format_option[colorized-{path}:4:4:",
                            "tests/test_self.py::TestRunTC::test_output_file_can_be_combined_with_output_format_option[json-\"message\":",
                            "tests/test_self.py::TestRunTC::test_output_file_can_be_combined_with_custom_reporter",
                            "tests/test_self.py::TestRunTC::test_output_file_specified_in_rcfile",
                            "tests/test_self.py::TestRunTC::test_load_text_repoter_if_not_provided",
                            "tests/test_self.py::TestRunTC::test_regex_paths_csv_validator",
                            "tests/test_self.py::TestRunTC::test_recursive",
                            "tests/test_self.py::TestRunTC::test_ignore_recursive[ignored_subdirectory]",
                            "tests/test_self.py::TestRunTC::test_ignore_recursive[failing.py]",
                            "tests/test_self.py::TestRunTC::test_ignore_pattern_recursive[ignored_.*]",
                            "tests/test_self.py::TestRunTC::test_ignore_pattern_recursive[failing.*]",
                            "tests/test_self.py::TestRunTC::test_ignore_pattern_from_stdin",
                            "tests/test_self.py::TestRunTC::test_ignore_path_recursive[.*ignored.*]",
                            "tests/test_self.py::TestRunTC::test_ignore_path_recursive[.*failing.*]",
                            "tests/test_self.py::TestRunTC::test_recursive_current_dir",
                            "tests/test_self.py::TestRunTC::test_ignore_path_recursive_current_dir",
                            "tests/test_self.py::TestRunTC::test_syntax_error_invalid_encoding",
                            "tests/test_self.py::TestRunTC::test_encoding[good.py-]",
                            "tests/test_self.py::TestRunTC::test_encoding[bad_wrong_num.py-(syntax-error)]",
                            "tests/test_self.py::TestRunTC::test_encoding[bad_missing_num.py-(bad-file-encoding)]",
                            "tests/test_self.py::TestRunTC::test_line_too_long_useless_suppression",
                            "tests/test_self.py::TestRunTC::test_output_no_header",
                            "tests/test_self.py::TestRunTC::test_no_name_in_module",
                            "tests/test_self.py::TestCallbackOptions::test_output_of_callback_options[command0-Emittable",
                            "tests/test_self.py::TestCallbackOptions::test_output_of_callback_options[command1-Enabled",
                            "tests/test_self.py::TestCallbackOptions::test_output_of_callback_options[command2-nonascii-checker]",
                            "tests/test_self.py::TestCallbackOptions::test_output_of_callback_options[command3-Confidence(name='HIGH',",
                            "tests/test_self.py::TestCallbackOptions::test_output_of_callback_options[command4-pylint.extensions.empty_comment]",
                            "tests/test_self.py::TestCallbackOptions::test_output_of_callback_options[command5-Pylint",
                            "tests/test_self.py::TestCallbackOptions::test_output_of_callback_options[command6-Environment",
                            "tests/test_self.py::TestCallbackOptions::test_help_msg[args0-:unreachable",
                            "tests/test_self.py::TestCallbackOptions::test_help_msg[args1-No",
                            "tests/test_self.py::TestCallbackOptions::test_help_msg[args2---help-msg:",
                            "tests/test_self.py::TestCallbackOptions::test_help_msg[args3-:invalid-name",
                            "tests/test_self.py::TestCallbackOptions::test_generate_rcfile",
                            "tests/test_self.py::TestCallbackOptions::test_generate_config_disable_symbolic_names",
                            "tests/test_self.py::TestCallbackOptions::test_errors_only",
                            "tests/test_self.py::TestCallbackOptions::test_errors_only_functions_as_disable",
                            "tests/test_self.py::TestCallbackOptions::test_verbose",
                            "tests/test_self.py::TestCallbackOptions::test_enable_all_extensions"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "scikit-learn__scikit-learn-26400.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "sklearn/preprocessing/tests/test_data.py::test_power_transformer_box_cox_raise_all_nans_col"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "sklearn/preprocessing/tests/test_data.py::test_raises_value_error_if_sample_weights_greater_than_1d",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_sample_weight[array-Xw0-X0-sample_weight0]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_sample_weight[array-Xw1-X1-sample_weight1]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_sample_weight[array-Xw2-X2-sample_weight2]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_sample_weight[sparse_csr-Xw0-X0-sample_weight0]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_sample_weight[sparse_csr-Xw1-X1-sample_weight1]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_sample_weight[sparse_csr-Xw2-X2-sample_weight2]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_sample_weight[sparse_csc-Xw0-X0-sample_weight0]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_sample_weight[sparse_csc-Xw1-X1-sample_weight1]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_sample_weight[sparse_csc-Xw2-X2-sample_weight2]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_1d",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_dtype[False-None]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_dtype[True-None]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[0-float32-False-asarray-scaler0]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[0-float32-False-asarray-scaler1]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[0-float32-False-csc_matrix-scaler0]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[0-float32-False-csc_matrix-scaler1]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[0-float32-False-csr_matrix-scaler0]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[0-float32-False-csr_matrix-scaler1]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[0-float32-True-asarray-scaler0]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[0-float32-True-csc_matrix-scaler0]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[0-float32-True-csr_matrix-scaler0]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[0-float64-False-asarray-scaler0]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[0-float64-False-asarray-scaler1]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[0-float64-False-csc_matrix-scaler0]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[0-float64-False-csc_matrix-scaler1]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[0-float64-False-csr_matrix-scaler0]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[0-float64-False-csr_matrix-scaler1]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[0-float64-True-asarray-scaler0]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[0-float64-True-csc_matrix-scaler0]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[0-float64-True-csr_matrix-scaler0]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[1.0-float32-False-asarray-scaler0]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[1.0-float32-False-asarray-scaler1]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[1.0-float32-False-csc_matrix-scaler0]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[1.0-float32-False-csc_matrix-scaler1]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[1.0-float32-False-csr_matrix-scaler0]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[1.0-float32-False-csr_matrix-scaler1]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[1.0-float32-True-asarray-scaler0]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[1.0-float32-True-csc_matrix-scaler0]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[1.0-float32-True-csr_matrix-scaler0]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[1.0-float64-False-asarray-scaler0]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[1.0-float64-False-asarray-scaler1]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[1.0-float64-False-csc_matrix-scaler0]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[1.0-float64-False-csc_matrix-scaler1]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[1.0-float64-False-csr_matrix-scaler0]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[1.0-float64-False-csr_matrix-scaler1]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[1.0-float64-True-asarray-scaler0]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[1.0-float64-True-csc_matrix-scaler0]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[1.0-float64-True-csr_matrix-scaler0]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[100.0-float32-False-asarray-scaler0]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[100.0-float32-False-asarray-scaler1]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[100.0-float32-False-csc_matrix-scaler0]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[100.0-float32-False-csc_matrix-scaler1]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[100.0-float32-False-csr_matrix-scaler0]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[100.0-float32-False-csr_matrix-scaler1]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[100.0-float32-True-asarray-scaler0]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[100.0-float32-True-csc_matrix-scaler0]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[100.0-float32-True-csr_matrix-scaler0]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[100.0-float64-False-asarray-scaler0]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[100.0-float64-False-asarray-scaler1]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[100.0-float64-False-csc_matrix-scaler0]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[100.0-float64-False-csc_matrix-scaler1]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[100.0-float64-False-csr_matrix-scaler0]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[100.0-float64-False-csr_matrix-scaler1]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[100.0-float64-True-asarray-scaler0]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[100.0-float64-True-csc_matrix-scaler0]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[100.0-float64-True-csr_matrix-scaler0]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[asarray-float32-1e-10-10]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[asarray-float32-1e-10-100]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[asarray-float32-1e-10-10000]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[asarray-float32-1-10]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[asarray-float32-1-100]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[asarray-float32-1-10000]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[asarray-float32-10000000000.0-10]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[asarray-float32-10000000000.0-100]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[asarray-float32-10000000000.0-10000]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[asarray-float64-1e-10-10]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[asarray-float64-1e-10-100]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[asarray-float64-1e-10-10000]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[asarray-float64-1-10]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[asarray-float64-1-100]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[asarray-float64-1-10000]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[asarray-float64-10000000000.0-10]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[asarray-float64-10000000000.0-100]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[asarray-float64-10000000000.0-10000]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[csc_matrix-float32-1e-10-10]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[csc_matrix-float32-1e-10-100]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[csc_matrix-float32-1e-10-10000]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[csc_matrix-float32-1-10]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[csc_matrix-float32-1-100]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[csc_matrix-float32-1-10000]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[csc_matrix-float32-10000000000.0-10]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[csc_matrix-float32-10000000000.0-100]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[csc_matrix-float32-10000000000.0-10000]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[csc_matrix-float64-1e-10-10]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[csc_matrix-float64-1e-10-100]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[csc_matrix-float64-1e-10-10000]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[csc_matrix-float64-1-10]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[csc_matrix-float64-1-100]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[csc_matrix-float64-1-10000]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[csc_matrix-float64-10000000000.0-10]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[csc_matrix-float64-10000000000.0-100]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[csc_matrix-float64-10000000000.0-10000]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[csr_matrix-float32-1e-10-10]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[csr_matrix-float32-1e-10-100]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[csr_matrix-float32-1e-10-10000]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[csr_matrix-float32-1-10]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[csr_matrix-float32-1-100]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[csr_matrix-float32-1-10000]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[csr_matrix-float32-10000000000.0-10]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[csr_matrix-float32-10000000000.0-100]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[csr_matrix-float32-10000000000.0-10000]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[csr_matrix-float64-1e-10-10]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[csr_matrix-float64-1e-10-100]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[csr_matrix-float64-1e-10-10000]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[csr_matrix-float64-1-10]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[csr_matrix-float64-1-100]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[csr_matrix-float64-1-10000]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[csr_matrix-float64-10000000000.0-10]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[csr_matrix-float64-10000000000.0-100]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[csr_matrix-float64-10000000000.0-10000]",
                            "sklearn/preprocessing/tests/test_data.py::test_scale_1d",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_numerical_stability",
                            "sklearn/preprocessing/tests/test_data.py::test_scaler_2d_arrays",
                            "sklearn/preprocessing/tests/test_data.py::test_scaler_float16_overflow",
                            "sklearn/preprocessing/tests/test_data.py::test_handle_zeros_in_scale",
                            "sklearn/preprocessing/tests/test_data.py::test_minmax_scaler_partial_fit",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_partial_fit",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_partial_fit_numerical_stability",
                            "sklearn/preprocessing/tests/test_data.py::test_partial_fit_sparse_input[True]",
                            "sklearn/preprocessing/tests/test_data.py::test_partial_fit_sparse_input[None]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_trasform_with_partial_fit[True]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_trasform_with_partial_fit[None]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_check_array_of_inverse_transform",
                            "sklearn/preprocessing/tests/test_data.py::test_min_max_scaler_iris",
                            "sklearn/preprocessing/tests/test_data.py::test_min_max_scaler_zero_variance_features",
                            "sklearn/preprocessing/tests/test_data.py::test_minmax_scale_axis1",
                            "sklearn/preprocessing/tests/test_data.py::test_min_max_scaler_1d",
                            "sklearn/preprocessing/tests/test_data.py::test_scaler_without_centering[True]",
                            "sklearn/preprocessing/tests/test_data.py::test_scaler_without_centering[None]",
                            "sklearn/preprocessing/tests/test_data.py::test_scaler_n_samples_seen_with_nan[asarray-True-True]",
                            "sklearn/preprocessing/tests/test_data.py::test_scaler_n_samples_seen_with_nan[asarray-True-False]",
                            "sklearn/preprocessing/tests/test_data.py::test_scaler_n_samples_seen_with_nan[asarray-False-True]",
                            "sklearn/preprocessing/tests/test_data.py::test_scaler_n_samples_seen_with_nan[asarray-False-False]",
                            "sklearn/preprocessing/tests/test_data.py::test_scaler_n_samples_seen_with_nan[csc_matrix-True-False]",
                            "sklearn/preprocessing/tests/test_data.py::test_scaler_n_samples_seen_with_nan[csc_matrix-False-False]",
                            "sklearn/preprocessing/tests/test_data.py::test_scaler_n_samples_seen_with_nan[csr_matrix-True-False]",
                            "sklearn/preprocessing/tests/test_data.py::test_scaler_n_samples_seen_with_nan[csr_matrix-False-False]",
                            "sklearn/preprocessing/tests/test_data.py::test_scaler_return_identity",
                            "sklearn/preprocessing/tests/test_data.py::test_scaler_int",
                            "sklearn/preprocessing/tests/test_data.py::test_scaler_without_copy",
                            "sklearn/preprocessing/tests/test_data.py::test_scale_sparse_with_mean_raise_exception",
                            "sklearn/preprocessing/tests/test_data.py::test_scale_input_finiteness_validation",
                            "sklearn/preprocessing/tests/test_data.py::test_robust_scaler_error_sparse",
                            "sklearn/preprocessing/tests/test_data.py::test_robust_scaler_attributes[X0-True-True]",
                            "sklearn/preprocessing/tests/test_data.py::test_robust_scaler_attributes[X0-True-False]",
                            "sklearn/preprocessing/tests/test_data.py::test_robust_scaler_attributes[X0-False-True]",
                            "sklearn/preprocessing/tests/test_data.py::test_robust_scaler_attributes[X0-False-False]",
                            "sklearn/preprocessing/tests/test_data.py::test_robust_scaler_attributes[X1-True-False]",
                            "sklearn/preprocessing/tests/test_data.py::test_robust_scaler_attributes[X1-False-False]",
                            "sklearn/preprocessing/tests/test_data.py::test_robust_scaler_col_zero_sparse",
                            "sklearn/preprocessing/tests/test_data.py::test_robust_scaler_2d_arrays",
                            "sklearn/preprocessing/tests/test_data.py::test_robust_scaler_equivalence_dense_sparse[positive-0]",
                            "sklearn/preprocessing/tests/test_data.py::test_robust_scaler_equivalence_dense_sparse[positive-0.05]",
                            "sklearn/preprocessing/tests/test_data.py::test_robust_scaler_equivalence_dense_sparse[positive-0.1]",
                            "sklearn/preprocessing/tests/test_data.py::test_robust_scaler_equivalence_dense_sparse[positive-0.5]",
                            "sklearn/preprocessing/tests/test_data.py::test_robust_scaler_equivalence_dense_sparse[positive-1]",
                            "sklearn/preprocessing/tests/test_data.py::test_robust_scaler_equivalence_dense_sparse[negative-0]",
                            "sklearn/preprocessing/tests/test_data.py::test_robust_scaler_equivalence_dense_sparse[negative-0.05]",
                            "sklearn/preprocessing/tests/test_data.py::test_robust_scaler_equivalence_dense_sparse[negative-0.1]",
                            "sklearn/preprocessing/tests/test_data.py::test_robust_scaler_equivalence_dense_sparse[negative-0.5]",
                            "sklearn/preprocessing/tests/test_data.py::test_robust_scaler_equivalence_dense_sparse[negative-1]",
                            "sklearn/preprocessing/tests/test_data.py::test_robust_scaler_equivalence_dense_sparse[zeros-0]",
                            "sklearn/preprocessing/tests/test_data.py::test_robust_scaler_equivalence_dense_sparse[zeros-0.05]",
                            "sklearn/preprocessing/tests/test_data.py::test_robust_scaler_equivalence_dense_sparse[zeros-0.1]",
                            "sklearn/preprocessing/tests/test_data.py::test_robust_scaler_equivalence_dense_sparse[zeros-0.5]",
                            "sklearn/preprocessing/tests/test_data.py::test_robust_scaler_equivalence_dense_sparse[zeros-1]",
                            "sklearn/preprocessing/tests/test_data.py::test_robust_scaler_equivalence_dense_sparse[None-0]",
                            "sklearn/preprocessing/tests/test_data.py::test_robust_scaler_equivalence_dense_sparse[None-0.05]",
                            "sklearn/preprocessing/tests/test_data.py::test_robust_scaler_equivalence_dense_sparse[None-0.1]",
                            "sklearn/preprocessing/tests/test_data.py::test_robust_scaler_equivalence_dense_sparse[None-0.5]",
                            "sklearn/preprocessing/tests/test_data.py::test_robust_scaler_equivalence_dense_sparse[None-1]",
                            "sklearn/preprocessing/tests/test_data.py::test_robust_scaler_transform_one_row_csr",
                            "sklearn/preprocessing/tests/test_data.py::test_robust_scaler_iris",
                            "sklearn/preprocessing/tests/test_data.py::test_robust_scaler_iris_quantiles",
                            "sklearn/preprocessing/tests/test_data.py::test_quantile_transform_iris",
                            "sklearn/preprocessing/tests/test_data.py::test_quantile_transform_check_error",
                            "sklearn/preprocessing/tests/test_data.py::test_quantile_transform_sparse_ignore_zeros",
                            "sklearn/preprocessing/tests/test_data.py::test_quantile_transform_dense_toy",
                            "sklearn/preprocessing/tests/test_data.py::test_quantile_transform_subsampling",
                            "sklearn/preprocessing/tests/test_data.py::test_quantile_transform_sparse_toy",
                            "sklearn/preprocessing/tests/test_data.py::test_quantile_transform_axis1",
                            "sklearn/preprocessing/tests/test_data.py::test_quantile_transform_bounds",
                            "sklearn/preprocessing/tests/test_data.py::test_quantile_transform_and_inverse",
                            "sklearn/preprocessing/tests/test_data.py::test_quantile_transform_nan",
                            "sklearn/preprocessing/tests/test_data.py::test_quantile_transformer_sorted_quantiles[array]",
                            "sklearn/preprocessing/tests/test_data.py::test_quantile_transformer_sorted_quantiles[sparse]",
                            "sklearn/preprocessing/tests/test_data.py::test_robust_scaler_invalid_range",
                            "sklearn/preprocessing/tests/test_data.py::test_scale_function_without_centering",
                            "sklearn/preprocessing/tests/test_data.py::test_robust_scale_axis1",
                            "sklearn/preprocessing/tests/test_data.py::test_robust_scale_1d_array",
                            "sklearn/preprocessing/tests/test_data.py::test_robust_scaler_zero_variance_features",
                            "sklearn/preprocessing/tests/test_data.py::test_robust_scaler_unit_variance",
                            "sklearn/preprocessing/tests/test_data.py::test_maxabs_scaler_zero_variance_features",
                            "sklearn/preprocessing/tests/test_data.py::test_maxabs_scaler_large_negative_value",
                            "sklearn/preprocessing/tests/test_data.py::test_maxabs_scaler_transform_one_row_csr",
                            "sklearn/preprocessing/tests/test_data.py::test_maxabs_scaler_1d",
                            "sklearn/preprocessing/tests/test_data.py::test_maxabs_scaler_partial_fit",
                            "sklearn/preprocessing/tests/test_data.py::test_normalizer_l1",
                            "sklearn/preprocessing/tests/test_data.py::test_normalizer_l2",
                            "sklearn/preprocessing/tests/test_data.py::test_normalizer_max",
                            "sklearn/preprocessing/tests/test_data.py::test_normalizer_max_sign",
                            "sklearn/preprocessing/tests/test_data.py::test_normalize",
                            "sklearn/preprocessing/tests/test_data.py::test_binarizer",
                            "sklearn/preprocessing/tests/test_data.py::test_center_kernel",
                            "sklearn/preprocessing/tests/test_data.py::test_kernelcenterer_non_linear_kernel",
                            "sklearn/preprocessing/tests/test_data.py::test_cv_pipeline_precomputed",
                            "sklearn/preprocessing/tests/test_data.py::test_fit_transform",
                            "sklearn/preprocessing/tests/test_data.py::test_add_dummy_feature",
                            "sklearn/preprocessing/tests/test_data.py::test_add_dummy_feature_coo",
                            "sklearn/preprocessing/tests/test_data.py::test_add_dummy_feature_csc",
                            "sklearn/preprocessing/tests/test_data.py::test_add_dummy_feature_csr",
                            "sklearn/preprocessing/tests/test_data.py::test_fit_cold_start",
                            "sklearn/preprocessing/tests/test_data.py::test_power_transformer_notfitted[box-cox]",
                            "sklearn/preprocessing/tests/test_data.py::test_power_transformer_notfitted[yeo-johnson]",
                            "sklearn/preprocessing/tests/test_data.py::test_power_transformer_inverse[X0-True-box-cox]",
                            "sklearn/preprocessing/tests/test_data.py::test_power_transformer_inverse[X0-True-yeo-johnson]",
                            "sklearn/preprocessing/tests/test_data.py::test_power_transformer_inverse[X0-False-box-cox]",
                            "sklearn/preprocessing/tests/test_data.py::test_power_transformer_inverse[X0-False-yeo-johnson]",
                            "sklearn/preprocessing/tests/test_data.py::test_power_transformer_inverse[X1-True-box-cox]",
                            "sklearn/preprocessing/tests/test_data.py::test_power_transformer_inverse[X1-True-yeo-johnson]",
                            "sklearn/preprocessing/tests/test_data.py::test_power_transformer_inverse[X1-False-box-cox]",
                            "sklearn/preprocessing/tests/test_data.py::test_power_transformer_inverse[X1-False-yeo-johnson]",
                            "sklearn/preprocessing/tests/test_data.py::test_power_transformer_1d",
                            "sklearn/preprocessing/tests/test_data.py::test_power_transformer_2d",
                            "sklearn/preprocessing/tests/test_data.py::test_power_transformer_boxcox_strictly_positive_exception",
                            "sklearn/preprocessing/tests/test_data.py::test_power_transformer_yeojohnson_any_input[X0]",
                            "sklearn/preprocessing/tests/test_data.py::test_power_transformer_yeojohnson_any_input[X1]",
                            "sklearn/preprocessing/tests/test_data.py::test_power_transformer_yeojohnson_any_input[X2]",
                            "sklearn/preprocessing/tests/test_data.py::test_power_transformer_shape_exception[box-cox]",
                            "sklearn/preprocessing/tests/test_data.py::test_power_transformer_shape_exception[yeo-johnson]",
                            "sklearn/preprocessing/tests/test_data.py::test_power_transformer_lambda_zero",
                            "sklearn/preprocessing/tests/test_data.py::test_power_transformer_lambda_one",
                            "sklearn/preprocessing/tests/test_data.py::test_optimization_power_transformer[box-cox-0.1]",
                            "sklearn/preprocessing/tests/test_data.py::test_optimization_power_transformer[box-cox-0.5]",
                            "sklearn/preprocessing/tests/test_data.py::test_optimization_power_transformer[yeo-johnson-0.1]",
                            "sklearn/preprocessing/tests/test_data.py::test_optimization_power_transformer[yeo-johnson-0.5]",
                            "sklearn/preprocessing/tests/test_data.py::test_optimization_power_transformer[yeo-johnson-1.0]",
                            "sklearn/preprocessing/tests/test_data.py::test_yeo_johnson_darwin_example",
                            "sklearn/preprocessing/tests/test_data.py::test_power_transformer_nans[box-cox]",
                            "sklearn/preprocessing/tests/test_data.py::test_power_transformer_nans[yeo-johnson]",
                            "sklearn/preprocessing/tests/test_data.py::test_power_transformer_fit_transform[True-box-cox]",
                            "sklearn/preprocessing/tests/test_data.py::test_power_transformer_fit_transform[True-yeo-johnson]",
                            "sklearn/preprocessing/tests/test_data.py::test_power_transformer_fit_transform[False-box-cox]",
                            "sklearn/preprocessing/tests/test_data.py::test_power_transformer_fit_transform[False-yeo-johnson]",
                            "sklearn/preprocessing/tests/test_data.py::test_power_transformer_copy_True[True-box-cox]",
                            "sklearn/preprocessing/tests/test_data.py::test_power_transformer_copy_True[True-yeo-johnson]",
                            "sklearn/preprocessing/tests/test_data.py::test_power_transformer_copy_True[False-box-cox]",
                            "sklearn/preprocessing/tests/test_data.py::test_power_transformer_copy_True[False-yeo-johnson]",
                            "sklearn/preprocessing/tests/test_data.py::test_power_transformer_copy_False[True-box-cox]",
                            "sklearn/preprocessing/tests/test_data.py::test_power_transformer_copy_False[True-yeo-johnson]",
                            "sklearn/preprocessing/tests/test_data.py::test_power_transformer_copy_False[False-box-cox]",
                            "sklearn/preprocessing/tests/test_data.py::test_power_transformer_copy_False[False-yeo-johnson]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_sparse_partial_fit_finite_variance[X_20]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_sparse_partial_fit_finite_variance[X_21]",
                            "sklearn/preprocessing/tests/test_data.py::test_minmax_scaler_clip[feature_range0]",
                            "sklearn/preprocessing/tests/test_data.py::test_minmax_scaler_clip[feature_range1]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_raise_error_for_1d_input",
                            "sklearn/preprocessing/tests/test_data.py::test_power_transformer_significantly_non_gaussian",
                            "sklearn/preprocessing/tests/test_data.py::test_one_to_one_features[MinMaxScaler]",
                            "sklearn/preprocessing/tests/test_data.py::test_one_to_one_features[MaxAbsScaler]",
                            "sklearn/preprocessing/tests/test_data.py::test_one_to_one_features[RobustScaler]",
                            "sklearn/preprocessing/tests/test_data.py::test_one_to_one_features[StandardScaler]",
                            "sklearn/preprocessing/tests/test_data.py::test_one_to_one_features[QuantileTransformer]",
                            "sklearn/preprocessing/tests/test_data.py::test_one_to_one_features[PowerTransformer]",
                            "sklearn/preprocessing/tests/test_data.py::test_one_to_one_features_pandas[MinMaxScaler]",
                            "sklearn/preprocessing/tests/test_data.py::test_one_to_one_features_pandas[MaxAbsScaler]",
                            "sklearn/preprocessing/tests/test_data.py::test_one_to_one_features_pandas[RobustScaler]",
                            "sklearn/preprocessing/tests/test_data.py::test_one_to_one_features_pandas[StandardScaler]",
                            "sklearn/preprocessing/tests/test_data.py::test_one_to_one_features_pandas[QuantileTransformer]",
                            "sklearn/preprocessing/tests/test_data.py::test_one_to_one_features_pandas[PowerTransformer]",
                            "sklearn/preprocessing/tests/test_data.py::test_one_to_one_features_pandas[Normalizer]",
                            "sklearn/preprocessing/tests/test_data.py::test_one_to_one_features_pandas[Binarizer]",
                            "sklearn/preprocessing/tests/test_data.py::test_kernel_centerer_feature_names_out"
                        ],
                        "failure": [
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_dtype[False-csc_matrix]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_dtype[False-csr_matrix]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_dtype[True-csc_matrix]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_dtype[True-csr_matrix]"
                        ]
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "psf__requests-2317.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "test_requests.py::RequestsTestCase::test_HTTP_302_ALLOW_REDIRECT_GET",
                            "test_requests.py::RequestsTestCase::test_POSTBIN_GET_POST_FILES",
                            "test_requests.py::RequestsTestCase::test_POSTBIN_GET_POST_FILES_WITH_DATA",
                            "test_requests.py::RequestsTestCase::test_basicauth_with_netrc",
                            "test_requests.py::RequestsTestCase::test_json_param_post_content_type_works",
                            "test_requests.py::RequestsTestCase::test_manual_redirect_with_partial_body_read",
                            "test_requests.py::RequestsTestCase::test_requests_history_is_saved",
                            "test_requests.py::TestTimeout::test_encoded_methods"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "test_requests.py::RequestsTestCase::test_BASICAUTH_TUPLE_HTTP_200_OK_GET",
                            "test_requests.py::RequestsTestCase::test_DIGESTAUTH_QUOTES_QOP_VALUE",
                            "test_requests.py::RequestsTestCase::test_DIGESTAUTH_WRONG_HTTP_401_GET",
                            "test_requests.py::RequestsTestCase::test_DIGEST_AUTH_RETURNS_COOKIE",
                            "test_requests.py::RequestsTestCase::test_DIGEST_AUTH_SETS_SESSION_COOKIES",
                            "test_requests.py::RequestsTestCase::test_DIGEST_HTTP_200_OK_GET",
                            "test_requests.py::RequestsTestCase::test_DIGEST_STREAM",
                            "test_requests.py::RequestsTestCase::test_HTTP_200_OK_GET_ALTERNATIVE",
                            "test_requests.py::RequestsTestCase::test_HTTP_200_OK_GET_WITH_MIXED_PARAMS",
                            "test_requests.py::RequestsTestCase::test_HTTP_200_OK_GET_WITH_PARAMS",
                            "test_requests.py::RequestsTestCase::test_HTTP_200_OK_HEAD",
                            "test_requests.py::RequestsTestCase::test_HTTP_200_OK_PUT",
                            "test_requests.py::RequestsTestCase::test_auth_is_retained_for_redirect_on_host",
                            "test_requests.py::RequestsTestCase::test_auth_is_stripped_on_redirect_off_host",
                            "test_requests.py::RequestsTestCase::test_autoset_header_values_are_native",
                            "test_requests.py::RequestsTestCase::test_basic_auth_str_is_always_native",
                            "test_requests.py::RequestsTestCase::test_basic_building",
                            "test_requests.py::RequestsTestCase::test_can_send_nonstring_objects_with_files",
                            "test_requests.py::RequestsTestCase::test_cannot_send_unprepared_requests",
                            "test_requests.py::RequestsTestCase::test_connection_error",
                            "test_requests.py::RequestsTestCase::test_cookie_as_dict_items",
                            "test_requests.py::RequestsTestCase::test_cookie_as_dict_keeps_items",
                            "test_requests.py::RequestsTestCase::test_cookie_as_dict_keeps_len",
                            "test_requests.py::RequestsTestCase::test_cookie_as_dict_keys",
                            "test_requests.py::RequestsTestCase::test_cookie_as_dict_values",
                            "test_requests.py::RequestsTestCase::test_cookie_parameters",
                            "test_requests.py::RequestsTestCase::test_cookie_persists_via_api",
                            "test_requests.py::RequestsTestCase::test_cookie_quote_wrapped",
                            "test_requests.py::RequestsTestCase::test_cookie_removed_on_expire",
                            "test_requests.py::RequestsTestCase::test_cookie_sent_on_redirect",
                            "test_requests.py::RequestsTestCase::test_custom_content_type",
                            "test_requests.py::RequestsTestCase::test_decompress_gzip",
                            "test_requests.py::RequestsTestCase::test_different_encodings_dont_break_post",
                            "test_requests.py::RequestsTestCase::test_entry_points",
                            "test_requests.py::RequestsTestCase::test_fixes_1329",
                            "test_requests.py::RequestsTestCase::test_generic_cookiejar_works",
                            "test_requests.py::RequestsTestCase::test_get_auth_from_url",
                            "test_requests.py::RequestsTestCase::test_get_auth_from_url_encoded_hashes",
                            "test_requests.py::RequestsTestCase::test_get_auth_from_url_encoded_spaces",
                            "test_requests.py::RequestsTestCase::test_get_auth_from_url_not_encoded_spaces",
                            "test_requests.py::RequestsTestCase::test_get_auth_from_url_percent_chars",
                            "test_requests.py::RequestsTestCase::test_header_keys_are_native",
                            "test_requests.py::RequestsTestCase::test_header_remove_is_case_insensitive",
                            "test_requests.py::RequestsTestCase::test_headers_on_session_with_None_are_not_sent",
                            "test_requests.py::RequestsTestCase::test_history_is_always_a_list",
                            "test_requests.py::RequestsTestCase::test_hook_receives_request_arguments",
                            "test_requests.py::RequestsTestCase::test_http_error",
                            "test_requests.py::RequestsTestCase::test_invalid_url",
                            "test_requests.py::RequestsTestCase::test_links",
                            "test_requests.py::RequestsTestCase::test_long_authinfo_in_url",
                            "test_requests.py::RequestsTestCase::test_mixed_case_scheme_acceptable",
                            "test_requests.py::RequestsTestCase::test_no_content_length",
                            "test_requests.py::RequestsTestCase::test_nonhttp_schemes_dont_check_URLs",
                            "test_requests.py::RequestsTestCase::test_param_cookiejar_works",
                            "test_requests.py::RequestsTestCase::test_params_are_added_before_fragment",
                            "test_requests.py::RequestsTestCase::test_params_are_merged_case_sensitive",
                            "test_requests.py::RequestsTestCase::test_path_is_not_double_encoded",
                            "test_requests.py::RequestsTestCase::test_prepare_request_with_bytestring_url",
                            "test_requests.py::RequestsTestCase::test_prepared_from_session",
                            "test_requests.py::RequestsTestCase::test_prepared_request_hook",
                            "test_requests.py::RequestsTestCase::test_pyopenssl_redirect",
                            "test_requests.py::RequestsTestCase::test_redirect_with_wrong_gzipped_header",
                            "test_requests.py::RequestsTestCase::test_request_and_response_are_pickleable",
                            "test_requests.py::RequestsTestCase::test_request_cookie_overrides_session_cookie",
                            "test_requests.py::RequestsTestCase::test_request_cookies_not_persisted",
                            "test_requests.py::RequestsTestCase::test_request_ok_set",
                            "test_requests.py::RequestsTestCase::test_requests_in_history_are_not_overridden",
                            "test_requests.py::RequestsTestCase::test_response_decode_unicode",
                            "test_requests.py::RequestsTestCase::test_response_is_iterable",
                            "test_requests.py::RequestsTestCase::test_session_hooks_are_overriden_by_request_hooks",
                            "test_requests.py::RequestsTestCase::test_session_hooks_are_used_with_no_request_hooks",
                            "test_requests.py::RequestsTestCase::test_session_pickling",
                            "test_requests.py::RequestsTestCase::test_set_cookie_on_301",
                            "test_requests.py::RequestsTestCase::test_status_raising",
                            "test_requests.py::RequestsTestCase::test_time_elapsed_blank",
                            "test_requests.py::RequestsTestCase::test_transport_adapter_ordering",
                            "test_requests.py::RequestsTestCase::test_unicode_get",
                            "test_requests.py::RequestsTestCase::test_unicode_header_name",
                            "test_requests.py::RequestsTestCase::test_unicode_method_name",
                            "test_requests.py::RequestsTestCase::test_unicode_multipart_post_fieldnames",
                            "test_requests.py::RequestsTestCase::test_uppercase_scheme_redirect",
                            "test_requests.py::RequestsTestCase::test_urlencoded_get_query_multivalued_param",
                            "test_requests.py::RequestsTestCase::test_user_agent_transfers",
                            "test_requests.py::TestContentEncodingDetection::test_html4_pragma",
                            "test_requests.py::TestContentEncodingDetection::test_html_charset",
                            "test_requests.py::TestContentEncodingDetection::test_none",
                            "test_requests.py::TestContentEncodingDetection::test_precedence",
                            "test_requests.py::TestContentEncodingDetection::test_xhtml_pragma",
                            "test_requests.py::TestContentEncodingDetection::test_xml",
                            "test_requests.py::TestCaseInsensitiveDict::test_contains",
                            "test_requests.py::TestCaseInsensitiveDict::test_delitem",
                            "test_requests.py::TestCaseInsensitiveDict::test_docstring_example",
                            "test_requests.py::TestCaseInsensitiveDict::test_equality",
                            "test_requests.py::TestCaseInsensitiveDict::test_fixes_649",
                            "test_requests.py::TestCaseInsensitiveDict::test_get",
                            "test_requests.py::TestCaseInsensitiveDict::test_getitem",
                            "test_requests.py::TestCaseInsensitiveDict::test_iter",
                            "test_requests.py::TestCaseInsensitiveDict::test_iterable_init",
                            "test_requests.py::TestCaseInsensitiveDict::test_kwargs_init",
                            "test_requests.py::TestCaseInsensitiveDict::test_len",
                            "test_requests.py::TestCaseInsensitiveDict::test_lower_items",
                            "test_requests.py::TestCaseInsensitiveDict::test_mapping_init",
                            "test_requests.py::TestCaseInsensitiveDict::test_preserve_key_case",
                            "test_requests.py::TestCaseInsensitiveDict::test_preserve_last_key_case",
                            "test_requests.py::TestCaseInsensitiveDict::test_setdefault",
                            "test_requests.py::TestCaseInsensitiveDict::test_update",
                            "test_requests.py::TestCaseInsensitiveDict::test_update_retains_unchanged",
                            "test_requests.py::UtilsTestCase::test_address_in_network",
                            "test_requests.py::UtilsTestCase::test_dotted_netmask",
                            "test_requests.py::UtilsTestCase::test_get_auth_from_url",
                            "test_requests.py::UtilsTestCase::test_get_environ_proxies",
                            "test_requests.py::UtilsTestCase::test_get_environ_proxies_ip_ranges",
                            "test_requests.py::UtilsTestCase::test_is_ipv4_address",
                            "test_requests.py::UtilsTestCase::test_is_valid_cidr",
                            "test_requests.py::UtilsTestCase::test_super_len_io_streams",
                            "test_requests.py::TestMorselToCookieExpires::test_expires_invalid_int",
                            "test_requests.py::TestMorselToCookieExpires::test_expires_invalid_str",
                            "test_requests.py::TestMorselToCookieExpires::test_expires_none",
                            "test_requests.py::TestMorselToCookieExpires::test_expires_valid_str",
                            "test_requests.py::TestMorselToCookieMaxAge::test_max_age_invalid_str",
                            "test_requests.py::TestMorselToCookieMaxAge::test_max_age_valid_int",
                            "test_requests.py::TestTimeout::test_stream_timeout",
                            "test_requests.py::TestTimeout::test_invalid_timeout",
                            "test_requests.py::TestTimeout::test_none_timeout",
                            "test_requests.py::TestTimeout::test_read_timeout",
                            "test_requests.py::TestTimeout::test_connect_timeout",
                            "test_requests.py::TestTimeout::test_total_timeout_connect",
                            "test_requests.py::TestRedirects::test_requests_are_updated_each_time",
                            "test_requests.py::test_data_argument_accepts_tuples",
                            "test_requests.py::test_prepared_request_empty_copy",
                            "test_requests.py::test_prepared_request_no_cookies_copy",
                            "test_requests.py::test_prepared_request_complete_copy",
                            "test_requests.py::test_prepare_unicode_url"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "pytest-dev__pytest-9709.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "testing/python/approx.py::TestApprox::test_generic_ordered_sequence",
                            "testing/python/approx.py::TestApprox::test_allow_ordered_sequences_only"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "testing/python/approx.py::TestApprox::test_repr_string",
                            "testing/python/approx.py::TestApprox::test_repr_complex_numbers",
                            "testing/python/approx.py::TestApprox::test_bool",
                            "testing/python/approx.py::TestApprox::test_operator_overloading",
                            "testing/python/approx.py::TestApprox::test_exactly_equal",
                            "testing/python/approx.py::TestApprox::test_opposite_sign",
                            "testing/python/approx.py::TestApprox::test_zero_tolerance",
                            "testing/python/approx.py::TestApprox::test_negative_tolerance[-1e+100-None]",
                            "testing/python/approx.py::TestApprox::test_negative_tolerance[None--1e+100]",
                            "testing/python/approx.py::TestApprox::test_negative_tolerance[1e+100--1e+100]",
                            "testing/python/approx.py::TestApprox::test_negative_tolerance[-1e+100-1e+100]",
                            "testing/python/approx.py::TestApprox::test_negative_tolerance[-1e+100--1e+100]",
                            "testing/python/approx.py::TestApprox::test_negative_tolerance_message",
                            "testing/python/approx.py::TestApprox::test_inf_tolerance",
                            "testing/python/approx.py::TestApprox::test_inf_tolerance_expecting_zero",
                            "testing/python/approx.py::TestApprox::test_nan_tolerance",
                            "testing/python/approx.py::TestApprox::test_reasonable_defaults",
                            "testing/python/approx.py::TestApprox::test_default_tolerances",
                            "testing/python/approx.py::TestApprox::test_custom_tolerances",
                            "testing/python/approx.py::TestApprox::test_relative_tolerance",
                            "testing/python/approx.py::TestApprox::test_absolute_tolerance",
                            "testing/python/approx.py::TestApprox::test_expecting_zero",
                            "testing/python/approx.py::TestApprox::test_expecting_inf",
                            "testing/python/approx.py::TestApprox::test_expecting_nan",
                            "testing/python/approx.py::TestApprox::test_int",
                            "testing/python/approx.py::TestApprox::test_decimal",
                            "testing/python/approx.py::TestApprox::test_fraction",
                            "testing/python/approx.py::TestApprox::test_complex",
                            "testing/python/approx.py::TestApprox::test_list",
                            "testing/python/approx.py::TestApprox::test_list_decimal",
                            "testing/python/approx.py::TestApprox::test_list_wrong_len",
                            "testing/python/approx.py::TestApprox::test_tuple",
                            "testing/python/approx.py::TestApprox::test_tuple_wrong_len",
                            "testing/python/approx.py::TestApprox::test_tuple_vs_other",
                            "testing/python/approx.py::TestApprox::test_dict",
                            "testing/python/approx.py::TestApprox::test_dict_decimal",
                            "testing/python/approx.py::TestApprox::test_dict_wrong_len",
                            "testing/python/approx.py::TestApprox::test_dict_nonnumeric",
                            "testing/python/approx.py::TestApprox::test_dict_vs_other",
                            "testing/python/approx.py::TestApprox::test_doctests",
                            "testing/python/approx.py::TestApprox::test_expected_value_type_error[nested-list]",
                            "testing/python/approx.py::TestApprox::test_expected_value_type_error[nested-dict]",
                            "testing/python/approx.py::TestApprox::test_nonnumeric_okay_if_equal[None]",
                            "testing/python/approx.py::TestApprox::test_nonnumeric_okay_if_equal[string]",
                            "testing/python/approx.py::TestApprox::test_nonnumeric_okay_if_equal[nested-str]",
                            "testing/python/approx.py::TestApprox::test_nonnumeric_okay_if_equal[dict-with-string]",
                            "testing/python/approx.py::TestApprox::test_nonnumeric_false_if_unequal[string]",
                            "testing/python/approx.py::TestApprox::test_nonnumeric_false_if_unequal[nested-str]",
                            "testing/python/approx.py::TestApprox::test_nonnumeric_false_if_unequal[dict-with-string]",
                            "testing/python/approx.py::TestApprox::test_nonnumeric_dict_repr",
                            "testing/python/approx.py::TestApprox::test_nonnumeric_list_repr",
                            "testing/python/approx.py::TestApprox::test_comparison_operator_type_error[<=]",
                            "testing/python/approx.py::TestApprox::test_comparison_operator_type_error[<]",
                            "testing/python/approx.py::TestApprox::test_comparison_operator_type_error[>=]",
                            "testing/python/approx.py::TestApprox::test_comparison_operator_type_error[>]",
                            "testing/python/approx.py::TestApprox::test_unicode_plus_minus"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "pytest-dev__pytest-9359.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "testing/code/test_source.py::test_decorator"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "testing/code/test_source.py::test_source_str_function",
                            "testing/code/test_source.py::test_source_from_function",
                            "testing/code/test_source.py::test_source_from_method",
                            "testing/code/test_source.py::test_source_from_lines",
                            "testing/code/test_source.py::test_source_from_inner_function",
                            "testing/code/test_source.py::test_source_strips",
                            "testing/code/test_source.py::test_source_strip_multiline",
                            "testing/code/test_source.py::TestAccesses::test_getrange",
                            "testing/code/test_source.py::TestAccesses::test_getrange_step_not_supported",
                            "testing/code/test_source.py::TestAccesses::test_getline",
                            "testing/code/test_source.py::TestAccesses::test_len",
                            "testing/code/test_source.py::TestAccesses::test_iter",
                            "testing/code/test_source.py::TestSourceParsing::test_getstatement",
                            "testing/code/test_source.py::TestSourceParsing::test_getstatementrange_triple_quoted",
                            "testing/code/test_source.py::TestSourceParsing::test_getstatementrange_within_constructs",
                            "testing/code/test_source.py::TestSourceParsing::test_getstatementrange_bug",
                            "testing/code/test_source.py::TestSourceParsing::test_getstatementrange_bug2",
                            "testing/code/test_source.py::TestSourceParsing::test_getstatementrange_ast_issue58",
                            "testing/code/test_source.py::TestSourceParsing::test_getstatementrange_out_of_bounds_py3",
                            "testing/code/test_source.py::TestSourceParsing::test_getstatementrange_with_syntaxerror_issue7",
                            "testing/code/test_source.py::test_getstartingblock_singleline",
                            "testing/code/test_source.py::test_getline_finally",
                            "testing/code/test_source.py::test_getfuncsource_dynamic",
                            "testing/code/test_source.py::test_getfuncsource_with_multine_string",
                            "testing/code/test_source.py::test_deindent",
                            "testing/code/test_source.py::test_source_of_class_at_eof_without_newline",
                            "testing/code/test_source.py::test_source_fallback",
                            "testing/code/test_source.py::test_findsource_fallback",
                            "testing/code/test_source.py::test_findsource",
                            "testing/code/test_source.py::test_getfslineno",
                            "testing/code/test_source.py::test_code_of_object_instance_with_call",
                            "testing/code/test_source.py::test_oneline",
                            "testing/code/test_source.py::test_comment_and_no_newline_at_end",
                            "testing/code/test_source.py::test_oneline_and_comment",
                            "testing/code/test_source.py::test_comments",
                            "testing/code/test_source.py::test_comment_in_statement",
                            "testing/code/test_source.py::test_source_with_decorator",
                            "testing/code/test_source.py::test_single_line_else",
                            "testing/code/test_source.py::test_single_line_finally",
                            "testing/code/test_source.py::test_issue55",
                            "testing/code/test_source.py::test_multiline",
                            "testing/code/test_source.py::TestTry::test_body",
                            "testing/code/test_source.py::TestTry::test_except_line",
                            "testing/code/test_source.py::TestTry::test_except_body",
                            "testing/code/test_source.py::TestTry::test_else",
                            "testing/code/test_source.py::TestTryFinally::test_body",
                            "testing/code/test_source.py::TestTryFinally::test_finally",
                            "testing/code/test_source.py::TestIf::test_body",
                            "testing/code/test_source.py::TestIf::test_elif_clause",
                            "testing/code/test_source.py::TestIf::test_elif",
                            "testing/code/test_source.py::TestIf::test_else",
                            "testing/code/test_source.py::test_semicolon",
                            "testing/code/test_source.py::test_def_online",
                            "testing/code/test_source.py::test_getstartingblock_multiline"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "sphinx-doc__sphinx-10097.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "tests/test_domain_std.py::test_cmd_option_with_optional_value",
                            "tests/test_domain_std.py::test_multiple_cmdoptions"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "tests/test_domain_std.py::test_process_doc_handle_figure_caption",
                            "tests/test_domain_std.py::test_process_doc_handle_table_title",
                            "tests/test_domain_std.py::test_get_full_qualified_name",
                            "tests/test_domain_std.py::test_cmd_option_starting_with_bracket",
                            "tests/test_domain_std.py::test_glossary",
                            "tests/test_domain_std.py::test_glossary_warning",
                            "tests/test_domain_std.py::test_glossary_comment",
                            "tests/test_domain_std.py::test_glossary_comment2",
                            "tests/test_domain_std.py::test_glossary_sorted",
                            "tests/test_domain_std.py::test_glossary_alphanumeric",
                            "tests/test_domain_std.py::test_glossary_conflicted_labels",
                            "tests/test_domain_std.py::test_cmdoption",
                            "tests/test_domain_std.py::test_cmdoption_for_None",
                            "tests/test_domain_std.py::test_productionlist",
                            "tests/test_domain_std.py::test_productionlist2",
                            "tests/test_domain_std.py::test_disabled_docref",
                            "tests/test_domain_std.py::test_labeled_rubric",
                            "tests/test_domain_std.py::test_inline_target"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "pytest-dev__pytest-7749.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "testing/test_collection.py::test_does_not_crash_on_error_from_decorated_function"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "testing/test_collection.py::TestCollector::test_collect_versus_item",
                            "testing/test_collection.py::test_fscollector_from_parent",
                            "testing/test_collection.py::TestCollector::test_check_equality",
                            "testing/test_collection.py::TestCollector::test_getparent",
                            "testing/test_collection.py::TestCollector::test_getcustomfile_roundtrip",
                            "testing/test_collection.py::TestCollector::test_can_skip_class_with_test_attr",
                            "testing/test_collection.py::TestCollectFS::test_ignored_certain_directories",
                            "testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs[activate]",
                            "testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs[activate.csh]",
                            "testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs[activate.fish]",
                            "testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs[Activate]",
                            "testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs[Activate.bat]",
                            "testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs[Activate.ps1]",
                            "testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs_norecursedirs_precedence[activate]",
                            "testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs_norecursedirs_precedence[activate.csh]",
                            "testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs_norecursedirs_precedence[activate.fish]",
                            "testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs_norecursedirs_precedence[Activate]",
                            "testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs_norecursedirs_precedence[Activate.bat]",
                            "testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs_norecursedirs_precedence[Activate.ps1]",
                            "testing/test_collection.py::TestCollectFS::test__in_venv[activate]",
                            "testing/test_collection.py::TestCollectFS::test__in_venv[activate.csh]",
                            "testing/test_collection.py::TestCollectFS::test__in_venv[activate.fish]",
                            "testing/test_collection.py::TestCollectFS::test__in_venv[Activate]",
                            "testing/test_collection.py::TestCollectFS::test__in_venv[Activate.bat]",
                            "testing/test_collection.py::TestCollectFS::test__in_venv[Activate.ps1]",
                            "testing/test_collection.py::TestCollectFS::test_custom_norecursedirs",
                            "testing/test_collection.py::TestCollectFS::test_testpaths_ini",
                            "testing/test_collection.py::TestCollectPluginHookRelay::test_pytest_collect_file",
                            "testing/test_collection.py::TestPrunetraceback::test_custom_repr_failure",
                            "testing/test_collection.py::TestCustomConftests::test_ignore_collect_path",
                            "testing/test_collection.py::TestCustomConftests::test_ignore_collect_not_called_on_argument",
                            "testing/test_collection.py::TestCustomConftests::test_collectignore_exclude_on_option",
                            "testing/test_collection.py::TestCustomConftests::test_collectignoreglob_exclude_on_option",
                            "testing/test_collection.py::TestCustomConftests::test_pytest_fs_collect_hooks_are_seen",
                            "testing/test_collection.py::TestCustomConftests::test_pytest_collect_file_from_sister_dir",
                            "testing/test_collection.py::TestSession::test_collect_topdir",
                            "testing/test_collection.py::TestSession::test_collect_protocol_single_function",
                            "testing/test_collection.py::TestSession::test_collect_protocol_method",
                            "testing/test_collection.py::TestSession::test_collect_custom_nodes_multi_id",
                            "testing/test_collection.py::TestSession::test_collect_subdir_event_ordering",
                            "testing/test_collection.py::TestSession::test_collect_two_commandline_args",
                            "testing/test_collection.py::TestSession::test_serialization_byid",
                            "testing/test_collection.py::TestSession::test_find_byid_without_instance_parents",
                            "testing/test_collection.py::Test_getinitialnodes::test_global_file",
                            "testing/test_collection.py::Test_getinitialnodes::test_pkgfile",
                            "testing/test_collection.py::Test_genitems::test_check_collect_hashes",
                            "testing/test_collection.py::Test_genitems::test_example_items1",
                            "testing/test_collection.py::Test_genitems::test_class_and_functions_discovery_using_glob",
                            "testing/test_collection.py::test_matchnodes_two_collections_same_file",
                            "testing/test_collection.py::TestNodekeywords::test_no_under",
                            "testing/test_collection.py::TestNodekeywords::test_issue345",
                            "testing/test_collection.py::TestNodekeywords::test_keyword_matching_is_case_insensitive_by_default",
                            "testing/test_collection.py::test_exit_on_collection_error",
                            "testing/test_collection.py::test_exit_on_collection_with_maxfail_smaller_than_n_errors",
                            "testing/test_collection.py::test_exit_on_collection_with_maxfail_bigger_than_n_errors",
                            "testing/test_collection.py::test_continue_on_collection_errors",
                            "testing/test_collection.py::test_continue_on_collection_errors_maxfail",
                            "testing/test_collection.py::test_fixture_scope_sibling_conftests",
                            "testing/test_collection.py::test_collect_init_tests",
                            "testing/test_collection.py::test_collect_invalid_signature_message",
                            "testing/test_collection.py::test_collect_handles_raising_on_dunder_class",
                            "testing/test_collection.py::test_collect_with_chdir_during_import",
                            "testing/test_collection.py::test_collect_symlink_file_arg",
                            "testing/test_collection.py::test_collect_symlink_out_of_tree",
                            "testing/test_collection.py::test_collectignore_via_conftest",
                            "testing/test_collection.py::test_collect_pkg_init_and_file_in_args",
                            "testing/test_collection.py::test_collect_pkg_init_only",
                            "testing/test_collection.py::test_collect_sub_with_symlinks[True]",
                            "testing/test_collection.py::test_collect_sub_with_symlinks[False]",
                            "testing/test_collection.py::test_collector_respects_tbstyle",
                            "testing/test_collection.py::test_does_not_eagerly_collect_packages",
                            "testing/test_collection.py::test_does_not_put_src_on_path",
                            "testing/test_collection.py::TestImportModeImportlib::test_collect_duplicate_names",
                            "testing/test_collection.py::TestImportModeImportlib::test_conftest",
                            "testing/test_collection.py::TestImportModeImportlib::test_modules_importable_as_side_effect",
                            "testing/test_collection.py::TestImportModeImportlib::test_modules_not_importable_as_side_effect",
                            "testing/test_collection.py::test_collect_pyargs_with_testpaths"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "sphinx-doc__sphinx-9829.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "tests/test_ext_math.py::test_mathjax_options"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "tests/test_ext_math.py::test_mathjax_align",
                            "tests/test_ext_math.py::test_math_number_all_mathjax",
                            "tests/test_ext_math.py::test_math_number_all_latex",
                            "tests/test_ext_math.py::test_math_eqref_format_html",
                            "tests/test_ext_math.py::test_math_eqref_format_latex",
                            "tests/test_ext_math.py::test_mathjax_numfig_html",
                            "tests/test_ext_math.py::test_math_compat",
                            "tests/test_ext_math.py::test_mathjax3_config",
                            "tests/test_ext_math.py::test_mathjax2_config",
                            "tests/test_ext_math.py::test_mathjax_is_installed_only_if_document_having_math",
                            "tests/test_ext_math.py::test_mathjax_is_not_installed_if_no_equations",
                            "tests/test_ext_math.py::test_mathjax_is_installed_if_no_equations_when_forced"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "sphinx-doc__sphinx-9602.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "tests/test_domain_py.py::test_parse_annotation_Literal"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "tests/test_domain_py.py::test_function_signatures",
                            "tests/test_domain_py.py::test_domain_py_xrefs",
                            "tests/test_domain_py.py::test_domain_py_xrefs_abbreviations",
                            "tests/test_domain_py.py::test_domain_py_objects",
                            "tests/test_domain_py.py::test_resolve_xref_for_properties",
                            "tests/test_domain_py.py::test_domain_py_find_obj",
                            "tests/test_domain_py.py::test_domain_py_canonical",
                            "tests/test_domain_py.py::test_get_full_qualified_name",
                            "tests/test_domain_py.py::test_parse_annotation",
                            "tests/test_domain_py.py::test_pyfunction_signature",
                            "tests/test_domain_py.py::test_pyfunction_signature_full",
                            "tests/test_domain_py.py::test_pyfunction_signature_full_py38",
                            "tests/test_domain_py.py::test_pyfunction_with_number_literals",
                            "tests/test_domain_py.py::test_pyfunction_with_union_type_operator",
                            "tests/test_domain_py.py::test_optional_pyfunction_signature",
                            "tests/test_domain_py.py::test_pyexception_signature",
                            "tests/test_domain_py.py::test_pydata_signature",
                            "tests/test_domain_py.py::test_pydata_signature_old",
                            "tests/test_domain_py.py::test_pydata_with_union_type_operator",
                            "tests/test_domain_py.py::test_pyobject_prefix",
                            "tests/test_domain_py.py::test_pydata",
                            "tests/test_domain_py.py::test_pyfunction",
                            "tests/test_domain_py.py::test_pyclass_options",
                            "tests/test_domain_py.py::test_pymethod_options",
                            "tests/test_domain_py.py::test_pyclassmethod",
                            "tests/test_domain_py.py::test_pystaticmethod",
                            "tests/test_domain_py.py::test_pyattribute",
                            "tests/test_domain_py.py::test_pyproperty",
                            "tests/test_domain_py.py::test_pydecorator_signature",
                            "tests/test_domain_py.py::test_pydecoratormethod_signature",
                            "tests/test_domain_py.py::test_canonical",
                            "tests/test_domain_py.py::test_canonical_definition_overrides",
                            "tests/test_domain_py.py::test_canonical_definition_skip",
                            "tests/test_domain_py.py::test_canonical_duplicated",
                            "tests/test_domain_py.py::test_info_field_list",
                            "tests/test_domain_py.py::test_info_field_list_piped_type",
                            "tests/test_domain_py.py::test_info_field_list_var",
                            "tests/test_domain_py.py::test_module_index",
                            "tests/test_domain_py.py::test_module_index_submodule",
                            "tests/test_domain_py.py::test_module_index_not_collapsed",
                            "tests/test_domain_py.py::test_modindex_common_prefix",
                            "tests/test_domain_py.py::test_noindexentry",
                            "tests/test_domain_py.py::test_python_python_use_unqualified_type_names",
                            "tests/test_domain_py.py::test_python_python_use_unqualified_type_names_disabled",
                            "tests/test_domain_py.py::test_warn_missing_reference"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "pytest-dev__pytest-7314.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "testing/test_terminal.py::TestTerminalFunctional::test_summary_f_alias",
                            "testing/test_terminal.py::TestTerminalFunctional::test_summary_s_alias"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "test_pass_extra_reporting.py::test_this",
                            "test_pass_output_reporting.py::test_pass_has_output",
                            "test_pass_output_reporting.py::test_pass_no_output",
                            "testing/test_terminal.py::test_plugin_nameversion[normal]",
                            "testing/test_terminal.py::test_plugin_nameversion[prefix-strip]",
                            "testing/test_terminal.py::test_plugin_nameversion[deduplicate]",
                            "testing/test_terminal.py::test_getreportopt",
                            "testing/test_terminal.py::test_summary_stats[red-1",
                            "testing/test_terminal.py::test_summary_stats[yellow-1",
                            "testing/test_terminal.py::test_summary_stats[green-5",
                            "testing/test_terminal.py::test_summary_stats[green-1",
                            "testing/test_terminal.py::test_summary_stats[yellow-no",
                            "testing/test_terminal.py::test_skip_counting_towards_summary",
                            "testing/test_terminal.py::test_skip_reasons_folding",
                            "testing/test_terminal.py::test_line_with_reprcrash",
                            "testing/test_terminal.py::TestTerminal::test_pass_skip_fail[default]",
                            "testing/test_terminal.py::TestTerminal::test_pass_skip_fail[verbose]",
                            "testing/test_terminal.py::TestTerminal::test_pass_skip_fail[quiet]",
                            "testing/test_terminal.py::TestTerminal::test_pass_skip_fail[fulltrace]",
                            "testing/test_terminal.py::TestTerminal::test_internalerror",
                            "testing/test_terminal.py::TestTerminal::test_writeline",
                            "testing/test_terminal.py::TestTerminal::test_show_runtest_logstart",
                            "testing/test_terminal.py::TestTerminal::test_itemreport_subclasses_show_subclassed_file",
                            "testing/test_terminal.py::TestTerminal::test_itemreport_directclasses_not_shown_as_subclasses",
                            "testing/test_terminal.py::TestTerminal::test_keyboard_interrupt[default]",
                            "testing/test_terminal.py::TestTerminal::test_keyboard_interrupt[verbose]",
                            "testing/test_terminal.py::TestTerminal::test_keyboard_interrupt[quiet]",
                            "testing/test_terminal.py::TestTerminal::test_keyboard_interrupt[fulltrace]",
                            "testing/test_terminal.py::TestTerminal::test_keyboard_in_sessionstart",
                            "testing/test_terminal.py::TestTerminal::test_collect_single_item",
                            "testing/test_terminal.py::TestTerminal::test_rewrite",
                            "testing/test_terminal.py::TestCollectonly::test_collectonly_basic",
                            "testing/test_terminal.py::TestCollectonly::test_collectonly_skipped_module",
                            "testing/test_terminal.py::TestCollectonly::test_collectonly_display_test_description",
                            "testing/test_terminal.py::TestCollectonly::test_collectonly_failed_module",
                            "testing/test_terminal.py::TestCollectonly::test_collectonly_fatal",
                            "testing/test_terminal.py::TestCollectonly::test_collectonly_simple",
                            "testing/test_terminal.py::TestCollectonly::test_collectonly_error",
                            "testing/test_terminal.py::TestCollectonly::test_collectonly_missing_path",
                            "testing/test_terminal.py::TestCollectonly::test_collectonly_quiet",
                            "testing/test_terminal.py::TestCollectonly::test_collectonly_more_quiet",
                            "testing/test_terminal.py::TestFixtureReporting::test_setup_fixture_error",
                            "testing/test_terminal.py::TestFixtureReporting::test_teardown_fixture_error",
                            "testing/test_terminal.py::TestFixtureReporting::test_teardown_fixture_error_and_test_failure",
                            "testing/test_terminal.py::TestFixtureReporting::test_setup_teardown_output_and_test_failure",
                            "testing/test_terminal.py::TestTerminalFunctional::test_deselected",
                            "testing/test_terminal.py::TestTerminalFunctional::test_deselected_with_hookwrapper",
                            "testing/test_terminal.py::TestTerminalFunctional::test_show_deselected_items_using_markexpr_before_test_execution",
                            "testing/test_terminal.py::TestTerminalFunctional::test_no_skip_summary_if_failure",
                            "testing/test_terminal.py::TestTerminalFunctional::test_passes",
                            "testing/test_terminal.py::TestTerminalFunctional::test_header_trailer_info",
                            "testing/test_terminal.py::TestTerminalFunctional::test_header",
                            "testing/test_terminal.py::TestTerminalFunctional::test_showlocals",
                            "testing/test_terminal.py::TestTerminalFunctional::test_verbose_reporting",
                            "testing/test_terminal.py::TestTerminalFunctional::test_quiet_reporting",
                            "testing/test_terminal.py::TestTerminalFunctional::test_more_quiet_reporting",
                            "testing/test_terminal.py::TestTerminalFunctional::test_report_collectionfinish_hook[no-params]",
                            "testing/test_terminal.py::TestTerminalFunctional::test_report_collectionfinish_hook[collect-only]",
                            "testing/test_terminal.py::test_fail_extra_reporting",
                            "testing/test_terminal.py::test_fail_reporting_on_pass",
                            "testing/test_terminal.py::test_pass_extra_reporting",
                            "testing/test_terminal.py::test_pass_reporting_on_fail",
                            "testing/test_terminal.py::test_pass_output_reporting",
                            "testing/test_terminal.py::test_color_yes",
                            "testing/test_terminal.py::test_color_no",
                            "testing/test_terminal.py::test_color_yes_collection_on_non_atty[True]",
                            "testing/test_terminal.py::test_color_yes_collection_on_non_atty[False]",
                            "testing/test_terminal.py::test_terminalreporter_reportopt_addopts",
                            "testing/test_terminal.py::test_tbstyle_short",
                            "testing/test_terminal.py::test_traceconfig",
                            "testing/test_terminal.py::TestGenericReporting::test_collect_fail[default]",
                            "testing/test_terminal.py::TestGenericReporting::test_collect_fail[verbose]",
                            "testing/test_terminal.py::TestGenericReporting::test_collect_fail[quiet]",
                            "testing/test_terminal.py::TestGenericReporting::test_collect_fail[fulltrace]",
                            "testing/test_terminal.py::TestGenericReporting::test_maxfailures[default]",
                            "testing/test_terminal.py::TestGenericReporting::test_maxfailures[verbose]",
                            "testing/test_terminal.py::TestGenericReporting::test_maxfailures[quiet]",
                            "testing/test_terminal.py::TestGenericReporting::test_maxfailures[fulltrace]",
                            "testing/test_terminal.py::TestGenericReporting::test_tb_option[default]",
                            "testing/test_terminal.py::TestGenericReporting::test_tb_option[verbose]",
                            "testing/test_terminal.py::TestGenericReporting::test_tb_option[quiet]",
                            "testing/test_terminal.py::TestGenericReporting::test_tb_option[fulltrace]",
                            "testing/test_terminal.py::TestGenericReporting::test_tb_crashline[default]",
                            "testing/test_terminal.py::TestGenericReporting::test_tb_crashline[verbose]",
                            "testing/test_terminal.py::TestGenericReporting::test_tb_crashline[quiet]",
                            "testing/test_terminal.py::TestGenericReporting::test_tb_crashline[fulltrace]",
                            "testing/test_terminal.py::TestGenericReporting::test_pytest_report_header[default]",
                            "testing/test_terminal.py::TestGenericReporting::test_pytest_report_header[verbose]",
                            "testing/test_terminal.py::TestGenericReporting::test_pytest_report_header[quiet]",
                            "testing/test_terminal.py::TestGenericReporting::test_pytest_report_header[fulltrace]",
                            "testing/test_terminal.py::TestGenericReporting::test_show_capture",
                            "testing/test_terminal.py::TestGenericReporting::test_show_capture_with_teardown_logs",
                            "testing/test_terminal.py::test_fdopen_kept_alive_issue124",
                            "testing/test_terminal.py::test_tbstyle_native_setup_error",
                            "testing/test_terminal.py::test_terminal_summary",
                            "testing/test_terminal.py::test_terminal_summary_warnings_are_displayed",
                            "testing/test_terminal.py::test_terminal_summary_warnings_header_once",
                            "testing/test_terminal.py::TestClassicOutputStyle::test_normal_verbosity",
                            "testing/test_terminal.py::TestClassicOutputStyle::test_verbose",
                            "testing/test_terminal.py::TestClassicOutputStyle::test_quiet",
                            "testing/test_terminal.py::TestProgressOutputStyle::test_zero_tests_collected",
                            "testing/test_terminal.py::TestProgressOutputStyle::test_normal",
                            "testing/test_terminal.py::TestProgressOutputStyle::test_count",
                            "testing/test_terminal.py::TestProgressOutputStyle::test_verbose",
                            "testing/test_terminal.py::TestProgressOutputStyle::test_verbose_count",
                            "testing/test_terminal.py::TestProgressOutputStyle::test_capture_no",
                            "testing/test_terminal.py::TestProgressWithTeardown::test_teardown_simple",
                            "testing/test_terminal.py::TestProgressWithTeardown::test_teardown_with_test_also_failing",
                            "testing/test_terminal.py::TestProgressWithTeardown::test_teardown_many",
                            "testing/test_terminal.py::TestProgressWithTeardown::test_teardown_many_verbose"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "pydata__xarray-7105.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "xarray/tests/test_dataset.py::TestDataset::test_repr",
                            "xarray/tests/test_dataset.py::TestDataset::test_repr_multiindex",
                            "xarray/tests/test_dataset.py::TestDataset::test_repr_period_index",
                            "xarray/tests/test_dataset.py::TestDataset::test_unicode_data",
                            "xarray/tests/test_dataset.py::TestDataset::test_repr_nep18",
                            "xarray/tests/test_dataset.py::TestDataset::test_info",
                            "xarray/tests/test_dataset.py::TestDataset::test_constructor",
                            "xarray/tests/test_dataset.py::TestDataset::test_constructor_invalid_dims",
                            "xarray/tests/test_dataset.py::TestDataset::test_constructor_1d",
                            "xarray/tests/test_dataset.py::TestDataset::test_constructor_0d",
                            "xarray/tests/test_dataset.py::TestDataset::test_constructor_auto_align",
                            "xarray/tests/test_dataset.py::TestDataset::test_constructor_pandas_sequence",
                            "xarray/tests/test_dataset.py::TestDataset::test_constructor_pandas_single",
                            "xarray/tests/test_dataset.py::TestDataset::test_constructor_compat",
                            "xarray/tests/test_dataset.py::TestDataset::test_constructor_with_coords",
                            "xarray/tests/test_dataset.py::TestDataset::test_properties",
                            "xarray/tests/test_dataset.py::TestDataset::test_asarray",
                            "xarray/tests/test_dataset.py::TestDataset::test_get_index",
                            "xarray/tests/test_dataset.py::TestDataset::test_attr_access",
                            "xarray/tests/test_dataset.py::TestDataset::test_variable",
                            "xarray/tests/test_dataset.py::TestDataset::test_modify_inplace",
                            "xarray/tests/test_dataset.py::TestDataset::test_coords_properties",
                            "xarray/tests/test_dataset.py::TestDataset::test_coords_modify",
                            "xarray/tests/test_dataset.py::TestDataset::test_update_index",
                            "xarray/tests/test_dataset.py::TestDataset::test_coords_setitem_with_new_dimension",
                            "xarray/tests/test_dataset.py::TestDataset::test_coords_setitem_multiindex",
                            "xarray/tests/test_dataset.py::TestDataset::test_coords_set",
                            "xarray/tests/test_dataset.py::TestDataset::test_coords_to_dataset",
                            "xarray/tests/test_dataset.py::TestDataset::test_coords_merge",
                            "xarray/tests/test_dataset.py::TestDataset::test_coords_merge_mismatched_shape",
                            "xarray/tests/test_dataset.py::TestDataset::test_data_vars_properties",
                            "xarray/tests/test_dataset.py::TestDataset::test_equals_and_identical",
                            "xarray/tests/test_dataset.py::TestDataset::test_equals_failures",
                            "xarray/tests/test_dataset.py::TestDataset::test_broadcast_equals",
                            "xarray/tests/test_dataset.py::TestDataset::test_attrs",
                            "xarray/tests/test_dataset.py::TestDataset::test_chunks_does_not_load_data",
                            "xarray/tests/test_dataset.py::TestDataset::test_isel",
                            "xarray/tests/test_dataset.py::TestDataset::test_isel_fancy",
                            "xarray/tests/test_dataset.py::TestDataset::test_isel_dataarray",
                            "xarray/tests/test_dataset.py::TestDataset::test_isel_fancy_convert_index_variable",
                            "xarray/tests/test_dataset.py::TestDataset::test_sel",
                            "xarray/tests/test_dataset.py::TestDataset::test_sel_dataarray",
                            "xarray/tests/test_dataset.py::TestDataset::test_sel_dataarray_mindex",
                            "xarray/tests/test_dataset.py::TestDataset::test_sel_categorical",
                            "xarray/tests/test_dataset.py::TestDataset::test_sel_categorical_error",
                            "xarray/tests/test_dataset.py::TestDataset::test_categorical_index",
                            "xarray/tests/test_dataset.py::TestDataset::test_categorical_reindex",
                            "xarray/tests/test_dataset.py::TestDataset::test_categorical_multiindex",
                            "xarray/tests/test_dataset.py::TestDataset::test_sel_drop",
                            "xarray/tests/test_dataset.py::TestDataset::test_sel_drop_mindex",
                            "xarray/tests/test_dataset.py::TestDataset::test_isel_drop",
                            "xarray/tests/test_dataset.py::TestDataset::test_head",
                            "xarray/tests/test_dataset.py::TestDataset::test_tail",
                            "xarray/tests/test_dataset.py::TestDataset::test_thin",
                            "xarray/tests/test_dataset.py::TestDataset::test_sel_fancy",
                            "xarray/tests/test_dataset.py::TestDataset::test_sel_method",
                            "xarray/tests/test_dataset.py::TestDataset::test_loc",
                            "xarray/tests/test_dataset.py::TestDataset::test_selection_multiindex",
                            "xarray/tests/test_dataset.py::TestDataset::test_broadcast_like",
                            "xarray/tests/test_dataset.py::TestDataset::test_to_pandas",
                            "xarray/tests/test_dataset.py::TestDataset::test_reindex_like",
                            "xarray/tests/test_dataset.py::TestDataset::test_reindex",
                            "xarray/tests/test_dataset.py::TestDataset::test_reindex_attrs_encoding",
                            "xarray/tests/test_dataset.py::TestDataset::test_reindex_warning",
                            "xarray/tests/test_dataset.py::TestDataset::test_reindex_variables_copied",
                            "xarray/tests/test_dataset.py::TestDataset::test_reindex_method",
                            "xarray/tests/test_dataset.py::TestDataset::test_reindex_fill_value[fill_value0]",
                            "xarray/tests/test_dataset.py::TestDataset::test_reindex_fill_value[2]",
                            "xarray/tests/test_dataset.py::TestDataset::test_reindex_fill_value[2.0]",
                            "xarray/tests/test_dataset.py::TestDataset::test_reindex_fill_value[fill_value3]",
                            "xarray/tests/test_dataset.py::TestDataset::test_reindex_like_fill_value[fill_value0]",
                            "xarray/tests/test_dataset.py::TestDataset::test_reindex_like_fill_value[2]",
                            "xarray/tests/test_dataset.py::TestDataset::test_reindex_like_fill_value[2.0]",
                            "xarray/tests/test_dataset.py::TestDataset::test_reindex_like_fill_value[fill_value3]",
                            "xarray/tests/test_dataset.py::TestDataset::test_reindex_str_dtype[str]",
                            "xarray/tests/test_dataset.py::TestDataset::test_reindex_str_dtype[bytes]",
                            "xarray/tests/test_dataset.py::TestDataset::test_align_fill_value[fill_value0]",
                            "xarray/tests/test_dataset.py::TestDataset::test_align_fill_value[2]",
                            "xarray/tests/test_dataset.py::TestDataset::test_align_fill_value[2.0]",
                            "xarray/tests/test_dataset.py::TestDataset::test_align_fill_value[fill_value3]",
                            "xarray/tests/test_dataset.py::TestDataset::test_align",
                            "xarray/tests/test_dataset.py::TestDataset::test_align_exact",
                            "xarray/tests/test_dataset.py::TestDataset::test_align_override",
                            "xarray/tests/test_dataset.py::TestDataset::test_align_exclude",
                            "xarray/tests/test_dataset.py::TestDataset::test_align_nocopy",
                            "xarray/tests/test_dataset.py::TestDataset::test_align_indexes",
                            "xarray/tests/test_dataset.py::TestDataset::test_align_non_unique",
                            "xarray/tests/test_dataset.py::TestDataset::test_align_str_dtype",
                            "xarray/tests/test_dataset.py::TestDataset::test_align_index_var_attrs[left]",
                            "xarray/tests/test_dataset.py::TestDataset::test_align_index_var_attrs[override]",
                            "xarray/tests/test_dataset.py::TestDataset::test_broadcast",
                            "xarray/tests/test_dataset.py::TestDataset::test_broadcast_nocopy",
                            "xarray/tests/test_dataset.py::TestDataset::test_broadcast_exclude",
                            "xarray/tests/test_dataset.py::TestDataset::test_broadcast_misaligned",
                            "xarray/tests/test_dataset.py::TestDataset::test_broadcast_multi_index",
                            "xarray/tests/test_dataset.py::TestDataset::test_variable_indexing",
                            "xarray/tests/test_dataset.py::TestDataset::test_drop_variables",
                            "xarray/tests/test_dataset.py::TestDataset::test_drop_multiindex_level",
                            "xarray/tests/test_dataset.py::TestDataset::test_drop_labels_by_keyword",
                            "xarray/tests/test_dataset.py::TestDataset::test_drop_labels_by_position",
                            "xarray/tests/test_dataset.py::TestDataset::test_drop_indexes",
                            "xarray/tests/test_dataset.py::TestDataset::test_drop_dims",
                            "xarray/tests/test_dataset.py::TestDataset::test_copy",
                            "xarray/tests/test_dataset.py::TestDataset::test_copy_with_data",
                            "xarray/tests/test_dataset.py::TestDataset::test_copy_with_data_errors",
                            "xarray/tests/test_dataset.py::TestDataset::test_rename",
                            "xarray/tests/test_dataset.py::TestDataset::test_rename_old_name",
                            "xarray/tests/test_dataset.py::TestDataset::test_rename_same_name",
                            "xarray/tests/test_dataset.py::TestDataset::test_rename_dims",
                            "xarray/tests/test_dataset.py::TestDataset::test_rename_vars",
                            "xarray/tests/test_dataset.py::TestDataset::test_rename_dimension_coord",
                            "xarray/tests/test_dataset.py::TestDataset::test_rename_dimension_coord_warnings",
                            "xarray/tests/test_dataset.py::TestDataset::test_rename_perserve_attrs_encoding",
                            "xarray/tests/test_dataset.py::TestDataset::test_rename_does_not_change_DatetimeIndex_type",
                            "xarray/tests/test_dataset.py::TestDataset::test_swap_dims",
                            "xarray/tests/test_dataset.py::TestDataset::test_expand_dims_error",
                            "xarray/tests/test_dataset.py::TestDataset::test_expand_dims_int",
                            "xarray/tests/test_dataset.py::TestDataset::test_expand_dims_coords",
                            "xarray/tests/test_dataset.py::TestDataset::test_expand_dims_existing_scalar_coord",
                            "xarray/tests/test_dataset.py::TestDataset::test_isel_expand_dims_roundtrip",
                            "xarray/tests/test_dataset.py::TestDataset::test_expand_dims_mixed_int_and_coords",
                            "xarray/tests/test_dataset.py::TestDataset::test_expand_dims_kwargs_python36plus",
                            "xarray/tests/test_dataset.py::TestDataset::test_set_index",
                            "xarray/tests/test_dataset.py::TestDataset::test_set_index_deindexed_coords",
                            "xarray/tests/test_dataset.py::TestDataset::test_reset_index",
                            "xarray/tests/test_dataset.py::TestDataset::test_reset_index_keep_attrs",
                            "xarray/tests/test_dataset.py::TestDataset::test_reset_index_drop_dims",
                            "xarray/tests/test_dataset.py::TestDataset::test_reset_index_drop_convert[foo-False-dropped0-converted0-renamed0]",
                            "xarray/tests/test_dataset.py::TestDataset::test_reset_index_drop_convert[foo-True-dropped1-converted1-renamed1]",
                            "xarray/tests/test_dataset.py::TestDataset::test_reset_index_drop_convert[x-False-dropped2-converted2-renamed2]",
                            "xarray/tests/test_dataset.py::TestDataset::test_reset_index_drop_convert[x-True-dropped3-converted3-renamed3]",
                            "xarray/tests/test_dataset.py::TestDataset::test_reset_index_drop_convert[arg4-False-dropped4-converted4-renamed4]",
                            "xarray/tests/test_dataset.py::TestDataset::test_reset_index_drop_convert[arg5-True-dropped5-converted5-renamed5]",
                            "xarray/tests/test_dataset.py::TestDataset::test_reset_index_drop_convert[arg6-False-dropped6-converted6-renamed6]",
                            "xarray/tests/test_dataset.py::TestDataset::test_reset_index_drop_convert[arg7-True-dropped7-converted7-renamed7]",
                            "xarray/tests/test_dataset.py::TestDataset::test_reorder_levels",
                            "xarray/tests/test_dataset.py::TestDataset::test_set_xindex",
                            "xarray/tests/test_dataset.py::TestDataset::test_set_xindex_options",
                            "xarray/tests/test_dataset.py::TestDataset::test_stack",
                            "xarray/tests/test_dataset.py::TestDataset::test_stack_create_index[True-expected_keys0]",
                            "xarray/tests/test_dataset.py::TestDataset::test_stack_create_index[False-expected_keys1]",
                            "xarray/tests/test_dataset.py::TestDataset::test_stack_create_index[None-expected_keys2]",
                            "xarray/tests/test_dataset.py::TestDataset::test_stack_multi_index",
                            "xarray/tests/test_dataset.py::TestDataset::test_stack_non_dim_coords",
                            "xarray/tests/test_dataset.py::TestDataset::test_unstack",
                            "xarray/tests/test_dataset.py::TestDataset::test_unstack_errors",
                            "xarray/tests/test_dataset.py::TestDataset::test_unstack_fill_value",
                            "xarray/tests/test_dataset.py::TestDataset::test_stack_unstack_fast",
                            "xarray/tests/test_dataset.py::TestDataset::test_stack_unstack_slow",
                            "xarray/tests/test_dataset.py::TestDataset::test_to_stacked_array_invalid_sample_dims",
                            "xarray/tests/test_dataset.py::TestDataset::test_to_stacked_array_name",
                            "xarray/tests/test_dataset.py::TestDataset::test_to_stacked_array_dtype_dims",
                            "xarray/tests/test_dataset.py::TestDataset::test_to_stacked_array_to_unstacked_dataset",
                            "xarray/tests/test_dataset.py::TestDataset::test_to_stacked_array_to_unstacked_dataset_different_dimension",
                            "xarray/tests/test_dataset.py::TestDataset::test_update",
                            "xarray/tests/test_dataset.py::TestDataset::test_update_overwrite_coords",
                            "xarray/tests/test_dataset.py::TestDataset::test_update_multiindex_level",
                            "xarray/tests/test_dataset.py::TestDataset::test_update_auto_align",
                            "xarray/tests/test_dataset.py::TestDataset::test_getitem",
                            "xarray/tests/test_dataset.py::TestDataset::test_getitem_hashable",
                            "xarray/tests/test_dataset.py::TestDataset::test_getitem_multiple_dtype",
                            "xarray/tests/test_dataset.py::TestDataset::test_virtual_variables_default_coords",
                            "xarray/tests/test_dataset.py::TestDataset::test_virtual_variables_time",
                            "xarray/tests/test_dataset.py::TestDataset::test_virtual_variable_same_name",
                            "xarray/tests/test_dataset.py::TestDataset::test_time_season",
                            "xarray/tests/test_dataset.py::TestDataset::test_slice_virtual_variable",
                            "xarray/tests/test_dataset.py::TestDataset::test_setitem",
                            "xarray/tests/test_dataset.py::TestDataset::test_setitem_pandas",
                            "xarray/tests/test_dataset.py::TestDataset::test_setitem_auto_align",
                            "xarray/tests/test_dataset.py::TestDataset::test_setitem_dimension_override",
                            "xarray/tests/test_dataset.py::TestDataset::test_setitem_with_coords",
                            "xarray/tests/test_dataset.py::TestDataset::test_setitem_align_new_indexes",
                            "xarray/tests/test_dataset.py::TestDataset::test_setitem_str_dtype[str]",
                            "xarray/tests/test_dataset.py::TestDataset::test_setitem_str_dtype[bytes]",
                            "xarray/tests/test_dataset.py::TestDataset::test_setitem_using_list",
                            "xarray/tests/test_dataset.py::TestDataset::test_setitem_using_list_errors[var_list0-data0-Different",
                            "xarray/tests/test_dataset.py::TestDataset::test_setitem_using_list_errors[var_list1-data1-Empty",
                            "xarray/tests/test_dataset.py::TestDataset::test_setitem_using_list_errors[var_list2-data2-assign",
                            "xarray/tests/test_dataset.py::TestDataset::test_assign",
                            "xarray/tests/test_dataset.py::TestDataset::test_assign_coords",
                            "xarray/tests/test_dataset.py::TestDataset::test_assign_attrs",
                            "xarray/tests/test_dataset.py::TestDataset::test_assign_multiindex_level",
                            "xarray/tests/test_dataset.py::TestDataset::test_assign_coords_existing_multiindex",
                            "xarray/tests/test_dataset.py::TestDataset::test_assign_all_multiindex_coords",
                            "xarray/tests/test_dataset.py::TestDataset::test_merge_multiindex_level",
                            "xarray/tests/test_dataset.py::TestDataset::test_setitem_original_non_unique_index",
                            "xarray/tests/test_dataset.py::TestDataset::test_setitem_both_non_unique_index",
                            "xarray/tests/test_dataset.py::TestDataset::test_setitem_multiindex_level",
                            "xarray/tests/test_dataset.py::TestDataset::test_delitem",
                            "xarray/tests/test_dataset.py::TestDataset::test_delitem_multiindex_level",
                            "xarray/tests/test_dataset.py::TestDataset::test_squeeze",
                            "xarray/tests/test_dataset.py::TestDataset::test_squeeze_drop",
                            "xarray/tests/test_dataset.py::TestDataset::test_to_array",
                            "xarray/tests/test_dataset.py::TestDataset::test_to_and_from_dataframe",
                            "xarray/tests/test_dataset.py::TestDataset::test_from_dataframe_categorical",
                            "xarray/tests/test_dataset.py::TestDataset::test_to_and_from_empty_dataframe",
                            "xarray/tests/test_dataset.py::TestDataset::test_from_dataframe_multiindex",
                            "xarray/tests/test_dataset.py::TestDataset::test_from_dataframe_unsorted_levels",
                            "xarray/tests/test_dataset.py::TestDataset::test_from_dataframe_non_unique_columns",
                            "xarray/tests/test_dataset.py::TestDataset::test_convert_dataframe_with_many_types_and_multiindex",
                            "xarray/tests/test_dataset.py::TestDataset::test_to_and_from_dict",
                            "xarray/tests/test_dataset.py::TestDataset::test_to_and_from_dict_with_time_dim",
                            "xarray/tests/test_dataset.py::TestDataset::test_to_and_from_dict_with_nan_nat",
                            "xarray/tests/test_dataset.py::TestDataset::test_to_dict_with_numpy_attrs",
                            "xarray/tests/test_dataset.py::TestDataset::test_pickle",
                            "xarray/tests/test_dataset.py::TestDataset::test_lazy_load",
                            "xarray/tests/test_dataset.py::TestDataset::test_dropna",
                            "xarray/tests/test_dataset.py::TestDataset::test_fillna",
                            "xarray/tests/test_dataset.py::TestDataset::test_propagate_attrs[<lambda>0]",
                            "xarray/tests/test_dataset.py::TestDataset::test_propagate_attrs[<lambda>1]",
                            "xarray/tests/test_dataset.py::TestDataset::test_propagate_attrs[absolute]",
                            "xarray/tests/test_dataset.py::TestDataset::test_propagate_attrs[abs]",
                            "xarray/tests/test_dataset.py::TestDataset::test_where",
                            "xarray/tests/test_dataset.py::TestDataset::test_where_other",
                            "xarray/tests/test_dataset.py::TestDataset::test_where_drop",
                            "xarray/tests/test_dataset.py::TestDataset::test_where_drop_empty",
                            "xarray/tests/test_dataset.py::TestDataset::test_where_drop_no_indexes",
                            "xarray/tests/test_dataset.py::TestDataset::test_reduce",
                            "xarray/tests/test_dataset.py::TestDataset::test_reduce_coords",
                            "xarray/tests/test_dataset.py::TestDataset::test_mean_uint_dtype",
                            "xarray/tests/test_dataset.py::TestDataset::test_reduce_bad_dim",
                            "xarray/tests/test_dataset.py::TestDataset::test_reduce_cumsum",
                            "xarray/tests/test_dataset.py::TestDataset::test_reduce_cumsum_test_dims[cumsum-dim1-expected0]",
                            "xarray/tests/test_dataset.py::TestDataset::test_reduce_cumsum_test_dims[cumsum-dim2-expected1]",
                            "xarray/tests/test_dataset.py::TestDataset::test_reduce_cumsum_test_dims[cumsum-dim3-expected2]",
                            "xarray/tests/test_dataset.py::TestDataset::test_reduce_cumsum_test_dims[cumsum-time-expected3]",
                            "xarray/tests/test_dataset.py::TestDataset::test_reduce_cumsum_test_dims[cumprod-dim1-expected0]",
                            "xarray/tests/test_dataset.py::TestDataset::test_reduce_cumsum_test_dims[cumprod-dim2-expected1]",
                            "xarray/tests/test_dataset.py::TestDataset::test_reduce_cumsum_test_dims[cumprod-dim3-expected2]",
                            "xarray/tests/test_dataset.py::TestDataset::test_reduce_cumsum_test_dims[cumprod-time-expected3]",
                            "xarray/tests/test_dataset.py::TestDataset::test_reduce_non_numeric",
                            "xarray/tests/test_dataset.py::TestDataset::test_reduce_strings",
                            "xarray/tests/test_dataset.py::TestDataset::test_reduce_dtypes",
                            "xarray/tests/test_dataset.py::TestDataset::test_reduce_keep_attrs",
                            "xarray/tests/test_dataset.py::TestDataset::test_reduce_argmin",
                            "xarray/tests/test_dataset.py::TestDataset::test_reduce_scalars",
                            "xarray/tests/test_dataset.py::TestDataset::test_reduce_only_one_axis",
                            "xarray/tests/test_dataset.py::TestDataset::test_reduce_no_axis",
                            "xarray/tests/test_dataset.py::TestDataset::test_reduce_keepdims",
                            "xarray/tests/test_dataset.py::TestDataset::test_quantile[0.25-True]",
                            "xarray/tests/test_dataset.py::TestDataset::test_quantile[0.25-False]",
                            "xarray/tests/test_dataset.py::TestDataset::test_quantile[0.25-None]",
                            "xarray/tests/test_dataset.py::TestDataset::test_quantile[q1-True]",
                            "xarray/tests/test_dataset.py::TestDataset::test_quantile[q1-False]",
                            "xarray/tests/test_dataset.py::TestDataset::test_quantile[q1-None]",
                            "xarray/tests/test_dataset.py::TestDataset::test_quantile[q2-True]",
                            "xarray/tests/test_dataset.py::TestDataset::test_quantile[q2-False]",
                            "xarray/tests/test_dataset.py::TestDataset::test_quantile[q2-None]",
                            "xarray/tests/test_dataset.py::TestDataset::test_quantile_skipna[True]",
                            "xarray/tests/test_dataset.py::TestDataset::test_quantile_skipna[False]",
                            "xarray/tests/test_dataset.py::TestDataset::test_quantile_method[midpoint]",
                            "xarray/tests/test_dataset.py::TestDataset::test_quantile_method[lower]",
                            "xarray/tests/test_dataset.py::TestDataset::test_quantile_interpolation_deprecated[midpoint]",
                            "xarray/tests/test_dataset.py::TestDataset::test_quantile_interpolation_deprecated[lower]",
                            "xarray/tests/test_dataset.py::TestDataset::test_rank_use_bottleneck",
                            "xarray/tests/test_dataset.py::TestDataset::test_count",
                            "xarray/tests/test_dataset.py::TestDataset::test_map",
                            "xarray/tests/test_dataset.py::TestDataset::test_apply_pending_deprecated_map",
                            "xarray/tests/test_dataset.py::TestDataset::test_dataset_number_math",
                            "xarray/tests/test_dataset.py::TestDataset::test_unary_ops",
                            "xarray/tests/test_dataset.py::TestDataset::test_dataset_array_math",
                            "xarray/tests/test_dataset.py::TestDataset::test_dataset_dataset_math",
                            "xarray/tests/test_dataset.py::TestDataset::test_dataset_math_auto_align",
                            "xarray/tests/test_dataset.py::TestDataset::test_dataset_math_errors",
                            "xarray/tests/test_dataset.py::TestDataset::test_dataset_transpose",
                            "xarray/tests/test_dataset.py::TestDataset::test_dataset_ellipsis_transpose_different_ordered_vars",
                            "xarray/tests/test_dataset.py::TestDataset::test_dataset_retains_period_index_on_transpose",
                            "xarray/tests/test_dataset.py::TestDataset::test_dataset_diff_n1_simple",
                            "xarray/tests/test_dataset.py::TestDataset::test_dataset_diff_n1_label",
                            "xarray/tests/test_dataset.py::TestDataset::test_dataset_diff_n1",
                            "xarray/tests/test_dataset.py::TestDataset::test_dataset_diff_n2",
                            "xarray/tests/test_dataset.py::TestDataset::test_dataset_diff_exception_n_neg",
                            "xarray/tests/test_dataset.py::TestDataset::test_dataset_diff_exception_label_str",
                            "xarray/tests/test_dataset.py::TestDataset::test_shift[fill_value0]",
                            "xarray/tests/test_dataset.py::TestDataset::test_shift[2]",
                            "xarray/tests/test_dataset.py::TestDataset::test_shift[2.0]",
                            "xarray/tests/test_dataset.py::TestDataset::test_shift[fill_value3]",
                            "xarray/tests/test_dataset.py::TestDataset::test_roll_coords",
                            "xarray/tests/test_dataset.py::TestDataset::test_roll_no_coords",
                            "xarray/tests/test_dataset.py::TestDataset::test_roll_multidim",
                            "xarray/tests/test_dataset.py::TestDataset::test_real_and_imag",
                            "xarray/tests/test_dataset.py::TestDataset::test_setattr_raises",
                            "xarray/tests/test_dataset.py::TestDataset::test_filter_by_attrs",
                            "xarray/tests/test_dataset.py::TestDataset::test_binary_op_propagate_indexes",
                            "xarray/tests/test_dataset.py::TestDataset::test_binary_op_join_setting",
                            "xarray/tests/test_dataset.py::TestDataset::test_full_like",
                            "xarray/tests/test_dataset.py::TestDataset::test_combine_first",
                            "xarray/tests/test_dataset.py::TestDataset::test_sortby",
                            "xarray/tests/test_dataset.py::TestDataset::test_attribute_access",
                            "xarray/tests/test_dataset.py::TestDataset::test_ipython_key_completion",
                            "xarray/tests/test_dataset.py::TestDataset::test_polyfit_output",
                            "xarray/tests/test_dataset.py::TestDataset::test_polyfit_warnings",
                            "xarray/tests/test_dataset.py::TestDataset::test_pad",
                            "xarray/tests/test_dataset.py::TestDataset::test_astype_attrs",
                            "xarray/tests/test_dataset.py::TestDataset::test_query[numpy-python-pandas]",
                            "xarray/tests/test_dataset.py::TestDataset::test_query[numpy-python-python]",
                            "xarray/tests/test_dataset.py::TestDataset::test_query[numpy-None-pandas]",
                            "xarray/tests/test_dataset.py::TestDataset::test_query[numpy-None-python]",
                            "xarray/tests/test_dataset.py::test_isin[numpy-test_elements0]",
                            "xarray/tests/test_dataset.py::test_isin[numpy-test_elements1]",
                            "xarray/tests/test_dataset.py::test_isin[numpy-test_elements2]",
                            "xarray/tests/test_dataset.py::test_isin_dataset",
                            "xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords0]",
                            "xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords1]",
                            "xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords2]",
                            "xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords3]",
                            "xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords4]",
                            "xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords5]",
                            "xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords6]",
                            "xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords7]",
                            "xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords8]",
                            "xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords9]",
                            "xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords0]",
                            "xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords1]",
                            "xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords2]",
                            "xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords3]",
                            "xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords4]",
                            "xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords5]",
                            "xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords6]",
                            "xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords7]",
                            "xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords8]",
                            "xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords9]",
                            "xarray/tests/test_dataset.py::test_error_message_on_set_supplied",
                            "xarray/tests/test_dataset.py::test_constructor_raises_with_invalid_coords[unaligned_coords0]",
                            "xarray/tests/test_dataset.py::test_dir_expected_attrs[numpy-3]",
                            "xarray/tests/test_dataset.py::test_dir_non_string[1-numpy]",
                            "xarray/tests/test_dataset.py::test_dir_unicode[1-numpy]",
                            "xarray/tests/test_dataset.py::test_raise_no_warning_for_nan_in_binary_ops",
                            "xarray/tests/test_dataset.py::test_raise_no_warning_assert_close[numpy-2]",
                            "xarray/tests/test_dataset.py::test_differentiate[1-True]",
                            "xarray/tests/test_dataset.py::test_differentiate[1-False]",
                            "xarray/tests/test_dataset.py::test_differentiate[2-True]",
                            "xarray/tests/test_dataset.py::test_differentiate[2-False]",
                            "xarray/tests/test_dataset.py::test_differentiate_datetime[True]",
                            "xarray/tests/test_dataset.py::test_differentiate_datetime[False]",
                            "xarray/tests/test_dataset.py::test_integrate[True]",
                            "xarray/tests/test_dataset.py::test_integrate[False]",
                            "xarray/tests/test_dataset.py::test_trapz_datetime[np-True]",
                            "xarray/tests/test_dataset.py::test_trapz_datetime[np-False]",
                            "xarray/tests/test_dataset.py::test_no_dict",
                            "xarray/tests/test_dataset.py::test_subclass_slots",
                            "xarray/tests/test_dataset.py::test_weakref",
                            "xarray/tests/test_dataset.py::test_deepcopy_obj_array",
                            "xarray/tests/test_dataset.py::test_deepcopy_recursive",
                            "xarray/tests/test_dataset.py::test_clip[1-numpy]",
                            "xarray/tests/test_dataset.py::TestDropDuplicates::test_drop_duplicates_1d[first]",
                            "xarray/tests/test_dataset.py::TestDropDuplicates::test_drop_duplicates_1d[last]",
                            "xarray/tests/test_dataset.py::TestDropDuplicates::test_drop_duplicates_1d[False]",
                            "xarray/tests/test_dataset.py::TestNumpyCoercion::test_from_numpy",
                            "xarray/tests/test_dataset.py::test_string_keys_typing",
                            "xarray/tests/test_dataset.py::test_transpose_error",
                            "xarray/tests/test_indexes.py::test_asarray_tuplesafe",
                            "xarray/tests/test_indexes.py::TestIndex::test_from_variables",
                            "xarray/tests/test_indexes.py::TestIndex::test_concat",
                            "xarray/tests/test_indexes.py::TestIndex::test_stack",
                            "xarray/tests/test_indexes.py::TestIndex::test_unstack",
                            "xarray/tests/test_indexes.py::TestIndex::test_create_variables",
                            "xarray/tests/test_indexes.py::TestIndex::test_to_pandas_index",
                            "xarray/tests/test_indexes.py::TestIndex::test_isel",
                            "xarray/tests/test_indexes.py::TestIndex::test_sel",
                            "xarray/tests/test_indexes.py::TestIndex::test_join",
                            "xarray/tests/test_indexes.py::TestIndex::test_reindex_like",
                            "xarray/tests/test_indexes.py::TestIndex::test_equals",
                            "xarray/tests/test_indexes.py::TestIndex::test_roll",
                            "xarray/tests/test_indexes.py::TestIndex::test_rename",
                            "xarray/tests/test_indexes.py::TestIndex::test_copy[True]",
                            "xarray/tests/test_indexes.py::TestIndex::test_copy[False]",
                            "xarray/tests/test_indexes.py::TestIndex::test_getitem",
                            "xarray/tests/test_indexes.py::TestPandasIndex::test_constructor",
                            "xarray/tests/test_indexes.py::TestPandasIndex::test_from_variables",
                            "xarray/tests/test_indexes.py::TestPandasIndex::test_from_variables_index_adapter",
                            "xarray/tests/test_indexes.py::TestPandasIndex::test_concat_periods",
                            "xarray/tests/test_indexes.py::TestPandasIndex::test_concat_str_dtype[str]",
                            "xarray/tests/test_indexes.py::TestPandasIndex::test_concat_str_dtype[bytes]",
                            "xarray/tests/test_indexes.py::TestPandasIndex::test_concat_empty",
                            "xarray/tests/test_indexes.py::TestPandasIndex::test_concat_dim_error",
                            "xarray/tests/test_indexes.py::TestPandasIndex::test_create_variables",
                            "xarray/tests/test_indexes.py::TestPandasIndex::test_to_pandas_index",
                            "xarray/tests/test_indexes.py::TestPandasIndex::test_sel",
                            "xarray/tests/test_indexes.py::TestPandasIndex::test_sel_boolean",
                            "xarray/tests/test_indexes.py::TestPandasIndex::test_sel_datetime",
                            "xarray/tests/test_indexes.py::TestPandasIndex::test_sel_unsorted_datetime_index_raises",
                            "xarray/tests/test_indexes.py::TestPandasIndex::test_equals",
                            "xarray/tests/test_indexes.py::TestPandasIndex::test_join",
                            "xarray/tests/test_indexes.py::TestPandasIndex::test_reindex_like",
                            "xarray/tests/test_indexes.py::TestPandasIndex::test_rename",
                            "xarray/tests/test_indexes.py::TestPandasIndex::test_copy",
                            "xarray/tests/test_indexes.py::TestPandasIndex::test_getitem",
                            "xarray/tests/test_indexes.py::TestPandasMultiIndex::test_constructor",
                            "xarray/tests/test_indexes.py::TestPandasMultiIndex::test_from_variables",
                            "xarray/tests/test_indexes.py::TestPandasMultiIndex::test_concat",
                            "xarray/tests/test_indexes.py::TestPandasMultiIndex::test_stack",
                            "xarray/tests/test_indexes.py::TestPandasMultiIndex::test_stack_non_unique",
                            "xarray/tests/test_indexes.py::TestPandasMultiIndex::test_unstack",
                            "xarray/tests/test_indexes.py::TestPandasMultiIndex::test_create_variables",
                            "xarray/tests/test_indexes.py::TestPandasMultiIndex::test_sel",
                            "xarray/tests/test_indexes.py::TestPandasMultiIndex::test_join",
                            "xarray/tests/test_indexes.py::TestPandasMultiIndex::test_rename",
                            "xarray/tests/test_indexes.py::TestPandasMultiIndex::test_copy",
                            "xarray/tests/test_indexes.py::TestIndexes::test_interface[pd_index]",
                            "xarray/tests/test_indexes.py::TestIndexes::test_interface[xr_index]",
                            "xarray/tests/test_indexes.py::TestIndexes::test_variables[pd_index]",
                            "xarray/tests/test_indexes.py::TestIndexes::test_variables[xr_index]",
                            "xarray/tests/test_indexes.py::TestIndexes::test_dims[pd_index]",
                            "xarray/tests/test_indexes.py::TestIndexes::test_dims[xr_index]",
                            "xarray/tests/test_indexes.py::TestIndexes::test_get_unique[pd_index]",
                            "xarray/tests/test_indexes.py::TestIndexes::test_get_unique[xr_index]",
                            "xarray/tests/test_indexes.py::TestIndexes::test_is_multi[pd_index]",
                            "xarray/tests/test_indexes.py::TestIndexes::test_is_multi[xr_index]",
                            "xarray/tests/test_indexes.py::TestIndexes::test_get_all_coords[pd_index]",
                            "xarray/tests/test_indexes.py::TestIndexes::test_get_all_coords[xr_index]",
                            "xarray/tests/test_indexes.py::TestIndexes::test_get_all_dims[pd_index]",
                            "xarray/tests/test_indexes.py::TestIndexes::test_get_all_dims[xr_index]",
                            "xarray/tests/test_indexes.py::TestIndexes::test_group_by_index[pd_index]",
                            "xarray/tests/test_indexes.py::TestIndexes::test_group_by_index[xr_index]",
                            "xarray/tests/test_indexes.py::TestIndexes::test_to_pandas_indexes[pd_index]",
                            "xarray/tests/test_indexes.py::TestIndexes::test_to_pandas_indexes[xr_index]",
                            "xarray/tests/test_indexes.py::TestIndexes::test_copy_indexes[pd_index]",
                            "xarray/tests/test_indexes.py::TestIndexes::test_copy_indexes[xr_index]",
                            "xarray/tests/test_indexes.py::test_safe_cast_to_index",
                            "xarray/tests/test_utils.py::TestAlias::test",
                            "xarray/tests/test_utils.py::test_maybe_coerce_to_str[a-b-expected0]",
                            "xarray/tests/test_utils.py::test_maybe_coerce_to_str[1-2-expected1]",
                            "xarray/tests/test_utils.py::test_maybe_coerce_to_str_minimal_str_dtype",
                            "xarray/tests/test_utils.py::TestArrayEquiv::test_0d",
                            "xarray/tests/test_utils.py::TestDictionaries::test_equivalent",
                            "xarray/tests/test_utils.py::TestDictionaries::test_safe",
                            "xarray/tests/test_utils.py::TestDictionaries::test_unsafe",
                            "xarray/tests/test_utils.py::TestDictionaries::test_compat_dict_intersection",
                            "xarray/tests/test_utils.py::TestDictionaries::test_compat_dict_union",
                            "xarray/tests/test_utils.py::TestDictionaries::test_dict_equiv",
                            "xarray/tests/test_utils.py::TestDictionaries::test_frozen",
                            "xarray/tests/test_utils.py::test_repr_object",
                            "xarray/tests/test_utils.py::test_repr_object_magic_methods",
                            "xarray/tests/test_utils.py::test_is_remote_uri",
                            "xarray/tests/test_utils.py::Test_is_uniform_and_sorted::test_sorted_uniform",
                            "xarray/tests/test_utils.py::Test_is_uniform_and_sorted::test_sorted_not_uniform",
                            "xarray/tests/test_utils.py::Test_is_uniform_and_sorted::test_not_sorted_uniform",
                            "xarray/tests/test_utils.py::Test_is_uniform_and_sorted::test_not_sorted_not_uniform",
                            "xarray/tests/test_utils.py::Test_is_uniform_and_sorted::test_two_numbers",
                            "xarray/tests/test_utils.py::Test_is_uniform_and_sorted::test_relative_tolerance",
                            "xarray/tests/test_utils.py::Test_hashable::test_hashable",
                            "xarray/tests/test_utils.py::test_hidden_key_dict",
                            "xarray/tests/test_utils.py::test_either_dict_or_kwargs",
                            "xarray/tests/test_utils.py::test_infix_dims[supplied0-all_0-expected0]",
                            "xarray/tests/test_utils.py::test_infix_dims[supplied1-all_1-expected1]",
                            "xarray/tests/test_utils.py::test_infix_dims[supplied2-all_2-expected2]",
                            "xarray/tests/test_utils.py::test_infix_dims[supplied3-all_3-expected3]",
                            "xarray/tests/test_utils.py::test_infix_dims[supplied4-all_4-expected4]",
                            "xarray/tests/test_utils.py::test_infix_dims[supplied5-all_5-expected5]",
                            "xarray/tests/test_utils.py::test_infix_dims_errors[supplied0-all_0]",
                            "xarray/tests/test_utils.py::test_infix_dims_errors[supplied1-all_1]",
                            "xarray/tests/test_utils.py::test_iterate_nested[nested_list0-expected0]",
                            "xarray/tests/test_utils.py::test_iterate_nested[nested_list1-expected1]",
                            "xarray/tests/test_utils.py::test_iterate_nested[nested_list2-expected2]",
                            "xarray/tests/test_utils.py::test_iterate_nested[nested_list3-expected3]",
                            "xarray/tests/test_utils.py::test_iterate_nested[nested_list4-expected4]",
                            "xarray/tests/test_utils.py::test_iterate_nested[nested_list5-expected5]",
                            "xarray/tests/test_variable.py::TestVariable::test_properties",
                            "xarray/tests/test_variable.py::TestVariable::test_attrs",
                            "xarray/tests/test_variable.py::TestVariable::test_getitem_dict",
                            "xarray/tests/test_variable.py::TestVariable::test_getitem_1d",
                            "xarray/tests/test_variable.py::TestVariable::test_getitem_1d_fancy",
                            "xarray/tests/test_variable.py::TestVariable::test_getitem_with_mask",
                            "xarray/tests/test_variable.py::TestVariable::test_getitem_with_mask_size_zero",
                            "xarray/tests/test_variable.py::TestVariable::test_getitem_with_mask_nd_indexer",
                            "xarray/tests/test_variable.py::TestVariable::test_index_0d_int",
                            "xarray/tests/test_variable.py::TestVariable::test_index_0d_float",
                            "xarray/tests/test_variable.py::TestVariable::test_index_0d_string",
                            "xarray/tests/test_variable.py::TestVariable::test_index_0d_not_a_time",
                            "xarray/tests/test_variable.py::TestVariable::test_index_0d_object",
                            "xarray/tests/test_variable.py::TestVariable::test_0d_object_array_with_list",
                            "xarray/tests/test_variable.py::TestVariable::test_index_and_concat_datetime",
                            "xarray/tests/test_variable.py::TestVariable::test_0d_time_data",
                            "xarray/tests/test_variable.py::TestVariable::test_object_conversion",
                            "xarray/tests/test_variable.py::TestVariable::test_pandas_data",
                            "xarray/tests/test_variable.py::TestVariable::test_pandas_period_index",
                            "xarray/tests/test_variable.py::TestVariable::test_1d_math",
                            "xarray/tests/test_variable.py::TestVariable::test_1d_reduce",
                            "xarray/tests/test_variable.py::TestVariable::test_array_interface",
                            "xarray/tests/test_variable.py::TestVariable::test___array__",
                            "xarray/tests/test_variable.py::TestVariable::test_equals_all_dtypes",
                            "xarray/tests/test_variable.py::TestVariable::test_eq_all_dtypes",
                            "xarray/tests/test_variable.py::TestVariable::test_encoding_preserved",
                            "xarray/tests/test_variable.py::TestVariable::test_concat",
                            "xarray/tests/test_variable.py::TestVariable::test_concat_attrs",
                            "xarray/tests/test_variable.py::TestVariable::test_concat_fixed_len_str",
                            "xarray/tests/test_variable.py::TestVariable::test_concat_number_strings",
                            "xarray/tests/test_variable.py::TestVariable::test_concat_mixed_dtypes",
                            "xarray/tests/test_variable.py::TestVariable::test_copy[float-True]",
                            "xarray/tests/test_variable.py::TestVariable::test_copy[float-False]",
                            "xarray/tests/test_variable.py::TestVariable::test_copy[int-True]",
                            "xarray/tests/test_variable.py::TestVariable::test_copy[int-False]",
                            "xarray/tests/test_variable.py::TestVariable::test_copy[str-True]",
                            "xarray/tests/test_variable.py::TestVariable::test_copy[str-False]",
                            "xarray/tests/test_variable.py::TestVariable::test_copy_deep_recursive",
                            "xarray/tests/test_variable.py::TestVariable::test_copy_index",
                            "xarray/tests/test_variable.py::TestVariable::test_copy_with_data",
                            "xarray/tests/test_variable.py::TestVariable::test_copy_with_data_errors",
                            "xarray/tests/test_variable.py::TestVariable::test_copy_index_with_data",
                            "xarray/tests/test_variable.py::TestVariable::test_copy_index_with_data_errors",
                            "xarray/tests/test_variable.py::TestVariable::test_replace",
                            "xarray/tests/test_variable.py::TestVariable::test_real_and_imag",
                            "xarray/tests/test_variable.py::TestVariable::test_aggregate_complex",
                            "xarray/tests/test_variable.py::TestVariable::test_pandas_cateogrical_dtype",
                            "xarray/tests/test_variable.py::TestVariable::test_pandas_datetime64_with_tz",
                            "xarray/tests/test_variable.py::TestVariable::test_multiindex",
                            "xarray/tests/test_variable.py::TestVariable::test_load",
                            "xarray/tests/test_variable.py::TestVariable::test_getitem_advanced",
                            "xarray/tests/test_variable.py::TestVariable::test_getitem_uint_1d",
                            "xarray/tests/test_variable.py::TestVariable::test_getitem_uint",
                            "xarray/tests/test_variable.py::TestVariable::test_getitem_0d_array",
                            "xarray/tests/test_variable.py::TestVariable::test_getitem_fancy",
                            "xarray/tests/test_variable.py::TestVariable::test_getitem_error",
                            "xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg0-np_arg0-mean]",
                            "xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg0-np_arg0-edge]",
                            "xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg0-np_arg0-maximum]",
                            "xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg0-np_arg0-minimum]",
                            "xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg0-np_arg0-symmetric]",
                            "xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg0-np_arg0-wrap]",
                            "xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg1-np_arg1-mean]",
                            "xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg1-np_arg1-edge]",
                            "xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg1-np_arg1-maximum]",
                            "xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg1-np_arg1-minimum]",
                            "xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg1-np_arg1-symmetric]",
                            "xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg1-np_arg1-wrap]",
                            "xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg2-np_arg2-mean]",
                            "xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg2-np_arg2-edge]",
                            "xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg2-np_arg2-maximum]",
                            "xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg2-np_arg2-minimum]",
                            "xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg2-np_arg2-symmetric]",
                            "xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg2-np_arg2-wrap]",
                            "xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg3-np_arg3-mean]",
                            "xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg3-np_arg3-edge]",
                            "xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg3-np_arg3-maximum]",
                            "xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg3-np_arg3-minimum]",
                            "xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg3-np_arg3-symmetric]",
                            "xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg3-np_arg3-wrap]",
                            "xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg4-np_arg4-mean]",
                            "xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg4-np_arg4-edge]",
                            "xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg4-np_arg4-maximum]",
                            "xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg4-np_arg4-minimum]",
                            "xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg4-np_arg4-symmetric]",
                            "xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg4-np_arg4-wrap]",
                            "xarray/tests/test_variable.py::TestVariable::test_pad_constant_values[xr_arg0-np_arg0]",
                            "xarray/tests/test_variable.py::TestVariable::test_pad_constant_values[xr_arg1-np_arg1]",
                            "xarray/tests/test_variable.py::TestVariable::test_pad_constant_values[xr_arg2-np_arg2]",
                            "xarray/tests/test_variable.py::TestVariable::test_pad_constant_values[xr_arg3-np_arg3]",
                            "xarray/tests/test_variable.py::TestVariable::test_pad_constant_values[xr_arg4-np_arg4]",
                            "xarray/tests/test_variable.py::TestVariable::test_rolling_window[x-3]",
                            "xarray/tests/test_variable.py::TestVariable::test_rolling_window[y-5]",
                            "xarray/tests/test_variable.py::TestVariable::test_rolling_1d",
                            "xarray/tests/test_variable.py::TestVariable::test_nd_rolling[dims0-center0]",
                            "xarray/tests/test_variable.py::TestVariable::test_nd_rolling[dims0-center1]",
                            "xarray/tests/test_variable.py::TestVariable::test_nd_rolling[dims1-center0]",
                            "xarray/tests/test_variable.py::TestVariable::test_nd_rolling[dims1-center1]",
                            "xarray/tests/test_variable.py::TestVariable::test_nd_rolling[dims2-center0]",
                            "xarray/tests/test_variable.py::TestVariable::test_nd_rolling[dims2-center1]",
                            "xarray/tests/test_variable.py::TestVariable::test_rolling_window_errors[x-window0-x_w-True]",
                            "xarray/tests/test_variable.py::TestVariable::test_rolling_window_errors[x-3-window_dim1-True]",
                            "xarray/tests/test_variable.py::TestVariable::test_rolling_window_errors[x-3-x_w-center2]",
                            "xarray/tests/test_variable.py::TestVariable::test_data_and_values",
                            "xarray/tests/test_variable.py::TestVariable::test_numpy_same_methods",
                            "xarray/tests/test_variable.py::TestVariable::test_0d_str",
                            "xarray/tests/test_variable.py::TestVariable::test_0d_datetime",
                            "xarray/tests/test_variable.py::TestVariable::test_equals_and_identical",
                            "xarray/tests/test_variable.py::TestVariable::test_broadcast_equals",
                            "xarray/tests/test_variable.py::TestVariable::test_no_conflicts",
                            "xarray/tests/test_variable.py::TestVariable::test_as_variable",
                            "xarray/tests/test_variable.py::TestVariable::test_repr",
                            "xarray/tests/test_variable.py::TestVariable::test_repr_lazy_data",
                            "xarray/tests/test_variable.py::TestVariable::test_detect_indexer_type",
                            "xarray/tests/test_variable.py::TestVariable::test_indexer_type",
                            "xarray/tests/test_variable.py::TestVariable::test_items",
                            "xarray/tests/test_variable.py::TestVariable::test_getitem_basic",
                            "xarray/tests/test_variable.py::TestVariable::test_getitem_with_mask_2d_input",
                            "xarray/tests/test_variable.py::TestVariable::test_isel",
                            "xarray/tests/test_variable.py::TestVariable::test_index_0d_numpy_string",
                            "xarray/tests/test_variable.py::TestVariable::test_indexing_0d_unicode",
                            "xarray/tests/test_variable.py::TestVariable::test_shift[fill_value0]",
                            "xarray/tests/test_variable.py::TestVariable::test_shift[2]",
                            "xarray/tests/test_variable.py::TestVariable::test_shift[2.0]",
                            "xarray/tests/test_variable.py::TestVariable::test_shift2d",
                            "xarray/tests/test_variable.py::TestVariable::test_roll",
                            "xarray/tests/test_variable.py::TestVariable::test_roll_consistency",
                            "xarray/tests/test_variable.py::TestVariable::test_transpose",
                            "xarray/tests/test_variable.py::TestVariable::test_transpose_0d",
                            "xarray/tests/test_variable.py::TestVariable::test_squeeze",
                            "xarray/tests/test_variable.py::TestVariable::test_get_axis_num",
                            "xarray/tests/test_variable.py::TestVariable::test_set_dims",
                            "xarray/tests/test_variable.py::TestVariable::test_set_dims_object_dtype",
                            "xarray/tests/test_variable.py::TestVariable::test_stack",
                            "xarray/tests/test_variable.py::TestVariable::test_stack_errors",
                            "xarray/tests/test_variable.py::TestVariable::test_unstack",
                            "xarray/tests/test_variable.py::TestVariable::test_unstack_errors",
                            "xarray/tests/test_variable.py::TestVariable::test_unstack_2d",
                            "xarray/tests/test_variable.py::TestVariable::test_stack_unstack_consistency",
                            "xarray/tests/test_variable.py::TestVariable::test_broadcasting_math",
                            "xarray/tests/test_variable.py::TestVariable::test_broadcasting_failures",
                            "xarray/tests/test_variable.py::TestVariable::test_inplace_math",
                            "xarray/tests/test_variable.py::TestVariable::test_inplace_math_error",
                            "xarray/tests/test_variable.py::TestVariable::test_reduce",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile[None-None-0.25-True]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile[None-None-0.25-False]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile[None-None-0.25-None]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile[None-None-q1-True]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile[None-None-q1-False]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile[None-None-q1-None]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile[None-None-q2-True]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile[None-None-q2-False]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile[None-None-q2-None]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile[0-x-0.25-True]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile[0-x-0.25-False]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile[0-x-0.25-None]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile[0-x-q1-True]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile[0-x-q1-False]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile[0-x-q1-None]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile[0-x-q2-True]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile[0-x-q2-False]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile[0-x-q2-None]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile[axis2-dim2-0.25-True]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile[axis2-dim2-0.25-False]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile[axis2-dim2-0.25-None]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile[axis2-dim2-q1-True]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile[axis2-dim2-q1-False]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile[axis2-dim2-q1-None]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile[axis2-dim2-q2-True]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile[axis2-dim2-q2-False]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile[axis2-dim2-q2-None]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile[axis3-dim3-0.25-True]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile[axis3-dim3-0.25-False]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile[axis3-dim3-0.25-None]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile[axis3-dim3-q1-True]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile[axis3-dim3-q1-False]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile[axis3-dim3-q1-None]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile[axis3-dim3-q2-True]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile[axis3-dim3-q2-False]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile[axis3-dim3-q2-None]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile_method[False-midpoint]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile_method[False-lower]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile_interpolation_deprecation[midpoint]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile_interpolation_deprecation[lower]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile_out_of_bounds[-0.1]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile_out_of_bounds[1.1]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile_out_of_bounds[q2]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile_out_of_bounds[q3]",
                            "xarray/tests/test_variable.py::TestVariable::test_rank_use_bottleneck",
                            "xarray/tests/test_variable.py::TestVariable::test_big_endian_reduce",
                            "xarray/tests/test_variable.py::TestVariable::test_reduce_funcs",
                            "xarray/tests/test_variable.py::TestVariable::test_reduce_keepdims",
                            "xarray/tests/test_variable.py::TestVariable::test_reduce_keep_attrs",
                            "xarray/tests/test_variable.py::TestVariable::test_binary_ops_keep_attrs",
                            "xarray/tests/test_variable.py::TestVariable::test_count",
                            "xarray/tests/test_variable.py::TestVariable::test_setitem",
                            "xarray/tests/test_variable.py::TestVariable::test_setitem_fancy",
                            "xarray/tests/test_variable.py::TestVariable::test_coarsen",
                            "xarray/tests/test_variable.py::TestVariable::test_coarsen_2d",
                            "xarray/tests/test_variable.py::TestVariable::test_coarsen_keep_attrs",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_properties",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_attrs",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_getitem_dict",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_getitem_1d",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_getitem_1d_fancy",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_getitem_with_mask",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_getitem_with_mask_size_zero",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_getitem_with_mask_nd_indexer",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_index_0d_int",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_index_0d_float",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_index_0d_string",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_index_0d_not_a_time",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_index_0d_object",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_0d_object_array_with_list",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_index_and_concat_datetime",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_0d_time_data",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_object_conversion",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_pandas_data",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_pandas_period_index",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_1d_math",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_1d_reduce",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_array_interface",
                            "xarray/tests/test_variable.py::TestIndexVariable::test___array__",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_equals_all_dtypes",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_eq_all_dtypes",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_encoding_preserved",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_concat",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_concat_attrs",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_concat_fixed_len_str",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_concat_number_strings",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_concat_mixed_dtypes",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_copy[float-True]",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_copy[float-False]",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_copy[int-True]",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_copy[int-False]",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_copy[str-True]",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_copy[str-False]",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_copy_deep_recursive",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_copy_index",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_copy_with_data",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_copy_with_data_errors",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_copy_index_with_data",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_copy_index_with_data_errors",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_replace",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_real_and_imag",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_aggregate_complex",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_pandas_cateogrical_dtype",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_pandas_datetime64_with_tz",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_multiindex",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_load",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_getitem_uint_1d",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_getitem_0d_array",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_init",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_to_index",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_to_index_multiindex_level",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_multiindex_default_level_names",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_data",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_name",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_level_names",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_get_level_variable",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_concat_periods",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_concat_multiindex",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_concat_str_dtype[str]",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_concat_str_dtype[bytes]",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_coordinate_alias",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_datetime64",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_to_index_variable_copy",
                            "xarray/tests/test_variable.py::TestAsCompatibleData::test_unchanged_types",
                            "xarray/tests/test_variable.py::TestAsCompatibleData::test_converted_types",
                            "xarray/tests/test_variable.py::TestAsCompatibleData::test_masked_array",
                            "xarray/tests/test_variable.py::TestAsCompatibleData::test_full_like",
                            "xarray/tests/test_variable.py::TestAsCompatibleData::test_zeros_like",
                            "xarray/tests/test_variable.py::TestAsCompatibleData::test_ones_like",
                            "xarray/tests/test_variable.py::TestAsCompatibleData::test_unsupported_type",
                            "xarray/tests/test_variable.py::test_raise_no_warning_for_nan_in_binary_ops",
                            "xarray/tests/test_variable.py::TestBackendIndexing::test_NumpyIndexingAdapter",
                            "xarray/tests/test_variable.py::TestBackendIndexing::test_LazilyIndexedArray",
                            "xarray/tests/test_variable.py::TestBackendIndexing::test_CopyOnWriteArray",
                            "xarray/tests/test_variable.py::TestBackendIndexing::test_MemoryCachedArray",
                            "xarray/tests/test_variable.py::test_clip",
                            "xarray/tests/test_variable.py::TestNumpyCoercion::test_from_numpy[Variable]",
                            "xarray/tests/test_variable.py::TestNumpyCoercion::test_from_numpy[IndexVariable]"
                        ],
                        "failure": [
                            "xarray/tests/test_dataset.py::TestDataset::test_drop_index_labels",
                            "xarray/tests/test_dataset.py::TestDataset::test_rename_multiindex"
                        ]
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "xarray/tests/test_dataset.py::TestDataset::test_chunk",
                            "xarray/tests/test_dataset.py::TestDataset::test_dask_is_lazy",
                            "xarray/tests/test_dataset.py::TestDataset::test_rename_does_not_change_CFTimeIndex_type",
                            "xarray/tests/test_dataset.py::TestDataset::test_unstack_sparse",
                            "xarray/tests/test_dataset.py::TestDataset::test_from_dataframe_sparse",
                            "xarray/tests/test_dataset.py::TestDataset::test_rank",
                            "xarray/tests/test_dataset.py::TestDataset::test_query[numpy-numexpr-pandas]",
                            "xarray/tests/test_dataset.py::TestDataset::test_query[numpy-numexpr-python]",
                            "xarray/tests/test_dataset.py::TestDataset::test_query[dask-python-pandas]",
                            "xarray/tests/test_dataset.py::TestDataset::test_query[dask-python-python]",
                            "xarray/tests/test_dataset.py::TestDataset::test_query[dask-None-pandas]",
                            "xarray/tests/test_dataset.py::TestDataset::test_query[dask-None-python]",
                            "xarray/tests/test_dataset.py::TestDataset::test_query[dask-numexpr-pandas]",
                            "xarray/tests/test_dataset.py::TestDataset::test_query[dask-numexpr-python]",
                            "xarray/tests/test_dataset.py::test_isin[dask-test_elements0]",
                            "xarray/tests/test_dataset.py::test_isin[dask-test_elements1]",
                            "xarray/tests/test_dataset.py::test_isin[dask-test_elements2]",
                            "xarray/tests/test_dataset.py::test_dir_expected_attrs[dask-3]",
                            "xarray/tests/test_dataset.py::test_dir_non_string[1-dask]",
                            "xarray/tests/test_dataset.py::test_dir_unicode[1-dask]",
                            "xarray/tests/test_dataset.py::test_raise_no_warning_assert_close[dask-2]",
                            "xarray/tests/test_dataset.py::test_differentiate_cftime[True]",
                            "xarray/tests/test_dataset.py::test_differentiate_cftime[False]",
                            "xarray/tests/test_dataset.py::test_cumulative_integrate[True]",
                            "xarray/tests/test_dataset.py::test_cumulative_integrate[False]",
                            "xarray/tests/test_dataset.py::test_trapz_datetime[cftime-True]",
                            "xarray/tests/test_dataset.py::test_trapz_datetime[cftime-False]",
                            "xarray/tests/test_dataset.py::test_clip[1-dask]",
                            "xarray/tests/test_dataset.py::TestNumpyCoercion::test_from_dask",
                            "xarray/tests/test_dataset.py::TestNumpyCoercion::test_from_pint",
                            "xarray/tests/test_dataset.py::TestNumpyCoercion::test_from_sparse",
                            "xarray/tests/test_dataset.py::TestNumpyCoercion::test_from_pint_wrapping_dask",
                            "xarray/tests/test_indexes.py::test_safe_cast_to_index_cftimeindex",
                            "xarray/tests/test_indexes.py::test_safe_cast_to_index_datetime_datetime",
                            "xarray/tests/test_utils.py::test_dask_array_is_scalar",
                            "xarray/tests/test_variable.py::TestVariable::test_index_0d_datetime",
                            "xarray/tests/test_variable.py::TestVariable::test_index_0d_timedelta64",
                            "xarray/tests/test_variable.py::TestVariable::test_datetime64_conversion",
                            "xarray/tests/test_variable.py::TestVariable::test_timedelta64_conversion",
                            "xarray/tests/test_variable.py::TestVariable::test_datetime64_valid_range",
                            "xarray/tests/test_variable.py::TestVariable::test_datetime64_conversion_scalar",
                            "xarray/tests/test_variable.py::TestVariable::test_timedelta64_conversion_scalar",
                            "xarray/tests/test_variable.py::TestVariable::test_0d_timedelta",
                            "xarray/tests/test_variable.py::TestVariable::test_reduce_use_bottleneck",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile_dask[1-y-0.25]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile_dask[1-y-q1]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile_dask[1-y-q2]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile_dask[axis1-dim1-0.25]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile_dask[axis1-dim1-q1]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile_dask[axis1-dim1-q2]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile_method[True-midpoint]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile_method[True-lower]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile_chunked_dim_error",
                            "xarray/tests/test_variable.py::TestVariable::test_rank_dask_raises",
                            "xarray/tests/test_variable.py::TestVariable::test_rank",
                            "xarray/tests/test_variable.py::TestVariable::test_reduce_keepdims_dask",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_properties",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_attrs",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_getitem_dict",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_getitem_1d",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_getitem_with_mask",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_getitem_with_mask_size_zero",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_index_0d_int",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_index_0d_float",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_index_0d_string",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_index_0d_datetime",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_index_0d_timedelta64",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_index_0d_not_a_time",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_index_0d_object",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_index_and_concat_datetime",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_0d_time_data",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_datetime64_conversion",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_timedelta64_conversion",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_object_conversion",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_datetime64_valid_range",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_pandas_data",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_pandas_period_index",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_1d_math",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_1d_reduce",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test___array__",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_equals_all_dtypes",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_encoding_preserved",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_concat",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_concat_attrs",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_concat_fixed_len_str",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_concat_number_strings",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_concat_mixed_dtypes",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_copy[float-True]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_copy[float-False]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_copy[int-True]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_copy[int-False]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_copy[str-True]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_copy[str-False]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_copy_deep_recursive",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_copy_with_data",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_copy_with_data_errors",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_copy_index_with_data",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_copy_index_with_data_errors",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_replace",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_real_and_imag",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_aggregate_complex",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_pandas_cateogrical_dtype",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_pandas_datetime64_with_tz",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_load",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_getitem_advanced",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_getitem_uint_1d",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_getitem_uint",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_getitem_0d_array",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_getitem_error",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg0-np_arg0-mean]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg0-np_arg0-edge]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg0-np_arg0-maximum]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg0-np_arg0-minimum]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg0-np_arg0-symmetric]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg0-np_arg0-wrap]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg1-np_arg1-mean]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg1-np_arg1-edge]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg1-np_arg1-maximum]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg1-np_arg1-minimum]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg1-np_arg1-symmetric]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg1-np_arg1-wrap]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg2-np_arg2-mean]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg2-np_arg2-edge]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg2-np_arg2-maximum]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg2-np_arg2-minimum]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg2-np_arg2-symmetric]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg2-np_arg2-wrap]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg3-np_arg3-mean]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg3-np_arg3-edge]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg3-np_arg3-maximum]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg3-np_arg3-minimum]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg3-np_arg3-symmetric]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg3-np_arg3-wrap]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg4-np_arg4-mean]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg4-np_arg4-edge]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg4-np_arg4-maximum]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg4-np_arg4-minimum]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg4-np_arg4-symmetric]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg4-np_arg4-wrap]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_pad_constant_values[xr_arg0-np_arg0]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_pad_constant_values[xr_arg1-np_arg1]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_pad_constant_values[xr_arg2-np_arg2]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_pad_constant_values[xr_arg3-np_arg3]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_pad_constant_values[xr_arg4-np_arg4]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_rolling_window[x-3]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_rolling_window[y-5]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_rolling_1d",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_nd_rolling[dims0-center0]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_nd_rolling[dims0-center1]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_nd_rolling[dims1-center0]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_nd_rolling[dims1-center1]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_nd_rolling[dims2-center0]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_nd_rolling[dims2-center1]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_rolling_window_errors[x-window0-x_w-True]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_rolling_window_errors[x-3-window_dim1-True]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_rolling_window_errors[x-3-x_w-center2]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_chunk",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_getitem_fancy",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_getitem_1d_fancy",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_getitem_with_mask_nd_indexer",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_dask_rolling[True-3-x]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_dask_rolling[True-3-y]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_dask_rolling[True-8-x]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_dask_rolling[True-8-y]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_dask_rolling[True-11-x]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_dask_rolling[True-11-y]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_dask_rolling[False-3-x]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_dask_rolling[False-3-y]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_dask_rolling[False-8-x]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_dask_rolling[False-8-y]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_dask_rolling[False-11-x]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_dask_rolling[False-11-y]",
                            "xarray/tests/test_variable.py::TestVariableWithSparse::test_as_sparse",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_index_0d_datetime",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_index_0d_timedelta64",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_datetime64_conversion",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_timedelta64_conversion",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_datetime64_valid_range",
                            "xarray/tests/test_variable.py::TestAsCompatibleData::test_datetime",
                            "xarray/tests/test_variable.py::TestAsCompatibleData::test_full_like_dask",
                            "xarray/tests/test_variable.py::TestBackendIndexing::test_DaskIndexingAdapter",
                            "xarray/tests/test_variable.py::TestNumpyCoercion::test_from_dask[Variable]",
                            "xarray/tests/test_variable.py::TestNumpyCoercion::test_from_dask[IndexVariable]",
                            "xarray/tests/test_variable.py::TestNumpyCoercion::test_from_pint[Variable]",
                            "xarray/tests/test_variable.py::TestNumpyCoercion::test_from_pint[IndexVariable]",
                            "xarray/tests/test_variable.py::TestNumpyCoercion::test_from_sparse[Variable]",
                            "xarray/tests/test_variable.py::TestNumpyCoercion::test_from_pint_wrapping_dask[Variable]",
                            "xarray/tests/test_variable.py::TestNumpyCoercion::test_from_pint_wrapping_dask[IndexVariable]"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "psf__requests-3738.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "tests/test_requests.py::TestPreparingURLs::test_url_mutation[http+unix://%2Fvar%2Frun%2Fsocket/path-http+unix://%2fvar%2frun%2fsocket/path0]",
                            "tests/test_requests.py::TestPreparingURLs::test_url_mutation[http+unix://%2Fvar%2Frun%2Fsocket/path-http+unix://%2fvar%2frun%2fsocket/path1]",
                            "tests/test_requests.py::TestPreparingURLs::test_parameters_for_nonstandard_schemes[http+unix://%2Fvar%2Frun%2Fsocket/path-params0-http+unix://%2fvar%2frun%2fsocket/path?key=value]",
                            "tests/test_requests.py::TestPreparingURLs::test_parameters_for_nonstandard_schemes[http+unix://%2Fvar%2Frun%2Fsocket/path-params1-http+unix://%2fvar%2frun%2fsocket/path?key=value]"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "tests/test_requests.py::TestRequests::test_entry_points",
                            "tests/test_requests.py::TestRequests::test_invalid_url[MissingSchema-hiwpefhipowhefopw]",
                            "tests/test_requests.py::TestRequests::test_invalid_url[InvalidSchema-localhost:3128]",
                            "tests/test_requests.py::TestRequests::test_invalid_url[InvalidSchema-localhost.localdomain:3128/]",
                            "tests/test_requests.py::TestRequests::test_invalid_url[InvalidSchema-10.122.1.1:3128/]",
                            "tests/test_requests.py::TestRequests::test_invalid_url[InvalidURL-http://]",
                            "tests/test_requests.py::TestRequests::test_basic_building",
                            "tests/test_requests.py::TestRequests::test_path_is_not_double_encoded",
                            "tests/test_requests.py::TestRequests::test_params_are_added_before_fragment[http://example.com/path#fragment-http://example.com/path?a=b#fragment]",
                            "tests/test_requests.py::TestRequests::test_params_are_added_before_fragment[http://example.com/path?key=value#fragment-http://example.com/path?key=value&a=b#fragment]",
                            "tests/test_requests.py::TestRequests::test_params_original_order_is_preserved_by_default",
                            "tests/test_requests.py::TestRequests::test_params_bytes_are_encoded",
                            "tests/test_requests.py::TestRequests::test_binary_put",
                            "tests/test_requests.py::TestRequests::test_whitespaces_are_removed_from_url",
                            "tests/test_requests.py::TestRequests::test_errors[http://doesnotexist.google.com-ConnectionError]",
                            "tests/test_requests.py::TestRequests::test_errors[http://localhost:1-ConnectionError]",
                            "tests/test_requests.py::TestRequests::test_errors[http://fe80::5054:ff:fe5a:fc0-InvalidURL]",
                            "tests/test_requests.py::TestRequests::test_proxy_error",
                            "tests/test_requests.py::TestRequests::test_non_prepared_request_error",
                            "tests/test_requests.py::TestRequests::test_prepare_request_with_bytestring_url",
                            "tests/test_requests.py::TestRequests::test_links",
                            "tests/test_requests.py::TestRequests::test_cookie_parameters",
                            "tests/test_requests.py::TestRequests::test_cookie_as_dict_keeps_len",
                            "tests/test_requests.py::TestRequests::test_cookie_as_dict_keeps_items",
                            "tests/test_requests.py::TestRequests::test_cookie_as_dict_keys",
                            "tests/test_requests.py::TestRequests::test_cookie_as_dict_values",
                            "tests/test_requests.py::TestRequests::test_cookie_as_dict_items",
                            "tests/test_requests.py::TestRequests::test_cookie_duplicate_names_different_domains",
                            "tests/test_requests.py::TestRequests::test_cookie_duplicate_names_raises_cookie_conflict_error",
                            "tests/test_requests.py::TestRequests::test_empty_response_has_content_none",
                            "tests/test_requests.py::TestRequests::test_response_is_iterable",
                            "tests/test_requests.py::TestRequests::test_response_decode_unicode",
                            "tests/test_requests.py::TestRequests::test_response_reason_unicode",
                            "tests/test_requests.py::TestRequests::test_response_reason_unicode_fallback",
                            "tests/test_requests.py::TestRequests::test_response_chunk_size_type",
                            "tests/test_requests.py::TestRequests::test_http_error",
                            "tests/test_requests.py::TestRequests::test_transport_adapter_ordering",
                            "tests/test_requests.py::TestRequests::test_long_authinfo_in_url",
                            "tests/test_requests.py::TestRequests::test_nonhttp_schemes_dont_check_URLs",
                            "tests/test_requests.py::TestRequests::test_prepare_body_position_non_stream",
                            "tests/test_requests.py::TestRequests::test_rewind_body",
                            "tests/test_requests.py::TestRequests::test_rewind_partially_read_body",
                            "tests/test_requests.py::TestRequests::test_rewind_body_no_seek",
                            "tests/test_requests.py::TestRequests::test_rewind_body_failed_seek",
                            "tests/test_requests.py::TestRequests::test_rewind_body_failed_tell",
                            "tests/test_requests.py::TestRequests::test_basic_auth_str_is_always_native[test-test-Basic",
                            "tests/test_requests.py::TestRequests::test_basic_auth_str_is_always_native[\\xd0\\xb8\\xd0\\xbc\\xd1\\x8f-\\xd0\\xbf\\xd0\\xb0\\xd1\\x80\\xd0\\xbe\\xd0\\xbb\\xd1\\x8c-Basic",
                            "tests/test_requests.py::TestRequests::test_response_without_release_conn",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_init[cid0]",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_init[cid1]",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_init[cid2]",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_docstring_example",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_len",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_getitem",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_fixes_649",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_delitem",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_contains",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_get",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_update",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_update_retains_unchanged",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_iter",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_equality",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_setdefault",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_lower_items",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_preserve_key_case",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_preserve_last_key_case",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_copy",
                            "tests/test_requests.py::TestMorselToCookieExpires::test_expires_valid_str",
                            "tests/test_requests.py::TestMorselToCookieExpires::test_expires_invalid_int[100-TypeError]",
                            "tests/test_requests.py::TestMorselToCookieExpires::test_expires_invalid_int[woops-ValueError]",
                            "tests/test_requests.py::TestMorselToCookieExpires::test_expires_none",
                            "tests/test_requests.py::TestMorselToCookieMaxAge::test_max_age_valid_int",
                            "tests/test_requests.py::TestMorselToCookieMaxAge::test_max_age_invalid_str",
                            "tests/test_requests.py::TestTimeout::test_connect_timeout",
                            "tests/test_requests.py::TestTimeout::test_total_timeout_connect",
                            "tests/test_requests.py::test_json_encodes_as_bytes",
                            "tests/test_requests.py::test_proxy_env_vars_override_default[http_proxy-http://example.com-socks5://proxy.com:9876]",
                            "tests/test_requests.py::test_proxy_env_vars_override_default[https_proxy-https://example.com-socks5://proxy.com:9876]",
                            "tests/test_requests.py::test_proxy_env_vars_override_default[all_proxy-http://example.com-socks5://proxy.com:9876]",
                            "tests/test_requests.py::test_proxy_env_vars_override_default[all_proxy-https://example.com-socks5://proxy.com:9876]",
                            "tests/test_requests.py::test_data_argument_accepts_tuples[data0]",
                            "tests/test_requests.py::test_data_argument_accepts_tuples[data1]",
                            "tests/test_requests.py::test_data_argument_accepts_tuples[data2]",
                            "tests/test_requests.py::test_prepared_copy[None]",
                            "tests/test_requests.py::test_prepared_copy[kwargs1]",
                            "tests/test_requests.py::test_prepared_copy[kwargs2]",
                            "tests/test_requests.py::test_prepared_copy[kwargs3]",
                            "tests/test_requests.py::test_vendor_aliases",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://google.com-http://google.com/]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://\\u30b8\\u30a7\\u30fc\\u30d4\\u30fc\\u30cb\\u30c3\\u30af.jp-http://xn--hckqz9bzb1cyrb.jp/]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://xn--n3h.net/-http://xn--n3h.net/0]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://\\xe3\\x82\\xb8\\xe3\\x82\\xa7\\xe3\\x83\\xbc\\xe3\\x83\\x94\\xe3\\x83\\xbc\\xe3\\x83\\x8b\\xe3\\x83\\x83\\xe3\\x82\\xaf.jp-http://xn--hckqz9bzb1cyrb.jp/]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://stra\\xdfe.de/stra\\xdfe-http://xn--strae-oqa.de/stra%C3%9Fe]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://stra\\xc3\\x9fe.de/stra\\xc3\\x9fe-http://xn--strae-oqa.de/stra%C3%9Fe]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://K\\xf6nigsg\\xe4\\xdfchen.de/stra\\xdfe-http://xn--knigsgchen-b4a3dun.de/stra%C3%9Fe]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://K\\xc3\\xb6nigsg\\xc3\\xa4\\xc3\\x9fchen.de/stra\\xc3\\x9fe-http://xn--knigsgchen-b4a3dun.de/stra%C3%9Fe]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://xn--n3h.net/-http://xn--n3h.net/1]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://[1200:0000:ab00:1234:0000:2552:7777:1313]:12345/-http://[1200:0000:ab00:1234:0000:2552:7777:1313]:12345/0]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://[1200:0000:ab00:1234:0000:2552:7777:1313]:12345/-http://[1200:0000:ab00:1234:0000:2552:7777:1313]:12345/1]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_bad_url[http://*.google.com0]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_bad_url[http://*0]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_bad_url[http://*.google.com1]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_bad_url[http://*1]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_bad_url[http://\\u2603.net/]",
                            "tests/test_requests.py::TestPreparingURLs::test_url_mutation[mailto:user@example.org-mailto:user@example.org0]",
                            "tests/test_requests.py::TestPreparingURLs::test_url_mutation[mailto:user@example.org-mailto:user@example.org1]",
                            "tests/test_requests.py::TestPreparingURLs::test_url_mutation[data:SSDimaUgUHl0aG9uIQ==-data:SSDimaUgUHl0aG9uIQ==]",
                            "tests/test_requests.py::TestPreparingURLs::test_parameters_for_nonstandard_schemes[mailto:user@example.org-params2-mailto:user@example.org]",
                            "tests/test_requests.py::TestPreparingURLs::test_parameters_for_nonstandard_schemes[mailto:user@example.org-params3-mailto:user@example.org]"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "pydata__xarray-5580.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "xarray/tests/test_formatting.py::test__mapping_repr[35-40-30]",
                            "xarray/tests/test_formatting.py::test__mapping_repr[11-40-30]",
                            "xarray/tests/test_formatting.py::test__mapping_repr[1-40-30]"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "xarray/tests/test_formatting.py::TestFormatting::test_get_indexer_at_least_n_items",
                            "xarray/tests/test_formatting.py::TestFormatting::test_first_n_items",
                            "xarray/tests/test_formatting.py::TestFormatting::test_last_n_items",
                            "xarray/tests/test_formatting.py::TestFormatting::test_last_item",
                            "xarray/tests/test_formatting.py::TestFormatting::test_format_item",
                            "xarray/tests/test_formatting.py::TestFormatting::test_format_items",
                            "xarray/tests/test_formatting.py::TestFormatting::test_format_array_flat",
                            "xarray/tests/test_formatting.py::TestFormatting::test_pretty_print",
                            "xarray/tests/test_formatting.py::TestFormatting::test_maybe_truncate",
                            "xarray/tests/test_formatting.py::TestFormatting::test_format_timestamp_out_of_bounds",
                            "xarray/tests/test_formatting.py::TestFormatting::test_attribute_repr",
                            "xarray/tests/test_formatting.py::TestFormatting::test_diff_array_repr",
                            "xarray/tests/test_formatting.py::TestFormatting::test_diff_dataset_repr",
                            "xarray/tests/test_formatting.py::TestFormatting::test_array_repr",
                            "xarray/tests/test_formatting.py::TestFormatting::test_array_repr_variable",
                            "xarray/tests/test_formatting.py::test_inline_variable_array_repr_custom_repr",
                            "xarray/tests/test_formatting.py::test_set_numpy_options",
                            "xarray/tests/test_formatting.py::test_short_numpy_repr",
                            "xarray/tests/test_formatting.py::test_large_array_repr_length",
                            "xarray/tests/test_formatting.py::test_repr_file_collapsed",
                            "xarray/tests/test_formatting.py::test__mapping_repr[50-40-30]"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "sphinx-doc__sphinx-8611.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "tests/test_ext_autodoc_events.py::test_process_docstring_for_nondatadescriptor"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "tests/test_ext_autodoc_events.py::test_process_docstring",
                            "tests/test_ext_autodoc_events.py::test_cut_lines",
                            "tests/test_ext_autodoc_events.py::test_between",
                            "tests/test_ext_autodoc_events.py::test_between_exclude",
                            "tests/test_ext_autodoc_events.py::test_skip_module_member"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "astropy__astropy-14995.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_nddata_bitmask_arithmetic"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_data[data10-data20]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_data[data11-data21]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_data[data12-data22]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_data[data13-data23]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_data[data14-data24]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_data[data15-data25]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_data[data16-data26]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_data_invalid",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_data_unit_identical[data10-data20]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_data_unit_identical[data11-data21]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_data_unit_identical[data12-data22]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_data_unit_identical[data13-data23]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_data_unit_identical[data14-data24]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_data_unit_identical[data15-data25]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_data_unit_identical[data16-data26]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_data_unit_identical[data17-data27]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_data_unit_not_identical[data10-data20]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_data_unit_not_identical[data11-data21]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_data_unit_not_identical[data12-data22]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_data_unit_not_identical[data13-data23]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_data_wcs[None-None]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_data_wcs[None-wcs21]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_data_wcs[wcs12-None]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_data_wcs[wcs13-wcs23]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_data_wcs[wcs14-wcs24]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_data_masks[None-None]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_data_masks[None-False]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_data_masks[True-None]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_data_masks[False-False]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_data_masks[True-False]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_data_masks[False-True]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_data_masks[True-True]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_data_masks[mask17-mask27]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_data_masks[mask18-mask28]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_data_masks[mask19-mask29]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_data_masks[mask110-mask210]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_data_masks[mask111-mask211]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_data_masks[mask112-mask212]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_data_masks_invalid",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_stddevuncertainty_basic",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_stddevuncertainty_basic_with_correlation[-1-uncert10-data20]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_stddevuncertainty_basic_with_correlation[-0.5-uncert11-data21]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_stddevuncertainty_basic_with_correlation[-0.25-uncert12-data22]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_stddevuncertainty_basic_with_correlation[0-uncert13-data23]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_stddevuncertainty_basic_with_correlation[0.25-uncert14-data24]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_stddevuncertainty_basic_with_correlation[0.5-uncert15-data25]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_stddevuncertainty_basic_with_correlation[1-uncert16-data26]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_stddevuncertainty_basic_with_correlation[-1-uncert17-data27]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_stddevuncertainty_basic_with_correlation[-0.5-uncert18-data28]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_stddevuncertainty_basic_with_correlation[-0.25-uncert19-data29]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_stddevuncertainty_basic_with_correlation[0-uncert110-data210]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_stddevuncertainty_basic_with_correlation[0.25-uncert111-data211]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_stddevuncertainty_basic_with_correlation[0.5-uncert112-data212]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_stddevuncertainty_basic_with_correlation[1-uncert113-data213]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_stddevuncertainty_basic_with_correlation[-1-uncert114-data214]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_stddevuncertainty_basic_with_correlation[-0.5-uncert115-data215]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_stddevuncertainty_basic_with_correlation[-0.25-uncert116-data216]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_stddevuncertainty_basic_with_correlation[0-uncert117-data217]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_stddevuncertainty_basic_with_correlation[0.25-uncert118-data218]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_stddevuncertainty_basic_with_correlation[0.5-uncert119-data219]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_stddevuncertainty_basic_with_correlation[1-uncert120-data220]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_stddevuncertainty_basic_with_correlation[-1-uncert121-data221]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_stddevuncertainty_basic_with_correlation[-0.5-uncert122-data222]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_stddevuncertainty_basic_with_correlation[-0.25-uncert123-data223]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_stddevuncertainty_basic_with_correlation[0-uncert124-data224]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_stddevuncertainty_basic_with_correlation[0.25-uncert125-data225]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_stddevuncertainty_basic_with_correlation[0.5-uncert126-data226]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_stddevuncertainty_basic_with_correlation[1-uncert127-data227]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_varianceuncertainty_basic_with_correlation[-1-uncert10-data20]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_varianceuncertainty_basic_with_correlation[-0.5-uncert11-data21]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_varianceuncertainty_basic_with_correlation[-0.25-uncert12-data22]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_varianceuncertainty_basic_with_correlation[0-uncert13-data23]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_varianceuncertainty_basic_with_correlation[0.25-uncert14-data24]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_varianceuncertainty_basic_with_correlation[0.5-uncert15-data25]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_varianceuncertainty_basic_with_correlation[1-uncert16-data26]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_varianceuncertainty_basic_with_correlation[-1-uncert17-data27]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_varianceuncertainty_basic_with_correlation[-0.5-uncert18-data28]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_varianceuncertainty_basic_with_correlation[-0.25-uncert19-data29]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_varianceuncertainty_basic_with_correlation[0-uncert110-data210]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_varianceuncertainty_basic_with_correlation[0.25-uncert111-data211]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_varianceuncertainty_basic_with_correlation[0.5-uncert112-data212]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_varianceuncertainty_basic_with_correlation[1-uncert113-data213]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_varianceuncertainty_basic_with_correlation[-1-uncert114-data214]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_varianceuncertainty_basic_with_correlation[-0.5-uncert115-data215]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_varianceuncertainty_basic_with_correlation[-0.25-uncert116-data216]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_varianceuncertainty_basic_with_correlation[0-uncert117-data217]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_varianceuncertainty_basic_with_correlation[0.25-uncert118-data218]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_varianceuncertainty_basic_with_correlation[0.5-uncert119-data219]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_varianceuncertainty_basic_with_correlation[1-uncert120-data220]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_varianceuncertainty_basic_with_correlation[-1-uncert121-data221]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_varianceuncertainty_basic_with_correlation[-0.5-uncert122-data222]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_varianceuncertainty_basic_with_correlation[-0.25-uncert123-data223]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_varianceuncertainty_basic_with_correlation[0-uncert124-data224]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_varianceuncertainty_basic_with_correlation[0.25-uncert125-data225]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_varianceuncertainty_basic_with_correlation[0.5-uncert126-data226]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_varianceuncertainty_basic_with_correlation[1-uncert127-data227]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_inversevarianceuncertainty_basic_with_correlation[-1-uncert10-data20]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_inversevarianceuncertainty_basic_with_correlation[-0.5-uncert11-data21]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_inversevarianceuncertainty_basic_with_correlation[-0.25-uncert12-data22]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_inversevarianceuncertainty_basic_with_correlation[0-uncert13-data23]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_inversevarianceuncertainty_basic_with_correlation[0.25-uncert14-data24]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_inversevarianceuncertainty_basic_with_correlation[0.5-uncert15-data25]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_inversevarianceuncertainty_basic_with_correlation[1-uncert16-data26]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_inversevarianceuncertainty_basic_with_correlation[-1-uncert17-data27]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_inversevarianceuncertainty_basic_with_correlation[-0.5-uncert18-data28]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_inversevarianceuncertainty_basic_with_correlation[-0.25-uncert19-data29]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_inversevarianceuncertainty_basic_with_correlation[0-uncert110-data210]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_inversevarianceuncertainty_basic_with_correlation[0.25-uncert111-data211]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_inversevarianceuncertainty_basic_with_correlation[0.5-uncert112-data212]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_inversevarianceuncertainty_basic_with_correlation[1-uncert113-data213]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_inversevarianceuncertainty_basic_with_correlation[-1-uncert114-data214]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_inversevarianceuncertainty_basic_with_correlation[-0.5-uncert115-data215]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_inversevarianceuncertainty_basic_with_correlation[-0.25-uncert116-data216]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_inversevarianceuncertainty_basic_with_correlation[0-uncert117-data217]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_inversevarianceuncertainty_basic_with_correlation[0.25-uncert118-data218]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_inversevarianceuncertainty_basic_with_correlation[0.5-uncert119-data219]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_inversevarianceuncertainty_basic_with_correlation[1-uncert120-data220]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_inversevarianceuncertainty_basic_with_correlation[-1-uncert121-data221]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_inversevarianceuncertainty_basic_with_correlation[-0.5-uncert122-data222]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_inversevarianceuncertainty_basic_with_correlation[-0.25-uncert123-data223]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_inversevarianceuncertainty_basic_with_correlation[0-uncert124-data224]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_inversevarianceuncertainty_basic_with_correlation[0.25-uncert125-data225]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_inversevarianceuncertainty_basic_with_correlation[0.5-uncert126-data226]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_inversevarianceuncertainty_basic_with_correlation[1-uncert127-data227]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_stddevuncertainty_basic_with_correlation_array",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_with_correlation_unsupported",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_stddevuncertainty_one_missing",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_stddevuncertainty_with_units[uncert10-None]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_stddevuncertainty_with_units[uncert11-None]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_stddevuncertainty_with_units[None-uncert22]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_stddevuncertainty_with_units[None-uncert23]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_stddevuncertainty_with_units[uncert14-uncert24]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_stddevuncertainty_with_units[uncert15-uncert25]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_stddevuncertainty_with_units[uncert16-uncert26]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_stddevuncertainty_with_units[uncert17-uncert27]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_stddevuncertainty_with_units[uncert18-uncert28]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_stddevuncertainty_with_units[uncert19-uncert29]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_stddevuncertainty_with_units[uncert110-uncert210]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_stddevuncertainty_with_units[uncert111-uncert211]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_varianceuncertainty_with_units[uncert10-None]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_varianceuncertainty_with_units[uncert11-None]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_varianceuncertainty_with_units[None-uncert22]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_varianceuncertainty_with_units[None-uncert23]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_varianceuncertainty_with_units[uncert14-uncert24]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_varianceuncertainty_with_units[uncert15-uncert25]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_varianceuncertainty_with_units[uncert16-uncert26]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_varianceuncertainty_with_units[uncert17-uncert27]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_varianceuncertainty_with_units[uncert18-uncert28]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_varianceuncertainty_with_units[uncert19-uncert29]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_varianceuncertainty_with_units[uncert110-uncert210]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_varianceuncertainty_with_units[uncert111-uncert211]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_inversevarianceuncertainty_with_units[uncert10-None]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_inversevarianceuncertainty_with_units[uncert11-None]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_inversevarianceuncertainty_with_units[None-uncert22]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_inversevarianceuncertainty_with_units[None-uncert23]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_inversevarianceuncertainty_with_units[uncert14-uncert24]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_inversevarianceuncertainty_with_units[uncert15-uncert25]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_inversevarianceuncertainty_with_units[uncert16-uncert26]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_inversevarianceuncertainty_with_units[uncert17-uncert27]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_inversevarianceuncertainty_with_units[uncert18-uncert28]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_inversevarianceuncertainty_with_units[uncert19-uncert29]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_inversevarianceuncertainty_with_units[uncert110-uncert210]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_inversevarianceuncertainty_with_units[uncert111-uncert211]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_handle_switches[ff]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_handle_switches[first_found]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_meta_func",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_wcs_func",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_mask_func",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_two_argument_useage[add]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_two_argument_useage[subtract]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_two_argument_useage[divide]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_two_argument_useage[multiply]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_two_argument_useage_non_nddata_first_arg[add]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_two_argument_useage_non_nddata_first_arg[subtract]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_two_argument_useage_non_nddata_first_arg[divide]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_two_argument_useage_non_nddata_first_arg[multiply]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_unknown_uncertainties",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_psf_warning",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_raise_method_not_supported"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                }
            }
        ],
        "case_resolution_counts": {
            "RESOLVED_FULL": 116,
            "RESOLVED_NO": 9,
            "RESOLVED_PARTIAL": 1
        },
        "case_resolution_rates": {
            "RESOLVED_FULL": 92.06,
            "RESOLVED_NO": 7.14,
            "RESOLVED_PARTIAL": 0.79
        }
    },
    "Patch Apply Success + Failure": {
        "f2p_weighted": 99.5,
        "p2p_weighted": 98.72,
        "f2p_unweighted": 99.18,
        "p2p_unweighted": 98.79,
        "cases": [
            {
                "psf__requests-4106.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "tests/test_packages.py::test_can_access_urllib3_attribute",
                            "tests/test_packages.py::test_can_access_idna_attribute",
                            "tests/test_packages.py::test_can_access_chardet_attribute"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "matplotlib__matplotlib-19763.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "lib/matplotlib/tests/test_widgets.py::test_MultiCursor[False-False]",
                            "lib/matplotlib/tests/test_widgets.py::test_MultiCursor[False-True]",
                            "lib/matplotlib/tests/test_widgets.py::test_MultiCursor[True-False]",
                            "lib/matplotlib/tests/test_widgets.py::test_MultiCursor[True-True]"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_selector[kwargs0-None]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_selector[kwargs2-None]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_selector[kwargs4-None]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_selector[kwargs5-None]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[0-10-0-10-data]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[0-10-0-10-pixels]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[0-10-1-10.5-data]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[0-10-1-10.5-pixels]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[0-10-1-11-data]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[0-10-1-11-pixels]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-10.5-0-10-data]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-10.5-0-10-pixels]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-10.5-1-10.5-data]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-10.5-1-10.5-pixels]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-10.5-1-11-data]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-10.5-1-11-pixels]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-11-0-10-data]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-11-0-10-pixels]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-11-1-10.5-data]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-11-1-10.5-pixels]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-11-1-11-data]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-11-1-11-pixels]",
                            "lib/matplotlib/tests/test_widgets.py::test_deprecation_selector_visible_attribute",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_drag[True-new_center0]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_drag[False-new_center1]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_selector_set_props_handle_props",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_resize",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_add_state",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_resize_center[True]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_resize_center[False]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_resize_square[True]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_resize_square[False]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_resize_square_center",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_rotate[RectangleSelector]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_rotate[EllipseSelector]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_add_remove_set",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_resize_square_center_aspect[False]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_resize_square_center_aspect[True]",
                            "lib/matplotlib/tests/test_widgets.py::test_ellipse",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_handles",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_selector_onselect[True]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_selector_onselect[False]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_selector_ignore_outside[True]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_selector_ignore_outside[False]",
                            "lib/matplotlib/tests/test_widgets.py::test_span_selector[horizontal-False-kwargs0]",
                            "lib/matplotlib/tests/test_widgets.py::test_span_selector[vertical-True-kwargs1]",
                            "lib/matplotlib/tests/test_widgets.py::test_span_selector[horizontal-False-kwargs2]",
                            "lib/matplotlib/tests/test_widgets.py::test_span_selector[horizontal-False-kwargs3]",
                            "lib/matplotlib/tests/test_widgets.py::test_span_selector_onselect[True]",
                            "lib/matplotlib/tests/test_widgets.py::test_span_selector_onselect[False]",
                            "lib/matplotlib/tests/test_widgets.py::test_span_selector_ignore_outside[True]",
                            "lib/matplotlib/tests/test_widgets.py::test_span_selector_ignore_outside[False]",
                            "lib/matplotlib/tests/test_widgets.py::test_span_selector_drag[True]",
                            "lib/matplotlib/tests/test_widgets.py::test_span_selector_drag[False]",
                            "lib/matplotlib/tests/test_widgets.py::test_span_selector_direction",
                            "lib/matplotlib/tests/test_widgets.py::test_span_selector_set_props_handle_props",
                            "lib/matplotlib/tests/test_widgets.py::test_selector_clear[span]",
                            "lib/matplotlib/tests/test_widgets.py::test_selector_clear[rectangle]",
                            "lib/matplotlib/tests/test_widgets.py::test_selector_clear_method[span]",
                            "lib/matplotlib/tests/test_widgets.py::test_selector_clear_method[rectangle]",
                            "lib/matplotlib/tests/test_widgets.py::test_span_selector_add_state",
                            "lib/matplotlib/tests/test_widgets.py::test_tool_line_handle",
                            "lib/matplotlib/tests/test_widgets.py::test_span_selector_bound[horizontal]",
                            "lib/matplotlib/tests/test_widgets.py::test_span_selector_bound[vertical]",
                            "lib/matplotlib/tests/test_widgets.py::test_snapping_values_span_selector",
                            "lib/matplotlib/tests/test_widgets.py::test_span_selector_snap",
                            "lib/matplotlib/tests/test_widgets.py::test_lasso_selector[kwargs0]",
                            "lib/matplotlib/tests/test_widgets.py::test_lasso_selector[kwargs1]",
                            "lib/matplotlib/tests/test_widgets.py::test_lasso_selector[kwargs2]",
                            "lib/matplotlib/tests/test_widgets.py::test_CheckButtons",
                            "lib/matplotlib/tests/test_widgets.py::test_TextBox[none]",
                            "lib/matplotlib/tests/test_widgets.py::test_TextBox[toolbar2]",
                            "lib/matplotlib/tests/test_widgets.py::test_TextBox[toolmanager]",
                            "lib/matplotlib/tests/test_widgets.py::test_check_radio_buttons_image[png]",
                            "lib/matplotlib/tests/test_widgets.py::test_radio_buttons[png]",
                            "lib/matplotlib/tests/test_widgets.py::test_slider_slidermin_slidermax_invalid",
                            "lib/matplotlib/tests/test_widgets.py::test_slider_slidermin_slidermax",
                            "lib/matplotlib/tests/test_widgets.py::test_slider_valmin_valmax",
                            "lib/matplotlib/tests/test_widgets.py::test_slider_valstep_snapping",
                            "lib/matplotlib/tests/test_widgets.py::test_slider_horizontal_vertical",
                            "lib/matplotlib/tests/test_widgets.py::test_slider_reset",
                            "lib/matplotlib/tests/test_widgets.py::test_range_slider[horizontal]",
                            "lib/matplotlib/tests/test_widgets.py::test_range_slider[vertical]",
                            "lib/matplotlib/tests/test_widgets.py::test_range_slider_same_init_values[horizontal]",
                            "lib/matplotlib/tests/test_widgets.py::test_range_slider_same_init_values[vertical]",
                            "lib/matplotlib/tests/test_widgets.py::test_polygon_selector[False]",
                            "lib/matplotlib/tests/test_widgets.py::test_polygon_selector[True]",
                            "lib/matplotlib/tests/test_widgets.py::test_polygon_selector_set_props_handle_props[False]",
                            "lib/matplotlib/tests/test_widgets.py::test_polygon_selector_set_props_handle_props[True]",
                            "lib/matplotlib/tests/test_widgets.py::test_rect_visibility[png]",
                            "lib/matplotlib/tests/test_widgets.py::test_rect_visibility[pdf]",
                            "lib/matplotlib/tests/test_widgets.py::test_polygon_selector_remove[False-1]",
                            "lib/matplotlib/tests/test_widgets.py::test_polygon_selector_remove[False-2]",
                            "lib/matplotlib/tests/test_widgets.py::test_polygon_selector_remove[False-3]",
                            "lib/matplotlib/tests/test_widgets.py::test_polygon_selector_remove[True-1]",
                            "lib/matplotlib/tests/test_widgets.py::test_polygon_selector_remove[True-2]",
                            "lib/matplotlib/tests/test_widgets.py::test_polygon_selector_remove[True-3]",
                            "lib/matplotlib/tests/test_widgets.py::test_polygon_selector_remove_first_point[False]",
                            "lib/matplotlib/tests/test_widgets.py::test_polygon_selector_remove_first_point[True]",
                            "lib/matplotlib/tests/test_widgets.py::test_polygon_selector_redraw[False]",
                            "lib/matplotlib/tests/test_widgets.py::test_polygon_selector_redraw[True]",
                            "lib/matplotlib/tests/test_widgets.py::test_polygon_selector_verts_setter[png-False]",
                            "lib/matplotlib/tests/test_widgets.py::test_polygon_selector_verts_setter[png-True]",
                            "lib/matplotlib/tests/test_widgets.py::test_polygon_selector_box"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "pytest-dev__pytest-5227.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "testing/logging/test_reporting.py::test_log_cli_enabled_disabled[True]",
                            "testing/logging/test_reporting.py::test_log_cli_default_level",
                            "testing/logging/test_reporting.py::test_sections_single_new_line_after_test_outcome"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "[100%]",
                            "[",
                            "[100%]------------------------------",
                            "testing/logging/test_reporting.py::test_live_logging_suspends_capture[True]",
                            "testing/logging/test_reporting.py::test_live_logging_suspends_capture[False]",
                            "testing/logging/test_reporting.py::test_nothing_logged",
                            "testing/logging/test_reporting.py::test_messages_logged",
                            "testing/logging/test_reporting.py::test_root_logger_affected",
                            "testing/logging/test_reporting.py::test_log_cli_level_log_level_interaction",
                            "testing/logging/test_reporting.py::test_setup_logging",
                            "testing/logging/test_reporting.py::test_teardown_logging",
                            "testing/logging/test_reporting.py::test_disable_log_capturing",
                            "testing/logging/test_reporting.py::test_disable_log_capturing_ini",
                            "testing/logging/test_reporting.py::test_log_cli_enabled_disabled[False]",
                            "testing/logging/test_reporting.py::test_log_cli_default_level_multiple_tests",
                            "testing/logging/test_reporting.py::test_log_cli_default_level_sections",
                            "testing/logging/test_reporting.py::test_live_logs_unknown_sections",
                            "testing/logging/test_reporting.py::test_log_cli_level",
                            "testing/logging/test_reporting.py::test_log_cli_ini_level",
                            "testing/logging/test_reporting.py::test_log_cli_auto_enable[]",
                            "testing/logging/test_reporting.py::test_log_cli_auto_enable[--log-level=WARNING]",
                            "testing/logging/test_reporting.py::test_log_cli_auto_enable[--log-file-level=WARNING]",
                            "testing/logging/test_reporting.py::test_log_cli_auto_enable[--log-cli-level=WARNING]",
                            "testing/logging/test_reporting.py::test_log_file_cli",
                            "testing/logging/test_reporting.py::test_log_file_cli_level",
                            "testing/logging/test_reporting.py::test_log_level_not_changed_by_default",
                            "testing/logging/test_reporting.py::test_log_file_ini",
                            "testing/logging/test_reporting.py::test_log_file_ini_level",
                            "testing/logging/test_reporting.py::test_log_file_unicode",
                            "testing/logging/test_reporting.py::test_collection_live_logging",
                            "testing/logging/test_reporting.py::test_collection_logging_to_file",
                            "testing/logging/test_reporting.py::test_log_in_hooks",
                            "testing/logging/test_reporting.py::test_log_in_runtest_logreport",
                            "testing/logging/test_reporting.py::test_log_set_path"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "psf__requests-863.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "tests/test_requests.py::RequestsTestSuite::test_POSTBIN_GET_POST_FILES_WITH_HEADERS",
                            "tests/test_requests.py::RequestsTestSuite::test_nonurlencoded_postdata",
                            "tests/test_requests.py::RequestsTestSuite::test_prefetch_redirect_bug",
                            "tests/test_requests.py::RequestsTestSuite::test_urlencoded_post_data"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "tests/test_requests.py::RequestsTestSuite::test_BASICAUTH_HTTP_200_OK_GET",
                            "tests/test_requests.py::RequestsTestSuite::test_BASICAUTH_TUPLE_HTTP_200_OK_GET",
                            "tests/test_requests.py::RequestsTestSuite::test_GET_no_redirect",
                            "tests/test_requests.py::RequestsTestSuite::test_HEAD_no_redirect",
                            "tests/test_requests.py::RequestsTestSuite::test_HTTP_200_OK_GET",
                            "tests/test_requests.py::RequestsTestSuite::test_HTTP_200_OK_GET_WITH_MIXED_PARAMS",
                            "tests/test_requests.py::RequestsTestSuite::test_HTTP_200_OK_GET_WITH_PARAMS",
                            "tests/test_requests.py::RequestsTestSuite::test_HTTP_200_OK_HEAD",
                            "tests/test_requests.py::RequestsTestSuite::test_HTTP_200_OK_PUT",
                            "tests/test_requests.py::RequestsTestSuite::test_HTTP_302_ALLOW_REDIRECT_GET",
                            "tests/test_requests.py::RequestsTestSuite::test_HTTP_302_GET",
                            "tests/test_requests.py::RequestsTestSuite::test_POSTBIN_GET_POST_FILES",
                            "tests/test_requests.py::RequestsTestSuite::test_POSTBIN_GET_POST_FILES_WITH_PARAMS",
                            "tests/test_requests.py::RequestsTestSuite::test_accept_objects_with_string_representations_as_urls",
                            "tests/test_requests.py::RequestsTestSuite::test_bytes_files",
                            "tests/test_requests.py::RequestsTestSuite::test_cached_response",
                            "tests/test_requests.py::RequestsTestSuite::test_can_have_none_in_header_values",
                            "tests/test_requests.py::RequestsTestSuite::test_connection_error",
                            "tests/test_requests.py::RequestsTestSuite::test_connection_error_with_safe_mode",
                            "tests/test_requests.py::RequestsTestSuite::test_connection_keepalive_and_close",
                            "tests/test_requests.py::RequestsTestSuite::test_danger_mode_redirects",
                            "tests/test_requests.py::RequestsTestSuite::test_decompress_gzip",
                            "tests/test_requests.py::RequestsTestSuite::test_default_status_raising",
                            "tests/test_requests.py::RequestsTestSuite::test_empty_response",
                            "tests/test_requests.py::RequestsTestSuite::test_entry_points",
                            "tests/test_requests.py::RequestsTestSuite::test_file_post_data",
                            "tests/test_requests.py::RequestsTestSuite::test_head_content",
                            "tests/test_requests.py::RequestsTestSuite::test_httpauth_recursion",
                            "tests/test_requests.py::RequestsTestSuite::test_invalid_url",
                            "tests/test_requests.py::RequestsTestSuite::test_invalid_urls_throw_requests_exception",
                            "tests/test_requests.py::RequestsTestSuite::test_iter_lines",
                            "tests/test_requests.py::RequestsTestSuite::test_max_redirects",
                            "tests/test_requests.py::RequestsTestSuite::test_multiple_hooks",
                            "tests/test_requests.py::RequestsTestSuite::test_nonurlencoded_post_data",
                            "tests/test_requests.py::RequestsTestSuite::test_nonzero_evaluation",
                            "tests/test_requests.py::RequestsTestSuite::test_params_accepts_kv_list",
                            "tests/test_requests.py::RequestsTestSuite::test_params_are_added_before_fragment",
                            "tests/test_requests.py::RequestsTestSuite::test_path_is_not_double_encoded",
                            "tests/test_requests.py::RequestsTestSuite::test_post_fields_with_multiple_values_and_files",
                            "tests/test_requests.py::RequestsTestSuite::test_post_fields_with_multiple_values_and_files_as_tuples",
                            "tests/test_requests.py::RequestsTestSuite::test_prefetch_return_response_interaction",
                            "tests/test_requests.py::RequestsTestSuite::test_redirect_history",
                            "tests/test_requests.py::RequestsTestSuite::test_relative_redirect_history",
                            "tests/test_requests.py::RequestsTestSuite::test_request_ok_set",
                            "tests/test_requests.py::RequestsTestSuite::test_response_has_unicode_url",
                            "tests/test_requests.py::RequestsTestSuite::test_response_sent",
                            "tests/test_requests.py::RequestsTestSuite::test_session_HTTP_200_OK_GET",
                            "tests/test_requests.py::RequestsTestSuite::test_session_persistent_headers",
                            "tests/test_requests.py::RequestsTestSuite::test_session_pickling",
                            "tests/test_requests.py::RequestsTestSuite::test_status_raising",
                            "tests/test_requests.py::RequestsTestSuite::test_unicode_get",
                            "tests/test_requests.py::RequestsTestSuite::test_upload_binary_data",
                            "tests/test_requests.py::RequestsTestSuite::test_urlencoded_get_query_multivalued_param",
                            "tests/test_requests.py::RequestsTestSuite::test_urlencoded_post_query_and_data",
                            "tests/test_requests.py::RequestsTestSuite::test_urlencoded_post_query_multivalued_and_data",
                            "tests/test_requests.py::RequestsTestSuite::test_urlencoded_post_querystring",
                            "tests/test_requests.py::RequestsTestSuite::test_urlencoded_post_querystring_multivalued",
                            "tests/test_requests.py::RequestsTestSuite::test_useful_exception_for_invalid_port",
                            "tests/test_requests.py::RequestsTestSuite::test_useful_exception_for_invalid_scheme",
                            "tests/test_requests.py::RequestsTestSuite::test_user_agent_transfers"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "pydata__xarray-6135.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_like[year]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_like[month]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_like[month-dash]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_like[day]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_like[day-dash]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_like[hour]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_like[hour-dash]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_like[hour-space-separator]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_like[minute]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_like[minute-dash]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_like[minute-space-separator]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_like[second]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_like[second-dash]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_like[second-space-separator]"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "xarray/tests/test_cftime_offsets.py::test_cftime_offset_constructor_valid_n[<BaseCFTimeOffset:",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_offset_constructor_valid_n[<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_offset_constructor_valid_n[<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_offset_constructor_valid_n[<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_offset_constructor_valid_n[<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_offset_constructor_valid_n[<Tick:",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_offset_constructor_valid_n[<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_offset_constructor_valid_n[<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_offset_constructor_valid_n[<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_offset_constructor_valid_n[<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_offset_constructor_valid_n[<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_offset_constructor_valid_n[<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_offset_constructor_invalid_n[<class",
                            "xarray/tests/test_cftime_offsets.py::test_year_offset_constructor_valid_month[<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_year_offset_constructor_valid_month[<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_year_offset_constructor_valid_month[<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_year_offset_constructor_valid_month[<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_year_offset_constructor_invalid_month[<class",
                            "xarray/tests/test_cftime_offsets.py::test_rule_code[<BaseCFTimeOffset:",
                            "xarray/tests/test_cftime_offsets.py::test_rule_code[<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rule_code[<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rule_code[<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_str_and_repr[<BaseCFTimeOffset:",
                            "xarray/tests/test_cftime_offsets.py::test_str_and_repr[<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_str_and_repr[<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_offset_input[<BaseCFTimeOffset:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_offset_input[<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_offset_input[<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_offset_input[<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_sub_annual[M-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_sub_annual[2M-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_sub_annual[MS-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_sub_annual[2MS-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_sub_annual[D-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_sub_annual[2D-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_sub_annual[H-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_sub_annual[2H-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_sub_annual[T-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_sub_annual[2T-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_sub_annual[min-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_sub_annual[2min-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_sub_annual[S-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_sub_annual[2S-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_sub_annual[L-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_sub_annual[2L-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_sub_annual[ms-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_sub_annual[2ms-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_sub_annual[U-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_sub_annual[2U-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_sub_annual[us-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_sub_annual[2us-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-None-1-JAN]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-None-2-FEB]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-None-3-MAR]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-None-4-APR]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-None-5-MAY]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-None-6-JUN]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-None-7-JUL]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-None-8-AUG]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-None-9-SEP]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-None-10-OCT]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-None-11-NOV]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-None-12-DEC]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-None-0-]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-2-1-JAN]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-2-2-FEB]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-2-3-MAR]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-2-4-APR]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-2-5-MAY]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-2-6-JUN]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-2-7-JUL]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-2-8-AUG]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-2-9-SEP]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-2-10-OCT]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-2-11-NOV]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-2-12-DEC]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-2-0-]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-None-1-JAN]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-None-2-FEB]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-None-3-MAR]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-None-4-APR]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-None-5-MAY]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-None-6-JUN]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-None-7-JUL]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-None-8-AUG]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-None-9-SEP]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-None-10-OCT]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-None-11-NOV]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-None-12-DEC]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-None-0-]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-2-1-JAN]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-2-2-FEB]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-2-3-MAR]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-2-4-APR]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-2-5-MAY]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-2-6-JUN]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-2-7-JUL]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-2-8-AUG]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-2-9-SEP]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-2-10-OCT]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-2-11-NOV]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-2-12-DEC]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-2-0-]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-None-1-JAN]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-None-2-FEB]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-None-3-MAR]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-None-4-APR]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-None-5-MAY]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-None-6-JUN]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-None-7-JUL]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-None-8-AUG]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-None-9-SEP]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-None-10-OCT]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-None-11-NOV]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-None-12-DEC]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-None-0-]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-2-1-JAN]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-2-2-FEB]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-2-3-MAR]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-2-4-APR]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-2-5-MAY]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-2-6-JUN]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-2-7-JUL]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-2-8-AUG]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-2-9-SEP]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-2-10-OCT]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-2-11-NOV]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-2-12-DEC]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-2-0-]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-None-1-JAN]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-None-2-FEB]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-None-3-MAR]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-None-4-APR]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-None-5-MAY]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-None-6-JUN]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-None-7-JUL]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-None-8-AUG]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-None-9-SEP]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-None-10-OCT]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-None-11-NOV]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-None-12-DEC]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-None-0-]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-2-1-JAN]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-2-2-FEB]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-2-3-MAR]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-2-4-APR]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-2-5-MAY]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-2-6-JUN]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-2-7-JUL]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-2-8-AUG]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-2-9-SEP]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-2-10-OCT]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-2-11-NOV]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-2-12-DEC]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-2-0-]",
                            "xarray/tests/test_cftime_offsets.py::test_invalid_to_offset_str[Z]",
                            "xarray/tests/test_cftime_offsets.py::test_invalid_to_offset_str[7min2]",
                            "xarray/tests/test_cftime_offsets.py::test_invalid_to_offset_str[AM]",
                            "xarray/tests/test_cftime_offsets.py::test_invalid_to_offset_str[M-]",
                            "xarray/tests/test_cftime_offsets.py::test_invalid_to_offset_str[AS-]",
                            "xarray/tests/test_cftime_offsets.py::test_invalid_to_offset_str[QS-]",
                            "xarray/tests/test_cftime_offsets.py::test_invalid_to_offset_str[1H1min]",
                            "xarray/tests/test_cftime_offsets.py::test_to_cftime_datetime[365_day-2000-01-01-(2000,",
                            "xarray/tests/test_cftime_offsets.py::test_to_cftime_datetime[365_day-(2000,",
                            "xarray/tests/test_cftime_offsets.py::test_to_cftime_datetime[360_day-2000-01-01-(2000,",
                            "xarray/tests/test_cftime_offsets.py::test_to_cftime_datetime[360_day-(2000,",
                            "xarray/tests/test_cftime_offsets.py::test_to_cftime_datetime[julian-2000-01-01-(2000,",
                            "xarray/tests/test_cftime_offsets.py::test_to_cftime_datetime[julian-(2000,",
                            "xarray/tests/test_cftime_offsets.py::test_to_cftime_datetime[all_leap-2000-01-01-(2000,",
                            "xarray/tests/test_cftime_offsets.py::test_to_cftime_datetime[all_leap-(2000,",
                            "xarray/tests/test_cftime_offsets.py::test_to_cftime_datetime[366_day-2000-01-01-(2000,",
                            "xarray/tests/test_cftime_offsets.py::test_to_cftime_datetime[366_day-(2000,",
                            "xarray/tests/test_cftime_offsets.py::test_to_cftime_datetime[gregorian-2000-01-01-(2000,",
                            "xarray/tests/test_cftime_offsets.py::test_to_cftime_datetime[gregorian-(2000,",
                            "xarray/tests/test_cftime_offsets.py::test_to_cftime_datetime[proleptic_gregorian-2000-01-01-(2000,",
                            "xarray/tests/test_cftime_offsets.py::test_to_cftime_datetime[proleptic_gregorian-(2000,",
                            "xarray/tests/test_cftime_offsets.py::test_to_cftime_datetime[standard-2000-01-01-(2000,",
                            "xarray/tests/test_cftime_offsets.py::test_to_cftime_datetime[standard-(2000,",
                            "xarray/tests/test_cftime_offsets.py::test_to_cftime_datetime_error_no_calendar",
                            "xarray/tests/test_cftime_offsets.py::test_to_cftime_datetime_error_type_error",
                            "xarray/tests/test_cftime_offsets.py::test_neq[<BaseCFTimeOffset:",
                            "xarray/tests/test_cftime_offsets.py::test_neq[<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_neq[<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_neq[<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_neq[<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_neq[<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_neq[<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_neq[<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_neq[<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_neq[<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_neq[<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_neq[<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_neq[<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_eq[<BaseCFTimeOffset:",
                            "xarray/tests/test_cftime_offsets.py::test_eq[<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_eq[<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_eq[<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_eq[<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_eq[<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_eq[<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_eq[<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_eq[<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_eq[<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_eq[<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_eq[<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_eq[<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_mul[<BaseCFTimeOffset:",
                            "xarray/tests/test_cftime_offsets.py::test_mul[<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_mul[<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_mul[<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_mul[<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_mul[<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_mul[<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_mul[<Tick:",
                            "xarray/tests/test_cftime_offsets.py::test_mul[<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_mul[<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_mul[<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_mul[<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_mul[<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_mul[<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rmul[<BaseCFTimeOffset:",
                            "xarray/tests/test_cftime_offsets.py::test_rmul[<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rmul[<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rmul[<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rmul[<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rmul[<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rmul[<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rmul[<Tick:",
                            "xarray/tests/test_cftime_offsets.py::test_rmul[<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rmul[<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rmul[<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rmul[<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rmul[<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rmul[<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_mul_float_multiple_next_higher_resolution",
                            "xarray/tests/test_cftime_offsets.py::test_nonTick_offset_multiplied_float_error[<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_nonTick_offset_multiplied_float_error[<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_nonTick_offset_multiplied_float_error[<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_nonTick_offset_multiplied_float_error[<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_nonTick_offset_multiplied_float_error[<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_nonTick_offset_multiplied_float_error[<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_Microsecond_multiplied_float_error",
                            "xarray/tests/test_cftime_offsets.py::test_neg[<BaseCFTimeOffset:",
                            "xarray/tests/test_cftime_offsets.py::test_neg[<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_neg[<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_neg[<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_neg[<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_neg[<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_neg[<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_neg[<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_neg[<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_neg[<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_neg[<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_neg[<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_neg[<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[365_day-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[365_day-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[365_day-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[365_day-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[365_day-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[365_day-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[360_day-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[360_day-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[360_day-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[360_day-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[360_day-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[360_day-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[julian-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[julian-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[julian-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[julian-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[julian-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[julian-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[all_leap-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[all_leap-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[all_leap-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[all_leap-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[all_leap-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[all_leap-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[366_day-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[366_day-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[366_day-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[366_day-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[366_day-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[366_day-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[gregorian-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[gregorian-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[gregorian-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[gregorian-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[gregorian-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[gregorian-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[proleptic_gregorian-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[proleptic_gregorian-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[proleptic_gregorian-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[proleptic_gregorian-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[proleptic_gregorian-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[proleptic_gregorian-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[standard-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[standard-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[standard-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[standard-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[standard-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[standard-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[365_day-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[365_day-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[365_day-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[365_day-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[365_day-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[365_day-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[360_day-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[360_day-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[360_day-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[360_day-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[360_day-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[360_day-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[julian-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[julian-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[julian-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[julian-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[julian-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[julian-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[all_leap-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[all_leap-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[all_leap-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[all_leap-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[all_leap-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[all_leap-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[366_day-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[366_day-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[366_day-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[366_day-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[366_day-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[366_day-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[gregorian-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[gregorian-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[gregorian-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[gregorian-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[gregorian-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[gregorian-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[proleptic_gregorian-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[proleptic_gregorian-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[proleptic_gregorian-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[proleptic_gregorian-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[proleptic_gregorian-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[proleptic_gregorian-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[standard-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[standard-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[standard-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[standard-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[standard-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[standard-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[365_day-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[365_day-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[365_day-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[365_day-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[365_day-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[365_day-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[360_day-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[360_day-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[360_day-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[360_day-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[360_day-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[360_day-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[julian-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[julian-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[julian-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[julian-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[julian-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[julian-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[all_leap-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[all_leap-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[all_leap-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[all_leap-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[all_leap-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[all_leap-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[366_day-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[366_day-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[366_day-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[366_day-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[366_day-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[366_day-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[gregorian-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[gregorian-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[gregorian-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[gregorian-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[gregorian-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[gregorian-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[proleptic_gregorian-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[proleptic_gregorian-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[proleptic_gregorian-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[proleptic_gregorian-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[proleptic_gregorian-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[proleptic_gregorian-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[standard-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[standard-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[standard-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[standard-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[standard-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[standard-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[365_day-<BaseCFTimeOffset:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[365_day-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[365_day-<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[365_day-<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[365_day-<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[365_day-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[365_day-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[365_day-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[365_day-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[365_day-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[365_day-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[365_day-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[365_day-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[360_day-<BaseCFTimeOffset:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[360_day-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[360_day-<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[360_day-<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[360_day-<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[360_day-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[360_day-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[360_day-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[360_day-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[360_day-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[360_day-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[360_day-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[360_day-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[julian-<BaseCFTimeOffset:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[julian-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[julian-<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[julian-<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[julian-<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[julian-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[julian-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[julian-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[julian-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[julian-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[julian-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[julian-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[julian-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[all_leap-<BaseCFTimeOffset:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[all_leap-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[all_leap-<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[all_leap-<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[all_leap-<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[all_leap-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[all_leap-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[all_leap-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[all_leap-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[all_leap-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[all_leap-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[all_leap-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[all_leap-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[366_day-<BaseCFTimeOffset:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[366_day-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[366_day-<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[366_day-<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[366_day-<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[366_day-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[366_day-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[366_day-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[366_day-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[366_day-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[366_day-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[366_day-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[366_day-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[gregorian-<BaseCFTimeOffset:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[gregorian-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[gregorian-<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[gregorian-<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[gregorian-<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[gregorian-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[gregorian-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[gregorian-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[gregorian-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[gregorian-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[gregorian-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[gregorian-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[gregorian-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[proleptic_gregorian-<BaseCFTimeOffset:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[proleptic_gregorian-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[proleptic_gregorian-<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[proleptic_gregorian-<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[proleptic_gregorian-<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[proleptic_gregorian-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[proleptic_gregorian-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[proleptic_gregorian-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[proleptic_gregorian-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[proleptic_gregorian-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[proleptic_gregorian-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[proleptic_gregorian-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[proleptic_gregorian-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[standard-<BaseCFTimeOffset:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[standard-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[standard-<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[standard-<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[standard-<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[standard-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[standard-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[standard-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[standard-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[standard-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[standard-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[standard-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[standard-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset[<BaseCFTimeOffset:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset[<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset[<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset[<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset[<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset[<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset[<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset[<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset[<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset[<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset[<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset[<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset[<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset_error[<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset_error[<BaseCFTimeOffset:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset_error[<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset_error[<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset_error[<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset_error[<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset_error[<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset_error[<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset_error[<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset_error[<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset_error[<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset_error[<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset_error[<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_days_in_month_non_december[365_day]",
                            "xarray/tests/test_cftime_offsets.py::test_days_in_month_non_december[360_day]",
                            "xarray/tests/test_cftime_offsets.py::test_days_in_month_non_december[julian]",
                            "xarray/tests/test_cftime_offsets.py::test_days_in_month_non_december[all_leap]",
                            "xarray/tests/test_cftime_offsets.py::test_days_in_month_non_december[366_day]",
                            "xarray/tests/test_cftime_offsets.py::test_days_in_month_non_december[gregorian]",
                            "xarray/tests/test_cftime_offsets.py::test_days_in_month_non_december[proleptic_gregorian]",
                            "xarray/tests/test_cftime_offsets.py::test_days_in_month_non_december[standard]",
                            "xarray/tests/test_cftime_offsets.py::test_days_in_month_december[365_day]",
                            "xarray/tests/test_cftime_offsets.py::test_days_in_month_december[360_day]",
                            "xarray/tests/test_cftime_offsets.py::test_days_in_month_december[julian]",
                            "xarray/tests/test_cftime_offsets.py::test_days_in_month_december[all_leap]",
                            "xarray/tests/test_cftime_offsets.py::test_days_in_month_december[366_day]",
                            "xarray/tests/test_cftime_offsets.py::test_days_in_month_december[gregorian]",
                            "xarray/tests/test_cftime_offsets.py::test_days_in_month_december[proleptic_gregorian]",
                            "xarray/tests/test_cftime_offsets.py::test_days_in_month_december[standard]",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_begin[365_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_begin[365_day-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_begin[360_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_begin[360_day-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_begin[julian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_begin[julian-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_begin[all_leap-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_begin[all_leap-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_begin[366_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_begin[366_day-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_begin[gregorian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_begin[gregorian-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_begin[proleptic_gregorian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_begin[proleptic_gregorian-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_begin[standard-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_begin[standard-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end[365_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end[365_day-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end[360_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end[360_day-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end[julian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end[julian-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end[all_leap-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end[all_leap-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end[366_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end[366_day-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end[gregorian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end[gregorian-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end[proleptic_gregorian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end[proleptic_gregorian-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end[standard-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end[standard-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end_onOffset[365_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end_onOffset[365_day-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end_onOffset[360_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end_onOffset[360_day-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end_onOffset[julian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end_onOffset[julian-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end_onOffset[all_leap-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end_onOffset[all_leap-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end_onOffset[366_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end_onOffset[366_day-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end_onOffset[gregorian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end_onOffset[gregorian-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end_onOffset[proleptic_gregorian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end_onOffset[proleptic_gregorian-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end_onOffset[standard-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end_onOffset[standard-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_begin[365_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_begin[365_day-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_begin[360_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_begin[360_day-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_begin[julian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_begin[julian-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_begin[all_leap-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_begin[all_leap-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_begin[366_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_begin[366_day-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_begin[gregorian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_begin[gregorian-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_begin[proleptic_gregorian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_begin[proleptic_gregorian-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_begin[standard-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_begin[standard-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end[365_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end[365_day-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end[360_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end[360_day-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end[julian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end[julian-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end[all_leap-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end[all_leap-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end[366_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end[366_day-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end[gregorian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end[gregorian-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end[proleptic_gregorian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end[proleptic_gregorian-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end[standard-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end[standard-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end_onOffset[365_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end_onOffset[365_day-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end_onOffset[365_day-(3,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end_onOffset[360_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end_onOffset[360_day-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end_onOffset[360_day-(3,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end_onOffset[julian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end_onOffset[julian-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end_onOffset[julian-(3,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end_onOffset[all_leap-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end_onOffset[all_leap-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end_onOffset[all_leap-(3,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end_onOffset[366_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end_onOffset[366_day-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end_onOffset[366_day-(3,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end_onOffset[gregorian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end_onOffset[gregorian-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end_onOffset[gregorian-(3,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end_onOffset[proleptic_gregorian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end_onOffset[proleptic_gregorian-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end_onOffset[proleptic_gregorian-(3,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end_onOffset[standard-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end_onOffset[standard-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end_onOffset[standard-(3,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_begin[365_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_begin[365_day-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_begin[360_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_begin[360_day-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_begin[julian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_begin[julian-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_begin[all_leap-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_begin[all_leap-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_begin[366_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_begin[366_day-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_begin[gregorian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_begin[gregorian-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_begin[proleptic_gregorian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_begin[proleptic_gregorian-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_begin[standard-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_begin[standard-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_end[365_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_end[365_day-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_end[360_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_end[360_day-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_end[julian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_end[julian-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_end[all_leap-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_end[all_leap-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_end[366_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_end[366_day-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_end[gregorian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_end[gregorian-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_end[proleptic_gregorian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_end[proleptic_gregorian-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_end[standard-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_end[standard-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_end_onOffset[365_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_end_onOffset[360_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_end_onOffset[julian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_end_onOffset[all_leap-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_end_onOffset[366_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_end_onOffset[gregorian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_end_onOffset[proleptic_gregorian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_end_onOffset[standard-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_onOffset[365_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_onOffset[360_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_onOffset[julian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_onOffset[all_leap-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_onOffset[366_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_onOffset[gregorian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_onOffset[proleptic_gregorian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_onOffset[standard-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_onOffset_month_or_quarter_or_year_end[365_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_onOffset_month_or_quarter_or_year_end[360_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_onOffset_month_or_quarter_or_year_end[julian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_onOffset_month_or_quarter_or_year_end[all_leap-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_onOffset_month_or_quarter_or_year_end[366_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_onOffset_month_or_quarter_or_year_end[gregorian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_onOffset_month_or_quarter_or_year_end[proleptic_gregorian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_onOffset_month_or_quarter_or_year_end[standard-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[365_day-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[365_day-<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[365_day-<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[365_day-<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[365_day-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[365_day-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[365_day-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[365_day-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[365_day-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[365_day-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[365_day-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[365_day-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[360_day-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[360_day-<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[360_day-<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[360_day-<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[360_day-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[360_day-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[360_day-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[360_day-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[360_day-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[360_day-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[360_day-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[360_day-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[julian-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[julian-<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[julian-<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[julian-<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[julian-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[julian-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[julian-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[julian-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[julian-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[julian-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[julian-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[julian-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[all_leap-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[all_leap-<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[all_leap-<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[all_leap-<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[all_leap-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[all_leap-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[all_leap-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[all_leap-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[all_leap-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[all_leap-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[all_leap-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[all_leap-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[366_day-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[366_day-<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[366_day-<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[366_day-<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[366_day-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[366_day-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[366_day-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[366_day-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[366_day-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[366_day-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[366_day-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[366_day-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[gregorian-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[gregorian-<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[gregorian-<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[gregorian-<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[gregorian-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[gregorian-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[gregorian-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[gregorian-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[gregorian-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[gregorian-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[gregorian-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[gregorian-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[proleptic_gregorian-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[proleptic_gregorian-<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[proleptic_gregorian-<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[proleptic_gregorian-<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[proleptic_gregorian-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[proleptic_gregorian-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[proleptic_gregorian-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[proleptic_gregorian-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[proleptic_gregorian-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[proleptic_gregorian-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[proleptic_gregorian-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[proleptic_gregorian-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[standard-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[standard-<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[standard-<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[standard-<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[standard-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[standard-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[standard-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[standard-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[standard-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[standard-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[standard-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[standard-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[365_day-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[365_day-<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[365_day-<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[365_day-<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[365_day-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[365_day-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[365_day-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[365_day-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[365_day-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[365_day-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[365_day-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[365_day-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[360_day-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[360_day-<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[360_day-<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[360_day-<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[360_day-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[360_day-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[360_day-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[360_day-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[360_day-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[360_day-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[360_day-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[360_day-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[julian-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[julian-<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[julian-<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[julian-<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[julian-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[julian-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[julian-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[julian-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[julian-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[julian-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[julian-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[julian-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[all_leap-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[all_leap-<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[all_leap-<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[all_leap-<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[all_leap-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[all_leap-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[all_leap-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[all_leap-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[all_leap-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[all_leap-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[all_leap-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[all_leap-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[366_day-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[366_day-<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[366_day-<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[366_day-<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[366_day-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[366_day-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[366_day-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[366_day-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[366_day-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[366_day-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[366_day-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[366_day-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[gregorian-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[gregorian-<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[gregorian-<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[gregorian-<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[gregorian-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[gregorian-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[gregorian-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[gregorian-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[gregorian-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[gregorian-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[gregorian-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[gregorian-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[proleptic_gregorian-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[proleptic_gregorian-<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[proleptic_gregorian-<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[proleptic_gregorian-<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[proleptic_gregorian-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[proleptic_gregorian-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[proleptic_gregorian-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[proleptic_gregorian-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[proleptic_gregorian-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[proleptic_gregorian-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[proleptic_gregorian-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[proleptic_gregorian-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[standard-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[standard-<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[standard-<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[standard-<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[standard-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[standard-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[standard-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[standard-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[standard-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[standard-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[standard-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[standard-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[365_day-0001-01-01-0001-01-04-None-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[365_day-0001-01-01-0001-01-04-None-D-left-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[365_day-0001-01-01-0001-01-04-None-D-right-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[365_day-0001-01-01T01:00:00-0001-01-04-None-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[365_day-0001-01-01",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[365_day-0001-01-01T01:00:00-0001-01-04-None-D-None-True-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[365_day-0001-01-01-None-4-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[365_day-None-0001-01-04-4-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[365_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[365_day-0001-01-30-0011-02-01-None-3AS-JUN-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[365_day-0001-01-04-0001-01-01-None-D-None-False-[]]",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[365_day-0010-None-4-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[365_day-0001-01-01-0001-01-04-4-None-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[365_day-0001-06-01-None-4-3QS-JUN-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[360_day-0001-01-01-0001-01-04-None-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[360_day-0001-01-01-0001-01-04-None-D-left-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[360_day-0001-01-01-0001-01-04-None-D-right-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[360_day-0001-01-01T01:00:00-0001-01-04-None-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[360_day-0001-01-01",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[360_day-0001-01-01T01:00:00-0001-01-04-None-D-None-True-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[360_day-0001-01-01-None-4-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[360_day-None-0001-01-04-4-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[360_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[360_day-0001-01-30-0011-02-01-None-3AS-JUN-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[360_day-0001-01-04-0001-01-01-None-D-None-False-[]]",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[360_day-0010-None-4-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[360_day-0001-01-01-0001-01-04-4-None-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[360_day-0001-06-01-None-4-3QS-JUN-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[julian-0001-01-01-0001-01-04-None-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[julian-0001-01-01-0001-01-04-None-D-left-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[julian-0001-01-01-0001-01-04-None-D-right-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[julian-0001-01-01T01:00:00-0001-01-04-None-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[julian-0001-01-01",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[julian-0001-01-01T01:00:00-0001-01-04-None-D-None-True-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[julian-0001-01-01-None-4-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[julian-None-0001-01-04-4-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[julian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[julian-0001-01-30-0011-02-01-None-3AS-JUN-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[julian-0001-01-04-0001-01-01-None-D-None-False-[]]",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[julian-0010-None-4-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[julian-0001-01-01-0001-01-04-4-None-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[julian-0001-06-01-None-4-3QS-JUN-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[all_leap-0001-01-01-0001-01-04-None-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[all_leap-0001-01-01-0001-01-04-None-D-left-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[all_leap-0001-01-01-0001-01-04-None-D-right-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[all_leap-0001-01-01T01:00:00-0001-01-04-None-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[all_leap-0001-01-01",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[all_leap-0001-01-01T01:00:00-0001-01-04-None-D-None-True-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[all_leap-0001-01-01-None-4-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[all_leap-None-0001-01-04-4-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[all_leap-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[all_leap-0001-01-30-0011-02-01-None-3AS-JUN-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[all_leap-0001-01-04-0001-01-01-None-D-None-False-[]]",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[all_leap-0010-None-4-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[all_leap-0001-01-01-0001-01-04-4-None-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[all_leap-0001-06-01-None-4-3QS-JUN-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[366_day-0001-01-01-0001-01-04-None-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[366_day-0001-01-01-0001-01-04-None-D-left-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[366_day-0001-01-01-0001-01-04-None-D-right-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[366_day-0001-01-01T01:00:00-0001-01-04-None-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[366_day-0001-01-01",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[366_day-0001-01-01T01:00:00-0001-01-04-None-D-None-True-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[366_day-0001-01-01-None-4-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[366_day-None-0001-01-04-4-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[366_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[366_day-0001-01-30-0011-02-01-None-3AS-JUN-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[366_day-0001-01-04-0001-01-01-None-D-None-False-[]]",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[366_day-0010-None-4-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[366_day-0001-01-01-0001-01-04-4-None-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[366_day-0001-06-01-None-4-3QS-JUN-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[gregorian-0001-01-01-0001-01-04-None-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[gregorian-0001-01-01-0001-01-04-None-D-left-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[gregorian-0001-01-01-0001-01-04-None-D-right-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[gregorian-0001-01-01T01:00:00-0001-01-04-None-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[gregorian-0001-01-01",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[gregorian-0001-01-01T01:00:00-0001-01-04-None-D-None-True-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[gregorian-0001-01-01-None-4-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[gregorian-None-0001-01-04-4-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[gregorian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[gregorian-0001-01-30-0011-02-01-None-3AS-JUN-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[gregorian-0001-01-04-0001-01-01-None-D-None-False-[]]",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[gregorian-0010-None-4-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[gregorian-0001-01-01-0001-01-04-4-None-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[gregorian-0001-06-01-None-4-3QS-JUN-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[proleptic_gregorian-0001-01-01-0001-01-04-None-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[proleptic_gregorian-0001-01-01-0001-01-04-None-D-left-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[proleptic_gregorian-0001-01-01-0001-01-04-None-D-right-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[proleptic_gregorian-0001-01-01T01:00:00-0001-01-04-None-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[proleptic_gregorian-0001-01-01",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[proleptic_gregorian-0001-01-01T01:00:00-0001-01-04-None-D-None-True-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[proleptic_gregorian-0001-01-01-None-4-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[proleptic_gregorian-None-0001-01-04-4-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[proleptic_gregorian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[proleptic_gregorian-0001-01-30-0011-02-01-None-3AS-JUN-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[proleptic_gregorian-0001-01-04-0001-01-01-None-D-None-False-[]]",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[proleptic_gregorian-0010-None-4-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[proleptic_gregorian-0001-01-01-0001-01-04-4-None-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[proleptic_gregorian-0001-06-01-None-4-3QS-JUN-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[standard-0001-01-01-0001-01-04-None-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[standard-0001-01-01-0001-01-04-None-D-left-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[standard-0001-01-01-0001-01-04-None-D-right-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[standard-0001-01-01T01:00:00-0001-01-04-None-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[standard-0001-01-01",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[standard-0001-01-01T01:00:00-0001-01-04-None-D-None-True-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[standard-0001-01-01-None-4-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[standard-None-0001-01-04-4-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[standard-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[standard-0001-01-30-0011-02-01-None-3AS-JUN-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[standard-0001-01-04-0001-01-01-None-D-None-False-[]]",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[standard-0010-None-4-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[standard-0001-01-01-0001-01-04-4-None-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[standard-0001-06-01-None-4-3QS-JUN-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range_name",
                            "xarray/tests/test_cftime_offsets.py::test_invalid_cftime_range_inputs[None-None-5-A-None]",
                            "xarray/tests/test_cftime_offsets.py::test_invalid_cftime_range_inputs[2000-None-None-A-None]",
                            "xarray/tests/test_cftime_offsets.py::test_invalid_cftime_range_inputs[None-2000-None-A-None]",
                            "xarray/tests/test_cftime_offsets.py::test_invalid_cftime_range_inputs[2000-2001-None-None-None]",
                            "xarray/tests/test_cftime_offsets.py::test_invalid_cftime_range_inputs[None-None-None-None-None]",
                            "xarray/tests/test_cftime_offsets.py::test_invalid_cftime_range_inputs[2000-2001-None-A-up]",
                            "xarray/tests/test_cftime_offsets.py::test_invalid_cftime_range_inputs[2000-2001-5-A-None]",
                            "xarray/tests/test_cftime_offsets.py::test_calendar_specific_month_end[2M-noleap-[(2,",
                            "xarray/tests/test_cftime_offsets.py::test_calendar_specific_month_end[2M-all_leap-[(2,",
                            "xarray/tests/test_cftime_offsets.py::test_calendar_specific_month_end[2M-360_day-[(2,",
                            "xarray/tests/test_cftime_offsets.py::test_calendar_specific_month_end[2M-standard-[(2,",
                            "xarray/tests/test_cftime_offsets.py::test_calendar_specific_month_end[2M-gregorian-[(2,",
                            "xarray/tests/test_cftime_offsets.py::test_calendar_specific_month_end[2M-julian-[(2,",
                            "xarray/tests/test_cftime_offsets.py::test_calendar_year_length[noleap-2000-2001-365]",
                            "xarray/tests/test_cftime_offsets.py::test_calendar_year_length[all_leap-2000-2001-366]",
                            "xarray/tests/test_cftime_offsets.py::test_calendar_year_length[360_day-2000-2001-360]",
                            "xarray/tests/test_cftime_offsets.py::test_calendar_year_length[standard-2000-2001-366]",
                            "xarray/tests/test_cftime_offsets.py::test_calendar_year_length[gregorian-2000-2001-366]",
                            "xarray/tests/test_cftime_offsets.py::test_calendar_year_length[julian-2000-2001-366]",
                            "xarray/tests/test_cftime_offsets.py::test_calendar_year_length[noleap-2001-2002-365]",
                            "xarray/tests/test_cftime_offsets.py::test_calendar_year_length[all_leap-2001-2002-366]",
                            "xarray/tests/test_cftime_offsets.py::test_calendar_year_length[360_day-2001-2002-360]",
                            "xarray/tests/test_cftime_offsets.py::test_calendar_year_length[standard-2001-2002-365]",
                            "xarray/tests/test_cftime_offsets.py::test_calendar_year_length[gregorian-2001-2002-365]",
                            "xarray/tests/test_cftime_offsets.py::test_calendar_year_length[julian-2001-2002-365]",
                            "xarray/tests/test_cftime_offsets.py::test_dayofweek_after_cftime_range[A]",
                            "xarray/tests/test_cftime_offsets.py::test_dayofweek_after_cftime_range[M]",
                            "xarray/tests/test_cftime_offsets.py::test_dayofweek_after_cftime_range[D]",
                            "xarray/tests/test_cftime_offsets.py::test_dayofyear_after_cftime_range[A]",
                            "xarray/tests/test_cftime_offsets.py::test_dayofyear_after_cftime_range[M]",
                            "xarray/tests/test_cftime_offsets.py::test_dayofyear_after_cftime_range[D]",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range_standard_calendar_refers_to_gregorian",
                            "xarray/tests/test_cftime_offsets.py::test_date_range[1990-01-01-standard-None-DatetimeIndex]",
                            "xarray/tests/test_cftime_offsets.py::test_date_range[1990-01-01-proleptic_gregorian-True-CFTimeIndex]",
                            "xarray/tests/test_cftime_offsets.py::test_date_range[1990-01-01-noleap-None-CFTimeIndex]",
                            "xarray/tests/test_cftime_offsets.py::test_date_range[1990-01-01-gregorian-False-DatetimeIndex]",
                            "xarray/tests/test_cftime_offsets.py::test_date_range[1400-01-01-standard-None-CFTimeIndex]",
                            "xarray/tests/test_cftime_offsets.py::test_date_range[3400-01-01-standard-None-CFTimeIndex]",
                            "xarray/tests/test_cftime_offsets.py::test_date_range_errors",
                            "xarray/tests/test_cftime_offsets.py::test_date_range_like[2020-02-01-4M-standard-noleap-None-2020-02-28-False]",
                            "xarray/tests/test_cftime_offsets.py::test_date_range_like[2020-02-01-M-noleap-gregorian-True-2020-02-29-True]",
                            "xarray/tests/test_cftime_offsets.py::test_date_range_like[2020-02-28-3H-all_leap-gregorian-False-2020-02-28-True]",
                            "xarray/tests/test_cftime_offsets.py::test_date_range_like[2020-03-30-M-360_day-gregorian-False-2020-03-31-True]",
                            "xarray/tests/test_cftime_offsets.py::test_date_range_like[2020-03-31-M-gregorian-360_day-None-2020-03-30-False]",
                            "xarray/tests/test_cftime_offsets.py::test_date_range_like_same_calendar",
                            "xarray/tests/test_cftime_offsets.py::test_date_range_like_errors",
                            "xarray/tests/test_cftimeindex.py::test_constructor_with_name[365_day-bar-bar]",
                            "xarray/tests/test_cftimeindex.py::test_constructor_with_name[365_day-None-foo]",
                            "xarray/tests/test_cftimeindex.py::test_constructor_with_name[360_day-bar-bar]",
                            "xarray/tests/test_cftimeindex.py::test_constructor_with_name[360_day-None-foo]",
                            "xarray/tests/test_cftimeindex.py::test_constructor_with_name[julian-bar-bar]",
                            "xarray/tests/test_cftimeindex.py::test_constructor_with_name[julian-None-foo]",
                            "xarray/tests/test_cftimeindex.py::test_constructor_with_name[all_leap-bar-bar]",
                            "xarray/tests/test_cftimeindex.py::test_constructor_with_name[all_leap-None-foo]",
                            "xarray/tests/test_cftimeindex.py::test_constructor_with_name[366_day-bar-bar]",
                            "xarray/tests/test_cftimeindex.py::test_constructor_with_name[366_day-None-foo]",
                            "xarray/tests/test_cftimeindex.py::test_constructor_with_name[gregorian-bar-bar]",
                            "xarray/tests/test_cftimeindex.py::test_constructor_with_name[gregorian-None-foo]",
                            "xarray/tests/test_cftimeindex.py::test_constructor_with_name[proleptic_gregorian-bar-bar]",
                            "xarray/tests/test_cftimeindex.py::test_constructor_with_name[proleptic_gregorian-None-foo]",
                            "xarray/tests/test_cftimeindex.py::test_assert_all_valid_date_type[365_day]",
                            "xarray/tests/test_cftimeindex.py::test_assert_all_valid_date_type[360_day]",
                            "xarray/tests/test_cftimeindex.py::test_assert_all_valid_date_type[julian]",
                            "xarray/tests/test_cftimeindex.py::test_assert_all_valid_date_type[all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_assert_all_valid_date_type[366_day]",
                            "xarray/tests/test_cftimeindex.py::test_assert_all_valid_date_type[gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_assert_all_valid_date_type[proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[365_day-year-expected0]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[365_day-month-expected1]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[365_day-day-expected2]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[365_day-hour-expected3]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[365_day-minute-expected4]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[365_day-second-expected5]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[365_day-microsecond-expected6]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[360_day-year-expected0]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[360_day-month-expected1]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[360_day-day-expected2]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[360_day-hour-expected3]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[360_day-minute-expected4]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[360_day-second-expected5]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[360_day-microsecond-expected6]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[julian-year-expected0]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[julian-month-expected1]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[julian-day-expected2]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[julian-hour-expected3]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[julian-minute-expected4]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[julian-second-expected5]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[julian-microsecond-expected6]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[all_leap-year-expected0]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[all_leap-month-expected1]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[all_leap-day-expected2]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[all_leap-hour-expected3]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[all_leap-minute-expected4]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[all_leap-second-expected5]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[all_leap-microsecond-expected6]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[366_day-year-expected0]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[366_day-month-expected1]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[366_day-day-expected2]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[366_day-hour-expected3]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[366_day-minute-expected4]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[366_day-second-expected5]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[366_day-microsecond-expected6]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[gregorian-year-expected0]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[gregorian-month-expected1]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[gregorian-day-expected2]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[gregorian-hour-expected3]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[gregorian-minute-expected4]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[gregorian-second-expected5]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[gregorian-microsecond-expected6]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[proleptic_gregorian-year-expected0]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[proleptic_gregorian-month-expected1]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[proleptic_gregorian-day-expected2]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[proleptic_gregorian-hour-expected3]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[proleptic_gregorian-minute-expected4]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[proleptic_gregorian-second-expected5]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_field_accessors[proleptic_gregorian-microsecond-expected6]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_dayofyear_accessor[365_day]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_dayofyear_accessor[360_day]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_dayofyear_accessor[julian]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_dayofyear_accessor[all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_dayofyear_accessor[366_day]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_dayofyear_accessor[gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_dayofyear_accessor[proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_dayofweek_accessor[365_day]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_dayofweek_accessor[360_day]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_dayofweek_accessor[julian]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_dayofweek_accessor[all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_dayofweek_accessor[366_day]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_dayofweek_accessor[gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_dayofweek_accessor[proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_days_in_month_accessor[365_day]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_days_in_month_accessor[360_day]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_days_in_month_accessor[julian]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_days_in_month_accessor[all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_days_in_month_accessor[366_day]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_days_in_month_accessor[gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_days_in_month_accessor[proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_with_reso[365_day-1999-date_args0-year]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_with_reso[365_day-199902-date_args1-month]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_with_reso[365_day-19990202-date_args2-day]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_with_reso[365_day-19990202T01-date_args3-hour]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_with_reso[365_day-19990202T0101-date_args4-minute]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_with_reso[365_day-19990202T010156-date_args5-second]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_with_reso[360_day-1999-date_args0-year]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_with_reso[360_day-199902-date_args1-month]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_with_reso[360_day-19990202-date_args2-day]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_with_reso[360_day-19990202T01-date_args3-hour]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_with_reso[360_day-19990202T0101-date_args4-minute]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_with_reso[360_day-19990202T010156-date_args5-second]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_with_reso[julian-1999-date_args0-year]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_with_reso[julian-199902-date_args1-month]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_with_reso[julian-19990202-date_args2-day]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_with_reso[julian-19990202T01-date_args3-hour]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_with_reso[julian-19990202T0101-date_args4-minute]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_with_reso[julian-19990202T010156-date_args5-second]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_with_reso[all_leap-1999-date_args0-year]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_with_reso[all_leap-199902-date_args1-month]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_with_reso[all_leap-19990202-date_args2-day]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_with_reso[all_leap-19990202T01-date_args3-hour]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_with_reso[all_leap-19990202T0101-date_args4-minute]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_with_reso[all_leap-19990202T010156-date_args5-second]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_with_reso[366_day-1999-date_args0-year]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_with_reso[366_day-199902-date_args1-month]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_with_reso[366_day-19990202-date_args2-day]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_with_reso[366_day-19990202T01-date_args3-hour]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_with_reso[366_day-19990202T0101-date_args4-minute]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_with_reso[366_day-19990202T010156-date_args5-second]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_with_reso[gregorian-1999-date_args0-year]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_with_reso[gregorian-199902-date_args1-month]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_with_reso[gregorian-19990202-date_args2-day]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_with_reso[gregorian-19990202T01-date_args3-hour]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_with_reso[gregorian-19990202T0101-date_args4-minute]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_with_reso[gregorian-19990202T010156-date_args5-second]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_with_reso[proleptic_gregorian-1999-date_args0-year]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_with_reso[proleptic_gregorian-199902-date_args1-month]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_with_reso[proleptic_gregorian-19990202-date_args2-day]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_with_reso[proleptic_gregorian-19990202T01-date_args3-hour]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_with_reso[proleptic_gregorian-19990202T0101-date_args4-minute]",
                            "xarray/tests/test_cftimeindex.py::test_parse_iso8601_with_reso[proleptic_gregorian-19990202T010156-date_args5-second]",
                            "xarray/tests/test_cftimeindex.py::test_parse_string_to_bounds_year[365_day]",
                            "xarray/tests/test_cftimeindex.py::test_parse_string_to_bounds_year[360_day]",
                            "xarray/tests/test_cftimeindex.py::test_parse_string_to_bounds_year[julian]",
                            "xarray/tests/test_cftimeindex.py::test_parse_string_to_bounds_year[all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_parse_string_to_bounds_year[366_day]",
                            "xarray/tests/test_cftimeindex.py::test_parse_string_to_bounds_year[gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_parse_string_to_bounds_year[proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_parse_string_to_bounds_month_feb[365_day]",
                            "xarray/tests/test_cftimeindex.py::test_parse_string_to_bounds_month_feb[360_day]",
                            "xarray/tests/test_cftimeindex.py::test_parse_string_to_bounds_month_feb[julian]",
                            "xarray/tests/test_cftimeindex.py::test_parse_string_to_bounds_month_feb[all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_parse_string_to_bounds_month_feb[366_day]",
                            "xarray/tests/test_cftimeindex.py::test_parse_string_to_bounds_month_feb[gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_parse_string_to_bounds_month_feb[proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_parse_string_to_bounds_month_dec[365_day]",
                            "xarray/tests/test_cftimeindex.py::test_parse_string_to_bounds_month_dec[360_day]",
                            "xarray/tests/test_cftimeindex.py::test_parse_string_to_bounds_month_dec[julian]",
                            "xarray/tests/test_cftimeindex.py::test_parse_string_to_bounds_month_dec[all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_parse_string_to_bounds_month_dec[366_day]",
                            "xarray/tests/test_cftimeindex.py::test_parse_string_to_bounds_month_dec[gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_parse_string_to_bounds_month_dec[proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_parsed_string_to_bounds_sub_monthly[365_day-day-ex_start_args0-ex_end_args0]",
                            "xarray/tests/test_cftimeindex.py::test_parsed_string_to_bounds_sub_monthly[365_day-hour-ex_start_args1-ex_end_args1]",
                            "xarray/tests/test_cftimeindex.py::test_parsed_string_to_bounds_sub_monthly[365_day-minute-ex_start_args2-ex_end_args2]",
                            "xarray/tests/test_cftimeindex.py::test_parsed_string_to_bounds_sub_monthly[365_day-second-ex_start_args3-ex_end_args3]",
                            "xarray/tests/test_cftimeindex.py::test_parsed_string_to_bounds_sub_monthly[360_day-day-ex_start_args0-ex_end_args0]",
                            "xarray/tests/test_cftimeindex.py::test_parsed_string_to_bounds_sub_monthly[360_day-hour-ex_start_args1-ex_end_args1]",
                            "xarray/tests/test_cftimeindex.py::test_parsed_string_to_bounds_sub_monthly[360_day-minute-ex_start_args2-ex_end_args2]",
                            "xarray/tests/test_cftimeindex.py::test_parsed_string_to_bounds_sub_monthly[360_day-second-ex_start_args3-ex_end_args3]",
                            "xarray/tests/test_cftimeindex.py::test_parsed_string_to_bounds_sub_monthly[julian-day-ex_start_args0-ex_end_args0]",
                            "xarray/tests/test_cftimeindex.py::test_parsed_string_to_bounds_sub_monthly[julian-hour-ex_start_args1-ex_end_args1]",
                            "xarray/tests/test_cftimeindex.py::test_parsed_string_to_bounds_sub_monthly[julian-minute-ex_start_args2-ex_end_args2]",
                            "xarray/tests/test_cftimeindex.py::test_parsed_string_to_bounds_sub_monthly[julian-second-ex_start_args3-ex_end_args3]",
                            "xarray/tests/test_cftimeindex.py::test_parsed_string_to_bounds_sub_monthly[all_leap-day-ex_start_args0-ex_end_args0]",
                            "xarray/tests/test_cftimeindex.py::test_parsed_string_to_bounds_sub_monthly[all_leap-hour-ex_start_args1-ex_end_args1]",
                            "xarray/tests/test_cftimeindex.py::test_parsed_string_to_bounds_sub_monthly[all_leap-minute-ex_start_args2-ex_end_args2]",
                            "xarray/tests/test_cftimeindex.py::test_parsed_string_to_bounds_sub_monthly[all_leap-second-ex_start_args3-ex_end_args3]",
                            "xarray/tests/test_cftimeindex.py::test_parsed_string_to_bounds_sub_monthly[366_day-day-ex_start_args0-ex_end_args0]",
                            "xarray/tests/test_cftimeindex.py::test_parsed_string_to_bounds_sub_monthly[366_day-hour-ex_start_args1-ex_end_args1]",
                            "xarray/tests/test_cftimeindex.py::test_parsed_string_to_bounds_sub_monthly[366_day-minute-ex_start_args2-ex_end_args2]",
                            "xarray/tests/test_cftimeindex.py::test_parsed_string_to_bounds_sub_monthly[366_day-second-ex_start_args3-ex_end_args3]",
                            "xarray/tests/test_cftimeindex.py::test_parsed_string_to_bounds_sub_monthly[gregorian-day-ex_start_args0-ex_end_args0]",
                            "xarray/tests/test_cftimeindex.py::test_parsed_string_to_bounds_sub_monthly[gregorian-hour-ex_start_args1-ex_end_args1]",
                            "xarray/tests/test_cftimeindex.py::test_parsed_string_to_bounds_sub_monthly[gregorian-minute-ex_start_args2-ex_end_args2]",
                            "xarray/tests/test_cftimeindex.py::test_parsed_string_to_bounds_sub_monthly[gregorian-second-ex_start_args3-ex_end_args3]",
                            "xarray/tests/test_cftimeindex.py::test_parsed_string_to_bounds_sub_monthly[proleptic_gregorian-day-ex_start_args0-ex_end_args0]",
                            "xarray/tests/test_cftimeindex.py::test_parsed_string_to_bounds_sub_monthly[proleptic_gregorian-hour-ex_start_args1-ex_end_args1]",
                            "xarray/tests/test_cftimeindex.py::test_parsed_string_to_bounds_sub_monthly[proleptic_gregorian-minute-ex_start_args2-ex_end_args2]",
                            "xarray/tests/test_cftimeindex.py::test_parsed_string_to_bounds_sub_monthly[proleptic_gregorian-second-ex_start_args3-ex_end_args3]",
                            "xarray/tests/test_cftimeindex.py::test_parsed_string_to_bounds_raises[365_day]",
                            "xarray/tests/test_cftimeindex.py::test_parsed_string_to_bounds_raises[360_day]",
                            "xarray/tests/test_cftimeindex.py::test_parsed_string_to_bounds_raises[julian]",
                            "xarray/tests/test_cftimeindex.py::test_parsed_string_to_bounds_raises[all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_parsed_string_to_bounds_raises[366_day]",
                            "xarray/tests/test_cftimeindex.py::test_parsed_string_to_bounds_raises[gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_parsed_string_to_bounds_raises[proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_get_loc[365_day]",
                            "xarray/tests/test_cftimeindex.py::test_get_loc[360_day]",
                            "xarray/tests/test_cftimeindex.py::test_get_loc[julian]",
                            "xarray/tests/test_cftimeindex.py::test_get_loc[all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_get_loc[366_day]",
                            "xarray/tests/test_cftimeindex.py::test_get_loc[gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_get_loc[proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_get_slice_bound[365_day]",
                            "xarray/tests/test_cftimeindex.py::test_get_slice_bound[360_day]",
                            "xarray/tests/test_cftimeindex.py::test_get_slice_bound[julian]",
                            "xarray/tests/test_cftimeindex.py::test_get_slice_bound[all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_get_slice_bound[366_day]",
                            "xarray/tests/test_cftimeindex.py::test_get_slice_bound[gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_get_slice_bound[proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_get_slice_bound_decreasing_index[365_day]",
                            "xarray/tests/test_cftimeindex.py::test_get_slice_bound_decreasing_index[360_day]",
                            "xarray/tests/test_cftimeindex.py::test_get_slice_bound_decreasing_index[julian]",
                            "xarray/tests/test_cftimeindex.py::test_get_slice_bound_decreasing_index[all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_get_slice_bound_decreasing_index[366_day]",
                            "xarray/tests/test_cftimeindex.py::test_get_slice_bound_decreasing_index[gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_get_slice_bound_decreasing_index[proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_get_slice_bound_length_one_index[365_day]",
                            "xarray/tests/test_cftimeindex.py::test_get_slice_bound_length_one_index[360_day]",
                            "xarray/tests/test_cftimeindex.py::test_get_slice_bound_length_one_index[julian]",
                            "xarray/tests/test_cftimeindex.py::test_get_slice_bound_length_one_index[all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_get_slice_bound_length_one_index[366_day]",
                            "xarray/tests/test_cftimeindex.py::test_get_slice_bound_length_one_index[gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_get_slice_bound_length_one_index[proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_string_slice_length_one_index[365_day]",
                            "xarray/tests/test_cftimeindex.py::test_string_slice_length_one_index[360_day]",
                            "xarray/tests/test_cftimeindex.py::test_string_slice_length_one_index[julian]",
                            "xarray/tests/test_cftimeindex.py::test_string_slice_length_one_index[all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_string_slice_length_one_index[366_day]",
                            "xarray/tests/test_cftimeindex.py::test_string_slice_length_one_index[gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_string_slice_length_one_index[proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_date_type_property[365_day]",
                            "xarray/tests/test_cftimeindex.py::test_date_type_property[360_day]",
                            "xarray/tests/test_cftimeindex.py::test_date_type_property[julian]",
                            "xarray/tests/test_cftimeindex.py::test_date_type_property[all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_date_type_property[366_day]",
                            "xarray/tests/test_cftimeindex.py::test_date_type_property[gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_date_type_property[proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_contains[365_day]",
                            "xarray/tests/test_cftimeindex.py::test_contains[360_day]",
                            "xarray/tests/test_cftimeindex.py::test_contains[julian]",
                            "xarray/tests/test_cftimeindex.py::test_contains[all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_contains[366_day]",
                            "xarray/tests/test_cftimeindex.py::test_contains[gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_contains[proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_groupby[365_day]",
                            "xarray/tests/test_cftimeindex.py::test_groupby[360_day]",
                            "xarray/tests/test_cftimeindex.py::test_groupby[julian]",
                            "xarray/tests/test_cftimeindex.py::test_groupby[all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_groupby[366_day]",
                            "xarray/tests/test_cftimeindex.py::test_groupby[gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_groupby[proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_sel_string_or_list[365_day-string]",
                            "xarray/tests/test_cftimeindex.py::test_sel_string_or_list[365_day-string-slice]",
                            "xarray/tests/test_cftimeindex.py::test_sel_string_or_list[365_day-bool-list]",
                            "xarray/tests/test_cftimeindex.py::test_sel_string_or_list[360_day-string]",
                            "xarray/tests/test_cftimeindex.py::test_sel_string_or_list[360_day-string-slice]",
                            "xarray/tests/test_cftimeindex.py::test_sel_string_or_list[360_day-bool-list]",
                            "xarray/tests/test_cftimeindex.py::test_sel_string_or_list[julian-string]",
                            "xarray/tests/test_cftimeindex.py::test_sel_string_or_list[julian-string-slice]",
                            "xarray/tests/test_cftimeindex.py::test_sel_string_or_list[julian-bool-list]",
                            "xarray/tests/test_cftimeindex.py::test_sel_string_or_list[all_leap-string]",
                            "xarray/tests/test_cftimeindex.py::test_sel_string_or_list[all_leap-string-slice]",
                            "xarray/tests/test_cftimeindex.py::test_sel_string_or_list[all_leap-bool-list]",
                            "xarray/tests/test_cftimeindex.py::test_sel_string_or_list[366_day-string]",
                            "xarray/tests/test_cftimeindex.py::test_sel_string_or_list[366_day-string-slice]",
                            "xarray/tests/test_cftimeindex.py::test_sel_string_or_list[366_day-bool-list]",
                            "xarray/tests/test_cftimeindex.py::test_sel_string_or_list[gregorian-string]",
                            "xarray/tests/test_cftimeindex.py::test_sel_string_or_list[gregorian-string-slice]",
                            "xarray/tests/test_cftimeindex.py::test_sel_string_or_list[gregorian-bool-list]",
                            "xarray/tests/test_cftimeindex.py::test_sel_string_or_list[proleptic_gregorian-string]",
                            "xarray/tests/test_cftimeindex.py::test_sel_string_or_list[proleptic_gregorian-string-slice]",
                            "xarray/tests/test_cftimeindex.py::test_sel_string_or_list[proleptic_gregorian-bool-list]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_slice_or_list[365_day]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_slice_or_list[360_day]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_slice_or_list[julian]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_slice_or_list[all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_slice_or_list[366_day]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_slice_or_list[gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_slice_or_list[proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar[365_day]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar[360_day]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar[julian]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar[all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar[366_day]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar[gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar[proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_distant_date[365_day]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_distant_date[360_day]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_distant_date[julian]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_distant_date[all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_distant_date[366_day]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_distant_date[gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_distant_date[proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_nearest[365_day-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_nearest[365_day-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_nearest[365_day-sel_kwargs2]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_nearest[360_day-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_nearest[360_day-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_nearest[360_day-sel_kwargs2]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_nearest[julian-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_nearest[julian-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_nearest[julian-sel_kwargs2]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_nearest[all_leap-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_nearest[all_leap-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_nearest[all_leap-sel_kwargs2]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_nearest[366_day-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_nearest[366_day-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_nearest[366_day-sel_kwargs2]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_nearest[gregorian-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_nearest[gregorian-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_nearest[gregorian-sel_kwargs2]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_nearest[proleptic_gregorian-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_nearest[proleptic_gregorian-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_nearest[proleptic_gregorian-sel_kwargs2]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_pad[365_day-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_pad[365_day-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_pad[360_day-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_pad[360_day-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_pad[julian-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_pad[julian-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_pad[all_leap-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_pad[all_leap-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_pad[366_day-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_pad[366_day-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_pad[gregorian-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_pad[gregorian-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_pad[proleptic_gregorian-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_pad[proleptic_gregorian-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_backfill[365_day-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_backfill[365_day-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_backfill[360_day-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_backfill[360_day-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_backfill[julian-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_backfill[julian-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_backfill[all_leap-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_backfill[all_leap-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_backfill[366_day-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_backfill[366_day-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_backfill[gregorian-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_backfill[gregorian-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_backfill[proleptic_gregorian-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_backfill[proleptic_gregorian-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_tolerance_raises[365_day-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_tolerance_raises[365_day-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_tolerance_raises[365_day-sel_kwargs2]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_tolerance_raises[360_day-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_tolerance_raises[360_day-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_tolerance_raises[360_day-sel_kwargs2]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_tolerance_raises[julian-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_tolerance_raises[julian-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_tolerance_raises[julian-sel_kwargs2]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_tolerance_raises[all_leap-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_tolerance_raises[all_leap-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_tolerance_raises[all_leap-sel_kwargs2]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_tolerance_raises[366_day-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_tolerance_raises[366_day-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_tolerance_raises[366_day-sel_kwargs2]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_tolerance_raises[gregorian-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_tolerance_raises[gregorian-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_tolerance_raises[gregorian-sel_kwargs2]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_tolerance_raises[proleptic_gregorian-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_tolerance_raises[proleptic_gregorian-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_scalar_tolerance_raises[proleptic_gregorian-sel_kwargs2]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_nearest[365_day-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_nearest[365_day-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_nearest[360_day-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_nearest[360_day-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_nearest[julian-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_nearest[julian-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_nearest[all_leap-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_nearest[all_leap-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_nearest[366_day-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_nearest[366_day-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_nearest[gregorian-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_nearest[gregorian-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_nearest[proleptic_gregorian-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_nearest[proleptic_gregorian-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_pad[365_day-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_pad[365_day-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_pad[360_day-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_pad[360_day-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_pad[julian-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_pad[julian-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_pad[all_leap-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_pad[all_leap-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_pad[366_day-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_pad[366_day-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_pad[gregorian-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_pad[gregorian-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_pad[proleptic_gregorian-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_pad[proleptic_gregorian-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_backfill[365_day-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_backfill[365_day-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_backfill[360_day-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_backfill[360_day-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_backfill[julian-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_backfill[julian-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_backfill[all_leap-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_backfill[all_leap-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_backfill[366_day-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_backfill[366_day-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_backfill[gregorian-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_backfill[gregorian-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_backfill[proleptic_gregorian-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_backfill[proleptic_gregorian-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_tolerance_raises[365_day-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_tolerance_raises[365_day-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_tolerance_raises[365_day-sel_kwargs2]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_tolerance_raises[360_day-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_tolerance_raises[360_day-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_tolerance_raises[360_day-sel_kwargs2]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_tolerance_raises[julian-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_tolerance_raises[julian-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_tolerance_raises[julian-sel_kwargs2]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_tolerance_raises[all_leap-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_tolerance_raises[all_leap-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_tolerance_raises[all_leap-sel_kwargs2]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_tolerance_raises[366_day-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_tolerance_raises[366_day-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_tolerance_raises[366_day-sel_kwargs2]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_tolerance_raises[gregorian-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_tolerance_raises[gregorian-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_tolerance_raises[gregorian-sel_kwargs2]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_tolerance_raises[proleptic_gregorian-sel_kwargs0]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_tolerance_raises[proleptic_gregorian-sel_kwargs1]",
                            "xarray/tests/test_cftimeindex.py::test_sel_date_list_tolerance_raises[proleptic_gregorian-sel_kwargs2]",
                            "xarray/tests/test_cftimeindex.py::test_isel[365_day]",
                            "xarray/tests/test_cftimeindex.py::test_isel[360_day]",
                            "xarray/tests/test_cftimeindex.py::test_isel[julian]",
                            "xarray/tests/test_cftimeindex.py::test_isel[all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_isel[366_day]",
                            "xarray/tests/test_cftimeindex.py::test_isel[gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_isel[proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_indexing_in_series_getitem[365_day]",
                            "xarray/tests/test_cftimeindex.py::test_indexing_in_series_getitem[360_day]",
                            "xarray/tests/test_cftimeindex.py::test_indexing_in_series_getitem[julian]",
                            "xarray/tests/test_cftimeindex.py::test_indexing_in_series_getitem[all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_indexing_in_series_getitem[366_day]",
                            "xarray/tests/test_cftimeindex.py::test_indexing_in_series_getitem[gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_indexing_in_series_getitem[proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_indexing_in_series_loc[365_day]",
                            "xarray/tests/test_cftimeindex.py::test_indexing_in_series_loc[360_day]",
                            "xarray/tests/test_cftimeindex.py::test_indexing_in_series_loc[julian]",
                            "xarray/tests/test_cftimeindex.py::test_indexing_in_series_loc[all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_indexing_in_series_loc[366_day]",
                            "xarray/tests/test_cftimeindex.py::test_indexing_in_series_loc[gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_indexing_in_series_loc[proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_indexing_in_series_iloc[365_day]",
                            "xarray/tests/test_cftimeindex.py::test_indexing_in_series_iloc[360_day]",
                            "xarray/tests/test_cftimeindex.py::test_indexing_in_series_iloc[julian]",
                            "xarray/tests/test_cftimeindex.py::test_indexing_in_series_iloc[all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_indexing_in_series_iloc[366_day]",
                            "xarray/tests/test_cftimeindex.py::test_indexing_in_series_iloc[gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_indexing_in_series_iloc[proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_series_dropna[365_day]",
                            "xarray/tests/test_cftimeindex.py::test_series_dropna[360_day]",
                            "xarray/tests/test_cftimeindex.py::test_series_dropna[julian]",
                            "xarray/tests/test_cftimeindex.py::test_series_dropna[all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_series_dropna[366_day]",
                            "xarray/tests/test_cftimeindex.py::test_series_dropna[gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_series_dropna[proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_indexing_in_dataframe_loc[365_day]",
                            "xarray/tests/test_cftimeindex.py::test_indexing_in_dataframe_loc[360_day]",
                            "xarray/tests/test_cftimeindex.py::test_indexing_in_dataframe_loc[julian]",
                            "xarray/tests/test_cftimeindex.py::test_indexing_in_dataframe_loc[all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_indexing_in_dataframe_loc[366_day]",
                            "xarray/tests/test_cftimeindex.py::test_indexing_in_dataframe_loc[gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_indexing_in_dataframe_loc[proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_indexing_in_dataframe_iloc[365_day]",
                            "xarray/tests/test_cftimeindex.py::test_indexing_in_dataframe_iloc[360_day]",
                            "xarray/tests/test_cftimeindex.py::test_indexing_in_dataframe_iloc[julian]",
                            "xarray/tests/test_cftimeindex.py::test_indexing_in_dataframe_iloc[all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_indexing_in_dataframe_iloc[366_day]",
                            "xarray/tests/test_cftimeindex.py::test_indexing_in_dataframe_iloc[gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_indexing_in_dataframe_iloc[proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_concat_cftimeindex[365_day]",
                            "xarray/tests/test_cftimeindex.py::test_concat_cftimeindex[360_day]",
                            "xarray/tests/test_cftimeindex.py::test_concat_cftimeindex[julian]",
                            "xarray/tests/test_cftimeindex.py::test_concat_cftimeindex[all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_concat_cftimeindex[366_day]",
                            "xarray/tests/test_cftimeindex.py::test_concat_cftimeindex[gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_concat_cftimeindex[proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_empty_cftimeindex",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_add[365_day]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_add[360_day]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_add[julian]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_add[all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_add[366_day]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_add[gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_add[proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_add_timedeltaindex[365_day]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_add_timedeltaindex[360_day]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_add_timedeltaindex[julian]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_add_timedeltaindex[all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_add_timedeltaindex[366_day]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_add_timedeltaindex[gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_add_timedeltaindex[proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[365_day-D-D-2.0]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[365_day-D-D-1.5]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[365_day-H-H-2.0]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[365_day-H-H-1.5]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[365_day-T-min-2.0]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[365_day-T-min-1.5]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[365_day-S-S-2.0]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[365_day-S-S-1.5]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[365_day-L-ms-2.0]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[365_day-L-ms-1.5]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[360_day-D-D-2.0]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[360_day-D-D-1.5]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[360_day-H-H-2.0]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[360_day-H-H-1.5]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[360_day-T-min-2.0]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[360_day-T-min-1.5]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[360_day-S-S-2.0]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[360_day-S-S-1.5]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[360_day-L-ms-2.0]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[360_day-L-ms-1.5]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[julian-D-D-2.0]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[julian-D-D-1.5]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[julian-H-H-2.0]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[julian-H-H-1.5]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[julian-T-min-2.0]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[julian-T-min-1.5]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[julian-S-S-2.0]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[julian-S-S-1.5]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[julian-L-ms-2.0]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[julian-L-ms-1.5]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[all_leap-D-D-2.0]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[all_leap-D-D-1.5]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[all_leap-H-H-2.0]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[all_leap-H-H-1.5]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[all_leap-T-min-2.0]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[all_leap-T-min-1.5]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[all_leap-S-S-2.0]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[all_leap-S-S-1.5]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[all_leap-L-ms-2.0]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[all_leap-L-ms-1.5]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[366_day-D-D-2.0]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[366_day-D-D-1.5]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[366_day-H-H-2.0]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[366_day-H-H-1.5]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[366_day-T-min-2.0]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[366_day-T-min-1.5]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[366_day-S-S-2.0]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[366_day-S-S-1.5]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[366_day-L-ms-2.0]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[366_day-L-ms-1.5]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[gregorian-D-D-2.0]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[gregorian-D-D-1.5]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[gregorian-H-H-2.0]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[gregorian-H-H-1.5]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[gregorian-T-min-2.0]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[gregorian-T-min-1.5]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[gregorian-S-S-2.0]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[gregorian-S-S-1.5]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[gregorian-L-ms-2.0]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[gregorian-L-ms-1.5]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[proleptic_gregorian-D-D-2.0]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[proleptic_gregorian-D-D-1.5]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[proleptic_gregorian-H-H-2.0]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[proleptic_gregorian-H-H-1.5]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[proleptic_gregorian-T-min-2.0]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[proleptic_gregorian-T-min-1.5]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[proleptic_gregorian-S-S-2.0]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[proleptic_gregorian-S-S-1.5]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[proleptic_gregorian-L-ms-2.0]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float[proleptic_gregorian-L-ms-1.5]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float_us",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float_fails_for_non_tick_freqs[AS]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float_fails_for_non_tick_freqs[A]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float_fails_for_non_tick_freqs[YS]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float_fails_for_non_tick_freqs[Y]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float_fails_for_non_tick_freqs[QS]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float_fails_for_non_tick_freqs[Q]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float_fails_for_non_tick_freqs[MS]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_float_fails_for_non_tick_freqs[M]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_radd[365_day]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_radd[360_day]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_radd[julian]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_radd[all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_radd[366_day]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_radd[gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_radd[proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_timedeltaindex_add_cftimeindex[365_day]",
                            "xarray/tests/test_cftimeindex.py::test_timedeltaindex_add_cftimeindex[360_day]",
                            "xarray/tests/test_cftimeindex.py::test_timedeltaindex_add_cftimeindex[julian]",
                            "xarray/tests/test_cftimeindex.py::test_timedeltaindex_add_cftimeindex[all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_timedeltaindex_add_cftimeindex[366_day]",
                            "xarray/tests/test_cftimeindex.py::test_timedeltaindex_add_cftimeindex[gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_timedeltaindex_add_cftimeindex[proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_timedelta[365_day]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_timedelta[360_day]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_timedelta[julian]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_timedelta[all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_timedelta[366_day]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_timedelta[gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_timedelta[proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_timedelta_array[365_day-1d-array]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_timedelta_array[365_day-scalar-array]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_timedelta_array[360_day-1d-array]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_timedelta_array[360_day-scalar-array]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_timedelta_array[julian-1d-array]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_timedelta_array[julian-scalar-array]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_timedelta_array[all_leap-1d-array]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_timedelta_array[all_leap-scalar-array]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_timedelta_array[366_day-1d-array]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_timedelta_array[366_day-scalar-array]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_timedelta_array[gregorian-1d-array]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_timedelta_array[gregorian-scalar-array]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_timedelta_array[proleptic_gregorian-1d-array]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_timedelta_array[proleptic_gregorian-scalar-array]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_cftimeindex[365_day]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_cftimeindex[360_day]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_cftimeindex[julian]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_cftimeindex[all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_cftimeindex[366_day]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_cftimeindex[gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_cftimeindex[proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_cftime_datetime[365_day]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_cftime_datetime[360_day]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_cftime_datetime[julian]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_cftime_datetime[all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_cftime_datetime[366_day]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_cftime_datetime[gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_cftime_datetime[proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_cftime_datetime_sub_cftimeindex[365_day]",
                            "xarray/tests/test_cftimeindex.py::test_cftime_datetime_sub_cftimeindex[360_day]",
                            "xarray/tests/test_cftimeindex.py::test_cftime_datetime_sub_cftimeindex[julian]",
                            "xarray/tests/test_cftimeindex.py::test_cftime_datetime_sub_cftimeindex[all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_cftime_datetime_sub_cftimeindex[366_day]",
                            "xarray/tests/test_cftimeindex.py::test_cftime_datetime_sub_cftimeindex[gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_cftime_datetime_sub_cftimeindex[proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_distant_cftime_datetime_sub_cftimeindex[365_day]",
                            "xarray/tests/test_cftimeindex.py::test_distant_cftime_datetime_sub_cftimeindex[360_day]",
                            "xarray/tests/test_cftimeindex.py::test_distant_cftime_datetime_sub_cftimeindex[julian]",
                            "xarray/tests/test_cftimeindex.py::test_distant_cftime_datetime_sub_cftimeindex[all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_distant_cftime_datetime_sub_cftimeindex[366_day]",
                            "xarray/tests/test_cftimeindex.py::test_distant_cftime_datetime_sub_cftimeindex[gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_distant_cftime_datetime_sub_cftimeindex[proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_timedeltaindex[365_day]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_timedeltaindex[360_day]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_timedeltaindex[julian]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_timedeltaindex[all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_timedeltaindex[366_day]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_timedeltaindex[gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_timedeltaindex[proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_index_of_cftime_datetimes[365_day]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_index_of_cftime_datetimes[360_day]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_index_of_cftime_datetimes[julian]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_index_of_cftime_datetimes[all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_index_of_cftime_datetimes[366_day]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_index_of_cftime_datetimes[gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_index_of_cftime_datetimes[proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_not_implemented[365_day]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_not_implemented[360_day]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_not_implemented[julian]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_not_implemented[all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_not_implemented[366_day]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_not_implemented[gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_sub_not_implemented[proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_rsub[365_day]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_rsub[360_day]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_rsub[julian]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_rsub[all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_rsub[366_day]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_rsub[gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_rsub[proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift[365_day-D]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift[365_day-freq1]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift[360_day-D]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift[360_day-freq1]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift[julian-D]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift[julian-freq1]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift[all_leap-D]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift[all_leap-freq1]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift[366_day-D]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift[366_day-freq1]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift[gregorian-D]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift[gregorian-freq1]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift[proleptic_gregorian-D]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift[proleptic_gregorian-freq1]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_invalid_n",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_shift_invalid_freq",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_calendar_property[noleap-noleap]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_calendar_property[365_day-noleap]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_calendar_property[360_day-360_day]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_calendar_property[julian-julian]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_calendar_property[gregorian-standard]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_calendar_property[standard-standard]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_calendar_property[proleptic_gregorian-proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_calendar_repr[noleap-noleap]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_calendar_repr[365_day-noleap]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_calendar_repr[360_day-360_day]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_calendar_repr[julian-julian]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_calendar_repr[gregorian-standard]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_calendar_repr[standard-standard]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_calendar_repr[proleptic_gregorian-proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_periods_repr[2]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_periods_repr[40]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_freq_in_repr[D-noleap]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_freq_in_repr[D-360_day]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_freq_in_repr[D-standard]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_freq_in_repr[H-noleap]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_freq_in_repr[H-360_day]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_freq_in_repr[H-standard]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_repr_formatting[2-CFTimeIndex([2000-01-01",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_repr_formatting[4-CFTimeIndex([2000-01-01",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_repr_formatting[101-CFTimeIndex([2000-01-01",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_repr_formatting_width[2-40]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_repr_formatting_width[2-80]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_repr_formatting_width[2-100]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_repr_formatting_width[3-40]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_repr_formatting_width[3-80]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_repr_formatting_width[3-100]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_repr_formatting_width[4-40]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_repr_formatting_width[4-80]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_repr_formatting_width[4-100]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_repr_formatting_width[100-40]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_repr_formatting_width[100-80]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_repr_formatting_width[100-100]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_repr_formatting_width[101-40]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_repr_formatting_width[101-80]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_repr_formatting_width[101-100]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_repr_101_shorter[22]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_repr_101_shorter[50]",
                            "xarray/tests/test_cftimeindex.py::test_cftimeindex_repr_101_shorter[100]",
                            "xarray/tests/test_cftimeindex.py::test_parse_array_of_cftime_strings",
                            "xarray/tests/test_cftimeindex.py::test_strftime_of_cftime_array[360_day]",
                            "xarray/tests/test_cftimeindex.py::test_strftime_of_cftime_array[365_day]",
                            "xarray/tests/test_cftimeindex.py::test_strftime_of_cftime_array[366_day]",
                            "xarray/tests/test_cftimeindex.py::test_strftime_of_cftime_array[all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_strftime_of_cftime_array[gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_strftime_of_cftime_array[julian]",
                            "xarray/tests/test_cftimeindex.py::test_strftime_of_cftime_array[noleap]",
                            "xarray/tests/test_cftimeindex.py::test_strftime_of_cftime_array[proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_strftime_of_cftime_array[standard]",
                            "xarray/tests/test_cftimeindex.py::test_to_datetimeindex[False-360_day]",
                            "xarray/tests/test_cftimeindex.py::test_to_datetimeindex[False-365_day]",
                            "xarray/tests/test_cftimeindex.py::test_to_datetimeindex[False-366_day]",
                            "xarray/tests/test_cftimeindex.py::test_to_datetimeindex[False-all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_to_datetimeindex[False-gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_to_datetimeindex[False-julian]",
                            "xarray/tests/test_cftimeindex.py::test_to_datetimeindex[False-noleap]",
                            "xarray/tests/test_cftimeindex.py::test_to_datetimeindex[False-proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_to_datetimeindex[False-standard]",
                            "xarray/tests/test_cftimeindex.py::test_to_datetimeindex[True-360_day]",
                            "xarray/tests/test_cftimeindex.py::test_to_datetimeindex[True-365_day]",
                            "xarray/tests/test_cftimeindex.py::test_to_datetimeindex[True-366_day]",
                            "xarray/tests/test_cftimeindex.py::test_to_datetimeindex[True-all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_to_datetimeindex[True-gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_to_datetimeindex[True-julian]",
                            "xarray/tests/test_cftimeindex.py::test_to_datetimeindex[True-noleap]",
                            "xarray/tests/test_cftimeindex.py::test_to_datetimeindex[True-proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_to_datetimeindex[True-standard]",
                            "xarray/tests/test_cftimeindex.py::test_to_datetimeindex_out_of_range[360_day]",
                            "xarray/tests/test_cftimeindex.py::test_to_datetimeindex_out_of_range[365_day]",
                            "xarray/tests/test_cftimeindex.py::test_to_datetimeindex_out_of_range[366_day]",
                            "xarray/tests/test_cftimeindex.py::test_to_datetimeindex_out_of_range[all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_to_datetimeindex_out_of_range[gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_to_datetimeindex_out_of_range[julian]",
                            "xarray/tests/test_cftimeindex.py::test_to_datetimeindex_out_of_range[noleap]",
                            "xarray/tests/test_cftimeindex.py::test_to_datetimeindex_out_of_range[proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_to_datetimeindex_out_of_range[standard]",
                            "xarray/tests/test_cftimeindex.py::test_to_datetimeindex_feb_29[all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_to_datetimeindex_feb_29[360_day]",
                            "xarray/tests/test_cftimeindex.py::test_rounding_methods_against_datetimeindex[floor-3663S]",
                            "xarray/tests/test_cftimeindex.py::test_rounding_methods_against_datetimeindex[floor-33T]",
                            "xarray/tests/test_cftimeindex.py::test_rounding_methods_against_datetimeindex[floor-2H]",
                            "xarray/tests/test_cftimeindex.py::test_rounding_methods_against_datetimeindex[ceil-3663S]",
                            "xarray/tests/test_cftimeindex.py::test_rounding_methods_against_datetimeindex[ceil-33T]",
                            "xarray/tests/test_cftimeindex.py::test_rounding_methods_against_datetimeindex[ceil-2H]",
                            "xarray/tests/test_cftimeindex.py::test_rounding_methods_against_datetimeindex[round-3663S]",
                            "xarray/tests/test_cftimeindex.py::test_rounding_methods_against_datetimeindex[round-33T]",
                            "xarray/tests/test_cftimeindex.py::test_rounding_methods_against_datetimeindex[round-2H]",
                            "xarray/tests/test_cftimeindex.py::test_rounding_methods_invalid_freq[floor]",
                            "xarray/tests/test_cftimeindex.py::test_rounding_methods_invalid_freq[ceil]",
                            "xarray/tests/test_cftimeindex.py::test_rounding_methods_invalid_freq[round]",
                            "xarray/tests/test_cftimeindex.py::test_ceil[365_day]",
                            "xarray/tests/test_cftimeindex.py::test_ceil[360_day]",
                            "xarray/tests/test_cftimeindex.py::test_ceil[julian]",
                            "xarray/tests/test_cftimeindex.py::test_ceil[all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_ceil[366_day]",
                            "xarray/tests/test_cftimeindex.py::test_ceil[gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_ceil[proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_floor[365_day]",
                            "xarray/tests/test_cftimeindex.py::test_floor[360_day]",
                            "xarray/tests/test_cftimeindex.py::test_floor[julian]",
                            "xarray/tests/test_cftimeindex.py::test_floor[all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_floor[366_day]",
                            "xarray/tests/test_cftimeindex.py::test_floor[gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_floor[proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_round[365_day]",
                            "xarray/tests/test_cftimeindex.py::test_round[360_day]",
                            "xarray/tests/test_cftimeindex.py::test_round[julian]",
                            "xarray/tests/test_cftimeindex.py::test_round[all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_round[366_day]",
                            "xarray/tests/test_cftimeindex.py::test_round[gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_round[proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_asi8[365_day]",
                            "xarray/tests/test_cftimeindex.py::test_asi8[360_day]",
                            "xarray/tests/test_cftimeindex.py::test_asi8[julian]",
                            "xarray/tests/test_cftimeindex.py::test_asi8[all_leap]",
                            "xarray/tests/test_cftimeindex.py::test_asi8[366_day]",
                            "xarray/tests/test_cftimeindex.py::test_asi8[gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_asi8[proleptic_gregorian]",
                            "xarray/tests/test_cftimeindex.py::test_asi8_distant_date",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq_valid_types",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq_invalid_inputs",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[365_day-300AS-JAN]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[365_day-A-DEC]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[365_day-AS-JUL]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[365_day-2AS-FEB]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[365_day-Q-NOV]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[365_day-3QS-DEC]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[365_day-MS]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[365_day-4M]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[365_day-7D]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[365_day-D]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[365_day-30H]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[365_day-5T]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[365_day-40S]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[360_day-300AS-JAN]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[360_day-A-DEC]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[360_day-AS-JUL]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[360_day-2AS-FEB]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[360_day-Q-NOV]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[360_day-3QS-DEC]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[360_day-MS]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[360_day-4M]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[360_day-7D]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[360_day-D]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[360_day-30H]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[360_day-5T]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[360_day-40S]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[julian-300AS-JAN]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[julian-A-DEC]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[julian-AS-JUL]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[julian-2AS-FEB]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[julian-Q-NOV]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[julian-3QS-DEC]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[julian-MS]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[julian-4M]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[julian-7D]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[julian-D]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[julian-30H]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[julian-5T]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[julian-40S]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[all_leap-300AS-JAN]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[all_leap-A-DEC]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[all_leap-AS-JUL]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[all_leap-2AS-FEB]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[all_leap-Q-NOV]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[all_leap-3QS-DEC]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[all_leap-MS]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[all_leap-4M]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[all_leap-7D]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[all_leap-D]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[all_leap-30H]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[all_leap-5T]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[all_leap-40S]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[366_day-300AS-JAN]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[366_day-A-DEC]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[366_day-AS-JUL]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[366_day-2AS-FEB]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[366_day-Q-NOV]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[366_day-3QS-DEC]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[366_day-MS]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[366_day-4M]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[366_day-7D]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[366_day-D]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[366_day-30H]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[366_day-5T]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[366_day-40S]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[gregorian-300AS-JAN]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[gregorian-A-DEC]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[gregorian-AS-JUL]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[gregorian-2AS-FEB]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[gregorian-Q-NOV]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[gregorian-3QS-DEC]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[gregorian-MS]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[gregorian-4M]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[gregorian-7D]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[gregorian-D]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[gregorian-30H]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[gregorian-5T]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[gregorian-40S]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[proleptic_gregorian-300AS-JAN]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[proleptic_gregorian-A-DEC]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[proleptic_gregorian-AS-JUL]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[proleptic_gregorian-2AS-FEB]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[proleptic_gregorian-Q-NOV]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[proleptic_gregorian-3QS-DEC]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[proleptic_gregorian-MS]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[proleptic_gregorian-4M]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[proleptic_gregorian-7D]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[proleptic_gregorian-D]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[proleptic_gregorian-30H]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[proleptic_gregorian-5T]",
                            "xarray/tests/test_cftimeindex.py::test_infer_freq[proleptic_gregorian-40S]"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "django__django-8961.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "test_program_name_in_help (admin_scripts.tests.MainModule)"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "test_testserver_handle_params (admin_scripts.tests.ManageTestserver)",
                            "test_no_database (admin_scripts.tests.ManageRunserver)",
                            "test_readonly_database (admin_scripts.tests.ManageRunserver)",
                            "test_runner_addrport_ipv6 (admin_scripts.tests.ManageRunserver)",
                            "test_runner_ambiguous (admin_scripts.tests.ManageRunserver)",
                            "test_runner_custom_defaults (admin_scripts.tests.ManageRunserver)",
                            "test_runner_custom_defaults_ipv6 (admin_scripts.tests.ManageRunserver)",
                            "test_runner_hostname (admin_scripts.tests.ManageRunserver)",
                            "test_runner_hostname_ipv6 (admin_scripts.tests.ManageRunserver)",
                            "test_runserver_addrport (admin_scripts.tests.ManageRunserver)",
                            "test_migration_warning_multiple_apps (admin_scripts.tests.ManageRunserverMigrationWarning)",
                            "test_migration_warning_one_app (admin_scripts.tests.ManageRunserverMigrationWarning)",
                            "test_precedence (admin_scripts.tests.Discovery)",
                            "test_runs_django_admin (admin_scripts.tests.MainModule)",
                            "no settings: manage.py builtin commands fail with an error when no settings provided",
                            "no settings: manage.py builtin commands fail if settings file (from environment) doesn't exist",
                            "no settings: manage.py builtin commands fail if settings file (from argument) doesn't exist",
                            "no settings: django-admin builtin commands fail with an error when no settings provided",
                            "no settings: django-admin builtin commands fail if settings file (from environment) doesn't exist",
                            "no settings: django-admin builtin commands fail if settings file (from argument) doesn't exist",
                            "test_attribute_error (admin_scripts.tests.ManageSettingsWithSettingsErrors)",
                            "test_help (admin_scripts.tests.ManageSettingsWithSettingsErrors)",
                            "test_import_error (admin_scripts.tests.ManageSettingsWithSettingsErrors)",
                            "test_key_error (admin_scripts.tests.ManageSettingsWithSettingsErrors)",
                            "test_importable_name (admin_scripts.tests.StartApp)",
                            "startapp validates that app name is a valid Python identifier.",
                            "Regression for #20509",
                            "test_empty_allowed_hosts_error (admin_scripts.tests.ManageRunserverEmptyAllowedHosts)",
                            "alternate: django-admin builtin commands fail with an error when no settings provided",
                            "alternate: django-admin builtin commands fail if settings file (from environment) doesn't exist",
                            "alternate: django-admin builtin commands fail if settings file (from argument) doesn't exist",
                            "alternate: django-admin builtin commands succeed if settings are provided in the environment",
                            "alternate: django-admin builtin commands succeed if settings are provided as argument",
                            "alternate: django-admin can't execute user commands unless settings are provided",
                            "alternate: django-admin can execute user commands if settings are provided in environment",
                            "alternate: django-admin can execute user commands if settings are provided as argument",
                            "default: django-admin builtin commands fail with an error when no settings provided",
                            "default: django-admin builtin commands fail if settings file (from environment) doesn't exist",
                            "default: django-admin builtin commands fail if settings file (from argument) doesn't exist",
                            "default: django-admin builtin commands succeed if settings are provided in the environment",
                            "default: django-admin builtin commands succeed if settings are provided as argument",
                            "default: django-admin can't execute user commands if it isn't provided settings",
                            "default: django-admin can execute user commands if settings are provided in environment",
                            "default: django-admin can execute user commands if settings are provided as argument",
                            "directory: django-admin builtin commands fail with an error when no settings provided",
                            "directory: django-admin builtin commands fail if settings file (from environment) doesn't exist",
                            "directory: django-admin builtin commands fail if settings file (from argument) doesn't exist",
                            "directory: django-admin builtin commands succeed if settings are provided in the environment",
                            "directory: django-admin builtin commands succeed if settings are provided as argument",
                            "directory: django-admin can't execute user commands unless settings are provided",
                            "directory: startapp creates the correct directory",
                            "directory: startapp creates the correct directory with a custom template",
                            "minimal: django-admin builtin commands fail with an error when no settings provided",
                            "minimal: django-admin builtin commands fail if settings file (from environment) doesn't exist",
                            "minimal: django-admin builtin commands fail if settings file (from argument) doesn't exist",
                            "minimal: django-admin builtin commands fail if settings are provided in the environment",
                            "minimal: django-admin builtin commands fail if settings are provided as argument",
                            "minimal: django-admin can't execute user commands unless settings are provided",
                            "minimal: django-admin can't execute user commands, even if settings are provided in environment",
                            "minimal: django-admin can't execute user commands, even if settings are provided as argument",
                            "fulldefault: django-admin builtin commands fail with an error when no settings provided",
                            "fulldefault: django-admin builtin commands fail if settings file (from environment) doesn't exist",
                            "fulldefault: django-admin builtin commands fail if settings file (from argument) doesn't exist",
                            "fulldefault: django-admin builtin commands succeed if the environment contains settings",
                            "fulldefault: django-admin builtin commands succeed if a settings file is provided",
                            "fulldefault: django-admin can't execute user commands unless settings are provided",
                            "fulldefault: django-admin can execute user commands if settings are provided in environment",
                            "fulldefault: django-admin can execute user commands if settings are provided as argument",
                            "Runs without error and emits settings diff.",
                            "test_custom_default (admin_scripts.tests.DiffSettings)",
                            "--output=unified emits settings diff in unified mode.",
                            "Options passed before settings are correctly handled.",
                            "Options are correctly handled when they are passed before and after",
                            "Options passed after settings are correctly handled.",
                            "Short options passed after settings are correctly handled.",
                            "Short options passed before settings are correctly handled.",
                            "alternate: manage.py builtin commands fail with an error when no default settings provided",
                            "alternate: manage.py builtin commands fail if settings file (from environment) doesn't exist",
                            "alternate: manage.py builtin commands fail if settings file (from argument) doesn't exist",
                            "alternate: manage.py builtin commands work if settings are provided in the environment",
                            "alternate: manage.py builtin commands work with settings provided as argument",
                            "alternate: manage.py can't execute user commands without settings",
                            "alternate: manage.py output syntax color can be deactivated with the `--no-color` option",
                            "alternate: manage.py can execute user commands if settings are provided in environment",
                            "alternate: manage.py can execute user commands if settings are provided as argument",
                            "manage.py check does not raise errors when an app imports a base",
                            "manage.py check reports an ImportError if an app's models.py",
                            "manage.py check does not raise an ImportError validating a",
                            "check reports an error on a nonexistent app in INSTALLED_APPS.",
                            "All errors/warnings should be sorted by level and by message.",
                            "test_warning_does_not_halt (admin_scripts.tests.ManageCheck)",
                            "default: manage.py builtin commands succeed when default settings are appropriate",
                            "default: manage.py builtin commands fail if settings file (from environment) doesn't exist",
                            "default: manage.py builtin commands succeed if settings file (from argument) doesn't exist",
                            "default: manage.py builtin commands succeed if settings are provided in the environment",
                            "default: manage.py builtin commands succeed if settings are provided as argument",
                            "default: manage.py can execute user commands when default settings are appropriate",
                            "default: manage.py can execute user commands when settings are provided in environment",
                            "default: manage.py can execute user commands when settings are provided as argument",
                            "fulldefault: manage.py builtin commands succeed when default settings are appropriate",
                            "fulldefault: manage.py builtin commands fail if settings file (from environment) doesn't exist",
                            "fulldefault: manage.py builtin commands succeed if settings file (from argument) doesn't exist",
                            "fulldefault: manage.py builtin commands succeed if settings are provided in the environment",
                            "fulldefault: manage.py builtin commands succeed if settings are provided as argument",
                            "fulldefault: manage.py can execute user commands when default settings are appropriate",
                            "fulldefault: manage.py can execute user commands when settings are provided in environment",
                            "fulldefault: manage.py can execute user commands when settings are provided as argument",
                            "minimal: manage.py builtin commands fail with an error when no settings provided",
                            "minimal: manage.py builtin commands fail if settings file (from environment) doesn't exist",
                            "minimal: manage.py builtin commands fail if settings file (from argument) doesn't exist",
                            "minimal: manage.py builtin commands fail if settings are provided in the environment",
                            "minimal: manage.py builtin commands fail if settings are provided as argument",
                            "minimal: manage.py can't execute user commands without appropriate settings",
                            "minimal: manage.py can't execute user commands, even if settings are provided in environment",
                            "minimal: manage.py can't execute user commands, even if settings are provided as argument",
                            "multiple: manage.py builtin commands fail with an error when no settings provided",
                            "multiple: manage.py builtin commands fail if settings file (from environment) doesn't exist",
                            "multiple: manage.py builtin commands fail if settings file (from argument) doesn't exist",
                            "multiple: manage.py can execute builtin commands if settings are provided in the environment",
                            "multiple: manage.py builtin commands succeed if settings are provided as argument",
                            "multiple: manage.py can't execute user commands using default settings",
                            "multiple: manage.py can execute user commands if settings are provided in environment",
                            "multiple: manage.py can execute user commands if settings are provided as argument",
                            "test_custom_project_destination_missing (admin_scripts.tests.StartProject)",
                            "Make sure the startproject management command is able to use a different project template",
                            "Make sure template context variables are rendered with proper values",
                            "Make sure the startproject management command is able to use a different project template from a tarball",
                            "test_custom_project_template_from_tarball_by_url (admin_scripts.tests.StartProject)",
                            "Startproject can use a project template from a tarball and create it in a specified location",
                            "test_custom_project_template_with_non_ascii_templates (admin_scripts.tests.StartProject)",
                            "Make sure the startproject management command is able to render custom files",
                            "test_importable_project_name (admin_scripts.tests.StartProject)",
                            "Make sure the startproject management command validates a project name",
                            "Make sure template context variables are not html escaped",
                            "Startproject management command handles project template tar/zip balls from non-canonical urls",
                            "Make sure the startproject management command creates a project",
                            "Make sure the startproject management command creates a project in a specific directory",
                            "Ticket 17475: Template dir passed has a trailing path separator",
                            "Make sure passing the wrong kinds of arguments outputs an error and prints usage",
                            "User AppCommands can execute when a single app name is provided",
                            "User AppCommands raise an error when multiple app names are provided",
                            "User AppCommands raise an error when no app name is provided",
                            "User AppCommands can execute when some of the provided app names are invalid",
                            "User BaseCommands can execute when a label is provided",
                            "User BaseCommands can execute when no labels are provided",
                            "User BaseCommands can execute with options when a label is provided",
                            "User BaseCommands can execute with multiple options when a label is provided",
                            "User BaseCommands outputs command usage when wrong option is specified",
                            "test_base_run_from_argv (admin_scripts.tests.CommandTypes)",
                            "test_color_style (admin_scripts.tests.CommandTypes)",
                            "test_command_color (admin_scripts.tests.CommandTypes)",
                            "--no-color prevent colorization of the output",
                            "test_custom_stderr (admin_scripts.tests.CommandTypes)",
                            "test_custom_stdout (admin_scripts.tests.CommandTypes)",
                            "help is handled as a special case",
                            "--help is equivalent to help",
                            "help --commands shows the list of all available commands",
                            "-h is handled as a short form of --help",
                            "User LabelCommands can execute when a label is provided",
                            "User LabelCommands are executed multiple times if multiple labels are provided",
                            "User LabelCommands raise an error if no label is provided",
                            "NoArg Commands can be executed",
                            "NoArg Commands raise an error if an argument is provided",
                            "test_run_from_argv_closes_connections (admin_scripts.tests.CommandTypes)",
                            "test_run_from_argv_non_ascii_error (admin_scripts.tests.CommandTypes)",
                            "--help can be used on a specific command",
                            "version is handled as a special case",
                            "--version is equivalent to version"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "sympy__sympy-23729.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "test_Rational",
                            "test_Function",
                            "test_Pow",
                            "test_basic_ops",
                            "test_1_over_x_and_sqrt",
                            "test_mix_number_mult_symbols",
                            "test_mix_number_pow_symbols",
                            "test_imag",
                            "test_constants_other",
                            "test_Matrices",
                            "test_vector_entries_hadamard",
                            "test_MatrixSymbol",
                            "test_special_matrices",
                            "test_containers",
                            "test_julia_noninline",
                            "test_julia_piecewise",
                            "test_julia_piecewise_times_const",
                            "test_julia_matrix_elements",
                            "test_haramard",
                            "test_sparse",
                            "test_specfun",
                            "test_jl_simple_code",
                            "test_jl_simple_code_with_header",
                            "test_jl_numbersymbol",
                            "test_multiple_results_m",
                            "test_results_named_unordered",
                            "test_results_named_ordered",
                            "test_complicated_jl_codegen",
                            "test_jl_output_arg_mixed_unordered",
                            "test_jl_piecewise_",
                            "test_jl_multifcns_per_file",
                            "test_jl_multifcns_per_file_w_header",
                            "test_jl_matrix_named",
                            "test_jl_matrix_named_matsym",
                            "test_jl_matrix_output_autoname_2",
                            "test_jl_results_matrix_named_ordered",
                            "test_jl_loops",
                            "test_jl_tensor_loops_multiple_contractions",
                            "test_jl_InOutArgument",
                            "test_jl_InOutArgument_order"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "test_Integer",
                            "test_Relational",
                            "test_constants",
                            "test_boolean",
                            "test_julia_matrix_assign_to",
                            "test_julia_matrix_assign_to_more",
                            "test_julia_matrix_1x1",
                            "test_julia_boolean",
                            "test_julia_not_supported",
                            "test_trick_indent_with_end_else_words",
                            "test_empty_jl_code",
                            "test_jl_simple_code_nameout",
                            "test_jl_code_argument_order",
                            "test_jl_filename_match_prefix",
                            "test_jl_matrix_output_autoname",
                            "test_jl_matrixsymbol_slice",
                            "test_jl_matrixsymbol_slice2",
                            "test_jl_matrixsymbol_slice3",
                            "test_jl_matrixsymbol_slice_autoname",
                            "test_jl_not_supported"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "mwaskom__seaborn-3202.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "tests/_core/test_plot.py::TestPlotting::test_empty",
                            "tests/_core/test_scales.py::TestNominal::test_empty_data"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "tests/_core/test_plot.py::TestInit::test_empty",
                            "tests/_core/test_plot.py::TestInit::test_data_only",
                            "tests/_core/test_plot.py::TestInit::test_df_and_named_variables",
                            "tests/_core/test_plot.py::TestInit::test_df_and_mixed_variables",
                            "tests/_core/test_plot.py::TestInit::test_vector_variables_only",
                            "tests/_core/test_plot.py::TestInit::test_vector_variables_no_index",
                            "tests/_core/test_plot.py::TestInit::test_data_only_named",
                            "tests/_core/test_plot.py::TestInit::test_positional_and_named_data",
                            "tests/_core/test_plot.py::TestInit::test_positional_and_named_xy[x]",
                            "tests/_core/test_plot.py::TestInit::test_positional_and_named_xy[y]",
                            "tests/_core/test_plot.py::TestInit::test_positional_data_x_y",
                            "tests/_core/test_plot.py::TestInit::test_positional_x_y",
                            "tests/_core/test_plot.py::TestInit::test_positional_data_x",
                            "tests/_core/test_plot.py::TestInit::test_positional_x",
                            "tests/_core/test_plot.py::TestInit::test_positional_too_many",
                            "tests/_core/test_plot.py::TestInit::test_unknown_keywords",
                            "tests/_core/test_plot.py::TestLayerAddition::test_without_data",
                            "tests/_core/test_plot.py::TestLayerAddition::test_with_new_variable_by_name",
                            "tests/_core/test_plot.py::TestLayerAddition::test_with_new_variable_by_vector",
                            "tests/_core/test_plot.py::TestLayerAddition::test_with_late_data_definition",
                            "tests/_core/test_plot.py::TestLayerAddition::test_with_new_data_definition",
                            "tests/_core/test_plot.py::TestLayerAddition::test_drop_variable",
                            "tests/_core/test_plot.py::TestLayerAddition::test_stat_nondefault",
                            "tests/_core/test_plot.py::TestLayerAddition::test_orient[x-x]",
                            "tests/_core/test_plot.py::TestLayerAddition::test_orient[y-y]",
                            "tests/_core/test_plot.py::TestLayerAddition::test_orient[v-x]",
                            "tests/_core/test_plot.py::TestLayerAddition::test_orient[h-y]",
                            "tests/_core/test_plot.py::TestLayerAddition::test_variable_list",
                            "tests/_core/test_plot.py::TestLayerAddition::test_type_checks",
                            "tests/_core/test_plot.py::TestScaling::test_inference",
                            "tests/_core/test_plot.py::TestScaling::test_inference_from_layer_data",
                            "tests/_core/test_plot.py::TestScaling::test_inference_joins",
                            "tests/_core/test_plot.py::TestScaling::test_inferred_categorical_converter",
                            "tests/_core/test_plot.py::TestScaling::test_explicit_categorical_converter",
                            "tests/_core/test_plot.py::TestScaling::test_faceted_log_scale",
                            "tests/_core/test_plot.py::TestScaling::test_paired_single_log_scale",
                            "tests/_core/test_plot.py::TestScaling::test_mark_data_log_transform_is_inverted",
                            "tests/_core/test_plot.py::TestScaling::test_mark_data_log_transfrom_with_stat",
                            "tests/_core/test_plot.py::TestScaling::test_mark_data_from_categorical",
                            "tests/_core/test_plot.py::TestScaling::test_mark_data_from_datetime",
                            "tests/_core/test_plot.py::TestScaling::test_computed_var_ticks",
                            "tests/_core/test_plot.py::TestScaling::test_computed_var_transform",
                            "tests/_core/test_plot.py::TestScaling::test_explicit_range_with_axis_scaling",
                            "tests/_core/test_plot.py::TestScaling::test_derived_range_with_axis_scaling",
                            "tests/_core/test_plot.py::TestScaling::test_facet_categories",
                            "tests/_core/test_plot.py::TestScaling::test_facet_categories_unshared",
                            "tests/_core/test_plot.py::TestScaling::test_facet_categories_single_dim_shared",
                            "tests/_core/test_plot.py::TestScaling::test_pair_categories",
                            "tests/_core/test_plot.py::TestScaling::test_pair_categories_shared",
                            "tests/_core/test_plot.py::TestScaling::test_identity_mapping_linewidth",
                            "tests/_core/test_plot.py::TestScaling::test_pair_single_coordinate_stat_orient",
                            "tests/_core/test_plot.py::TestScaling::test_inferred_nominal_passed_to_stat",
                            "tests/_core/test_plot.py::TestScaling::test_identity_mapping_color_tuples",
                            "tests/_core/test_plot.py::TestScaling::test_nominal_x_axis_tweaks",
                            "tests/_core/test_plot.py::TestScaling::test_nominal_y_axis_tweaks",
                            "tests/_core/test_plot.py::TestPlotting::test_matplotlib_object_creation",
                            "tests/_core/test_plot.py::TestPlotting::test_no_orient_variance",
                            "tests/_core/test_plot.py::TestPlotting::test_single_split_single_layer",
                            "tests/_core/test_plot.py::TestPlotting::test_single_split_multi_layer",
                            "tests/_core/test_plot.py::TestPlotting::test_one_grouping_variable[color]",
                            "tests/_core/test_plot.py::TestPlotting::test_one_grouping_variable[group]",
                            "tests/_core/test_plot.py::TestPlotting::test_two_grouping_variables",
                            "tests/_core/test_plot.py::TestPlotting::test_specified_width",
                            "tests/_core/test_plot.py::TestPlotting::test_facets_no_subgroups",
                            "tests/_core/test_plot.py::TestPlotting::test_facets_one_subgroup",
                            "tests/_core/test_plot.py::TestPlotting::test_layer_specific_facet_disabling",
                            "tests/_core/test_plot.py::TestPlotting::test_paired_variables",
                            "tests/_core/test_plot.py::TestPlotting::test_paired_one_dimension",
                            "tests/_core/test_plot.py::TestPlotting::test_paired_variables_one_subset",
                            "tests/_core/test_plot.py::TestPlotting::test_paired_and_faceted",
                            "tests/_core/test_plot.py::TestPlotting::test_theme_default",
                            "tests/_core/test_plot.py::TestPlotting::test_theme_params",
                            "tests/_core/test_plot.py::TestPlotting::test_theme_error",
                            "tests/_core/test_plot.py::TestPlotting::test_stat",
                            "tests/_core/test_plot.py::TestPlotting::test_move",
                            "tests/_core/test_plot.py::TestPlotting::test_stat_and_move",
                            "tests/_core/test_plot.py::TestPlotting::test_stat_log_scale",
                            "tests/_core/test_plot.py::TestPlotting::test_move_log_scale",
                            "tests/_core/test_plot.py::TestPlotting::test_multi_move",
                            "tests/_core/test_plot.py::TestPlotting::test_multi_move_with_pairing",
                            "tests/_core/test_plot.py::TestPlotting::test_move_with_range",
                            "tests/_core/test_plot.py::TestPlotting::test_methods_clone",
                            "tests/_core/test_plot.py::TestPlotting::test_default_is_no_pyplot",
                            "tests/_core/test_plot.py::TestPlotting::test_with_pyplot",
                            "tests/_core/test_plot.py::TestPlotting::test_show",
                            "tests/_core/test_plot.py::TestPlotting::test_png_repr",
                            "tests/_core/test_plot.py::TestPlotting::test_save",
                            "tests/_core/test_plot.py::TestPlotting::test_layout_size",
                            "tests/_core/test_plot.py::TestPlotting::test_on_axes",
                            "tests/_core/test_plot.py::TestPlotting::test_on_figure[True]",
                            "tests/_core/test_plot.py::TestPlotting::test_on_figure[False]",
                            "tests/_core/test_plot.py::TestPlotting::test_on_subfigure[True]",
                            "tests/_core/test_plot.py::TestPlotting::test_on_subfigure[False]",
                            "tests/_core/test_plot.py::TestPlotting::test_on_type_check",
                            "tests/_core/test_plot.py::TestPlotting::test_on_axes_with_subplots_error",
                            "tests/_core/test_plot.py::TestPlotting::test_on_disables_layout_algo",
                            "tests/_core/test_plot.py::TestPlotting::test_axis_labels_from_constructor",
                            "tests/_core/test_plot.py::TestPlotting::test_axis_labels_from_layer",
                            "tests/_core/test_plot.py::TestPlotting::test_axis_labels_are_first_name",
                            "tests/_core/test_plot.py::TestPlotting::test_limits",
                            "tests/_core/test_plot.py::TestPlotting::test_labels_axis",
                            "tests/_core/test_plot.py::TestPlotting::test_labels_legend",
                            "tests/_core/test_plot.py::TestPlotting::test_labels_facets",
                            "tests/_core/test_plot.py::TestPlotting::test_title_single",
                            "tests/_core/test_plot.py::TestPlotting::test_title_facet_function",
                            "tests/_core/test_plot.py::TestFacetInterface::test_1d[row]",
                            "tests/_core/test_plot.py::TestFacetInterface::test_1d_as_vector[row]",
                            "tests/_core/test_plot.py::TestFacetInterface::test_1d_with_order[row-reverse]",
                            "tests/_core/test_plot.py::TestFacetInterface::test_1d_with_order[col-reverse]",
                            "tests/_core/test_plot.py::TestFacetInterface::test_1d[col]",
                            "tests/_core/test_plot.py::TestFacetInterface::test_1d_as_vector[col]",
                            "tests/_core/test_plot.py::TestFacetInterface::test_1d_with_order[col-subset]",
                            "tests/_core/test_plot.py::TestFacetInterface::test_1d_with_order[row-subset]",
                            "tests/_core/test_plot.py::TestFacetInterface::test_2d_with_order[subset]",
                            "tests/_core/test_plot.py::TestFacetInterface::test_1d_with_order[col-expand]",
                            "tests/_core/test_plot.py::TestFacetInterface::test_1d_with_order[row-expand]",
                            "tests/_core/test_plot.py::TestFacetInterface::test_2d_with_order[expand]",
                            "tests/_core/test_plot.py::TestFacetInterface::test_2d_with_order[reverse]",
                            "tests/_core/test_plot.py::TestFacetInterface::test_2d",
                            "tests/_core/test_plot.py::TestFacetInterface::test_layout_algo[tight]",
                            "tests/_core/test_plot.py::TestFacetInterface::test_layout_algo[constrained]",
                            "tests/_core/test_plot.py::TestFacetInterface::test_axis_sharing",
                            "tests/_core/test_plot.py::TestFacetInterface::test_unshared_spacing",
                            "tests/_core/test_plot.py::TestFacetInterface::test_col_wrapping",
                            "tests/_core/test_plot.py::TestFacetInterface::test_row_wrapping",
                            "tests/_core/test_plot.py::TestPairInterface::test_all_numeric[list]",
                            "tests/_core/test_plot.py::TestPairInterface::test_all_numeric[Index]",
                            "tests/_core/test_plot.py::TestPairInterface::test_single_variable_key_raises",
                            "tests/_core/test_plot.py::TestPairInterface::test_single_dimension[x]",
                            "tests/_core/test_plot.py::TestPairInterface::test_single_dimension[y]",
                            "tests/_core/test_plot.py::TestPairInterface::test_non_cross",
                            "tests/_core/test_plot.py::TestPairInterface::test_list_of_vectors",
                            "tests/_core/test_plot.py::TestPairInterface::test_with_no_variables",
                            "tests/_core/test_plot.py::TestPairInterface::test_with_facets",
                            "tests/_core/test_plot.py::TestPairInterface::test_error_on_facet_overlap[variables0]",
                            "tests/_core/test_plot.py::TestPairInterface::test_error_on_facet_overlap[variables1]",
                            "tests/_core/test_plot.py::TestPairInterface::test_error_on_wrap_overlap[variables0]",
                            "tests/_core/test_plot.py::TestPairInterface::test_error_on_wrap_overlap[variables1]",
                            "tests/_core/test_plot.py::TestPairInterface::test_axis_sharing",
                            "tests/_core/test_plot.py::TestPairInterface::test_axis_sharing_with_facets",
                            "tests/_core/test_plot.py::TestPairInterface::test_x_wrapping",
                            "tests/_core/test_plot.py::TestPairInterface::test_y_wrapping",
                            "tests/_core/test_plot.py::TestPairInterface::test_non_cross_wrapping",
                            "tests/_core/test_plot.py::TestPairInterface::test_cross_mismatched_lengths",
                            "tests/_core/test_plot.py::TestPairInterface::test_orient_inference",
                            "tests/_core/test_plot.py::TestPairInterface::test_computed_coordinate_orient_inference",
                            "tests/_core/test_plot.py::TestPairInterface::test_two_variables_single_order_error",
                            "tests/_core/test_plot.py::TestPairInterface::test_limits",
                            "tests/_core/test_plot.py::TestPairInterface::test_labels",
                            "tests/_core/test_plot.py::TestLabelVisibility::test_single_subplot",
                            "tests/_core/test_plot.py::TestLabelVisibility::test_1d_column[facet_kws0-pair_kws0]",
                            "tests/_core/test_plot.py::TestLabelVisibility::test_1d_column[facet_kws1-pair_kws1]",
                            "tests/_core/test_plot.py::TestLabelVisibility::test_1d_row[facet_kws0-pair_kws0]",
                            "tests/_core/test_plot.py::TestLabelVisibility::test_1d_row[facet_kws1-pair_kws1]",
                            "tests/_core/test_plot.py::TestLabelVisibility::test_1d_column_wrapped",
                            "tests/_core/test_plot.py::TestLabelVisibility::test_1d_row_wrapped",
                            "tests/_core/test_plot.py::TestLabelVisibility::test_1d_column_wrapped_non_cross",
                            "tests/_core/test_plot.py::TestLabelVisibility::test_2d",
                            "tests/_core/test_plot.py::TestLabelVisibility::test_2d_unshared",
                            "tests/_core/test_plot.py::TestLegend::test_single_layer_single_variable",
                            "tests/_core/test_plot.py::TestLegend::test_single_layer_common_variable",
                            "tests/_core/test_plot.py::TestLegend::test_single_layer_common_unnamed_variable",
                            "tests/_core/test_plot.py::TestLegend::test_single_layer_multi_variable",
                            "tests/_core/test_plot.py::TestLegend::test_multi_layer_single_variable",
                            "tests/_core/test_plot.py::TestLegend::test_multi_layer_multi_variable",
                            "tests/_core/test_plot.py::TestLegend::test_multi_layer_different_artists",
                            "tests/_core/test_plot.py::TestLegend::test_three_layers",
                            "tests/_core/test_plot.py::TestLegend::test_identity_scale_ignored",
                            "tests/_core/test_plot.py::TestLegend::test_suppression_in_add_method",
                            "tests/_core/test_plot.py::TestLegend::test_anonymous_title",
                            "tests/_core/test_plot.py::TestLegend::test_legendless_mark",
                            "tests/_core/test_plot.py::TestLegend::test_legend_has_no_offset",
                            "tests/_core/test_plot.py::TestDefaultObject::test_default_repr",
                            "tests/_core/test_scales.py::TestContinuous::test_coordinate_defaults",
                            "tests/_core/test_scales.py::TestContinuous::test_coordinate_transform",
                            "tests/_core/test_scales.py::TestContinuous::test_coordinate_transform_with_parameter",
                            "tests/_core/test_scales.py::TestContinuous::test_coordinate_transform_error",
                            "tests/_core/test_scales.py::TestContinuous::test_interval_defaults",
                            "tests/_core/test_scales.py::TestContinuous::test_interval_with_range",
                            "tests/_core/test_scales.py::TestContinuous::test_interval_with_norm",
                            "tests/_core/test_scales.py::TestContinuous::test_interval_with_range_norm_and_transform",
                            "tests/_core/test_scales.py::TestContinuous::test_color_defaults",
                            "tests/_core/test_scales.py::TestContinuous::test_color_named_values",
                            "tests/_core/test_scales.py::TestContinuous::test_color_tuple_values",
                            "tests/_core/test_scales.py::TestContinuous::test_color_callable_values",
                            "tests/_core/test_scales.py::TestContinuous::test_color_with_norm",
                            "tests/_core/test_scales.py::TestContinuous::test_color_with_transform",
                            "tests/_core/test_scales.py::TestContinuous::test_tick_locator",
                            "tests/_core/test_scales.py::TestContinuous::test_tick_locator_input_check",
                            "tests/_core/test_scales.py::TestContinuous::test_tick_upto",
                            "tests/_core/test_scales.py::TestContinuous::test_tick_every",
                            "tests/_core/test_scales.py::TestContinuous::test_tick_every_between",
                            "tests/_core/test_scales.py::TestContinuous::test_tick_at",
                            "tests/_core/test_scales.py::TestContinuous::test_tick_count",
                            "tests/_core/test_scales.py::TestContinuous::test_tick_count_between",
                            "tests/_core/test_scales.py::TestContinuous::test_tick_minor",
                            "tests/_core/test_scales.py::TestContinuous::test_log_tick_default",
                            "tests/_core/test_scales.py::TestContinuous::test_log_tick_upto",
                            "tests/_core/test_scales.py::TestContinuous::test_log_tick_count",
                            "tests/_core/test_scales.py::TestContinuous::test_log_tick_format_disabled",
                            "tests/_core/test_scales.py::TestContinuous::test_log_tick_every",
                            "tests/_core/test_scales.py::TestContinuous::test_symlog_tick_default",
                            "tests/_core/test_scales.py::TestContinuous::test_label_formatter",
                            "tests/_core/test_scales.py::TestContinuous::test_label_like_pattern",
                            "tests/_core/test_scales.py::TestContinuous::test_label_like_string",
                            "tests/_core/test_scales.py::TestContinuous::test_label_like_function",
                            "tests/_core/test_scales.py::TestContinuous::test_label_base",
                            "tests/_core/test_scales.py::TestContinuous::test_label_unit",
                            "tests/_core/test_scales.py::TestContinuous::test_label_unit_with_sep",
                            "tests/_core/test_scales.py::TestContinuous::test_label_empty_unit",
                            "tests/_core/test_scales.py::TestContinuous::test_label_base_from_transform",
                            "tests/_core/test_scales.py::TestContinuous::test_label_type_checks",
                            "tests/_core/test_scales.py::TestNominal::test_coordinate_defaults",
                            "tests/_core/test_scales.py::TestNominal::test_coordinate_with_order",
                            "tests/_core/test_scales.py::TestNominal::test_coordinate_with_subset_order",
                            "tests/_core/test_scales.py::TestNominal::test_coordinate_axis",
                            "tests/_core/test_scales.py::TestNominal::test_coordinate_axis_with_order",
                            "tests/_core/test_scales.py::TestNominal::test_coordinate_axis_with_subset_order",
                            "tests/_core/test_scales.py::TestNominal::test_coordinate_axis_with_category_dtype",
                            "tests/_core/test_scales.py::TestNominal::test_coordinate_numeric_data",
                            "tests/_core/test_scales.py::TestNominal::test_coordinate_numeric_data_with_order",
                            "tests/_core/test_scales.py::TestNominal::test_color_defaults",
                            "tests/_core/test_scales.py::TestNominal::test_color_named_palette",
                            "tests/_core/test_scales.py::TestNominal::test_color_list_palette",
                            "tests/_core/test_scales.py::TestNominal::test_color_dict_palette",
                            "tests/_core/test_scales.py::TestNominal::test_color_numeric_data",
                            "tests/_core/test_scales.py::TestNominal::test_color_numeric_with_order_subset",
                            "tests/_core/test_scales.py::TestNominal::test_color_alpha_in_palette",
                            "tests/_core/test_scales.py::TestNominal::test_color_unknown_palette",
                            "tests/_core/test_scales.py::TestNominal::test_object_defaults",
                            "tests/_core/test_scales.py::TestNominal::test_object_list",
                            "tests/_core/test_scales.py::TestNominal::test_object_dict",
                            "tests/_core/test_scales.py::TestNominal::test_object_order",
                            "tests/_core/test_scales.py::TestNominal::test_object_order_subset",
                            "tests/_core/test_scales.py::TestNominal::test_objects_that_are_weird",
                            "tests/_core/test_scales.py::TestNominal::test_alpha_default",
                            "tests/_core/test_scales.py::TestNominal::test_fill",
                            "tests/_core/test_scales.py::TestNominal::test_fill_dict",
                            "tests/_core/test_scales.py::TestNominal::test_fill_nunique_warning",
                            "tests/_core/test_scales.py::TestNominal::test_interval_defaults",
                            "tests/_core/test_scales.py::TestNominal::test_interval_tuple",
                            "tests/_core/test_scales.py::TestNominal::test_interval_tuple_numeric",
                            "tests/_core/test_scales.py::TestNominal::test_interval_list",
                            "tests/_core/test_scales.py::TestNominal::test_interval_dict",
                            "tests/_core/test_scales.py::TestNominal::test_interval_with_transform",
                            "tests/_core/test_scales.py::TestTemporal::test_coordinate_defaults",
                            "tests/_core/test_scales.py::TestTemporal::test_interval_defaults",
                            "tests/_core/test_scales.py::TestTemporal::test_interval_with_range",
                            "tests/_core/test_scales.py::TestTemporal::test_interval_with_norm",
                            "tests/_core/test_scales.py::TestTemporal::test_color_defaults",
                            "tests/_core/test_scales.py::TestTemporal::test_color_named_values",
                            "tests/_core/test_scales.py::TestTemporal::test_coordinate_axis",
                            "tests/_core/test_scales.py::TestTemporal::test_tick_locator",
                            "tests/_core/test_scales.py::TestTemporal::test_tick_upto",
                            "tests/_core/test_scales.py::TestTemporal::test_label_formatter",
                            "tests/_core/test_scales.py::TestTemporal::test_label_concise"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "pylint-dev__pylint-4970.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "tests/checkers/unittest_similar.py::test_set_duplicate_lines_to_zero"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "tests/checkers/unittest_similar.py::test_ignore_comments",
                            "tests/checkers/unittest_similar.py::test_ignore_docstrings",
                            "tests/checkers/unittest_similar.py::test_ignore_imports",
                            "tests/checkers/unittest_similar.py::test_multiline_imports",
                            "tests/checkers/unittest_similar.py::test_ignore_multiline_imports",
                            "tests/checkers/unittest_similar.py::test_ignore_signatures_fail",
                            "tests/checkers/unittest_similar.py::test_ignore_signatures_pass",
                            "tests/checkers/unittest_similar.py::test_ignore_signatures_class_methods_fail",
                            "tests/checkers/unittest_similar.py::test_ignore_signatures_class_methods_pass",
                            "tests/checkers/unittest_similar.py::test_ignore_signatures_empty_functions_fail",
                            "tests/checkers/unittest_similar.py::test_ignore_signatures_empty_functions_pass",
                            "tests/checkers/unittest_similar.py::test_no_hide_code_with_imports",
                            "tests/checkers/unittest_similar.py::test_ignore_nothing",
                            "tests/checkers/unittest_similar.py::test_lines_without_meaningful_content_do_not_trigger_similarity",
                            "tests/checkers/unittest_similar.py::test_help",
                            "tests/checkers/unittest_similar.py::test_no_args",
                            "tests/checkers/unittest_similar.py::test_get_map_data"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "pytest-dev__pytest-6680.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "testing/deprecated_test.py::test_node_direct_ctor_warning"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "testing/deprecated_test.py::test_terminal_reporter_writer_attr",
                            "testing/deprecated_test.py::test_resultlog_is_deprecated",
                            "testing/deprecated_test.py::test_external_plugins_integrated[pytest_capturelog]",
                            "testing/deprecated_test.py::test_external_plugins_integrated[pytest_catchlog]",
                            "testing/deprecated_test.py::test_external_plugins_integrated[pytest_faulthandler]",
                            "testing/deprecated_test.py::test_warn_about_imminent_junit_family_default_change[None]",
                            "testing/deprecated_test.py::test_warn_about_imminent_junit_family_default_change[legacy]",
                            "testing/deprecated_test.py::test_warn_about_imminent_junit_family_default_change[xunit2]",
                            "testing/deprecated_test.py::test_noprintlogs_is_deprecated_cmdline",
                            "testing/deprecated_test.py::test_noprintlogs_is_deprecated_ini"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "pylint-dev__pylint-4703.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "tests/test_func.py::test_functionality[func_noerror_cycle]"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "tests/test_func.py::test_functionality[func_w0401_disabled_in_func.py]",
                            "tests/test_func.py::test_functionality[func_i0022.py]",
                            "tests/test_func.py::test_functionality[func_w0401.py]",
                            "tests/test_func.py::test_functionality[func_w0801.py]",
                            "tests/test_func.py::test_functionality[func_w0401_package]",
                            "tests/test_func.py::test_functionality[func_w0401_disabled.py]",
                            "tests/test_func.py::test_functionality[func_i0014.py]",
                            "tests/test_func.py::test_functionality[func_i0013.py]",
                            "tests/test_func.py::test_functionality[func_i0020.py]",
                            "tests/test_func.py::test_functionality[func_i0011.py]",
                            "tests/test_func.py::test_functionality[func_i0012.py]"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "sympy__sympy-15151.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "test_latex_indexed"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "test_printmethod",
                            "test_latex_basic",
                            "test_latex_builtins",
                            "test_latex_SingularityFunction",
                            "test_latex_cycle",
                            "test_latex_permutation",
                            "test_latex_Float",
                            "test_latex_vector_expressions",
                            "test_latex_symbols",
                            "test_latex_functions",
                            "test_function_subclass_different_name",
                            "test_hyper_printing",
                            "test_latex_bessel",
                            "test_latex_fresnel",
                            "test_latex_brackets",
                            "test_latex_derivatives",
                            "test_latex_subs",
                            "test_latex_integrals",
                            "test_latex_sets",
                            "test_latex_SetExpr",
                            "test_latex_Range",
                            "test_latex_sequences",
                            "test_latex_FourierSeries",
                            "test_latex_FormalPowerSeries",
                            "test_latex_intervals",
                            "test_latex_AccumuBounds",
                            "test_latex_emptyset",
                            "test_latex_commutator",
                            "test_latex_union",
                            "test_latex_symmetric_difference",
                            "test_latex_Complement",
                            "test_latex_Complexes",
                            "test_latex_productset",
                            "test_latex_Naturals",
                            "test_latex_Naturals0",
                            "test_latex_Integers",
                            "test_latex_ImageSet",
                            "test_latex_ConditionSet",
                            "test_latex_ComplexRegion",
                            "test_latex_Contains",
                            "test_latex_sum",
                            "test_latex_product",
                            "test_latex_limits",
                            "test_latex_log",
                            "test_issue_3568",
                            "test_latex",
                            "test_latex_dict",
                            "test_latex_list",
                            "test_latex_rational",
                            "test_latex_inverse",
                            "test_latex_DiracDelta",
                            "test_latex_Heaviside",
                            "test_latex_KroneckerDelta",
                            "test_latex_LeviCivita",
                            "test_mode",
                            "test_latex_Piecewise",
                            "test_latex_Matrix",
                            "test_latex_matrix_with_functions",
                            "test_latex_NDimArray",
                            "test_latex_mul_symbol",
                            "test_latex_issue_4381",
                            "test_latex_issue_4576",
                            "test_latex_pow_fraction",
                            "test_noncommutative",
                            "test_latex_order",
                            "test_latex_Lambda",
                            "test_latex_PolyElement",
                            "test_latex_FracElement",
                            "test_latex_Poly",
                            "test_latex_Poly_order",
                            "test_latex_ComplexRootOf",
                            "test_latex_RootSum",
                            "test_settings",
                            "test_latex_numbers",
                            "test_latex_euler",
                            "test_lamda",
                            "test_custom_symbol_names",
                            "test_matAdd",
                            "test_matMul",
                            "test_latex_MatrixSlice",
                            "test_latex_RandomDomain",
                            "test_PrettyPoly",
                            "test_integral_transforms",
                            "test_PolynomialRingBase",
                            "test_categories",
                            "test_Modules",
                            "test_QuotientRing",
                            "test_Tr",
                            "test_Adjoint",
                            "test_Hadamard",
                            "test_ZeroMatrix",
                            "test_boolean_args_order",
                            "test_imaginary",
                            "test_builtins_without_args",
                            "test_latex_greek_functions",
                            "test_translate",
                            "test_other_symbols",
                            "test_modifiers",
                            "test_greek_symbols",
                            "test_builtin_no_args",
                            "test_issue_6853",
                            "test_Mul",
                            "test_Pow",
                            "test_issue_7180",
                            "test_issue_8409",
                            "test_issue_7117",
                            "test_issue_2934",
                            "test_issue_10489",
                            "test_issue_12886",
                            "test_issue_13651",
                            "test_latex_UnevaluatedExpr",
                            "test_MatrixElement_printing",
                            "test_MatrixSymbol_printing",
                            "test_Quaternion_latex_printing",
                            "test_TensorProduct_printing",
                            "test_WedgeProduct_printing",
                            "test_issue_14041"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "matplotlib__matplotlib-26532.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_Poly3DCollection_init_value_error"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_invisible_axes[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_grid_off[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_invisible_ticks_axis[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_axis_positions[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_aspects[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_aspects_adjust_box[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_axes3d_repr",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_axes3d_primary_views[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_bar3d[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_bar3d_colors",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_bar3d_shaded[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_bar3d_notshaded[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_bar3d_lightsource",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_contour3d[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_contour3d_extend3d[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_contourf3d[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_contourf3d_fill[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_contourf3d_extend[png-both-levels0]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_contourf3d_extend[png-min-levels1]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_contourf3d_extend[png-max-levels2]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_tricontour[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_contour3d_1d_input",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_lines3d[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_plot_scalar[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_invalid_line_data",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_mixedsubplots[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_tight_layout_text[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_scatter3d[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_scatter3d_color[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_scatter3d_linewidth[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_scatter3d_linewidth_modification[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_scatter3d_modification[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_scatter3d_sorting[png-True]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_scatter3d_sorting[png-False]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_marker_draw_order_data_reversed[png--50]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_marker_draw_order_data_reversed[png-130]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_marker_draw_order_view_rotated[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_plot_3d_from_2d[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_surface3d[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_surface3d_label_offset_tick_position[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_surface3d_shaded[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_surface3d_masked[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_plot_surface_None_arg[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_surface3d_masked_strides[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_text3d[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_text3d_modification[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_trisurf3d[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_trisurf3d_shaded[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_wireframe3d[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_wireframe3dzerocstride[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_wireframe3dzerorstride[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_wireframe3dzerostrideraises",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_mixedsamplesraises",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_quiver3d[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_quiver3d_empty[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_quiver3d_masked[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_patch_modification",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_patch_collection_modification[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_poly3dcollection_verts_validation",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_poly3dcollection_closed[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_poly_collection_2d_to_3d_empty",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_poly3dcollection_alpha[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_add_collection3d_zs_array[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_add_collection3d_zs_scalar[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_axes3d_labelpad[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_axes3d_cla[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_axes3d_rotated[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_plotsurface_1d_raises",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_proj_transform",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_proj_axes_cube[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_proj_axes_cube_ortho[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_world",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_autoscale",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_unautoscale[True-x]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_unautoscale[True-y]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_unautoscale[True-z]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_unautoscale[False-x]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_unautoscale[False-y]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_unautoscale[False-z]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_unautoscale[None-x]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_unautoscale[None-y]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_unautoscale[None-z]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_axes3d_focal_length_checks",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_axes3d_focal_length[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_axes3d_ortho[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_axes3d_isometric[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_invalid_axes_limits[set_xlim3d-left-inf]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_invalid_axes_limits[set_xlim3d-left-nan]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_invalid_axes_limits[set_xlim3d-right-inf]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_invalid_axes_limits[set_xlim3d-right-nan]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_invalid_axes_limits[set_ylim3d-bottom-inf]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_invalid_axes_limits[set_ylim3d-bottom-nan]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_invalid_axes_limits[set_ylim3d-top-inf]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_invalid_axes_limits[set_ylim3d-top-nan]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_invalid_axes_limits[set_zlim3d-bottom-inf]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_invalid_axes_limits[set_zlim3d-bottom-nan]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_invalid_axes_limits[set_zlim3d-top-inf]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_invalid_axes_limits[set_zlim3d-top-nan]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::TestVoxels::test_simple[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::TestVoxels::test_edge_style[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::TestVoxels::test_named_colors[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::TestVoxels::test_rgb_data[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::TestVoxels::test_alpha[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::TestVoxels::test_xyz[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::TestVoxels::test_calling_conventions",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_line3d_set_get_data_3d",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_inverted[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_inverted_cla",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_ax3d_tickcolour",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_ticklabel_format[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_quiver3D_smoke[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_minor_ticks[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_errorbar3d_errorevery[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_errorbar3d[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_stem3d[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_equal_box_aspect[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_colorbar_pos",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_inverted_zaxis",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_set_zlim",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_shared_view[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_shared_axes_retick",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_pan",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_toolbar_zoom_pan[zoom-1-None-expected0]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_toolbar_zoom_pan[zoom-1-x-expected1]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_toolbar_zoom_pan[zoom-1-y-expected2]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_toolbar_zoom_pan[zoom-3-None-expected3]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_toolbar_zoom_pan[pan-1-None-expected4]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_toolbar_zoom_pan[pan-1-x-expected5]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_toolbar_zoom_pan[pan-1-y-expected6]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_scalarmap_update[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_subfigure_simple",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_computed_zorder[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_format_coord",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_get_axis_position",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_margins",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_margins_errors[ValueError-args0-kwargs0-margin",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_margins_errors[ValueError-args1-kwargs1-margin",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_margins_errors[ValueError-args2-kwargs2-margin",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_margins_errors[ValueError-args3-kwargs3-margin",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_margins_errors[ValueError-args4-kwargs4-margin",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_margins_errors[ValueError-args5-kwargs5-margin",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_margins_errors[TypeError-args6-kwargs6-Cannot",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_margins_errors[TypeError-args7-kwargs7-Cannot",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_margins_errors[TypeError-args8-kwargs8-Cannot",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_margins_errors[TypeError-args9-kwargs9-Must",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_text_3d[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_draw_single_lines_from_Nx1",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_pathpatch_3d[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_scatter_spiral[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_Poly3DCollection_get_facecolor",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_Poly3DCollection_get_edgecolor",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_view_init_vertical_axis[z-proj_expected0-axis_lines_expected0-tickdirs_expected0]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_view_init_vertical_axis[y-proj_expected1-axis_lines_expected1-tickdirs_expected1]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_view_init_vertical_axis[x-proj_expected2-axis_lines_expected2-tickdirs_expected2]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_arc_pathpatch[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_panecolor_rcparams[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_mutating_input_arrays_y_and_z[png]",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_scatter_masked_color",
                            "lib/mpl_toolkits/mplot3d/tests/test_axes3d.py::test_surface3d_zsort_inf[png]"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "psf__requests-1142.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "test_requests.py::RequestsTestCase::test_no_content_length"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "test_requests.py::RequestsTestCase::test_basic_building",
                            "test_requests.py::RequestsTestCase::test_entry_points",
                            "test_requests.py::RequestsTestCase::test_invalid_url",
                            "test_requests.py::RequestsTestCase::test_params_are_added_before_fragment",
                            "test_requests.py::RequestsTestCase::test_path_is_not_double_encoded"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "matplotlib__matplotlib-21617.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "lib/matplotlib/tests/test_backend_ps.py::test_no_duplicate_definition"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "lib/matplotlib/tests/test_backend_ps.py::test_savefig_to_stringio[ps-portrait]",
                            "lib/matplotlib/tests/test_backend_ps.py::test_savefig_to_stringio[ps-landscape]",
                            "lib/matplotlib/tests/test_backend_ps.py::test_savefig_to_stringio[ps",
                            "lib/matplotlib/tests/test_backend_ps.py::test_savefig_to_stringio[eps-portrait]",
                            "lib/matplotlib/tests/test_backend_ps.py::test_savefig_to_stringio[eps-landscape]",
                            "lib/matplotlib/tests/test_backend_ps.py::test_patheffects",
                            "lib/matplotlib/tests/test_backend_ps.py::test_transparency[eps]",
                            "lib/matplotlib/tests/test_backend_ps.py::test_bbox",
                            "lib/matplotlib/tests/test_backend_ps.py::test_failing_latex",
                            "lib/matplotlib/tests/test_backend_ps.py::test_text_clip[eps]",
                            "lib/matplotlib/tests/test_backend_ps.py::test_d_glyph",
                            "lib/matplotlib/tests/test_backend_ps.py::test_fonttype[3]",
                            "lib/matplotlib/tests/test_backend_ps.py::test_fonttype[42]",
                            "lib/matplotlib/tests/test_backend_ps.py::test_linedash"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "pallets__flask-4169.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "tests/test_cli.py::test_lazy_load_error"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "tests/test_cli.py::test_prepare_import[test-path0-test]",
                            "tests/test_cli.py::test_prepare_import[test.py-path1-test]",
                            "tests/test_cli.py::test_prepare_import[a/test-path2-test]",
                            "tests/test_cli.py::test_prepare_import[test/__init__.py-path3-test]",
                            "tests/test_cli.py::test_prepare_import[test/__init__-path4-test]",
                            "tests/test_cli.py::test_prepare_import[value5-path5-cliapp.inner1]",
                            "tests/test_cli.py::test_prepare_import[value6-path6-cliapp.inner1.inner2]",
                            "tests/test_cli.py::test_prepare_import[test.a.b-path7-test.a.b]",
                            "tests/test_cli.py::test_prepare_import[value8-path8-cliapp.app]",
                            "tests/test_cli.py::test_prepare_import[value9-path9-cliapp.message.txt]",
                            "tests/test_cli.py::test_with_appcontext",
                            "tests/test_cli.py::test_appgroup",
                            "tests/test_cli.py::TestRoutes::test_sort",
                            "tests/test_cli.py::test_load_dotenv",
                            "tests/test_cli.py::test_dotenv_path",
                            "tests/test_cli.py::test_dotenv_optional",
                            "tests/test_cli.py::test_disable_dotenv_from_env",
                            "tests/test_cli.py::test_run_cert_path",
                            "tests/test_cli.py::test_run_cert_adhoc",
                            "tests/test_cli.py::test_run_cert_import",
                            "tests/test_cli.py::test_run_cert_no_ssl",
                            "tests/test_cli.py::test_cli_blueprints",
                            "tests/test_cli.py::test_cli_empty",
                            "tests/test_cli.py::test_click_7_deprecated"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "pylint-dev__pylint-5951.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "tests/pyreverse/test_main.py::test_graphviz_supported_image_format",
                            "tests/pyreverse/test_main.py::test_graphviz_cant_determine_supported_formats",
                            "tests/pyreverse/test_main.py::test_graphviz_unsupported_image_format"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "tests/pyreverse/test_main.py::test_project_root_in_sys_path[/tests]",
                            "tests/pyreverse/test_main.py::test_project_root_in_sys_path[/data]"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "psf__requests-2153.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "test_requests.py::RequestsTestCase::test_HTTP_200_OK_HEAD",
                            "test_requests.py::RequestsTestCase::test_cookie_sent_on_redirect",
                            "test_requests.py::RequestsTestCase::test_different_encodings_dont_break_post",
                            "test_requests.py::RequestsTestCase::test_manual_redirect_with_partial_body_read",
                            "test_requests.py::RequestsTestCase::test_prepared_from_session",
                            "test_requests.py::RequestsTestCase::test_request_cookie_overrides_session_cookie",
                            "test_requests.py::RequestsTestCase::test_set_cookie_on_301",
                            "test_requests.py::RequestsTestCase::test_unicode_multipart_post"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "test_requests.py::RequestsTestCase::test_BASICAUTH_TUPLE_HTTP_200_OK_GET",
                            "test_requests.py::RequestsTestCase::test_DIGESTAUTH_QUOTES_QOP_VALUE",
                            "test_requests.py::RequestsTestCase::test_DIGEST_AUTH_RETURNS_COOKIE",
                            "test_requests.py::RequestsTestCase::test_DIGEST_AUTH_SETS_SESSION_COOKIES",
                            "test_requests.py::RequestsTestCase::test_DIGEST_STREAM",
                            "test_requests.py::RequestsTestCase::test_HTTP_200_OK_GET_ALTERNATIVE",
                            "test_requests.py::RequestsTestCase::test_HTTP_200_OK_GET_WITH_MIXED_PARAMS",
                            "test_requests.py::RequestsTestCase::test_HTTP_200_OK_GET_WITH_PARAMS",
                            "test_requests.py::RequestsTestCase::test_HTTP_200_OK_PUT",
                            "test_requests.py::RequestsTestCase::test_HTTP_302_ALLOW_REDIRECT_GET",
                            "test_requests.py::RequestsTestCase::test_POSTBIN_GET_POST_FILES",
                            "test_requests.py::RequestsTestCase::test_POSTBIN_GET_POST_FILES_WITH_DATA",
                            "test_requests.py::RequestsTestCase::test_auth_is_retained_for_redirect_on_host",
                            "test_requests.py::RequestsTestCase::test_auth_is_stripped_on_redirect_off_host",
                            "test_requests.py::RequestsTestCase::test_autoset_header_values_are_native",
                            "test_requests.py::RequestsTestCase::test_basic_auth_str_is_always_native",
                            "test_requests.py::RequestsTestCase::test_basic_building",
                            "test_requests.py::RequestsTestCase::test_basicauth_with_netrc",
                            "test_requests.py::RequestsTestCase::test_can_send_nonstring_objects_with_files",
                            "test_requests.py::RequestsTestCase::test_cannot_send_unprepared_requests",
                            "test_requests.py::RequestsTestCase::test_cookie_as_dict_items",
                            "test_requests.py::RequestsTestCase::test_cookie_as_dict_keeps_items",
                            "test_requests.py::RequestsTestCase::test_cookie_as_dict_keeps_len",
                            "test_requests.py::RequestsTestCase::test_cookie_as_dict_keys",
                            "test_requests.py::RequestsTestCase::test_cookie_as_dict_values",
                            "test_requests.py::RequestsTestCase::test_cookie_parameters",
                            "test_requests.py::RequestsTestCase::test_cookie_persists_via_api",
                            "test_requests.py::RequestsTestCase::test_cookie_quote_wrapped",
                            "test_requests.py::RequestsTestCase::test_cookie_removed_on_expire",
                            "test_requests.py::RequestsTestCase::test_custom_content_type",
                            "test_requests.py::RequestsTestCase::test_decompress_gzip",
                            "test_requests.py::RequestsTestCase::test_entry_points",
                            "test_requests.py::RequestsTestCase::test_fixes_1329",
                            "test_requests.py::RequestsTestCase::test_generic_cookiejar_works",
                            "test_requests.py::RequestsTestCase::test_get_auth_from_url",
                            "test_requests.py::RequestsTestCase::test_get_auth_from_url_encoded_hashes",
                            "test_requests.py::RequestsTestCase::test_get_auth_from_url_encoded_spaces",
                            "test_requests.py::RequestsTestCase::test_get_auth_from_url_not_encoded_spaces",
                            "test_requests.py::RequestsTestCase::test_get_auth_from_url_percent_chars",
                            "test_requests.py::RequestsTestCase::test_header_keys_are_native",
                            "test_requests.py::RequestsTestCase::test_header_remove_is_case_insensitive",
                            "test_requests.py::RequestsTestCase::test_headers_on_session_with_None_are_not_sent",
                            "test_requests.py::RequestsTestCase::test_history_is_always_a_list",
                            "test_requests.py::RequestsTestCase::test_hook_receives_request_arguments",
                            "test_requests.py::RequestsTestCase::test_http_error",
                            "test_requests.py::RequestsTestCase::test_invalid_url",
                            "test_requests.py::RequestsTestCase::test_links",
                            "test_requests.py::RequestsTestCase::test_long_authinfo_in_url",
                            "test_requests.py::RequestsTestCase::test_no_content_length",
                            "test_requests.py::RequestsTestCase::test_oddball_schemes_dont_check_URLs",
                            "test_requests.py::RequestsTestCase::test_param_cookiejar_works",
                            "test_requests.py::RequestsTestCase::test_params_are_added_before_fragment",
                            "test_requests.py::RequestsTestCase::test_path_is_not_double_encoded",
                            "test_requests.py::RequestsTestCase::test_prepared_request_hook",
                            "test_requests.py::RequestsTestCase::test_pyopenssl_redirect",
                            "test_requests.py::RequestsTestCase::test_redirect_with_wrong_gzipped_header",
                            "test_requests.py::RequestsTestCase::test_request_and_response_are_pickleable",
                            "test_requests.py::RequestsTestCase::test_request_cookies_not_persisted",
                            "test_requests.py::RequestsTestCase::test_request_ok_set",
                            "test_requests.py::RequestsTestCase::test_requests_in_history_are_not_overridden",
                            "test_requests.py::RequestsTestCase::test_response_decode_unicode",
                            "test_requests.py::RequestsTestCase::test_response_is_iterable",
                            "test_requests.py::RequestsTestCase::test_session_hooks_are_overriden_by_request_hooks",
                            "test_requests.py::RequestsTestCase::test_session_hooks_are_used_with_no_request_hooks",
                            "test_requests.py::RequestsTestCase::test_session_pickling",
                            "test_requests.py::RequestsTestCase::test_status_raising",
                            "test_requests.py::RequestsTestCase::test_time_elapsed_blank",
                            "test_requests.py::RequestsTestCase::test_transport_adapter_ordering",
                            "test_requests.py::RequestsTestCase::test_unicode_get",
                            "test_requests.py::RequestsTestCase::test_unicode_header_name",
                            "test_requests.py::RequestsTestCase::test_unicode_method_name",
                            "test_requests.py::RequestsTestCase::test_unicode_multipart_post_fieldnames",
                            "test_requests.py::RequestsTestCase::test_user_agent_transfers",
                            "test_requests.py::TestContentEncodingDetection::test_html4_pragma",
                            "test_requests.py::TestContentEncodingDetection::test_html_charset",
                            "test_requests.py::TestContentEncodingDetection::test_none",
                            "test_requests.py::TestContentEncodingDetection::test_precedence",
                            "test_requests.py::TestContentEncodingDetection::test_xhtml_pragma",
                            "test_requests.py::TestContentEncodingDetection::test_xml",
                            "test_requests.py::TestCaseInsensitiveDict::test_contains",
                            "test_requests.py::TestCaseInsensitiveDict::test_delitem",
                            "test_requests.py::TestCaseInsensitiveDict::test_docstring_example",
                            "test_requests.py::TestCaseInsensitiveDict::test_equality",
                            "test_requests.py::TestCaseInsensitiveDict::test_fixes_649",
                            "test_requests.py::TestCaseInsensitiveDict::test_get",
                            "test_requests.py::TestCaseInsensitiveDict::test_getitem",
                            "test_requests.py::TestCaseInsensitiveDict::test_iter",
                            "test_requests.py::TestCaseInsensitiveDict::test_iterable_init",
                            "test_requests.py::TestCaseInsensitiveDict::test_kwargs_init",
                            "test_requests.py::TestCaseInsensitiveDict::test_len",
                            "test_requests.py::TestCaseInsensitiveDict::test_lower_items",
                            "test_requests.py::TestCaseInsensitiveDict::test_mapping_init",
                            "test_requests.py::TestCaseInsensitiveDict::test_preserve_key_case",
                            "test_requests.py::TestCaseInsensitiveDict::test_preserve_last_key_case",
                            "test_requests.py::TestCaseInsensitiveDict::test_setdefault",
                            "test_requests.py::TestCaseInsensitiveDict::test_update",
                            "test_requests.py::TestCaseInsensitiveDict::test_update_retains_unchanged",
                            "test_requests.py::UtilsTestCase::test_address_in_network",
                            "test_requests.py::UtilsTestCase::test_dotted_netmask",
                            "test_requests.py::UtilsTestCase::test_get_auth_from_url",
                            "test_requests.py::UtilsTestCase::test_get_environ_proxies",
                            "test_requests.py::UtilsTestCase::test_get_environ_proxies_ip_ranges",
                            "test_requests.py::UtilsTestCase::test_is_ipv4_address",
                            "test_requests.py::UtilsTestCase::test_is_valid_cidr",
                            "test_requests.py::UtilsTestCase::test_super_len_io_streams",
                            "test_requests.py::TestMorselToCookieExpires::test_expires_invalid_int",
                            "test_requests.py::TestMorselToCookieExpires::test_expires_invalid_str",
                            "test_requests.py::TestMorselToCookieExpires::test_expires_none",
                            "test_requests.py::TestMorselToCookieExpires::test_expires_valid_str",
                            "test_requests.py::TestMorselToCookieMaxAge::test_max_age_invalid_str",
                            "test_requests.py::TestMorselToCookieMaxAge::test_max_age_valid_int",
                            "test_requests.py::TestTimeout::test_stream_timeout",
                            "test_requests.py::TestRedirects::test_requests_are_updated_each_time",
                            "test_requests.py::test_data_argument_accepts_tuples",
                            "test_requests.py::test_prepared_request_empty_copy",
                            "test_requests.py::test_prepared_request_no_cookies_copy",
                            "test_requests.py::test_prepared_request_complete_copy"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "astropy__astropy-8339.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "astropy/stats/tests/test_bayesian_blocks.py::test_fitness_function_results"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "astropy/stats/tests/test_bayesian_blocks.py::test_single_change_point",
                            "astropy/stats/tests/test_bayesian_blocks.py::test_duplicate_events",
                            "astropy/stats/tests/test_bayesian_blocks.py::test_measures_fitness_homoscedastic",
                            "astropy/stats/tests/test_bayesian_blocks.py::test_measures_fitness_heteroscedastic",
                            "astropy/stats/tests/test_bayesian_blocks.py::test_regular_events",
                            "astropy/stats/tests/test_bayesian_blocks.py::test_errors"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "django__django-9871.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "--help can be used on a specific command"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "test_params_to_runserver (admin_scripts.tests.ManageTestserver)",
                            "test_testserver_handle_params (admin_scripts.tests.ManageTestserver)",
                            "test_no_database (admin_scripts.tests.ManageRunserver)",
                            "test_readonly_database (admin_scripts.tests.ManageRunserver)",
                            "test_runner_addrport_ipv6 (admin_scripts.tests.ManageRunserver)",
                            "test_runner_ambiguous (admin_scripts.tests.ManageRunserver)",
                            "test_runner_custom_defaults (admin_scripts.tests.ManageRunserver)",
                            "test_runner_custom_defaults_ipv6 (admin_scripts.tests.ManageRunserver)",
                            "test_runner_hostname (admin_scripts.tests.ManageRunserver)",
                            "test_runner_hostname_ipv6 (admin_scripts.tests.ManageRunserver)",
                            "test_runserver_addrport (admin_scripts.tests.ManageRunserver)",
                            "test_migration_warning_multiple_apps (admin_scripts.tests.ManageRunserverMigrationWarning)",
                            "test_migration_warning_one_app (admin_scripts.tests.ManageRunserverMigrationWarning)",
                            "test_precedence (admin_scripts.tests.Discovery)",
                            "test_program_name_in_help (admin_scripts.tests.MainModule)",
                            "test_runs_django_admin (admin_scripts.tests.MainModule)",
                            "no settings: manage.py builtin commands fail with an error when no settings provided",
                            "no settings: manage.py builtin commands fail if settings file (from environment) doesn't exist",
                            "no settings: manage.py builtin commands fail if settings file (from argument) doesn't exist",
                            "test_attribute_error (admin_scripts.tests.ManageSettingsWithSettingsErrors)",
                            "test_help (admin_scripts.tests.ManageSettingsWithSettingsErrors)",
                            "test_import_error (admin_scripts.tests.ManageSettingsWithSettingsErrors)",
                            "test_key_error (admin_scripts.tests.ManageSettingsWithSettingsErrors)",
                            "no settings: django-admin builtin commands fail with an error when no settings provided",
                            "no settings: django-admin builtin commands fail if settings file (from environment) doesn't exist",
                            "no settings: django-admin builtin commands fail if settings file (from argument) doesn't exist",
                            "\"",
                            "test_importable_name (admin_scripts.tests.StartApp)",
                            "startapp validates that app name is a valid Python identifier.",
                            "Regression for #20509",
                            "test_empty_allowed_hosts_error (admin_scripts.tests.ManageRunserverEmptyAllowedHosts)",
                            "test_no_suggestions (admin_scripts.tests.DjangoAdminSuggestions)",
                            "test_suggestions (admin_scripts.tests.DjangoAdminSuggestions)",
                            "alternate: django-admin builtin commands fail with an error when no settings provided",
                            "alternate: django-admin builtin commands fail if settings file (from environment) doesn't exist",
                            "alternate: django-admin builtin commands fail if settings file (from argument) doesn't exist",
                            "alternate: django-admin builtin commands succeed if settings are provided in the environment",
                            "alternate: django-admin builtin commands succeed if settings are provided as argument",
                            "alternate: django-admin can't execute user commands unless settings are provided",
                            "alternate: django-admin can execute user commands if settings are provided in environment",
                            "alternate: django-admin can execute user commands if settings are provided as argument",
                            "minimal: django-admin builtin commands fail with an error when no settings provided",
                            "minimal: django-admin builtin commands fail if settings file (from environment) doesn't exist",
                            "minimal: django-admin builtin commands fail if settings file (from argument) doesn't exist",
                            "minimal: django-admin builtin commands fail if settings are provided in the environment",
                            "minimal: django-admin builtin commands fail if settings are provided as argument",
                            "minimal: django-admin can't execute user commands unless settings are provided",
                            "minimal: django-admin can't execute user commands, even if settings are provided in environment",
                            "minimal: django-admin can't execute user commands, even if settings are provided as argument",
                            "fulldefault: django-admin builtin commands fail with an error when no settings provided",
                            "fulldefault: django-admin builtin commands fail if settings file (from environment) doesn't exist",
                            "fulldefault: django-admin builtin commands fail if settings file (from argument) doesn't exist",
                            "fulldefault: django-admin builtin commands succeed if the environment contains settings",
                            "fulldefault: django-admin builtin commands succeed if a settings file is provided",
                            "fulldefault: django-admin can't execute user commands unless settings are provided",
                            "fulldefault: django-admin can execute user commands if settings are provided in environment",
                            "fulldefault: django-admin can execute user commands if settings are provided as argument",
                            "default: django-admin builtin commands fail with an error when no settings provided",
                            "default: django-admin builtin commands fail if settings file (from environment) doesn't exist",
                            "default: django-admin builtin commands fail if settings file (from argument) doesn't exist",
                            "default: django-admin builtin commands succeed if settings are provided in the environment",
                            "default: django-admin builtin commands succeed if settings are provided as argument",
                            "default: django-admin can't execute user commands if it isn't provided settings",
                            "default: django-admin can execute user commands if settings are provided in environment",
                            "default: django-admin can execute user commands if settings are provided as argument",
                            "directory: django-admin builtin commands fail with an error when no settings provided",
                            "directory: django-admin builtin commands fail if settings file (from environment) doesn't exist",
                            "directory: django-admin builtin commands fail if settings file (from argument) doesn't exist",
                            "directory: django-admin builtin commands succeed if settings are provided in the environment",
                            "directory: django-admin builtin commands succeed if settings are provided as argument",
                            "directory: django-admin can't execute user commands unless settings are provided",
                            "directory: startapp creates the correct directory",
                            "directory: startapp creates the correct directory with a custom template",
                            "Options passed before settings are correctly handled.",
                            "Options are correctly handled when they are passed before and after",
                            "Options passed after settings are correctly handled.",
                            "Short options passed after settings are correctly handled.",
                            "Short options passed before settings are correctly handled.",
                            "Runs without error and emits settings diff.",
                            "test_custom_default (admin_scripts.tests.DiffSettings)",
                            "--output=unified emits settings diff in unified mode.",
                            "alternate: manage.py builtin commands fail with an error when no default settings provided",
                            "alternate: manage.py builtin commands fail if settings file (from environment) doesn't exist",
                            "alternate: manage.py builtin commands fail if settings file (from argument) doesn't exist",
                            "alternate: manage.py builtin commands work if settings are provided in the environment",
                            "alternate: manage.py builtin commands work with settings provided as argument",
                            "alternate: manage.py can't execute user commands without settings",
                            "alternate: manage.py output syntax color can be deactivated with the `--no-color` option",
                            "alternate: manage.py can execute user commands if settings are provided in environment",
                            "alternate: manage.py can execute user commands if settings are provided as argument",
                            "manage.py check does not raise errors when an app imports a base",
                            "manage.py check reports an ImportError if an app's models.py",
                            "manage.py check does not raise an ImportError validating a",
                            "check reports an error on a nonexistent app in INSTALLED_APPS.",
                            "All errors/warnings should be sorted by level and by message.",
                            "test_warning_does_not_halt (admin_scripts.tests.ManageCheck)",
                            "multiple: manage.py builtin commands fail with an error when no settings provided",
                            "multiple: manage.py builtin commands fail if settings file (from environment) doesn't exist",
                            "multiple: manage.py builtin commands fail if settings file (from argument) doesn't exist",
                            "multiple: manage.py can execute builtin commands if settings are provided in the environment",
                            "multiple: manage.py builtin commands succeed if settings are provided as argument",
                            "multiple: manage.py can't execute user commands using default settings",
                            "multiple: manage.py can execute user commands if settings are provided in environment",
                            "multiple: manage.py can execute user commands if settings are provided as argument",
                            "minimal: manage.py builtin commands fail with an error when no settings provided",
                            "minimal: manage.py builtin commands fail if settings file (from environment) doesn't exist",
                            "minimal: manage.py builtin commands fail if settings file (from argument) doesn't exist",
                            "minimal: manage.py builtin commands fail if settings are provided in the environment",
                            "minimal: manage.py builtin commands fail if settings are provided as argument",
                            "minimal: manage.py can't execute user commands without appropriate settings",
                            "minimal: manage.py can't execute user commands, even if settings are provided in environment",
                            "minimal: manage.py can't execute user commands, even if settings are provided as argument",
                            "default: manage.py builtin commands succeed when default settings are appropriate",
                            "default: manage.py builtin commands fail if settings file (from environment) doesn't exist",
                            "default: manage.py builtin commands succeed if settings file (from argument) doesn't exist",
                            "default: manage.py builtin commands succeed if settings are provided in the environment",
                            "default: manage.py builtin commands succeed if settings are provided as argument",
                            "default: manage.py can execute user commands when default settings are appropriate",
                            "default: manage.py can execute user commands when settings are provided in environment",
                            "default: manage.py can execute user commands when settings are provided as argument",
                            "fulldefault: manage.py builtin commands succeed when default settings are appropriate",
                            "fulldefault: manage.py builtin commands fail if settings file (from environment) doesn't exist",
                            "fulldefault: manage.py builtin commands succeed if settings file (from argument) doesn't exist",
                            "fulldefault: manage.py builtin commands succeed if settings are provided in the environment",
                            "fulldefault: manage.py builtin commands succeed if settings are provided as argument",
                            "fulldefault: manage.py can execute user commands when default settings are appropriate",
                            "fulldefault: manage.py can execute user commands when settings are provided in environment",
                            "fulldefault: manage.py can execute user commands when settings are provided as argument",
                            "test_custom_project_destination_missing (admin_scripts.tests.StartProject)",
                            "Make sure the startproject management command is able to use a different project template",
                            "Make sure template context variables are rendered with proper values",
                            "Make sure the startproject management command is able to use a different project template from a tarball",
                            "test_custom_project_template_from_tarball_by_url (admin_scripts.tests.StartProject)",
                            "Startproject can use a project template from a tarball and create it in a specified location",
                            "test_custom_project_template_with_non_ascii_templates (admin_scripts.tests.StartProject)",
                            "Make sure the startproject management command is able to render custom files",
                            "test_importable_project_name (admin_scripts.tests.StartProject)",
                            "Make sure the startproject management command validates a project name",
                            "Make sure template context variables are not html escaped",
                            "Startproject management command handles project template tar/zip balls from non-canonical urls",
                            "Make sure the startproject management command creates a project",
                            "Make sure the startproject management command creates a project in a specific directory",
                            "Ticket 17475: Template dir passed has a trailing path separator",
                            "Make sure passing the wrong kinds of arguments outputs an error and prints usage",
                            "User AppCommands can execute when a single app name is provided",
                            "User AppCommands raise an error when multiple app names are provided",
                            "User AppCommands raise an error when no app name is provided",
                            "User AppCommands can execute when some of the provided app names are invalid",
                            "User BaseCommands can execute when a label is provided",
                            "User BaseCommands can execute when no labels are provided",
                            "User BaseCommands can execute with options when a label is provided",
                            "User BaseCommands can execute with multiple options when a label is provided",
                            "User BaseCommands outputs command usage when wrong option is specified",
                            "test_base_run_from_argv (admin_scripts.tests.CommandTypes)",
                            "test_color_style (admin_scripts.tests.CommandTypes)",
                            "test_command_color (admin_scripts.tests.CommandTypes)",
                            "--no-color prevent colorization of the output",
                            "test_custom_stderr (admin_scripts.tests.CommandTypes)",
                            "test_custom_stdout (admin_scripts.tests.CommandTypes)",
                            "help is handled as a special case",
                            "--help is equivalent to help",
                            "help --commands shows the list of all available commands",
                            "-h is handled as a short form of --help",
                            "User LabelCommands can execute when a label is provided",
                            "User LabelCommands are executed multiple times if multiple labels are provided",
                            "User LabelCommands raise an error if no label is provided",
                            "NoArg Commands can be executed",
                            "NoArg Commands raise an error if an argument is provided",
                            "test_run_from_argv_closes_connections (admin_scripts.tests.CommandTypes)",
                            "test_run_from_argv_non_ascii_error (admin_scripts.tests.CommandTypes)",
                            "version is handled as a special case",
                            "--version is equivalent to version"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "astropy__astropy-8872.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "astropy/units/tests/test_quantity.py::TestQuantityCreation::test_preserve_dtype"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "astropy/units/tests/test_quantity.py::TestQuantityCreation::test_1",
                            "astropy/units/tests/test_quantity.py::TestQuantityCreation::test_2",
                            "astropy/units/tests/test_quantity.py::TestQuantityCreation::test_3",
                            "astropy/units/tests/test_quantity.py::TestQuantityCreation::test_nan_inf",
                            "astropy/units/tests/test_quantity.py::TestQuantityCreation::test_unit_property",
                            "astropy/units/tests/test_quantity.py::TestQuantityCreation::test_copy",
                            "astropy/units/tests/test_quantity.py::TestQuantityCreation::test_subok",
                            "astropy/units/tests/test_quantity.py::TestQuantityCreation::test_order",
                            "astropy/units/tests/test_quantity.py::TestQuantityCreation::test_ndmin",
                            "astropy/units/tests/test_quantity.py::TestQuantityCreation::test_non_quantity_with_unit",
                            "astropy/units/tests/test_quantity.py::TestQuantityCreation::test_creation_via_view",
                            "astropy/units/tests/test_quantity.py::TestQuantityCreation::test_rshift_warns",
                            "astropy/units/tests/test_quantity.py::TestQuantityOperations::test_addition",
                            "astropy/units/tests/test_quantity.py::TestQuantityOperations::test_subtraction",
                            "astropy/units/tests/test_quantity.py::TestQuantityOperations::test_multiplication",
                            "astropy/units/tests/test_quantity.py::TestQuantityOperations::test_division",
                            "astropy/units/tests/test_quantity.py::TestQuantityOperations::test_commutativity",
                            "astropy/units/tests/test_quantity.py::TestQuantityOperations::test_power",
                            "astropy/units/tests/test_quantity.py::TestQuantityOperations::test_matrix_multiplication",
                            "astropy/units/tests/test_quantity.py::TestQuantityOperations::test_unary",
                            "astropy/units/tests/test_quantity.py::TestQuantityOperations::test_abs",
                            "astropy/units/tests/test_quantity.py::TestQuantityOperations::test_incompatible_units",
                            "astropy/units/tests/test_quantity.py::TestQuantityOperations::test_non_number_type",
                            "astropy/units/tests/test_quantity.py::TestQuantityOperations::test_dimensionless_operations",
                            "astropy/units/tests/test_quantity.py::TestQuantityOperations::test_complicated_operation",
                            "astropy/units/tests/test_quantity.py::TestQuantityOperations::test_comparison",
                            "astropy/units/tests/test_quantity.py::TestQuantityOperations::test_numeric_converters",
                            "astropy/units/tests/test_quantity.py::TestQuantityOperations::test_array_converters",
                            "astropy/units/tests/test_quantity.py::test_quantity_conversion",
                            "astropy/units/tests/test_quantity.py::test_quantity_value_views",
                            "astropy/units/tests/test_quantity.py::test_quantity_conversion_with_equiv",
                            "astropy/units/tests/test_quantity.py::test_quantity_conversion_equivalency_passed_on",
                            "astropy/units/tests/test_quantity.py::test_self_equivalency",
                            "astropy/units/tests/test_quantity.py::test_si",
                            "astropy/units/tests/test_quantity.py::test_cgs",
                            "astropy/units/tests/test_quantity.py::TestQuantityComparison::test_quantity_equality",
                            "astropy/units/tests/test_quantity.py::TestQuantityComparison::test_quantity_equality_array",
                            "astropy/units/tests/test_quantity.py::TestQuantityComparison::test_quantity_comparison",
                            "astropy/units/tests/test_quantity.py::TestQuantityDisplay::test_dimensionless_quantity_repr",
                            "astropy/units/tests/test_quantity.py::TestQuantityDisplay::test_dimensionless_quantity_str",
                            "astropy/units/tests/test_quantity.py::TestQuantityDisplay::test_dimensionless_quantity_format",
                            "astropy/units/tests/test_quantity.py::TestQuantityDisplay::test_scalar_quantity_str",
                            "astropy/units/tests/test_quantity.py::TestQuantityDisplay::test_scalar_quantity_repr",
                            "astropy/units/tests/test_quantity.py::TestQuantityDisplay::test_array_quantity_str",
                            "astropy/units/tests/test_quantity.py::TestQuantityDisplay::test_array_quantity_repr",
                            "astropy/units/tests/test_quantity.py::TestQuantityDisplay::test_scalar_quantity_format",
                            "astropy/units/tests/test_quantity.py::TestQuantityDisplay::test_uninitialized_unit_format",
                            "astropy/units/tests/test_quantity.py::TestQuantityDisplay::test_to_string",
                            "astropy/units/tests/test_quantity.py::TestQuantityDisplay::test_repr_latex",
                            "astropy/units/tests/test_quantity.py::test_decompose",
                            "astropy/units/tests/test_quantity.py::test_decompose_regression",
                            "astropy/units/tests/test_quantity.py::test_arrays",
                            "astropy/units/tests/test_quantity.py::test_array_indexing_slicing",
                            "astropy/units/tests/test_quantity.py::test_array_setslice",
                            "astropy/units/tests/test_quantity.py::test_inverse_quantity",
                            "astropy/units/tests/test_quantity.py::test_quantity_mutability",
                            "astropy/units/tests/test_quantity.py::test_quantity_initialized_with_quantity",
                            "astropy/units/tests/test_quantity.py::test_quantity_string_unit",
                            "astropy/units/tests/test_quantity.py::test_quantity_invalid_unit_string",
                            "astropy/units/tests/test_quantity.py::test_implicit_conversion",
                            "astropy/units/tests/test_quantity.py::test_implicit_conversion_autocomplete",
                            "astropy/units/tests/test_quantity.py::test_quantity_iterability",
                            "astropy/units/tests/test_quantity.py::test_copy",
                            "astropy/units/tests/test_quantity.py::test_deepcopy",
                            "astropy/units/tests/test_quantity.py::test_equality_numpy_scalar",
                            "astropy/units/tests/test_quantity.py::test_quantity_pickelability",
                            "astropy/units/tests/test_quantity.py::test_quantity_initialisation_from_string",
                            "astropy/units/tests/test_quantity.py::test_unsupported",
                            "astropy/units/tests/test_quantity.py::test_unit_identity",
                            "astropy/units/tests/test_quantity.py::test_quantity_to_view",
                            "astropy/units/tests/test_quantity.py::test_quantity_tuple_power",
                            "astropy/units/tests/test_quantity.py::test_quantity_fraction_power",
                            "astropy/units/tests/test_quantity.py::test_inherit_docstrings",
                            "astropy/units/tests/test_quantity.py::test_repr_array_of_quantity",
                            "astropy/units/tests/test_quantity.py::TestQuantityMatplotlib::test_plot",
                            "astropy/units/tests/test_quantity.py::test_unit_class_override",
                            "astropy/units/tests/test_quantity.py::TestQuantityMimics::test_mimic_input[QuantityMimic]",
                            "astropy/units/tests/test_quantity.py::TestQuantityMimics::test_mimic_input[QuantityMimic2]",
                            "astropy/units/tests/test_quantity.py::TestQuantityMimics::test_mimic_setting[QuantityMimic]",
                            "astropy/units/tests/test_quantity.py::TestQuantityMimics::test_mimic_setting[QuantityMimic2]"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "pallets__flask-4544.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "tests/test_cli.py::test_run_cert_path"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "tests/test_cli.py::test_cli_name",
                            "tests/test_cli.py::test_find_best_app",
                            "tests/test_cli.py::test_prepare_import[test-path0-test]",
                            "tests/test_cli.py::test_prepare_import[test.py-path1-test]",
                            "tests/test_cli.py::test_prepare_import[a/test-path2-test]",
                            "tests/test_cli.py::test_prepare_import[test/__init__.py-path3-test]",
                            "tests/test_cli.py::test_prepare_import[test/__init__-path4-test]",
                            "tests/test_cli.py::test_prepare_import[value5-path5-cliapp.inner1]",
                            "tests/test_cli.py::test_prepare_import[value6-path6-cliapp.inner1.inner2]",
                            "tests/test_cli.py::test_prepare_import[test.a.b-path7-test.a.b]",
                            "tests/test_cli.py::test_prepare_import[value8-path8-cliapp.app]",
                            "tests/test_cli.py::test_prepare_import[value9-path9-cliapp.message.txt]",
                            "tests/test_cli.py::test_locate_app[cliapp.app-None-testapp]",
                            "tests/test_cli.py::test_locate_app[cliapp.app-testapp-testapp]",
                            "tests/test_cli.py::test_locate_app[cliapp.factory-None-app]",
                            "tests/test_cli.py::test_locate_app[cliapp.factory-create_app-app]",
                            "tests/test_cli.py::test_locate_app[cliapp.factory-create_app()-app]",
                            "tests/test_cli.py::test_locate_app[cliapp.factory-create_app2(\"foo\",",
                            "tests/test_cli.py::test_locate_app[cliapp.factory-",
                            "tests/test_cli.py::test_locate_app_raises[notanapp.py-None]",
                            "tests/test_cli.py::test_locate_app_raises[cliapp/app-None]",
                            "tests/test_cli.py::test_locate_app_raises[cliapp.app-notanapp]",
                            "tests/test_cli.py::test_locate_app_raises[cliapp.factory-create_app2(\"foo\")]",
                            "tests/test_cli.py::test_locate_app_raises[cliapp.factory-create_app(]",
                            "tests/test_cli.py::test_locate_app_raises[cliapp.factory-no_app]",
                            "tests/test_cli.py::test_locate_app_raises[cliapp.importerrorapp-None]",
                            "tests/test_cli.py::test_locate_app_raises[cliapp.message.txt-None]",
                            "tests/test_cli.py::test_locate_app_suppress_raise",
                            "tests/test_cli.py::test_get_version",
                            "tests/test_cli.py::test_scriptinfo",
                            "tests/test_cli.py::test_lazy_load_error",
                            "tests/test_cli.py::test_with_appcontext",
                            "tests/test_cli.py::test_appgroup",
                            "tests/test_cli.py::test_flaskgroup",
                            "tests/test_cli.py::test_flaskgroup_debug[True]",
                            "tests/test_cli.py::test_flaskgroup_debug[False]",
                            "tests/test_cli.py::test_no_command_echo_loading_error",
                            "tests/test_cli.py::test_help_echo_loading_error",
                            "tests/test_cli.py::test_help_echo_exception",
                            "tests/test_cli.py::TestRoutes::test_simple",
                            "tests/test_cli.py::TestRoutes::test_all_methods",
                            "tests/test_cli.py::TestRoutes::test_no_routes",
                            "tests/test_cli.py::test_load_dotenv",
                            "tests/test_cli.py::test_dotenv_path",
                            "tests/test_cli.py::test_dotenv_optional",
                            "tests/test_cli.py::test_disable_dotenv_from_env",
                            "tests/test_cli.py::test_run_cert_adhoc",
                            "tests/test_cli.py::test_run_cert_import",
                            "tests/test_cli.py::test_run_cert_no_ssl",
                            "tests/test_cli.py::test_cli_blueprints",
                            "tests/test_cli.py::test_cli_empty"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "scikit-learn__scikit-learn-26644.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_partial_dependence_display_with_constant_sample_weight"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence[10]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence[20]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_kind[average-False-None-shape0]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_kind[individual-False-None-shape1]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_kind[both-False-None-shape2]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_kind[individual-False-20-shape3]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_kind[both-False-20-shape4]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_kind[individual-False-0.5-shape5]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_kind[both-False-0.5-shape6]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_kind[average-True-None-shape7]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_kind[individual-True-None-shape8]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_kind[both-True-None-shape9]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_kind[individual-True-20-shape10]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_kind[both-True-20-shape11]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_str_features[dataframe-None]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_str_features[dataframe-list]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_str_features[list-list]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_str_features[array-list]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_str_features[dataframe-array]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_str_features[list-array]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_str_features[array-array]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_str_features[dataframe-series]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_str_features[list-series]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_str_features[array-series]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_str_features[dataframe-index]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_str_features[list-index]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_str_features[array-index]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_custom_axes",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_passing_numpy_axes[average-1]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_passing_numpy_axes[individual-50]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_passing_numpy_axes[both-51]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_incorrent_num_axes[2-2]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_incorrent_num_axes[3-1]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_with_same_axes",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_feature_name_reuse",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_multiclass",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_multioutput[0]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_multioutput[1]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_dataframe",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_error[data0-params0-target",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_error[data1-params1-target",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_error[data2-params2-target",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_error[data3-params3-Feature",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_error[data4-params4-Feature",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_error[data5-params5-Each",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_error[data6-params6-Each",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_error[data7-params7-Each",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_error[data8-params8-All",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_error[data9-params9-feature_names",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_error[data10-params10-When",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_error[data11-params11-When",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_error[data12-params12-When",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_error[data13-params13-Expected",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_error[data14-params14-Two-way",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_error[data15-params15-It",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_multiclass_error[params0-target",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_multiclass_error[params1-target",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_multiclass_error[params2-Each",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_does_not_override_ylabel",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_with_categorical[categorical_features0-dataframe]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_with_categorical[categorical_features1-array]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_with_categorical[categorical_features2-array]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_legend",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_subsampling[average-expected_shape0]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_subsampling[individual-expected_shape1]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_subsampling[both-expected_shape2]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_partial_dependence_overwrite_labels[individual-line_kw0-None]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_partial_dependence_overwrite_labels[individual-line_kw1-None]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_partial_dependence_overwrite_labels[average-line_kw2-None]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_partial_dependence_overwrite_labels[average-line_kw3-xxx]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_partial_dependence_overwrite_labels[both-line_kw4-average]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_partial_dependence_overwrite_labels[both-line_kw5-xxx]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_grid_resolution_with_categorical[categorical_features0-dataframe]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_grid_resolution_with_categorical[categorical_features1-array]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_grid_resolution_with_categorical[categorical_features2-array]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_partial_dependence_plot_limits_one_way[True-individual]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_partial_dependence_plot_limits_one_way[True-average]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_partial_dependence_plot_limits_one_way[True-both]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_partial_dependence_plot_limits_one_way[False-individual]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_partial_dependence_plot_limits_one_way[False-average]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_partial_dependence_plot_limits_one_way[False-both]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_partial_dependence_plot_limits_two_way[True]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_partial_dependence_plot_limits_two_way[False]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_partial_dependence_kind_list",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_partial_dependence_kind_error[features0-individual]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_partial_dependence_kind_error[features1-both]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_partial_dependence_kind_error[features2-individual]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_partial_dependence_kind_error[features3-both]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_partial_dependence_kind_error[features4-kind4]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_partial_dependence_kind_error[features5-kind5]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_lines_kw[line_kw0-pd_line_kw0-ice_lines_kw0-expected_colors0]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_lines_kw[None-pd_line_kw1-ice_lines_kw1-expected_colors1]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_lines_kw[line_kw2-None-ice_lines_kw2-expected_colors2]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_lines_kw[line_kw3-pd_line_kw3-None-expected_colors3]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_lines_kw[line_kw4-None-None-expected_colors4]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_plot_partial_dependence_lines_kw[line_kw5-pd_line_kw5-ice_lines_kw5-expected_colors5]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_partial_dependence_display_wrong_len_kind",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_partial_dependence_display_kind_centered_interaction[individual]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_partial_dependence_display_kind_centered_interaction[both]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_partial_dependence_display_kind_centered_interaction[average]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_partial_dependence_display_kind_centered_interaction[kind3]",
                            "sklearn/inspection/_plot/tests/test_plot_partial_dependence.py::test_partial_dependence_display_kind_centered_interaction[kind4]"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "pylint-dev__pylint-6556.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "tests/lint/unittest_lint.py::test_enable_message_block",
                            "tests/test_deprecation.py::test_collectblocklines"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "tests/lint/unittest_lint.py::test_no_args",
                            "tests/lint/unittest_lint.py::test_one_arg[case0]",
                            "tests/lint/unittest_lint.py::test_one_arg[case1]",
                            "tests/lint/unittest_lint.py::test_one_arg[case2]",
                            "tests/lint/unittest_lint.py::test_one_arg[case3]",
                            "tests/lint/unittest_lint.py::test_one_arg[case4]",
                            "tests/lint/unittest_lint.py::test_two_similar_args[case0]",
                            "tests/lint/unittest_lint.py::test_two_similar_args[case1]",
                            "tests/lint/unittest_lint.py::test_two_similar_args[case2]",
                            "tests/lint/unittest_lint.py::test_two_similar_args[case3]",
                            "tests/lint/unittest_lint.py::test_more_args[case0]",
                            "tests/lint/unittest_lint.py::test_more_args[case1]",
                            "tests/lint/unittest_lint.py::test_more_args[case2]",
                            "tests/lint/unittest_lint.py::test_pylint_visit_method_taken_in_account",
                            "tests/lint/unittest_lint.py::test_enable_message",
                            "tests/lint/unittest_lint.py::test_enable_message_category",
                            "tests/lint/unittest_lint.py::test_message_state_scope",
                            "tests/lint/unittest_lint.py::test_enable_by_symbol",
                            "tests/lint/unittest_lint.py::test_enable_report",
                            "tests/lint/unittest_lint.py::test_report_output_format_aliased",
                            "tests/lint/unittest_lint.py::test_set_unsupported_reporter",
                            "tests/lint/unittest_lint.py::test_set_option_1",
                            "tests/lint/unittest_lint.py::test_set_option_2",
                            "tests/lint/unittest_lint.py::test_enable_checkers",
                            "tests/lint/unittest_lint.py::test_errors_only",
                            "tests/lint/unittest_lint.py::test_disable_similar",
                            "tests/lint/unittest_lint.py::test_disable_alot",
                            "tests/lint/unittest_lint.py::test_addmessage",
                            "tests/lint/unittest_lint.py::test_addmessage_invalid",
                            "tests/lint/unittest_lint.py::test_load_plugin_command_line",
                            "tests/lint/unittest_lint.py::test_load_plugin_config_file",
                            "tests/lint/unittest_lint.py::test_load_plugin_configuration",
                            "tests/lint/unittest_lint.py::test_init_hooks_called_before_load_plugins",
                            "tests/lint/unittest_lint.py::test_analyze_explicit_script",
                            "tests/lint/unittest_lint.py::test_full_documentation",
                            "tests/lint/unittest_lint.py::test_list_msgs_enabled",
                            "tests/lint/unittest_lint.py::test_pylint_home",
                            "tests/lint/unittest_lint.py::test_pylint_home_from_environ",
                            "tests/lint/unittest_lint.py::test_warn_about_old_home",
                            "tests/lint/unittest_lint.py::test_pylintrc",
                            "tests/lint/unittest_lint.py::test_pylintrc_parentdir",
                            "tests/lint/unittest_lint.py::test_pylintrc_parentdir_no_package",
                            "tests/lint/unittest_lint.py::test_custom_should_analyze_file",
                            "tests/lint/unittest_lint.py::test_multiprocessing[1]",
                            "tests/lint/unittest_lint.py::test_multiprocessing[2]",
                            "tests/lint/unittest_lint.py::test_filename_with__init__",
                            "tests/lint/unittest_lint.py::test_by_module_statement_value",
                            "tests/test_deprecation.py::test_mapreducemixin",
                            "tests/test_deprecation.py::test_reporter_implements",
                            "tests/test_deprecation.py::test_checker_implements",
                            "tests/test_deprecation.py::test_interfaces",
                            "tests/test_deprecation.py::test_load_and_save_results",
                            "tests/test_deprecation.py::test_filestate"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "psf__requests-774.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "tests/test_requests.py::RequestsTestSuite::test_GET_no_redirect",
                            "tests/test_requests.py::RequestsTestSuite::test_HTTP_200_OK_GET_WITH_MIXED_PARAMS",
                            "tests/test_requests.py::RequestsTestSuite::test_POSTBIN_GET_POST_FILES_WITH_PARAMS",
                            "tests/test_requests.py::RequestsTestSuite::test_danger_mode_redirects",
                            "tests/test_requests.py::RequestsTestSuite::test_httpauth_recursion",
                            "tests/test_requests.py::RequestsTestSuite::test_iter_lines",
                            "tests/test_requests.py::RequestsTestSuite::test_urlencoded_post_querystring_multivalued"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "tests/test_requests.py::RequestsTestSuite::test_BASICAUTH_TUPLE_HTTP_200_OK_GET",
                            "tests/test_requests.py::RequestsTestSuite::test_HEAD_no_redirect",
                            "tests/test_requests.py::RequestsTestSuite::test_HTTP_200_OK_GET",
                            "tests/test_requests.py::RequestsTestSuite::test_HTTP_200_OK_GET_WITH_PARAMS",
                            "tests/test_requests.py::RequestsTestSuite::test_HTTP_200_OK_HEAD",
                            "tests/test_requests.py::RequestsTestSuite::test_HTTP_200_OK_PUT",
                            "tests/test_requests.py::RequestsTestSuite::test_HTTP_302_ALLOW_REDIRECT_GET",
                            "tests/test_requests.py::RequestsTestSuite::test_HTTP_302_GET",
                            "tests/test_requests.py::RequestsTestSuite::test_POSTBIN_GET_POST_FILES",
                            "tests/test_requests.py::RequestsTestSuite::test_POSTBIN_GET_POST_FILES_STRINGS",
                            "tests/test_requests.py::RequestsTestSuite::test_POSTBIN_GET_POST_FILES_WITH_HEADERS",
                            "tests/test_requests.py::RequestsTestSuite::test_accept_objects_with_string_representations_as_urls",
                            "tests/test_requests.py::RequestsTestSuite::test_bytes_files",
                            "tests/test_requests.py::RequestsTestSuite::test_cached_response",
                            "tests/test_requests.py::RequestsTestSuite::test_can_have_none_in_header_values",
                            "tests/test_requests.py::RequestsTestSuite::test_connection_error",
                            "tests/test_requests.py::RequestsTestSuite::test_connection_error_with_safe_mode",
                            "tests/test_requests.py::RequestsTestSuite::test_connection_keepalive_and_close",
                            "tests/test_requests.py::RequestsTestSuite::test_decompress_gzip",
                            "tests/test_requests.py::RequestsTestSuite::test_default_status_raising",
                            "tests/test_requests.py::RequestsTestSuite::test_empty_response",
                            "tests/test_requests.py::RequestsTestSuite::test_entry_points",
                            "tests/test_requests.py::RequestsTestSuite::test_file_post_data",
                            "tests/test_requests.py::RequestsTestSuite::test_head_content",
                            "tests/test_requests.py::RequestsTestSuite::test_invalid_url",
                            "tests/test_requests.py::RequestsTestSuite::test_max_redirects",
                            "tests/test_requests.py::RequestsTestSuite::test_multiple_hooks",
                            "tests/test_requests.py::RequestsTestSuite::test_nonurlencoded_post_data",
                            "tests/test_requests.py::RequestsTestSuite::test_nonurlencoded_postdata",
                            "tests/test_requests.py::RequestsTestSuite::test_nonzero_evaluation",
                            "tests/test_requests.py::RequestsTestSuite::test_params_are_added_before_fragment",
                            "tests/test_requests.py::RequestsTestSuite::test_path_is_not_double_encoded",
                            "tests/test_requests.py::RequestsTestSuite::test_post_fields_with_multiple_values_and_files",
                            "tests/test_requests.py::RequestsTestSuite::test_post_fields_with_multiple_values_and_files_as_tuples",
                            "tests/test_requests.py::RequestsTestSuite::test_prefetch_redirect_bug",
                            "tests/test_requests.py::RequestsTestSuite::test_prefetch_return_response_interaction",
                            "tests/test_requests.py::RequestsTestSuite::test_redirect_history",
                            "tests/test_requests.py::RequestsTestSuite::test_relative_redirect_history",
                            "tests/test_requests.py::RequestsTestSuite::test_request_ok_set",
                            "tests/test_requests.py::RequestsTestSuite::test_response_has_unicode_url",
                            "tests/test_requests.py::RequestsTestSuite::test_response_sent",
                            "tests/test_requests.py::RequestsTestSuite::test_session_HTTP_200_OK_GET",
                            "tests/test_requests.py::RequestsTestSuite::test_session_persistent_params",
                            "tests/test_requests.py::RequestsTestSuite::test_session_pickling",
                            "tests/test_requests.py::RequestsTestSuite::test_single_hook",
                            "tests/test_requests.py::RequestsTestSuite::test_status_raising",
                            "tests/test_requests.py::RequestsTestSuite::test_unicode_get",
                            "tests/test_requests.py::RequestsTestSuite::test_upload_binary_data",
                            "tests/test_requests.py::RequestsTestSuite::test_urlencoded_get_query_multivalued_param",
                            "tests/test_requests.py::RequestsTestSuite::test_urlencoded_post_data",
                            "tests/test_requests.py::RequestsTestSuite::test_urlencoded_post_query_and_data",
                            "tests/test_requests.py::RequestsTestSuite::test_urlencoded_post_query_multivalued_and_data",
                            "tests/test_requests.py::RequestsTestSuite::test_urlencoded_post_querystring",
                            "tests/test_requests.py::RequestsTestSuite::test_useful_exception_for_invalid_port",
                            "tests/test_requests.py::RequestsTestSuite::test_useful_exception_for_invalid_scheme",
                            "tests/test_requests.py::RequestsTestSuite::test_user_agent_transfers"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "django__django-14267.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "test_deconstruct (queries.test_q.QTests)",
                            "test_deconstruct_boolean_expression (queries.test_q.QTests)",
                            "test_deconstruct_negated (queries.test_q.QTests)",
                            "test_boolean_expression_combined_with_empty_Q (expressions.tests.BasicExpressionsTests)"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "test_and (expressions.tests.CombinableTests)",
                            "test_negation (expressions.tests.CombinableTests)",
                            "test_or (expressions.tests.CombinableTests)",
                            "test_reversed_and (expressions.tests.CombinableTests)",
                            "test_reversed_or (expressions.tests.CombinableTests)",
                            "test_empty_group_by (expressions.tests.ExpressionWrapperTests)",
                            "test_non_empty_group_by (expressions.tests.ExpressionWrapperTests)",
                            "test_aggregates (expressions.tests.ReprTests)",
                            "test_distinct_aggregates (expressions.tests.ReprTests)",
                            "test_expressions (expressions.tests.ReprTests)",
                            "test_filtered_aggregates (expressions.tests.ReprTests)",
                            "test_functions (expressions.tests.ReprTests)",
                            "test_deconstruct (expressions.tests.FTests)",
                            "test_deepcopy (expressions.tests.FTests)",
                            "test_equal (expressions.tests.FTests)",
                            "test_hash (expressions.tests.FTests)",
                            "test_not_equal_Value (expressions.tests.FTests)",
                            "test_resolve_output_field (expressions.tests.CombinedExpressionTests)",
                            "test_combine_and_both_empty (queries.test_q.QTests)",
                            "test_combine_and_empty (queries.test_q.QTests)",
                            "test_combine_not_q_object (queries.test_q.QTests)",
                            "test_combine_or_both_empty (queries.test_q.QTests)",
                            "test_combine_or_empty (queries.test_q.QTests)",
                            "test_deconstruct_and (queries.test_q.QTests)",
                            "test_deconstruct_multiple_kwargs (queries.test_q.QTests)",
                            "test_deconstruct_nested (queries.test_q.QTests)",
                            "test_deconstruct_or (queries.test_q.QTests)",
                            "test_reconstruct (queries.test_q.QTests)",
                            "test_reconstruct_and (queries.test_q.QTests)",
                            "test_reconstruct_negated (queries.test_q.QTests)",
                            "test_reconstruct_or (queries.test_q.QTests)",
                            "test_equal (expressions.tests.SimpleExpressionTests)",
                            "test_hash (expressions.tests.SimpleExpressionTests)",
                            "test_optimizations (expressions.tests.ExistsTests)",
                            "test_month_aggregation (expressions.tests.FieldTransformTests)",
                            "test_multiple_transforms_in_values (expressions.tests.FieldTransformTests)",
                            "test_transform_in_values (expressions.tests.FieldTransformTests)",
                            "test_F_reuse (expressions.tests.ExpressionsTests)",
                            "test_insensitive_patterns_escape (expressions.tests.ExpressionsTests)",
                            "test_patterns_escape (expressions.tests.ExpressionsTests)",
                            "test_compile_unresolved (expressions.tests.ValueTests)",
                            "test_deconstruct (expressions.tests.ValueTests)",
                            "test_deconstruct_output_field (expressions.tests.ValueTests)",
                            "test_equal (expressions.tests.ValueTests)",
                            "test_equal_output_field (expressions.tests.ValueTests)",
                            "test_hash (expressions.tests.ValueTests)",
                            "test_raise_empty_expressionlist (expressions.tests.ValueTests)",
                            "test_resolve_output_field (expressions.tests.ValueTests)",
                            "test_resolve_output_field_failure (expressions.tests.ValueTests)",
                            "test_update_TimeField_using_Value (expressions.tests.ValueTests)",
                            "test_update_UUIDField_using_Value (expressions.tests.ValueTests)",
                            "test_complex_expressions (expressions.tests.ExpressionsNumericTests)",
                            "test_fill_with_value_from_same_object (expressions.tests.ExpressionsNumericTests)",
                            "test_filter_not_equals_other_field (expressions.tests.ExpressionsNumericTests)",
                            "test_increment_value (expressions.tests.ExpressionsNumericTests)",
                            "test_complex_expressions_do_not_introduce_sql_injection_via_untrusted_string_inclusion (expressions.tests.IterableLookupInnerExpressionsTests)",
                            "test_expressions_in_lookups_join_choice (expressions.tests.IterableLookupInnerExpressionsTests)",
                            "test_in_lookup_allows_F_expressions_and_expressions_for_datetimes (expressions.tests.IterableLookupInnerExpressionsTests)",
                            "test_in_lookup_allows_F_expressions_and_expressions_for_integers (expressions.tests.IterableLookupInnerExpressionsTests)",
                            "test_range_lookup_allows_F_expressions_and_expressions_for_integers (expressions.tests.IterableLookupInnerExpressionsTests)",
                            "test_range_lookup_namedtuple (expressions.tests.IterableLookupInnerExpressionsTests)",
                            "test_lefthand_addition (expressions.tests.ExpressionOperatorTests)",
                            "test_lefthand_bitwise_and (expressions.tests.ExpressionOperatorTests)",
                            "test_lefthand_bitwise_left_shift_operator (expressions.tests.ExpressionOperatorTests)",
                            "test_lefthand_bitwise_or (expressions.tests.ExpressionOperatorTests)",
                            "test_lefthand_bitwise_right_shift_operator (expressions.tests.ExpressionOperatorTests)",
                            "test_lefthand_bitwise_xor (expressions.tests.ExpressionOperatorTests)",
                            "test_lefthand_bitwise_xor_null (expressions.tests.ExpressionOperatorTests)",
                            "test_lefthand_division (expressions.tests.ExpressionOperatorTests)",
                            "test_lefthand_modulo (expressions.tests.ExpressionOperatorTests)",
                            "test_lefthand_multiplication (expressions.tests.ExpressionOperatorTests)",
                            "test_lefthand_power (expressions.tests.ExpressionOperatorTests)",
                            "test_lefthand_subtraction (expressions.tests.ExpressionOperatorTests)",
                            "test_lefthand_transformed_field_bitwise_or (expressions.tests.ExpressionOperatorTests)",
                            "test_right_hand_addition (expressions.tests.ExpressionOperatorTests)",
                            "test_right_hand_division (expressions.tests.ExpressionOperatorTests)",
                            "test_right_hand_modulo (expressions.tests.ExpressionOperatorTests)",
                            "test_right_hand_multiplication (expressions.tests.ExpressionOperatorTests)",
                            "test_right_hand_subtraction (expressions.tests.ExpressionOperatorTests)",
                            "test_righthand_power (expressions.tests.ExpressionOperatorTests)",
                            "test_date_case_subtraction (expressions.tests.FTimeDeltaTests)",
                            "test_date_comparison (expressions.tests.FTimeDeltaTests)",
                            "test_date_minus_duration (expressions.tests.FTimeDeltaTests)",
                            "test_date_subquery_subtraction (expressions.tests.FTimeDeltaTests)",
                            "test_date_subtraction (expressions.tests.FTimeDeltaTests)",
                            "test_datetime_subquery_subtraction (expressions.tests.FTimeDeltaTests)",
                            "test_datetime_subtraction (expressions.tests.FTimeDeltaTests)",
                            "test_datetime_subtraction_microseconds (expressions.tests.FTimeDeltaTests)",
                            "test_delta_add (expressions.tests.FTimeDeltaTests)",
                            "test_delta_subtract (expressions.tests.FTimeDeltaTests)",
                            "test_delta_update (expressions.tests.FTimeDeltaTests)",
                            "test_duration_expressions (expressions.tests.FTimeDeltaTests)",
                            "test_duration_with_datetime (expressions.tests.FTimeDeltaTests)",
                            "test_duration_with_datetime_microseconds (expressions.tests.FTimeDeltaTests)",
                            "test_durationfield_add (expressions.tests.FTimeDeltaTests)",
                            "test_exclude (expressions.tests.FTimeDeltaTests)",
                            "test_invalid_operator (expressions.tests.FTimeDeltaTests)",
                            "test_mixed_comparisons2 (expressions.tests.FTimeDeltaTests)",
                            "test_multiple_query_compilation (expressions.tests.FTimeDeltaTests)",
                            "test_negative_timedelta_update (expressions.tests.FTimeDeltaTests)",
                            "test_query_clone (expressions.tests.FTimeDeltaTests)",
                            "test_time_subquery_subtraction (expressions.tests.FTimeDeltaTests)",
                            "test_time_subtraction (expressions.tests.FTimeDeltaTests)",
                            "test_aggregate_subquery_annotation (expressions.tests.BasicExpressionsTests)",
                            "test_annotate_values_aggregate (expressions.tests.BasicExpressionsTests)",
                            "test_annotate_values_count (expressions.tests.BasicExpressionsTests)",
                            "test_annotate_values_filter (expressions.tests.BasicExpressionsTests)",
                            "test_annotation_with_nested_outerref (expressions.tests.BasicExpressionsTests)",
                            "test_annotation_with_outerref (expressions.tests.BasicExpressionsTests)",
                            "test_annotations_within_subquery (expressions.tests.BasicExpressionsTests)",
                            "test_arithmetic (expressions.tests.BasicExpressionsTests)",
                            "test_boolean_expression_combined (expressions.tests.BasicExpressionsTests)",
                            "test_case_in_filter_if_boolean_output_field (expressions.tests.BasicExpressionsTests)",
                            "test_exist_single_field_output_field (expressions.tests.BasicExpressionsTests)",
                            "test_exists_in_filter (expressions.tests.BasicExpressionsTests)",
                            "test_explicit_output_field (expressions.tests.BasicExpressionsTests)",
                            "test_filter_inter_attribute (expressions.tests.BasicExpressionsTests)",
                            "test_filter_with_join (expressions.tests.BasicExpressionsTests)",
                            "test_filtering_on_annotate_that_uses_q (expressions.tests.BasicExpressionsTests)",
                            "test_filtering_on_q_that_is_boolean (expressions.tests.BasicExpressionsTests)",
                            "test_filtering_on_rawsql_that_is_boolean (expressions.tests.BasicExpressionsTests)",
                            "test_in_subquery (expressions.tests.BasicExpressionsTests)",
                            "test_incorrect_field_in_F_expression (expressions.tests.BasicExpressionsTests)",
                            "test_incorrect_joined_field_in_F_expression (expressions.tests.BasicExpressionsTests)",
                            "test_nested_outerref_with_function (expressions.tests.BasicExpressionsTests)",
                            "test_nested_subquery (expressions.tests.BasicExpressionsTests)",
                            "test_nested_subquery_join_outer_ref (expressions.tests.BasicExpressionsTests)",
                            "test_nested_subquery_outer_ref_2 (expressions.tests.BasicExpressionsTests)",
                            "test_nested_subquery_outer_ref_with_autofield (expressions.tests.BasicExpressionsTests)",
                            "test_new_object_create (expressions.tests.BasicExpressionsTests)",
                            "test_new_object_save (expressions.tests.BasicExpressionsTests)",
                            "test_object_create_with_aggregate (expressions.tests.BasicExpressionsTests)",
                            "test_object_update (expressions.tests.BasicExpressionsTests)",
                            "test_object_update_fk (expressions.tests.BasicExpressionsTests)",
                            "test_object_update_unsaved_objects (expressions.tests.BasicExpressionsTests)",
                            "test_order_by_exists (expressions.tests.BasicExpressionsTests)",
                            "test_order_by_multiline_sql (expressions.tests.BasicExpressionsTests)",
                            "test_order_of_operations (expressions.tests.BasicExpressionsTests)",
                            "test_outerref (expressions.tests.BasicExpressionsTests)",
                            "test_outerref_mixed_case_table_name (expressions.tests.BasicExpressionsTests)",
                            "test_outerref_with_operator (expressions.tests.BasicExpressionsTests)",
                            "test_parenthesis_priority (expressions.tests.BasicExpressionsTests)",
                            "test_pickle_expression (expressions.tests.BasicExpressionsTests)",
                            "test_subquery (expressions.tests.BasicExpressionsTests)",
                            "test_subquery_eq (expressions.tests.BasicExpressionsTests)",
                            "test_subquery_filter_by_aggregate (expressions.tests.BasicExpressionsTests)",
                            "test_subquery_filter_by_lazy (expressions.tests.BasicExpressionsTests)",
                            "test_subquery_group_by_outerref_in_filter (expressions.tests.BasicExpressionsTests)",
                            "test_subquery_in_filter (expressions.tests.BasicExpressionsTests)",
                            "test_subquery_references_joined_table_twice (expressions.tests.BasicExpressionsTests)",
                            "test_ticket_11722_iexact_lookup (expressions.tests.BasicExpressionsTests)",
                            "test_ticket_16731_startswith_lookup (expressions.tests.BasicExpressionsTests)",
                            "test_ticket_18375_chained_filters (expressions.tests.BasicExpressionsTests)",
                            "test_ticket_18375_join_reuse (expressions.tests.BasicExpressionsTests)",
                            "test_ticket_18375_kwarg_ordering (expressions.tests.BasicExpressionsTests)",
                            "test_ticket_18375_kwarg_ordering_2 (expressions.tests.BasicExpressionsTests)",
                            "test_update (expressions.tests.BasicExpressionsTests)",
                            "test_update_inherited_field_value (expressions.tests.BasicExpressionsTests)",
                            "test_update_with_fk (expressions.tests.BasicExpressionsTests)",
                            "test_update_with_none (expressions.tests.BasicExpressionsTests)",
                            "test_uuid_pk_subquery (expressions.tests.BasicExpressionsTests)"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "pydata__xarray-7444.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "xarray/tests/test_groupby.py::test_consolidate_slices",
                            "xarray/tests/test_groupby.py::test_groupby_dims_property",
                            "xarray/tests/test_groupby.py::test_multi_index_groupby_map",
                            "xarray/tests/test_groupby.py::test_reduce_numeric_only",
                            "xarray/tests/test_groupby.py::test_multi_index_groupby_sum",
                            "xarray/tests/test_groupby.py::test_groupby_da_datetime",
                            "xarray/tests/test_groupby.py::test_groupby_duplicate_coordinate_labels",
                            "xarray/tests/test_groupby.py::test_groupby_input_mutation",
                            "xarray/tests/test_groupby.py::test_groupby_map_shrink_groups[obj0]",
                            "xarray/tests/test_groupby.py::test_groupby_map_shrink_groups[obj1]",
                            "xarray/tests/test_groupby.py::test_groupby_map_change_group_size[obj0]",
                            "xarray/tests/test_groupby.py::test_groupby_map_change_group_size[obj1]",
                            "xarray/tests/test_groupby.py::test_da_groupby_map_func_args",
                            "xarray/tests/test_groupby.py::test_ds_groupby_map_func_args",
                            "xarray/tests/test_groupby.py::test_da_groupby_empty",
                            "xarray/tests/test_groupby.py::test_da_groupby_quantile",
                            "xarray/tests/test_groupby.py::test_ds_groupby_quantile",
                            "xarray/tests/test_groupby.py::test_groupby_quantile_interpolation_deprecated[False]",
                            "xarray/tests/test_groupby.py::test_groupby_quantile_interpolation_deprecated[True]",
                            "xarray/tests/test_groupby.py::test_da_groupby_assign_coords",
                            "xarray/tests/test_groupby.py::test_groupby_repr[obj0-x]",
                            "xarray/tests/test_groupby.py::test_groupby_repr[obj0-y]",
                            "xarray/tests/test_groupby.py::test_groupby_repr[obj0-z]",
                            "xarray/tests/test_groupby.py::test_groupby_repr[obj0-month]",
                            "xarray/tests/test_groupby.py::test_groupby_repr[obj1-x]",
                            "xarray/tests/test_groupby.py::test_groupby_repr[obj1-y]",
                            "xarray/tests/test_groupby.py::test_groupby_repr[obj1-z]",
                            "xarray/tests/test_groupby.py::test_groupby_repr[obj1-month]",
                            "xarray/tests/test_groupby.py::test_groupby_repr_datetime[obj0]",
                            "xarray/tests/test_groupby.py::test_groupby_repr_datetime[obj1]",
                            "xarray/tests/test_groupby.py::test_groupby_drops_nans",
                            "xarray/tests/test_groupby.py::test_groupby_grouping_errors",
                            "xarray/tests/test_groupby.py::test_groupby_reduce_dimension_error",
                            "xarray/tests/test_groupby.py::test_groupby_multiple_string_args",
                            "xarray/tests/test_groupby.py::test_groupby_bins_timeseries",
                            "xarray/tests/test_groupby.py::test_groupby_none_group_name",
                            "xarray/tests/test_groupby.py::test_groupby_getitem",
                            "xarray/tests/test_groupby.py::test_groupby_dataset",
                            "xarray/tests/test_groupby.py::test_groupby_dataset_returns_new_type",
                            "xarray/tests/test_groupby.py::test_groupby_dataset_iter",
                            "xarray/tests/test_groupby.py::test_groupby_dataset_errors",
                            "xarray/tests/test_groupby.py::test_groupby_dataset_reduce",
                            "xarray/tests/test_groupby.py::test_groupby_dataset_math[True]",
                            "xarray/tests/test_groupby.py::test_groupby_dataset_math[False]",
                            "xarray/tests/test_groupby.py::test_groupby_math_more",
                            "xarray/tests/test_groupby.py::test_groupby_bins_math[True]",
                            "xarray/tests/test_groupby.py::test_groupby_bins_math[False]",
                            "xarray/tests/test_groupby.py::test_groupby_math_nD_group",
                            "xarray/tests/test_groupby.py::test_groupby_dataset_math_virtual",
                            "xarray/tests/test_groupby.py::test_groupby_math_dim_order",
                            "xarray/tests/test_groupby.py::test_groupby_dataset_nan",
                            "xarray/tests/test_groupby.py::test_groupby_dataset_order",
                            "xarray/tests/test_groupby.py::test_groupby_dataset_fillna",
                            "xarray/tests/test_groupby.py::test_groupby_dataset_where",
                            "xarray/tests/test_groupby.py::test_groupby_dataset_assign",
                            "xarray/tests/test_groupby.py::test_groupby_dataset_map_dataarray_func",
                            "xarray/tests/test_groupby.py::test_groupby_dataarray_map_dataset_func",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_stack_groupby_unsorted_coord",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_iter",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_properties",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_map_identity[True-True-x-False]",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_map_identity[True-True-y-False]",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_map_identity[True-True-y-True]",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_map_identity[True-True-abc-False]",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_map_identity[True-False-x-False]",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_map_identity[True-False-y-False]",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_map_identity[True-False-y-True]",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_map_identity[True-False-abc-False]",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_map_identity[False-True-x-False]",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_map_identity[False-True-y-False]",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_map_identity[False-True-y-True]",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_map_identity[False-True-abc-False]",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_map_identity[False-False-x-False]",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_map_identity[False-False-y-False]",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_map_identity[False-False-y-True]",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_map_identity[False-False-abc-False]",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_sum",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_reductions[sum]",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_reductions[mean]",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_reductions[median]",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_count",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_reduce_keep_attrs[None-True]",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_reduce_keep_attrs[None-False]",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_reduce_keep_attrs[True-True]",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_reduce_keep_attrs[True-False]",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_reduce_keep_attrs[False-True]",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_reduce_keep_attrs[False-False]",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_keep_attrs[None]",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_keep_attrs[True]",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_keep_attrs[False]",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_map_center",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_map_ndarray",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_map_changes_metadata",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_math_squeeze[True]",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_math_squeeze[False]",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_math",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_math_not_aligned",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_restore_dim_order",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_restore_coord_dims",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_first_and_last",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_multidim",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_multidim_map",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_bins",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_bins_empty",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_bins_multidim",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_bins_sort",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_assign_coords",
                            "xarray/tests/test_groupby.py::TestDataArrayGroupBy::test_groupby_fillna",
                            "xarray/tests/test_groupby.py::TestDataArrayResample::test_resample",
                            "xarray/tests/test_groupby.py::TestDataArrayResample::test_da_resample_func_args",
                            "xarray/tests/test_groupby.py::TestDataArrayResample::test_resample_first",
                            "xarray/tests/test_groupby.py::TestDataArrayResample::test_resample_bad_resample_dim",
                            "xarray/tests/test_groupby.py::TestDataArrayResample::test_resample_keep_attrs",
                            "xarray/tests/test_groupby.py::TestDataArrayResample::test_resample_skipna",
                            "xarray/tests/test_groupby.py::TestDataArrayResample::test_upsample",
                            "xarray/tests/test_groupby.py::TestDataArrayResample::test_upsample_nd",
                            "xarray/tests/test_groupby.py::TestDataArrayResample::test_upsample_tolerance",
                            "xarray/tests/test_groupby.py::TestDataArrayResample::test_resample_base",
                            "xarray/tests/test_groupby.py::TestDataArrayResample::test_resample_offset",
                            "xarray/tests/test_groupby.py::TestDataArrayResample::test_resample_origin",
                            "xarray/tests/test_groupby.py::TestDataArrayResample::test_resample_loffset[-12H]",
                            "xarray/tests/test_groupby.py::TestDataArrayResample::test_resample_loffset[loffset1]",
                            "xarray/tests/test_groupby.py::TestDataArrayResample::test_resample_loffset[loffset2]",
                            "xarray/tests/test_groupby.py::TestDataArrayResample::test_resample_loffset[loffset3]",
                            "xarray/tests/test_groupby.py::TestDataArrayResample::test_resample_invalid_loffset",
                            "xarray/tests/test_groupby.py::TestDatasetResample::test_resample_and_first",
                            "xarray/tests/test_groupby.py::TestDatasetResample::test_resample_min_count",
                            "xarray/tests/test_groupby.py::TestDatasetResample::test_resample_by_mean_with_keep_attrs",
                            "xarray/tests/test_groupby.py::TestDatasetResample::test_resample_loffset",
                            "xarray/tests/test_groupby.py::TestDatasetResample::test_resample_by_mean_discarding_attrs",
                            "xarray/tests/test_groupby.py::TestDatasetResample::test_resample_by_last_discarding_attrs",
                            "xarray/tests/test_groupby.py::TestDatasetResample::test_resample_old_api",
                            "xarray/tests/test_groupby.py::TestDatasetResample::test_resample_ds_da_are_the_same",
                            "xarray/tests/test_groupby.py::TestDatasetResample::test_ds_resample_apply_func_args",
                            "xarray/tests/test_groupby.py::test_groupby_cumsum",
                            "xarray/tests/test_groupby.py::test_groupby_cumprod",
                            "xarray/tests/test_groupby.py::test_resample_cumsum[cumsum-expected_array0]",
                            "xarray/tests/test_groupby.py::test_resample_cumsum[cumprod-expected_array1]"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-None-8003D->4001D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-None-8003D->16006D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-None-8003D->21AS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-None-6H->3H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-None-6H->12H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-None-6H->400T]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-None-3D->D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-None-3D->6D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-None-11D->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-None-3MS->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-None-3MS->6MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-None-3MS->85D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-None-7M->3M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-None-7M->14M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-None-7M->2QS-APR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-None-43QS-AUG->21QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-None-43QS-AUG->86QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-None-43QS-AUG->11A-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-None-11Q-JUN->5Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-None-11Q-JUN->22Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-None-11Q-JUN->51MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-None-3AS-MAR->AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-None-3AS-MAR->6AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-None-3AS-MAR->14Q-FEB]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-None-7A-MAY->3A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-None-7A-MAY->14A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-None-7A-MAY->85M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-left-8003D->4001D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-left-8003D->16006D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-left-8003D->21AS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-left-6H->3H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-left-6H->12H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-left-6H->400T]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-left-3D->D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-left-3D->6D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-left-11D->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-left-3MS->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-left-3MS->6MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-left-3MS->85D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-left-7M->3M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-left-7M->14M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-left-7M->2QS-APR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-left-43QS-AUG->21QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-left-43QS-AUG->86QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-left-43QS-AUG->11A-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-left-11Q-JUN->5Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-left-11Q-JUN->22Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-left-11Q-JUN->51MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-left-3AS-MAR->AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-left-3AS-MAR->6AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-left-3AS-MAR->14Q-FEB]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-left-7A-MAY->3A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-left-7A-MAY->14A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-left-7A-MAY->85M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-right-8003D->4001D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-right-8003D->16006D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-right-8003D->21AS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-right-6H->3H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-right-6H->12H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-right-6H->400T]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-right-3D->D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-right-3D->6D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-right-11D->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-right-3MS->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-right-3MS->6MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-right-3MS->85D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-right-7M->3M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-right-7M->14M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-right-7M->2QS-APR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-right-43QS-AUG->21QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-right-43QS-AUG->86QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-right-43QS-AUG->11A-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-right-11Q-JUN->5Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-right-11Q-JUN->22Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-right-11Q-JUN->51MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-right-3AS-MAR->AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-right-3AS-MAR->6AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-right-3AS-MAR->14Q-FEB]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-right-7A-MAY->3A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-right-7A-MAY->14A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-None-right-7A-MAY->85M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-None-8003D->4001D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-None-8003D->16006D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-None-8003D->21AS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-None-6H->3H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-None-6H->12H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-None-6H->400T]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-None-3D->D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-None-3D->6D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-None-11D->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-None-3MS->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-None-3MS->6MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-None-3MS->85D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-None-7M->3M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-None-7M->14M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-None-7M->2QS-APR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-None-43QS-AUG->21QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-None-43QS-AUG->86QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-None-43QS-AUG->11A-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-None-11Q-JUN->5Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-None-11Q-JUN->22Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-None-11Q-JUN->51MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-None-3AS-MAR->AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-None-3AS-MAR->6AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-None-3AS-MAR->14Q-FEB]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-None-7A-MAY->3A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-None-7A-MAY->14A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-None-7A-MAY->85M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-left-8003D->4001D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-left-8003D->16006D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-left-8003D->21AS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-left-6H->3H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-left-6H->12H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-left-6H->400T]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-left-3D->D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-left-3D->6D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-left-11D->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-left-3MS->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-left-3MS->6MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-left-3MS->85D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-left-7M->3M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-left-7M->14M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-left-7M->2QS-APR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-left-43QS-AUG->21QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-left-43QS-AUG->86QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-left-43QS-AUG->11A-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-left-11Q-JUN->5Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-left-11Q-JUN->22Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-left-11Q-JUN->51MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-left-3AS-MAR->AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-left-3AS-MAR->6AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-left-3AS-MAR->14Q-FEB]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-left-7A-MAY->3A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-left-7A-MAY->14A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-left-7A-MAY->85M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-right-8003D->4001D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-right-8003D->16006D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-right-8003D->21AS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-right-6H->3H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-right-6H->12H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-right-6H->400T]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-right-3D->D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-right-3D->6D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-right-11D->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-right-3MS->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-right-3MS->6MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-right-3MS->85D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-right-7M->3M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-right-7M->14M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-right-7M->2QS-APR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-right-43QS-AUG->21QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-right-43QS-AUG->86QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-right-43QS-AUG->11A-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-right-11Q-JUN->5Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-right-11Q-JUN->22Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-right-11Q-JUN->51MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-right-3AS-MAR->AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-right-3AS-MAR->6AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-right-3AS-MAR->14Q-FEB]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-right-7A-MAY->3A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-right-7A-MAY->14A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-left-right-7A-MAY->85M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-None-8003D->4001D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-None-8003D->16006D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-None-8003D->21AS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-None-6H->3H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-None-6H->12H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-None-6H->400T]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-None-3D->D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-None-3D->6D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-None-11D->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-None-3MS->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-None-3MS->6MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-None-3MS->85D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-None-7M->3M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-None-7M->14M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-None-7M->2QS-APR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-None-43QS-AUG->21QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-None-43QS-AUG->86QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-None-43QS-AUG->11A-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-None-11Q-JUN->5Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-None-11Q-JUN->22Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-None-11Q-JUN->51MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-None-3AS-MAR->AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-None-3AS-MAR->6AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-None-3AS-MAR->14Q-FEB]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-None-7A-MAY->3A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-None-7A-MAY->14A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-None-7A-MAY->85M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-left-8003D->4001D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-left-8003D->16006D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-left-8003D->21AS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-left-6H->3H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-left-6H->12H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-left-6H->400T]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-left-3D->D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-left-3D->6D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-left-11D->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-left-3MS->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-left-3MS->6MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-left-3MS->85D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-left-7M->3M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-left-7M->14M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-left-7M->2QS-APR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-left-43QS-AUG->21QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-left-43QS-AUG->86QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-left-43QS-AUG->11A-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-left-11Q-JUN->5Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-left-11Q-JUN->22Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-left-11Q-JUN->51MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-left-3AS-MAR->AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-left-3AS-MAR->6AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-left-3AS-MAR->14Q-FEB]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-left-7A-MAY->3A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-left-7A-MAY->14A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-left-7A-MAY->85M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-right-8003D->4001D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-right-8003D->16006D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-right-8003D->21AS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-right-6H->3H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-right-6H->12H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-right-6H->400T]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-right-3D->D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-right-3D->6D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-right-11D->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-right-3MS->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-right-3MS->6MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-right-3MS->85D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-right-7M->3M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-right-7M->14M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-right-7M->2QS-APR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-right-43QS-AUG->21QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-right-43QS-AUG->86QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-right-43QS-AUG->11A-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-right-11Q-JUN->5Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-right-11Q-JUN->22Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-right-11Q-JUN->51MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-right-3AS-MAR->AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-right-3AS-MAR->6AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-right-3AS-MAR->14Q-FEB]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-right-7A-MAY->3A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-right-7A-MAY->14A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[24-None-right-right-7A-MAY->85M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-None-8003D->4001D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-None-8003D->16006D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-None-8003D->21AS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-None-6H->3H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-None-6H->12H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-None-6H->400T]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-None-3D->D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-None-3D->6D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-None-11D->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-None-3MS->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-None-3MS->6MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-None-3MS->85D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-None-7M->3M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-None-7M->14M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-None-7M->2QS-APR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-None-43QS-AUG->21QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-None-43QS-AUG->86QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-None-43QS-AUG->11A-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-None-11Q-JUN->5Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-None-11Q-JUN->22Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-None-11Q-JUN->51MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-None-3AS-MAR->AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-None-3AS-MAR->6AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-None-3AS-MAR->14Q-FEB]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-None-7A-MAY->3A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-None-7A-MAY->14A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-None-7A-MAY->85M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-left-8003D->4001D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-left-8003D->16006D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-left-8003D->21AS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-left-6H->3H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-left-6H->12H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-left-6H->400T]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-left-3D->D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-left-3D->6D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-left-11D->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-left-3MS->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-left-3MS->6MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-left-3MS->85D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-left-7M->3M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-left-7M->14M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-left-7M->2QS-APR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-left-43QS-AUG->21QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-left-43QS-AUG->86QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-left-43QS-AUG->11A-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-left-11Q-JUN->5Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-left-11Q-JUN->22Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-left-11Q-JUN->51MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-left-3AS-MAR->AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-left-3AS-MAR->6AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-left-3AS-MAR->14Q-FEB]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-left-7A-MAY->3A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-left-7A-MAY->14A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-left-7A-MAY->85M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-right-8003D->4001D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-right-8003D->16006D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-right-8003D->21AS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-right-6H->3H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-right-6H->12H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-right-6H->400T]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-right-3D->D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-right-3D->6D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-right-11D->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-right-3MS->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-right-3MS->6MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-right-3MS->85D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-right-7M->3M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-right-7M->14M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-right-7M->2QS-APR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-right-43QS-AUG->21QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-right-43QS-AUG->86QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-right-43QS-AUG->11A-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-right-11Q-JUN->5Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-right-11Q-JUN->22Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-right-11Q-JUN->51MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-right-3AS-MAR->AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-right-3AS-MAR->6AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-right-3AS-MAR->14Q-FEB]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-right-7A-MAY->3A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-right-7A-MAY->14A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-None-right-7A-MAY->85M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-None-8003D->4001D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-None-8003D->16006D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-None-8003D->21AS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-None-6H->3H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-None-6H->12H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-None-6H->400T]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-None-3D->D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-None-3D->6D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-None-11D->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-None-3MS->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-None-3MS->6MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-None-3MS->85D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-None-7M->3M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-None-7M->14M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-None-7M->2QS-APR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-None-43QS-AUG->21QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-None-43QS-AUG->86QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-None-43QS-AUG->11A-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-None-11Q-JUN->5Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-None-11Q-JUN->22Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-None-11Q-JUN->51MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-None-3AS-MAR->AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-None-3AS-MAR->6AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-None-3AS-MAR->14Q-FEB]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-None-7A-MAY->3A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-None-7A-MAY->14A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-None-7A-MAY->85M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-left-8003D->4001D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-left-8003D->16006D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-left-8003D->21AS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-left-6H->3H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-left-6H->12H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-left-6H->400T]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-left-3D->D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-left-3D->6D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-left-11D->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-left-3MS->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-left-3MS->6MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-left-3MS->85D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-left-7M->3M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-left-7M->14M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-left-7M->2QS-APR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-left-43QS-AUG->21QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-left-43QS-AUG->86QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-left-43QS-AUG->11A-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-left-11Q-JUN->5Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-left-11Q-JUN->22Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-left-11Q-JUN->51MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-left-3AS-MAR->AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-left-3AS-MAR->6AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-left-3AS-MAR->14Q-FEB]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-left-7A-MAY->3A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-left-7A-MAY->14A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-left-7A-MAY->85M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-right-8003D->4001D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-right-8003D->16006D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-right-8003D->21AS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-right-6H->3H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-right-6H->12H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-right-6H->400T]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-right-3D->D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-right-3D->6D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-right-11D->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-right-3MS->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-right-3MS->6MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-right-3MS->85D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-right-7M->3M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-right-7M->14M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-right-7M->2QS-APR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-right-43QS-AUG->21QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-right-43QS-AUG->86QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-right-43QS-AUG->11A-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-right-11Q-JUN->5Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-right-11Q-JUN->22Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-right-11Q-JUN->51MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-right-3AS-MAR->AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-right-3AS-MAR->6AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-right-3AS-MAR->14Q-FEB]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-right-7A-MAY->3A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-right-7A-MAY->14A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-left-right-7A-MAY->85M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-None-8003D->4001D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-None-8003D->16006D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-None-8003D->21AS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-None-6H->3H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-None-6H->12H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-None-6H->400T]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-None-3D->D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-None-3D->6D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-None-11D->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-None-3MS->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-None-3MS->6MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-None-3MS->85D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-None-7M->3M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-None-7M->14M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-None-7M->2QS-APR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-None-43QS-AUG->21QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-None-43QS-AUG->86QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-None-43QS-AUG->11A-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-None-11Q-JUN->5Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-None-11Q-JUN->22Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-None-11Q-JUN->51MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-None-3AS-MAR->AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-None-3AS-MAR->6AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-None-3AS-MAR->14Q-FEB]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-None-7A-MAY->3A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-None-7A-MAY->14A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-None-7A-MAY->85M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-left-8003D->4001D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-left-8003D->16006D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-left-8003D->21AS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-left-6H->3H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-left-6H->12H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-left-6H->400T]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-left-3D->D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-left-3D->6D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-left-11D->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-left-3MS->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-left-3MS->6MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-left-3MS->85D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-left-7M->3M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-left-7M->14M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-left-7M->2QS-APR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-left-43QS-AUG->21QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-left-43QS-AUG->86QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-left-43QS-AUG->11A-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-left-11Q-JUN->5Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-left-11Q-JUN->22Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-left-11Q-JUN->51MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-left-3AS-MAR->AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-left-3AS-MAR->6AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-left-3AS-MAR->14Q-FEB]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-left-7A-MAY->3A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-left-7A-MAY->14A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-left-7A-MAY->85M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-right-8003D->4001D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-right-8003D->16006D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-right-8003D->21AS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-right-6H->3H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-right-6H->12H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-right-6H->400T]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-right-3D->D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-right-3D->6D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-right-11D->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-right-3MS->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-right-3MS->6MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-right-3MS->85D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-right-7M->3M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-right-7M->14M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-right-7M->2QS-APR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-right-43QS-AUG->21QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-right-43QS-AUG->86QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-right-43QS-AUG->11A-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-right-11Q-JUN->5Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-right-11Q-JUN->22Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-right-11Q-JUN->51MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-right-3AS-MAR->AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-right-3AS-MAR->6AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-right-3AS-MAR->14Q-FEB]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-right-7A-MAY->3A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-right-7A-MAY->14A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[31-None-right-right-7A-MAY->85M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-None-8003D->4001D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-None-8003D->16006D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-None-8003D->21AS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-None-6H->3H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-None-6H->12H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-None-6H->400T]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-None-3D->D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-None-3D->6D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-None-11D->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-None-3MS->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-None-3MS->6MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-None-3MS->85D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-None-7M->3M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-None-7M->14M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-None-7M->2QS-APR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-None-43QS-AUG->21QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-None-43QS-AUG->86QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-None-43QS-AUG->11A-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-None-11Q-JUN->5Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-None-11Q-JUN->22Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-None-11Q-JUN->51MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-None-3AS-MAR->AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-None-3AS-MAR->6AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-None-3AS-MAR->14Q-FEB]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-None-7A-MAY->3A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-None-7A-MAY->14A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-None-7A-MAY->85M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-left-8003D->4001D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-left-8003D->16006D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-left-8003D->21AS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-left-6H->3H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-left-6H->12H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-left-6H->400T]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-left-3D->D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-left-3D->6D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-left-11D->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-left-3MS->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-left-3MS->6MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-left-3MS->85D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-left-7M->3M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-left-7M->14M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-left-7M->2QS-APR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-left-43QS-AUG->21QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-left-43QS-AUG->86QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-left-43QS-AUG->11A-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-left-11Q-JUN->5Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-left-11Q-JUN->22Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-left-11Q-JUN->51MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-left-3AS-MAR->AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-left-3AS-MAR->6AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-left-3AS-MAR->14Q-FEB]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-left-7A-MAY->3A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-left-7A-MAY->14A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-left-7A-MAY->85M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-right-8003D->4001D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-right-8003D->16006D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-right-8003D->21AS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-right-6H->3H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-right-6H->12H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-right-6H->400T]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-right-3D->D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-right-3D->6D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-right-11D->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-right-3MS->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-right-3MS->6MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-right-3MS->85D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-right-7M->3M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-right-7M->14M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-right-7M->2QS-APR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-right-43QS-AUG->21QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-right-43QS-AUG->86QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-right-43QS-AUG->11A-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-right-11Q-JUN->5Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-right-11Q-JUN->22Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-right-11Q-JUN->51MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-right-3AS-MAR->AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-right-3AS-MAR->6AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-right-3AS-MAR->14Q-FEB]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-right-7A-MAY->3A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-right-7A-MAY->14A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-None-right-7A-MAY->85M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-None-8003D->4001D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-None-8003D->16006D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-None-8003D->21AS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-None-6H->3H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-None-6H->12H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-None-6H->400T]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-None-3D->D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-None-3D->6D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-None-11D->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-None-3MS->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-None-3MS->6MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-None-3MS->85D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-None-7M->3M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-None-7M->14M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-None-7M->2QS-APR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-None-43QS-AUG->21QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-None-43QS-AUG->86QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-None-43QS-AUG->11A-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-None-11Q-JUN->5Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-None-11Q-JUN->22Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-None-11Q-JUN->51MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-None-3AS-MAR->AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-None-3AS-MAR->6AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-None-3AS-MAR->14Q-FEB]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-None-7A-MAY->3A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-None-7A-MAY->14A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-None-7A-MAY->85M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-left-8003D->4001D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-left-8003D->16006D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-left-8003D->21AS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-left-6H->3H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-left-6H->12H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-left-6H->400T]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-left-3D->D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-left-3D->6D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-left-11D->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-left-3MS->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-left-3MS->6MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-left-3MS->85D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-left-7M->3M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-left-7M->14M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-left-7M->2QS-APR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-left-43QS-AUG->21QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-left-43QS-AUG->86QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-left-43QS-AUG->11A-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-left-11Q-JUN->5Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-left-11Q-JUN->22Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-left-11Q-JUN->51MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-left-3AS-MAR->AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-left-3AS-MAR->6AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-left-3AS-MAR->14Q-FEB]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-left-7A-MAY->3A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-left-7A-MAY->14A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-left-7A-MAY->85M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-right-8003D->4001D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-right-8003D->16006D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-right-8003D->21AS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-right-6H->3H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-right-6H->12H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-right-6H->400T]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-right-3D->D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-right-3D->6D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-right-11D->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-right-3MS->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-right-3MS->6MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-right-3MS->85D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-right-7M->3M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-right-7M->14M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-right-7M->2QS-APR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-right-43QS-AUG->21QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-right-43QS-AUG->86QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-right-43QS-AUG->11A-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-right-11Q-JUN->5Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-right-11Q-JUN->22Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-right-11Q-JUN->51MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-right-3AS-MAR->AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-right-3AS-MAR->6AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-right-3AS-MAR->14Q-FEB]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-right-7A-MAY->3A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-right-7A-MAY->14A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-left-right-7A-MAY->85M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-None-8003D->4001D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-None-8003D->16006D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-None-8003D->21AS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-None-6H->3H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-None-6H->12H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-None-6H->400T]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-None-3D->D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-None-3D->6D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-None-11D->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-None-3MS->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-None-3MS->6MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-None-3MS->85D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-None-7M->3M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-None-7M->14M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-None-7M->2QS-APR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-None-43QS-AUG->21QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-None-43QS-AUG->86QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-None-43QS-AUG->11A-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-None-11Q-JUN->5Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-None-11Q-JUN->22Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-None-11Q-JUN->51MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-None-3AS-MAR->AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-None-3AS-MAR->6AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-None-3AS-MAR->14Q-FEB]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-None-7A-MAY->3A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-None-7A-MAY->14A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-None-7A-MAY->85M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-left-8003D->4001D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-left-8003D->16006D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-left-8003D->21AS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-left-6H->3H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-left-6H->12H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-left-6H->400T]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-left-3D->D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-left-3D->6D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-left-11D->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-left-3MS->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-left-3MS->6MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-left-3MS->85D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-left-7M->3M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-left-7M->14M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-left-7M->2QS-APR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-left-43QS-AUG->21QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-left-43QS-AUG->86QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-left-43QS-AUG->11A-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-left-11Q-JUN->5Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-left-11Q-JUN->22Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-left-11Q-JUN->51MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-left-3AS-MAR->AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-left-3AS-MAR->6AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-left-3AS-MAR->14Q-FEB]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-left-7A-MAY->3A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-left-7A-MAY->14A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-left-7A-MAY->85M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-right-8003D->4001D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-right-8003D->16006D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-right-8003D->21AS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-right-6H->3H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-right-6H->12H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-right-6H->400T]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-right-3D->D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-right-3D->6D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-right-11D->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-right-3MS->MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-right-3MS->6MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-right-3MS->85D]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-right-7M->3M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-right-7M->14M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-right-7M->2QS-APR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-right-43QS-AUG->21QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-right-43QS-AUG->86QS-AUG]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-right-43QS-AUG->11A-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-right-11Q-JUN->5Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-right-11Q-JUN->22Q-JUN]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-right-11Q-JUN->51MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-right-3AS-MAR->AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-right-3AS-MAR->6AS-MAR]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-right-3AS-MAR->14Q-FEB]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-right-7A-MAY->3A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-right-7A-MAY->14A-MAY]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample[None-5S-right-right-7A-MAY->85M]",
                            "xarray/tests/test_cftimeindex_resample.py::test_closed_label_defaults[S-left]",
                            "xarray/tests/test_cftimeindex_resample.py::test_closed_label_defaults[T-left]",
                            "xarray/tests/test_cftimeindex_resample.py::test_closed_label_defaults[H-left]",
                            "xarray/tests/test_cftimeindex_resample.py::test_closed_label_defaults[D-left]",
                            "xarray/tests/test_cftimeindex_resample.py::test_closed_label_defaults[M-right]",
                            "xarray/tests/test_cftimeindex_resample.py::test_closed_label_defaults[MS-left]",
                            "xarray/tests/test_cftimeindex_resample.py::test_closed_label_defaults[Q-right]",
                            "xarray/tests/test_cftimeindex_resample.py::test_closed_label_defaults[QS-left]",
                            "xarray/tests/test_cftimeindex_resample.py::test_closed_label_defaults[A-right]",
                            "xarray/tests/test_cftimeindex_resample.py::test_closed_label_defaults[AS-left]",
                            "xarray/tests/test_cftimeindex_resample.py::test_calendars[gregorian]",
                            "xarray/tests/test_cftimeindex_resample.py::test_calendars[noleap]",
                            "xarray/tests/test_cftimeindex_resample.py::test_calendars[all_leap]",
                            "xarray/tests/test_cftimeindex_resample.py::test_calendars[360_day]",
                            "xarray/tests/test_cftimeindex_resample.py::test_calendars[julian]",
                            "xarray/tests/test_cftimeindex_resample.py::test_origin[start_day-left]",
                            "xarray/tests/test_cftimeindex_resample.py::test_origin[start_day-right]",
                            "xarray/tests/test_cftimeindex_resample.py::test_origin[start-left]",
                            "xarray/tests/test_cftimeindex_resample.py::test_origin[start-right]",
                            "xarray/tests/test_cftimeindex_resample.py::test_origin[end-left]",
                            "xarray/tests/test_cftimeindex_resample.py::test_origin[end-right]",
                            "xarray/tests/test_cftimeindex_resample.py::test_origin[end_day-left]",
                            "xarray/tests/test_cftimeindex_resample.py::test_origin[end_day-right]",
                            "xarray/tests/test_cftimeindex_resample.py::test_origin[epoch-left]",
                            "xarray/tests/test_cftimeindex_resample.py::test_origin[epoch-right]",
                            "xarray/tests/test_cftimeindex_resample.py::test_origin[(1970,",
                            "xarray/tests/test_cftimeindex_resample.py::test_base_and_offset_error",
                            "xarray/tests/test_cftimeindex_resample.py::test_invalid_offset_error[foo]",
                            "xarray/tests/test_cftimeindex_resample.py::test_invalid_offset_error[5MS]",
                            "xarray/tests/test_cftimeindex_resample.py::test_invalid_offset_error[10]",
                            "xarray/tests/test_cftimeindex_resample.py::test_timedelta_offset",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample_loffset_cftimeindex[12H]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample_loffset_cftimeindex[loffset1]",
                            "xarray/tests/test_cftimeindex_resample.py::test_resample_invalid_loffset_cftimeindex",
                            "xarray/tests/test_cftimeindex_resample.py::test__convert_base_to_offset[1-10S]",
                            "xarray/tests/test_cftimeindex_resample.py::test__convert_base_to_offset[17-3H]",
                            "xarray/tests/test_cftimeindex_resample.py::test__convert_base_to_offset[15-5U]",
                            "xarray/tests/test_cftimeindex_resample.py::test__convert_base_to_offset_invalid_index",
                            "xarray/tests/test_groupby.py::test_groupby_flox_kwargs[kwargs0]",
                            "xarray/tests/test_groupby.py::test_groupby_flox_kwargs[kwargs1]",
                            "xarray/tests/test_groupby.py::TestDataArrayResample::test_resample_drop_nondim_coords",
                            "xarray/tests/test_groupby.py::TestDataArrayResample::test_upsample_interpolate",
                            "xarray/tests/test_groupby.py::TestDataArrayResample::test_upsample_interpolate_bug_2197",
                            "xarray/tests/test_groupby.py::TestDataArrayResample::test_upsample_interpolate_regression_1605",
                            "xarray/tests/test_groupby.py::TestDataArrayResample::test_upsample_interpolate_dask[True]",
                            "xarray/tests/test_groupby.py::TestDataArrayResample::test_upsample_interpolate_dask[False]",
                            "xarray/tests/test_groupby.py::TestDatasetResample::test_resample_drop_nondim_coords"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "pydata__xarray-5731.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "xarray/tests/test_computation.py::test_cov[None-da_a0-da_b0-0]",
                            "xarray/tests/test_computation.py::test_cov[None-da_a0-da_b0-1]",
                            "xarray/tests/test_computation.py::test_cov[None-da_a1-da_b1-0]",
                            "xarray/tests/test_computation.py::test_cov[None-da_a1-da_b1-1]",
                            "xarray/tests/test_computation.py::test_cov[None-da_a2-da_b2-0]",
                            "xarray/tests/test_computation.py::test_cov[None-da_a2-da_b2-1]",
                            "xarray/tests/test_computation.py::test_cov[time-da_a0-da_b0-0]",
                            "xarray/tests/test_computation.py::test_cov[time-da_a0-da_b0-1]",
                            "xarray/tests/test_computation.py::test_cov[time-da_a1-da_b1-0]",
                            "xarray/tests/test_computation.py::test_cov[time-da_a1-da_b1-1]",
                            "xarray/tests/test_computation.py::test_cov[time-da_a2-da_b2-0]",
                            "xarray/tests/test_computation.py::test_cov[time-da_a2-da_b2-1]",
                            "xarray/tests/test_computation.py::test_corr[None-da_a0-da_b0]",
                            "xarray/tests/test_computation.py::test_corr[None-da_a1-da_b1]",
                            "xarray/tests/test_computation.py::test_corr[None-da_a2-da_b2]",
                            "xarray/tests/test_computation.py::test_corr[time-da_a0-da_b0]",
                            "xarray/tests/test_computation.py::test_corr[time-da_a1-da_b1]",
                            "xarray/tests/test_computation.py::test_corr[time-da_a2-da_b2]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[None-da_a0-da_b0]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[None-da_a1-da_b1]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[None-da_a2-da_b2]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[None-da_a3-da_b3]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[None-da_a4-da_b4]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[None-da_a5-da_b5]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[None-da_a6-da_b6]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[None-da_a7-da_b7]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[None-da_a8-da_b8]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[time-da_a0-da_b0]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[time-da_a1-da_b1]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[time-da_a2-da_b2]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[time-da_a3-da_b3]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[time-da_a4-da_b4]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[time-da_a5-da_b5]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[time-da_a6-da_b6]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[time-da_a7-da_b7]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[time-da_a8-da_b8]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[x-da_a0-da_b0]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[x-da_a1-da_b1]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[x-da_a2-da_b2]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[x-da_a3-da_b3]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[x-da_a4-da_b4]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[x-da_a5-da_b5]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[x-da_a6-da_b6]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[x-da_a7-da_b7]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[x-da_a8-da_b8]",
                            "xarray/tests/test_computation.py::test_autocov[None-da_a0]",
                            "xarray/tests/test_computation.py::test_autocov[None-da_a1]",
                            "xarray/tests/test_computation.py::test_autocov[None-da_a2]",
                            "xarray/tests/test_computation.py::test_autocov[None-da_a3]",
                            "xarray/tests/test_computation.py::test_autocov[None-da_a4]",
                            "xarray/tests/test_computation.py::test_autocov[time-da_a0]",
                            "xarray/tests/test_computation.py::test_autocov[time-da_a1]",
                            "xarray/tests/test_computation.py::test_autocov[time-da_a2]",
                            "xarray/tests/test_computation.py::test_autocov[time-da_a3]",
                            "xarray/tests/test_computation.py::test_autocov[time-da_a4]",
                            "xarray/tests/test_computation.py::test_autocov[x-da_a0]",
                            "xarray/tests/test_computation.py::test_autocov[x-da_a1]",
                            "xarray/tests/test_computation.py::test_autocov[x-da_a2]",
                            "xarray/tests/test_computation.py::test_autocov[x-da_a3]",
                            "xarray/tests/test_computation.py::test_autocov[x-da_a4]",
                            "xarray/tests/test_computation.py::test_autocov[dim3-da_a0]",
                            "xarray/tests/test_computation.py::test_autocov[dim3-da_a1]",
                            "xarray/tests/test_computation.py::test_autocov[dim3-da_a2]",
                            "xarray/tests/test_computation.py::test_autocov[dim3-da_a3]",
                            "xarray/tests/test_computation.py::test_autocov[dim3-da_a4]"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "xarray/tests/test_computation.py::test_signature_properties",
                            "xarray/tests/test_computation.py::test_result_name",
                            "xarray/tests/test_computation.py::test_ordered_set_union",
                            "xarray/tests/test_computation.py::test_ordered_set_intersection",
                            "xarray/tests/test_computation.py::test_join_dict_keys",
                            "xarray/tests/test_computation.py::test_collect_dict_values",
                            "xarray/tests/test_computation.py::test_apply_identity",
                            "xarray/tests/test_computation.py::test_apply_two_inputs",
                            "xarray/tests/test_computation.py::test_apply_1d_and_0d",
                            "xarray/tests/test_computation.py::test_apply_two_outputs",
                            "xarray/tests/test_computation.py::test_apply_dask_parallelized_two_outputs",
                            "xarray/tests/test_computation.py::test_apply_input_core_dimension",
                            "xarray/tests/test_computation.py::test_apply_output_core_dimension",
                            "xarray/tests/test_computation.py::test_apply_exclude",
                            "xarray/tests/test_computation.py::test_apply_groupby_add",
                            "xarray/tests/test_computation.py::test_unified_dim_sizes",
                            "xarray/tests/test_computation.py::test_broadcast_compat_data_1d",
                            "xarray/tests/test_computation.py::test_broadcast_compat_data_2d",
                            "xarray/tests/test_computation.py::test_keep_attrs",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_variable[default]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_variable[False]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_variable[True]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_variable[override]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_variable[drop]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_variable[drop_conflicts]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_variable[no_conflicts]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray[default]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray[False]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray[True]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray[override]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray[drop]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray[drop_conflicts]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray[no_conflicts]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray_variables[default-dim]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray_variables[default-coord]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray_variables[False-dim]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray_variables[False-coord]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray_variables[True-dim]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray_variables[True-coord]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray_variables[override-dim]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray_variables[override-coord]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray_variables[drop-dim]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray_variables[drop-coord]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray_variables[drop_conflicts-dim]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray_variables[drop_conflicts-coord]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray_variables[no_conflicts-dim]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray_variables[no_conflicts-coord]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset[default]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset[False]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset[True]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset[override]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset[drop]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset[drop_conflicts]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset[no_conflicts]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[default-data]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[default-dim]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[default-coord]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[False-data]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[False-dim]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[False-coord]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[True-data]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[True-dim]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[True-coord]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[override-data]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[override-dim]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[override-coord]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[drop-data]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[drop-dim]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[drop-coord]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[drop_conflicts-data]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[drop_conflicts-dim]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[drop_conflicts-coord]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[no_conflicts-data]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[no_conflicts-dim]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[no_conflicts-coord]",
                            "xarray/tests/test_computation.py::test_dataset_join",
                            "xarray/tests/test_computation.py::test_apply_dask",
                            "xarray/tests/test_computation.py::test_apply_dask_parallelized_one_arg",
                            "xarray/tests/test_computation.py::test_apply_dask_parallelized_two_args",
                            "xarray/tests/test_computation.py::test_apply_dask_parallelized_errors",
                            "xarray/tests/test_computation.py::test_apply_dask_multiple_inputs",
                            "xarray/tests/test_computation.py::test_apply_dask_new_output_dimension",
                            "xarray/tests/test_computation.py::test_apply_dask_new_output_sizes",
                            "xarray/tests/test_computation.py::test_vectorize",
                            "xarray/tests/test_computation.py::test_vectorize_dask",
                            "xarray/tests/test_computation.py::test_vectorize_dask_dtype",
                            "xarray/tests/test_computation.py::test_vectorize_dask_dtype_without_output_dtypes[data_array0]",
                            "xarray/tests/test_computation.py::test_vectorize_dask_dtype_without_output_dtypes[data_array1]",
                            "xarray/tests/test_computation.py::test_vectorize_exclude_dims",
                            "xarray/tests/test_computation.py::test_vectorize_exclude_dims_dask",
                            "xarray/tests/test_computation.py::test_corr_only_dataarray",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[None-da_a0-da_b0-0]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[None-da_a0-da_b0-1]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[None-da_a1-da_b1-0]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[None-da_a1-da_b1-1]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[None-da_a2-da_b2-0]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[None-da_a2-da_b2-1]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[None-da_a3-da_b3-0]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[None-da_a3-da_b3-1]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[None-da_a4-da_b4-0]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[None-da_a4-da_b4-1]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[None-da_a5-da_b5-0]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[None-da_a5-da_b5-1]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[x-da_a0-da_b0-0]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[x-da_a0-da_b0-1]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[x-da_a1-da_b1-0]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[x-da_a1-da_b1-1]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[x-da_a2-da_b2-0]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[x-da_a2-da_b2-1]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[x-da_a3-da_b3-0]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[x-da_a3-da_b3-1]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[x-da_a4-da_b4-0]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[x-da_a4-da_b4-1]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[x-da_a5-da_b5-0]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[x-da_a5-da_b5-1]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[time-da_a0-da_b0-0]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[time-da_a0-da_b0-1]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[time-da_a1-da_b1-0]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[time-da_a1-da_b1-1]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[time-da_a2-da_b2-0]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[time-da_a2-da_b2-1]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[time-da_a3-da_b3-0]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[time-da_a3-da_b3-1]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[time-da_a4-da_b4-0]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[time-da_a4-da_b4-1]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[time-da_a5-da_b5-0]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[time-da_a5-da_b5-1]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[None-da_a0-da_b0]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[None-da_a1-da_b1]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[None-da_a2-da_b2]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[None-da_a3-da_b3]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[None-da_a4-da_b4]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[None-da_a5-da_b5]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[None-da_a6-da_b6]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[None-da_a7-da_b7]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[None-da_a8-da_b8]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[time-da_a0-da_b0]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[time-da_a1-da_b1]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[time-da_a2-da_b2]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[time-da_a3-da_b3]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[time-da_a4-da_b4]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[time-da_a5-da_b5]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[time-da_a6-da_b6]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[time-da_a7-da_b7]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[time-da_a8-da_b8]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[x-da_a0-da_b0]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[x-da_a1-da_b1]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[x-da_a2-da_b2]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[x-da_a3-da_b3]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[x-da_a4-da_b4]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[x-da_a5-da_b5]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[x-da_a6-da_b6]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[x-da_a7-da_b7]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[x-da_a8-da_b8]",
                            "xarray/tests/test_computation.py::test_corr_dtype_error",
                            "xarray/tests/test_computation.py::test_vectorize_dask_new_output_dims",
                            "xarray/tests/test_computation.py::test_output_wrong_number",
                            "xarray/tests/test_computation.py::test_output_wrong_dims",
                            "xarray/tests/test_computation.py::test_output_wrong_dim_size",
                            "xarray/tests/test_computation.py::test_dot[True]",
                            "xarray/tests/test_computation.py::test_dot[False]",
                            "xarray/tests/test_computation.py::test_dot_align_coords[True]",
                            "xarray/tests/test_computation.py::test_dot_align_coords[False]",
                            "xarray/tests/test_computation.py::test_where",
                            "xarray/tests/test_computation.py::test_polyval[True-True]",
                            "xarray/tests/test_computation.py::test_polyval[True-False]",
                            "xarray/tests/test_computation.py::test_polyval[False-True]",
                            "xarray/tests/test_computation.py::test_polyval[False-False]"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "pallets__flask-5063.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "tests/test_cli.py::TestRoutes::test_subdomain",
                            "tests/test_cli.py::TestRoutes::test_host"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "tests/test_cli.py::test_cli_name",
                            "tests/test_cli.py::test_find_best_app",
                            "tests/test_cli.py::test_prepare_import[test-path0-test]",
                            "tests/test_cli.py::test_prepare_import[test.py-path1-test]",
                            "tests/test_cli.py::test_prepare_import[a/test-path2-test]",
                            "tests/test_cli.py::test_prepare_import[test/__init__.py-path3-test]",
                            "tests/test_cli.py::test_prepare_import[test/__init__-path4-test]",
                            "tests/test_cli.py::test_prepare_import[value5-path5-cliapp.inner1]",
                            "tests/test_cli.py::test_prepare_import[value6-path6-cliapp.inner1.inner2]",
                            "tests/test_cli.py::test_prepare_import[test.a.b-path7-test.a.b]",
                            "tests/test_cli.py::test_prepare_import[value8-path8-cliapp.app]",
                            "tests/test_cli.py::test_prepare_import[value9-path9-cliapp.message.txt]",
                            "tests/test_cli.py::test_locate_app[cliapp.app-None-testapp]",
                            "tests/test_cli.py::test_locate_app[cliapp.app-testapp-testapp]",
                            "tests/test_cli.py::test_locate_app[cliapp.factory-None-app]",
                            "tests/test_cli.py::test_locate_app[cliapp.factory-create_app-app]",
                            "tests/test_cli.py::test_locate_app[cliapp.factory-create_app()-app]",
                            "tests/test_cli.py::test_locate_app[cliapp.factory-create_app2(\"foo\",",
                            "tests/test_cli.py::test_locate_app[cliapp.factory-",
                            "tests/test_cli.py::test_locate_app_raises[notanapp.py-None]",
                            "tests/test_cli.py::test_locate_app_raises[cliapp/app-None]",
                            "tests/test_cli.py::test_locate_app_raises[cliapp.app-notanapp]",
                            "tests/test_cli.py::test_locate_app_raises[cliapp.factory-create_app2(\"foo\")]",
                            "tests/test_cli.py::test_locate_app_raises[cliapp.factory-create_app(]",
                            "tests/test_cli.py::test_locate_app_raises[cliapp.factory-no_app]",
                            "tests/test_cli.py::test_locate_app_raises[cliapp.importerrorapp-None]",
                            "tests/test_cli.py::test_locate_app_raises[cliapp.message.txt-None]",
                            "tests/test_cli.py::test_locate_app_suppress_raise",
                            "tests/test_cli.py::test_get_version",
                            "tests/test_cli.py::test_scriptinfo",
                            "tests/test_cli.py::test_app_cli_has_app_context",
                            "tests/test_cli.py::test_with_appcontext",
                            "tests/test_cli.py::test_appgroup_app_context",
                            "tests/test_cli.py::test_flaskgroup_app_context",
                            "tests/test_cli.py::test_flaskgroup_debug[True]",
                            "tests/test_cli.py::test_flaskgroup_debug[False]",
                            "tests/test_cli.py::test_flaskgroup_nested",
                            "tests/test_cli.py::test_no_command_echo_loading_error",
                            "tests/test_cli.py::test_help_echo_loading_error",
                            "tests/test_cli.py::test_help_echo_exception",
                            "tests/test_cli.py::TestRoutes::test_simple",
                            "tests/test_cli.py::TestRoutes::test_sort",
                            "tests/test_cli.py::TestRoutes::test_all_methods",
                            "tests/test_cli.py::TestRoutes::test_no_routes",
                            "tests/test_cli.py::test_load_dotenv",
                            "tests/test_cli.py::test_dotenv_path",
                            "tests/test_cli.py::test_dotenv_optional",
                            "tests/test_cli.py::test_disable_dotenv_from_env",
                            "tests/test_cli.py::test_run_cert_path",
                            "tests/test_cli.py::test_run_cert_adhoc",
                            "tests/test_cli.py::test_run_cert_import",
                            "tests/test_cli.py::test_run_cert_no_ssl",
                            "tests/test_cli.py::test_cli_blueprints",
                            "tests/test_cli.py::test_cli_empty"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "psf__requests-1776.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "test_requests.py::RequestsTestCase::test_DIGEST_AUTH_SETS_SESSION_COOKIES",
                            "test_requests.py::RequestsTestCase::test_request_cookies_not_persisted",
                            "test_requests.py::RequestsTestCase::test_set_cookie_on_301"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "test_requests.py::RequestsTestCase::test_BASICAUTH_TUPLE_HTTP_200_OK_GET",
                            "test_requests.py::RequestsTestCase::test_DIGESTAUTH_QUOTES_QOP_VALUE",
                            "test_requests.py::RequestsTestCase::test_DIGESTAUTH_WRONG_HTTP_401_GET",
                            "test_requests.py::RequestsTestCase::test_DIGEST_AUTH_RETURNS_COOKIE",
                            "test_requests.py::RequestsTestCase::test_DIGEST_HTTP_200_OK_GET",
                            "test_requests.py::RequestsTestCase::test_DIGEST_STREAM",
                            "test_requests.py::RequestsTestCase::test_HTTP_200_OK_GET_ALTERNATIVE",
                            "test_requests.py::RequestsTestCase::test_HTTP_200_OK_GET_WITH_MIXED_PARAMS",
                            "test_requests.py::RequestsTestCase::test_HTTP_200_OK_GET_WITH_PARAMS",
                            "test_requests.py::RequestsTestCase::test_HTTP_200_OK_HEAD",
                            "test_requests.py::RequestsTestCase::test_HTTP_200_OK_PUT",
                            "test_requests.py::RequestsTestCase::test_HTTP_302_ALLOW_REDIRECT_GET",
                            "test_requests.py::RequestsTestCase::test_POSTBIN_GET_POST_FILES",
                            "test_requests.py::RequestsTestCase::test_POSTBIN_GET_POST_FILES_WITH_DATA",
                            "test_requests.py::RequestsTestCase::test_autoset_header_values_are_native",
                            "test_requests.py::RequestsTestCase::test_basic_building",
                            "test_requests.py::RequestsTestCase::test_basicauth_with_netrc",
                            "test_requests.py::RequestsTestCase::test_can_send_nonstring_objects_with_files",
                            "test_requests.py::RequestsTestCase::test_cannot_send_unprepared_requests",
                            "test_requests.py::RequestsTestCase::test_cookie_parameters",
                            "test_requests.py::RequestsTestCase::test_cookie_persists_via_api",
                            "test_requests.py::RequestsTestCase::test_cookie_quote_wrapped",
                            "test_requests.py::RequestsTestCase::test_cookie_removed_on_expire",
                            "test_requests.py::RequestsTestCase::test_cookie_sent_on_redirect",
                            "test_requests.py::RequestsTestCase::test_custom_content_type",
                            "test_requests.py::RequestsTestCase::test_decompress_gzip",
                            "test_requests.py::RequestsTestCase::test_different_encodings_dont_break_post",
                            "test_requests.py::RequestsTestCase::test_entry_points",
                            "test_requests.py::RequestsTestCase::test_fixes_1329",
                            "test_requests.py::RequestsTestCase::test_generic_cookiejar_works",
                            "test_requests.py::RequestsTestCase::test_get_auth_from_url",
                            "test_requests.py::RequestsTestCase::test_get_auth_from_url_encoded_spaces",
                            "test_requests.py::RequestsTestCase::test_get_auth_from_url_not_encoded_spaces",
                            "test_requests.py::RequestsTestCase::test_get_auth_from_url_percent_chars",
                            "test_requests.py::RequestsTestCase::test_header_keys_are_native",
                            "test_requests.py::RequestsTestCase::test_header_remove_is_case_insensitive",
                            "test_requests.py::RequestsTestCase::test_hook_receives_request_arguments",
                            "test_requests.py::RequestsTestCase::test_http_error",
                            "test_requests.py::RequestsTestCase::test_invalid_url",
                            "test_requests.py::RequestsTestCase::test_links",
                            "test_requests.py::RequestsTestCase::test_long_authinfo_in_url",
                            "test_requests.py::RequestsTestCase::test_mixed_case_scheme_acceptable",
                            "test_requests.py::RequestsTestCase::test_no_content_length",
                            "test_requests.py::RequestsTestCase::test_oddball_schemes_dont_check_URLs",
                            "test_requests.py::RequestsTestCase::test_param_cookiejar_works",
                            "test_requests.py::RequestsTestCase::test_params_are_added_before_fragment",
                            "test_requests.py::RequestsTestCase::test_params_are_merged_case_sensitive",
                            "test_requests.py::RequestsTestCase::test_path_is_not_double_encoded",
                            "test_requests.py::RequestsTestCase::test_prepared_from_session",
                            "test_requests.py::RequestsTestCase::test_prepared_request_hook",
                            "test_requests.py::RequestsTestCase::test_request_and_response_are_pickleable",
                            "test_requests.py::RequestsTestCase::test_request_cookie_overrides_session_cookie",
                            "test_requests.py::RequestsTestCase::test_request_ok_set",
                            "test_requests.py::RequestsTestCase::test_requests_in_history_are_not_overridden",
                            "test_requests.py::RequestsTestCase::test_response_is_iterable",
                            "test_requests.py::RequestsTestCase::test_session_hooks_are_overriden_by_request_hooks",
                            "test_requests.py::RequestsTestCase::test_session_hooks_are_used_with_no_request_hooks",
                            "test_requests.py::RequestsTestCase::test_session_pickling",
                            "test_requests.py::RequestsTestCase::test_status_raising",
                            "test_requests.py::RequestsTestCase::test_time_elapsed_blank",
                            "test_requests.py::RequestsTestCase::test_transport_adapter_ordering",
                            "test_requests.py::RequestsTestCase::test_unicode_get",
                            "test_requests.py::RequestsTestCase::test_unicode_header_name",
                            "test_requests.py::RequestsTestCase::test_unicode_method_name",
                            "test_requests.py::RequestsTestCase::test_unicode_multipart_post",
                            "test_requests.py::RequestsTestCase::test_unicode_multipart_post_fieldnames",
                            "test_requests.py::RequestsTestCase::test_urlencoded_get_query_multivalued_param",
                            "test_requests.py::TestContentEncodingDetection::test_html4_pragma",
                            "test_requests.py::TestContentEncodingDetection::test_html_charset",
                            "test_requests.py::TestContentEncodingDetection::test_none",
                            "test_requests.py::TestContentEncodingDetection::test_precedence",
                            "test_requests.py::TestContentEncodingDetection::test_xhtml_pragma",
                            "test_requests.py::TestContentEncodingDetection::test_xml",
                            "test_requests.py::TestCaseInsensitiveDict::test_contains",
                            "test_requests.py::TestCaseInsensitiveDict::test_delitem",
                            "test_requests.py::TestCaseInsensitiveDict::test_docstring_example",
                            "test_requests.py::TestCaseInsensitiveDict::test_equality",
                            "test_requests.py::TestCaseInsensitiveDict::test_fixes_649",
                            "test_requests.py::TestCaseInsensitiveDict::test_get",
                            "test_requests.py::TestCaseInsensitiveDict::test_getitem",
                            "test_requests.py::TestCaseInsensitiveDict::test_iter",
                            "test_requests.py::TestCaseInsensitiveDict::test_iterable_init",
                            "test_requests.py::TestCaseInsensitiveDict::test_kwargs_init",
                            "test_requests.py::TestCaseInsensitiveDict::test_len",
                            "test_requests.py::TestCaseInsensitiveDict::test_lower_items",
                            "test_requests.py::TestCaseInsensitiveDict::test_mapping_init",
                            "test_requests.py::TestCaseInsensitiveDict::test_preserve_key_case",
                            "test_requests.py::TestCaseInsensitiveDict::test_preserve_last_key_case",
                            "test_requests.py::TestCaseInsensitiveDict::test_setdefault",
                            "test_requests.py::TestCaseInsensitiveDict::test_update",
                            "test_requests.py::TestCaseInsensitiveDict::test_update_retains_unchanged",
                            "test_requests.py::UtilsTestCase::test_super_len_io_streams"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "astropy__astropy-7858.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "astropy/wcs/tests/test_wcs.py::test_scalar_inputs"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "astropy/wcs/tests/test_wcs.py::TestMaps::test_consistency",
                            "astropy/wcs/tests/test_wcs.py::TestMaps::test_maps",
                            "astropy/wcs/tests/test_wcs.py::TestSpectra::test_consistency",
                            "astropy/wcs/tests/test_wcs.py::TestSpectra::test_spectra",
                            "astropy/wcs/tests/test_wcs.py::test_fixes",
                            "astropy/wcs/tests/test_wcs.py::test_outside_sky",
                            "astropy/wcs/tests/test_wcs.py::test_pix2world",
                            "astropy/wcs/tests/test_wcs.py::test_load_fits_path",
                            "astropy/wcs/tests/test_wcs.py::test_dict_init",
                            "astropy/wcs/tests/test_wcs.py::test_extra_kwarg",
                            "astropy/wcs/tests/test_wcs.py::test_3d_shapes",
                            "astropy/wcs/tests/test_wcs.py::test_preserve_shape",
                            "astropy/wcs/tests/test_wcs.py::test_broadcasting",
                            "astropy/wcs/tests/test_wcs.py::test_shape_mismatch",
                            "astropy/wcs/tests/test_wcs.py::test_invalid_shape",
                            "astropy/wcs/tests/test_wcs.py::test_warning_about_defunct_keywords",
                            "astropy/wcs/tests/test_wcs.py::test_warning_about_defunct_keywords_exception",
                            "astropy/wcs/tests/test_wcs.py::test_to_header_string",
                            "astropy/wcs/tests/test_wcs.py::test_to_fits",
                            "astropy/wcs/tests/test_wcs.py::test_to_header_warning",
                            "astropy/wcs/tests/test_wcs.py::test_no_comments_in_header",
                            "astropy/wcs/tests/test_wcs.py::test_find_all_wcs_crash",
                            "astropy/wcs/tests/test_wcs.py::test_validate",
                            "astropy/wcs/tests/test_wcs.py::test_validate_with_2_wcses",
                            "astropy/wcs/tests/test_wcs.py::test_crpix_maps_to_crval",
                            "astropy/wcs/tests/test_wcs.py::test_all_world2pix",
                            "astropy/wcs/tests/test_wcs.py::test_scamp_sip_distortion_parameters",
                            "astropy/wcs/tests/test_wcs.py::test_fixes2",
                            "astropy/wcs/tests/test_wcs.py::test_unit_normalization",
                            "astropy/wcs/tests/test_wcs.py::test_footprint_to_file",
                            "astropy/wcs/tests/test_wcs.py::test_validate_faulty_wcs",
                            "astropy/wcs/tests/test_wcs.py::test_error_message",
                            "astropy/wcs/tests/test_wcs.py::test_out_of_bounds",
                            "astropy/wcs/tests/test_wcs.py::test_calc_footprint_1",
                            "astropy/wcs/tests/test_wcs.py::test_calc_footprint_2",
                            "astropy/wcs/tests/test_wcs.py::test_calc_footprint_3",
                            "astropy/wcs/tests/test_wcs.py::test_sip",
                            "astropy/wcs/tests/test_wcs.py::test_printwcs",
                            "astropy/wcs/tests/test_wcs.py::test_invalid_spherical",
                            "astropy/wcs/tests/test_wcs.py::test_no_iteration",
                            "astropy/wcs/tests/test_wcs.py::test_sip_tpv_agreement",
                            "astropy/wcs/tests/test_wcs.py::test_tpv_copy",
                            "astropy/wcs/tests/test_wcs.py::test_hst_wcs",
                            "astropy/wcs/tests/test_wcs.py::test_list_naxis",
                            "astropy/wcs/tests/test_wcs.py::test_sip_broken",
                            "astropy/wcs/tests/test_wcs.py::test_no_truncate_crval",
                            "astropy/wcs/tests/test_wcs.py::test_no_truncate_crval_try2",
                            "astropy/wcs/tests/test_wcs.py::test_no_truncate_crval_p17",
                            "astropy/wcs/tests/test_wcs.py::test_no_truncate_using_compare",
                            "astropy/wcs/tests/test_wcs.py::test_passing_ImageHDU",
                            "astropy/wcs/tests/test_wcs.py::test_inconsistent_sip",
                            "astropy/wcs/tests/test_wcs.py::test_bounds_check",
                            "astropy/wcs/tests/test_wcs.py::test_naxis",
                            "astropy/wcs/tests/test_wcs.py::test_sip_with_altkey",
                            "astropy/wcs/tests/test_wcs.py::test_to_fits_1",
                            "astropy/wcs/tests/test_wcs.py::test_keyedsip",
                            "astropy/wcs/tests/test_wcs.py::test_zero_size_input"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "matplotlib__matplotlib-14043.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "lib/matplotlib/tests/test_axes.py::test_bar_errbar_zorder"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "lib/matplotlib/tests/test_axes.py::test_get_labels",
                            "lib/matplotlib/tests/test_axes.py::test_spy_invalid_kwargs",
                            "lib/matplotlib/tests/test_axes.py::test_twinx_cla",
                            "lib/matplotlib/tests/test_axes.py::test_twinx_axis_scales[png]",
                            "lib/matplotlib/tests/test_axes.py::test_twin_inherit_autoscale_setting",
                            "lib/matplotlib/tests/test_axes.py::test_inverted_cla",
                            "lib/matplotlib/tests/test_axes.py::test_minorticks_on_rcParams_both[png]",
                            "lib/matplotlib/tests/test_axes.py::test_autoscale_tiny_range[png]",
                            "lib/matplotlib/tests/test_axes.py::test_autoscale_tight",
                            "lib/matplotlib/tests/test_axes.py::test_autoscale_log_shared",
                            "lib/matplotlib/tests/test_axes.py::test_use_sticky_edges",
                            "lib/matplotlib/tests/test_axes.py::test_arrow_simple[png]",
                            "lib/matplotlib/tests/test_axes.py::test_arrow_empty",
                            "lib/matplotlib/tests/test_axes.py::test_annotate_default_arrow",
                            "lib/matplotlib/tests/test_axes.py::test_structured_data",
                            "lib/matplotlib/tests/test_axes.py::test_polar_rlim[png]",
                            "lib/matplotlib/tests/test_axes.py::test_polar_rlim_bottom[png]",
                            "lib/matplotlib/tests/test_axes.py::test_hexbin_extent[png]",
                            "lib/matplotlib/tests/test_axes.py::test_hexbin_empty[png]",
                            "lib/matplotlib/tests/test_axes.py::test_hexbin_pickable",
                            "lib/matplotlib/tests/test_axes.py::test_inverted_limits",
                            "lib/matplotlib/tests/test_axes.py::test_imshow[png]",
                            "lib/matplotlib/tests/test_axes.py::test_polycollection_joinstyle[png]",
                            "lib/matplotlib/tests/test_axes.py::test_fill_between_input[2d_x_input]",
                            "lib/matplotlib/tests/test_axes.py::test_fill_between_input[2d_y1_input]",
                            "lib/matplotlib/tests/test_axes.py::test_fill_between_input[2d_y2_input]",
                            "lib/matplotlib/tests/test_axes.py::test_fill_betweenx_input[2d_y_input]",
                            "lib/matplotlib/tests/test_axes.py::test_fill_betweenx_input[2d_x1_input]",
                            "lib/matplotlib/tests/test_axes.py::test_fill_betweenx_input[2d_x2_input]",
                            "lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate[png]",
                            "lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate_decreasing[png]",
                            "lib/matplotlib/tests/test_axes.py::test_pcolorargs_5205",
                            "lib/matplotlib/tests/test_axes.py::test_pcolormesh[png]",
                            "lib/matplotlib/tests/test_axes.py::test_pcolorargs",
                            "lib/matplotlib/tests/test_axes.py::test_arc_angles[png]",
                            "lib/matplotlib/tests/test_axes.py::test_arc_ellipse[png]",
                            "lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales[png]",
                            "lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales_zoomed[png]",
                            "lib/matplotlib/tests/test_axes.py::test_markevery_log_scales[png]",
                            "lib/matplotlib/tests/test_axes.py::test_markevery_polar[png]",
                            "lib/matplotlib/tests/test_axes.py::test_marker_edges[png]",
                            "lib/matplotlib/tests/test_axes.py::test_bar_ticklabel_fail",
                            "lib/matplotlib/tests/test_axes.py::test_bar_color_none_alpha",
                            "lib/matplotlib/tests/test_axes.py::test_bar_edgecolor_none_alpha",
                            "lib/matplotlib/tests/test_axes.py::test_bar_timedelta",
                            "lib/matplotlib/tests/test_axes.py::test_hist_log[png]",
                            "lib/matplotlib/tests/test_axes.py::test_hist_bar_empty[png]",
                            "lib/matplotlib/tests/test_axes.py::test_hist_step_empty[png]",
                            "lib/matplotlib/tests/test_axes.py::test_hist_steplog[png]",
                            "lib/matplotlib/tests/test_axes.py::test_hist_step_filled[png]",
                            "lib/matplotlib/tests/test_axes.py::test_hist_step_log_bottom[png]",
                            "lib/matplotlib/tests/test_axes.py::test_hist_unequal_bins_density",
                            "lib/matplotlib/tests/test_axes.py::test_hist_datetime_datasets",
                            "lib/matplotlib/tests/test_axes.py::test_hist_with_empty_input[data0-1]",
                            "lib/matplotlib/tests/test_axes.py::test_hist_with_empty_input[data1-1]",
                            "lib/matplotlib/tests/test_axes.py::test_hist_with_empty_input[data2-2]",
                            "lib/matplotlib/tests/test_axes.py::test_contour_hatching[png]",
                            "lib/matplotlib/tests/test_axes.py::test_hist2d[png]",
                            "lib/matplotlib/tests/test_axes.py::test_hist2d_transpose[png]",
                            "lib/matplotlib/tests/test_axes.py::test_hist2d_density_normed",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_plot[png]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_marker[png]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_2D[png]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_invalid_color[png]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_no_invalid_color[png]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[0.5-None]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[rgby-None]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[rgb-shape]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[rgbrgb-shape]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case4-conversion]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[red-None]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[none-None]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[None-None]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case8-None]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[jaune-conversion]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case10-conversion]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case11-conversion]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case12-None]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case13-None]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case14-shape]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case15-None]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case16-None]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case17-conversion]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case18-None]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case19-shape]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case20-None]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case21-shape]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case22-None]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case23-shape]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case24-None]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case25-shape]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case26-None]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case27-shape]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case28-None]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case29-shape]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case30-conversion]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case31-conversion]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case32-conversion]",
                            "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params0-expected_result0]",
                            "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params1-expected_result1]",
                            "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params2-expected_result2]",
                            "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params3-expected_result3]",
                            "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params4-expected_result4]",
                            "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs0-None]",
                            "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs1-None]",
                            "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs2-r]",
                            "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs3-expected_edgecolors3]",
                            "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs4-r]",
                            "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs5-face]",
                            "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs6-none]",
                            "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs7-r]",
                            "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs8-r]",
                            "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs9-r]",
                            "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs10-g]",
                            "lib/matplotlib/tests/test_axes.py::test_pyplot_axes",
                            "lib/matplotlib/tests/test_axes.py::test_stackplot_baseline[png]",
                            "lib/matplotlib/tests/test_axes.py::test_bxp_horizontal[png]",
                            "lib/matplotlib/tests/test_axes.py::test_bxp_patchartist[png]",
                            "lib/matplotlib/tests/test_axes.py::test_bxp_custompatchartist[png]",
                            "lib/matplotlib/tests/test_axes.py::test_bxp_customoutlier[png]",
                            "lib/matplotlib/tests/test_axes.py::test_bxp_showcustommean[png]",
                            "lib/matplotlib/tests/test_axes.py::test_bxp_custombox[png]",
                            "lib/matplotlib/tests/test_axes.py::test_bxp_custommedian[png]",
                            "lib/matplotlib/tests/test_axes.py::test_bxp_customcap[png]",
                            "lib/matplotlib/tests/test_axes.py::test_bxp_customwhisker[png]",
                            "lib/matplotlib/tests/test_axes.py::test_bxp_shownotches[png]",
                            "lib/matplotlib/tests/test_axes.py::test_bxp_nocaps[png]",
                            "lib/matplotlib/tests/test_axes.py::test_bxp_nobox[png]",
                            "lib/matplotlib/tests/test_axes.py::test_bxp_no_flier_stats[png]",
                            "lib/matplotlib/tests/test_axes.py::test_bxp_showmean[png]",
                            "lib/matplotlib/tests/test_axes.py::test_bxp_showmeanasline[png]",
                            "lib/matplotlib/tests/test_axes.py::test_bxp_scalarwidth[png]",
                            "lib/matplotlib/tests/test_axes.py::test_bxp_customwidths[png]",
                            "lib/matplotlib/tests/test_axes.py::test_bxp_custompositions[png]",
                            "lib/matplotlib/tests/test_axes.py::test_bxp_bad_widths",
                            "lib/matplotlib/tests/test_axes.py::test_bxp_bad_positions",
                            "lib/matplotlib/tests/test_axes.py::test_boxplot_sym2[png]",
                            "lib/matplotlib/tests/test_axes.py::test_boxplot_sym[png]",
                            "lib/matplotlib/tests/test_axes.py::test_boxplot_rc_parameters[png]",
                            "lib/matplotlib/tests/test_axes.py::test_boxplot_with_CIarray[png]",
                            "lib/matplotlib/tests/test_axes.py::test_boxplot_no_weird_whisker[png]",
                            "lib/matplotlib/tests/test_axes.py::test_boxplot_bad_medians_1",
                            "lib/matplotlib/tests/test_axes.py::test_boxplot_bad_medians_2",
                            "lib/matplotlib/tests/test_axes.py::test_boxplot_bad_ci_1",
                            "lib/matplotlib/tests/test_axes.py::test_boxplot_zorder",
                            "lib/matplotlib/tests/test_axes.py::test_boxplot_bad_ci_2",
                            "lib/matplotlib/tests/test_axes.py::test_boxplot_mod_artist_after_plotting[png]",
                            "lib/matplotlib/tests/test_axes.py::test_violinplot_bad_positions",
                            "lib/matplotlib/tests/test_axes.py::test_violinplot_bad_widths",
                            "lib/matplotlib/tests/test_axes.py::test_manage_xticks",
                            "lib/matplotlib/tests/test_axes.py::test_boxplot_not_single",
                            "lib/matplotlib/tests/test_axes.py::test_tick_space_size_0",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_colorcycle",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_shape",
                            "lib/matplotlib/tests/test_axes.py::test_errobar_nonefmt",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_with_prop_cycle[png]",
                            "lib/matplotlib/tests/test_axes.py::test_hist_step[png]",
                            "lib/matplotlib/tests/test_axes.py::test_stem[png-w/",
                            "lib/matplotlib/tests/test_axes.py::test_stem[png-w/o",
                            "lib/matplotlib/tests/test_axes.py::test_stem_params[png]",
                            "lib/matplotlib/tests/test_axes.py::test_stem_args",
                            "lib/matplotlib/tests/test_axes.py::test_stem_dates",
                            "lib/matplotlib/tests/test_axes.py::test_hist_normed_density[False-False]",
                            "lib/matplotlib/tests/test_axes.py::test_hist_normed_density[False-True]",
                            "lib/matplotlib/tests/test_axes.py::test_hist_normed_density[True-False]",
                            "lib/matplotlib/tests/test_axes.py::test_hist_normed_density[True-True]",
                            "lib/matplotlib/tests/test_axes.py::test_hist_step_bottom[png]",
                            "lib/matplotlib/tests/test_axes.py::test_hist_emptydata",
                            "lib/matplotlib/tests/test_axes.py::test_hist_labels",
                            "lib/matplotlib/tests/test_axes.py::test_transparent_markers[png]",
                            "lib/matplotlib/tests/test_axes.py::test_rgba_markers[png]",
                            "lib/matplotlib/tests/test_axes.py::test_mollweide_grid[png]",
                            "lib/matplotlib/tests/test_axes.py::test_mollweide_forward_inverse_closure",
                            "lib/matplotlib/tests/test_axes.py::test_mollweide_inverse_forward_closure",
                            "lib/matplotlib/tests/test_axes.py::test_alpha[png]",
                            "lib/matplotlib/tests/test_axes.py::test_eventplot[png]",
                            "lib/matplotlib/tests/test_axes.py::test_eventplot_defaults[png]",
                            "lib/matplotlib/tests/test_axes.py::test_eventplot_colors[colors0]",
                            "lib/matplotlib/tests/test_axes.py::test_eventplot_colors[colors1]",
                            "lib/matplotlib/tests/test_axes.py::test_eventplot_colors[colors2]",
                            "lib/matplotlib/tests/test_axes.py::test_eventplot_colors[colors3]",
                            "lib/matplotlib/tests/test_axes.py::test_eventplot_problem_kwargs[png]",
                            "lib/matplotlib/tests/test_axes.py::test_empty_eventplot",
                            "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data0-_empty]",
                            "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data1-vertical]",
                            "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data2-horizontal]",
                            "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data3-None]",
                            "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data4-none]",
                            "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data5-_empty]",
                            "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data6-vertical]",
                            "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data7-horizontal]",
                            "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data8-None]",
                            "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data9-none]",
                            "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data10-_empty]",
                            "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data11-vertical]",
                            "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data12-horizontal]",
                            "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data13-None]",
                            "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data14-none]",
                            "lib/matplotlib/tests/test_axes.py::test_marker_styles[png]",
                            "lib/matplotlib/tests/test_axes.py::test_vertex_markers[png]",
                            "lib/matplotlib/tests/test_axes.py::test_step_linestyle[png]",
                            "lib/matplotlib/tests/test_axes.py::test_mixed_collection[png]",
                            "lib/matplotlib/tests/test_axes.py::test_subplot_key_hash",
                            "lib/matplotlib/tests/test_axes.py::test_specgram_freqs[png]",
                            "lib/matplotlib/tests/test_axes.py::test_specgram_noise[png]",
                            "lib/matplotlib/tests/test_axes.py::test_specgram_magnitude_freqs[png]",
                            "lib/matplotlib/tests/test_axes.py::test_specgram_magnitude_noise[png]",
                            "lib/matplotlib/tests/test_axes.py::test_specgram_angle_freqs[png]",
                            "lib/matplotlib/tests/test_axes.py::test_specgram_noise_angle[png]",
                            "lib/matplotlib/tests/test_axes.py::test_specgram_freqs_phase[png]",
                            "lib/matplotlib/tests/test_axes.py::test_specgram_noise_phase[png]",
                            "lib/matplotlib/tests/test_axes.py::test_psd_freqs[png]",
                            "lib/matplotlib/tests/test_axes.py::test_psd_noise[png]",
                            "lib/matplotlib/tests/test_axes.py::test_csd_freqs[png]",
                            "lib/matplotlib/tests/test_axes.py::test_csd_noise[png]",
                            "lib/matplotlib/tests/test_axes.py::test_magnitude_spectrum_freqs[png]",
                            "lib/matplotlib/tests/test_axes.py::test_magnitude_spectrum_noise[png]",
                            "lib/matplotlib/tests/test_axes.py::test_angle_spectrum_freqs[png]",
                            "lib/matplotlib/tests/test_axes.py::test_angle_spectrum_noise[png]",
                            "lib/matplotlib/tests/test_axes.py::test_phase_spectrum_freqs[png]",
                            "lib/matplotlib/tests/test_axes.py::test_phase_spectrum_noise[png]",
                            "lib/matplotlib/tests/test_axes.py::test_twin_spines[png]",
                            "lib/matplotlib/tests/test_axes.py::test_twin_spines_on_top[png]",
                            "lib/matplotlib/tests/test_axes.py::test_rcparam_grid_minor",
                            "lib/matplotlib/tests/test_axes.py::test_vline_limit",
                            "lib/matplotlib/tests/test_axes.py::test_empty_shared_subplots",
                            "lib/matplotlib/tests/test_axes.py::test_shared_with_aspect_1",
                            "lib/matplotlib/tests/test_axes.py::test_shared_with_aspect_2",
                            "lib/matplotlib/tests/test_axes.py::test_shared_with_aspect_3",
                            "lib/matplotlib/tests/test_axes.py::test_twin_with_aspect[x]",
                            "lib/matplotlib/tests/test_axes.py::test_twin_with_aspect[y]",
                            "lib/matplotlib/tests/test_axes.py::test_relim_visible_only",
                            "lib/matplotlib/tests/test_axes.py::test_text_labelsize",
                            "lib/matplotlib/tests/test_axes.py::test_pie_textprops",
                            "lib/matplotlib/tests/test_axes.py::test_tick_label_update",
                            "lib/matplotlib/tests/test_axes.py::test_margins",
                            "lib/matplotlib/tests/test_axes.py::test_length_one_hist",
                            "lib/matplotlib/tests/test_axes.py::test_pathological_hexbin",
                            "lib/matplotlib/tests/test_axes.py::test_color_None",
                            "lib/matplotlib/tests/test_axes.py::test_color_alias",
                            "lib/matplotlib/tests/test_axes.py::test_numerical_hist_label",
                            "lib/matplotlib/tests/test_axes.py::test_unicode_hist_label",
                            "lib/matplotlib/tests/test_axes.py::test_move_offsetlabel",
                            "lib/matplotlib/tests/test_axes.py::test_rc_tick",
                            "lib/matplotlib/tests/test_axes.py::test_rc_major_minor_tick",
                            "lib/matplotlib/tests/test_axes.py::test_square_plot",
                            "lib/matplotlib/tests/test_axes.py::test_no_None",
                            "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy0-AxesImage]",
                            "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy1-AxesImage]",
                            "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy2-AxesImage]",
                            "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy3-PcolorImage]",
                            "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy4-QuadMesh]",
                            "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy0-AxesImage]",
                            "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy1-AxesImage]",
                            "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy2-AxesImage]",
                            "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy3-PcolorImage]",
                            "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy4-QuadMesh]",
                            "lib/matplotlib/tests/test_axes.py::test_shared_scale",
                            "lib/matplotlib/tests/test_axes.py::test_violin_point_mass",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs0]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs1]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs2]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs3]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs4]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs5]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs6]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs7]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs8]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs9]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs10]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs11]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs12]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs13]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs14]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs15]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs16]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs17]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs18]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs19]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs20]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs21]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs22]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs23]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs24]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs25]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs26]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs27]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs28]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs29]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs30]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs31]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs32]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs33]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs34]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs35]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs36]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs37]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs38]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs39]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs40]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs41]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs42]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs43]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs44]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs45]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs46]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs47]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs48]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs49]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs50]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs51]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs52]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs53]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs54]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs55]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs56]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs57]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs58]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs59]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs60]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs61]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs62]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs63]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs64]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs65]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs66]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs67]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs68]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs69]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs70]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs71]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs72]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs73]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs74]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs75]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs76]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs77]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs78]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs79]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs80]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs81]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs82]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs83]",
                            "lib/matplotlib/tests/test_axes.py::test_dash_offset[png]",
                            "lib/matplotlib/tests/test_axes.py::test_title_pad",
                            "lib/matplotlib/tests/test_axes.py::test_title_location_roundtrip",
                            "lib/matplotlib/tests/test_axes.py::test_loglog[png]",
                            "lib/matplotlib/tests/test_axes.py::test_loglog_nonpos[png]",
                            "lib/matplotlib/tests/test_axes.py::test_axes_margins",
                            "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[gca-x]",
                            "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[gca-y]",
                            "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots-x]",
                            "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots-y]",
                            "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots_shared-x]",
                            "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots_shared-y]",
                            "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[add_axes-x]",
                            "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[add_axes-y]",
                            "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes_relim",
                            "lib/matplotlib/tests/test_axes.py::test_shared_axes_autoscale",
                            "lib/matplotlib/tests/test_axes.py::test_adjust_numtick_aspect",
                            "lib/matplotlib/tests/test_axes.py::test_broken_barh_empty",
                            "lib/matplotlib/tests/test_axes.py::test_broken_barh_timedelta",
                            "lib/matplotlib/tests/test_axes.py::test_axis_set_tick_params_labelsize_labelcolor",
                            "lib/matplotlib/tests/test_axes.py::test_axes_tick_params_gridlines",
                            "lib/matplotlib/tests/test_axes.py::test_axes_tick_params_ylabelside",
                            "lib/matplotlib/tests/test_axes.py::test_axes_tick_params_xlabelside",
                            "lib/matplotlib/tests/test_axes.py::test_none_kwargs",
                            "lib/matplotlib/tests/test_axes.py::test_ls_ds_conflict",
                            "lib/matplotlib/tests/test_axes.py::test_bar_uint8",
                            "lib/matplotlib/tests/test_axes.py::test_axisbelow[png]",
                            "lib/matplotlib/tests/test_axes.py::test_titlesetpos",
                            "lib/matplotlib/tests/test_axes.py::test_title_xticks_top",
                            "lib/matplotlib/tests/test_axes.py::test_title_xticks_top_both",
                            "lib/matplotlib/tests/test_axes.py::test_offset_label_color",
                            "lib/matplotlib/tests/test_axes.py::test_large_offset",
                            "lib/matplotlib/tests/test_axes.py::test_barb_units",
                            "lib/matplotlib/tests/test_axes.py::test_quiver_units",
                            "lib/matplotlib/tests/test_axes.py::test_bar_color_cycle",
                            "lib/matplotlib/tests/test_axes.py::test_tick_param_label_rotation",
                            "lib/matplotlib/tests/test_axes.py::test_fillbetween_cycle",
                            "lib/matplotlib/tests/test_axes.py::test_log_margins",
                            "lib/matplotlib/tests/test_axes.py::test_color_length_mismatch",
                            "lib/matplotlib/tests/test_axes.py::test_eventplot_legend",
                            "lib/matplotlib/tests/test_axes.py::test_bar_broadcast_args",
                            "lib/matplotlib/tests/test_axes.py::test_invalid_axis_limits",
                            "lib/matplotlib/tests/test_axes.py::test_minorticks_on[symlog-symlog]",
                            "lib/matplotlib/tests/test_axes.py::test_minorticks_on[symlog-log]",
                            "lib/matplotlib/tests/test_axes.py::test_minorticks_on[log-symlog]",
                            "lib/matplotlib/tests/test_axes.py::test_minorticks_on[log-log]",
                            "lib/matplotlib/tests/test_axes.py::test_twinx_knows_limits",
                            "lib/matplotlib/tests/test_axes.py::test_zero_linewidth",
                            "lib/matplotlib/tests/test_axes.py::test_polar_gridlines",
                            "lib/matplotlib/tests/test_axes.py::test_empty_errorbar_legend",
                            "lib/matplotlib/tests/test_axes.py::test_plot_columns_cycle_deprecation",
                            "lib/matplotlib/tests/test_axes.py::test_markerfacecolor_none_alpha[png]",
                            "lib/matplotlib/tests/test_axes.py::test_tick_padding_tightbbox",
                            "lib/matplotlib/tests/test_axes.py::test_zoom_inset",
                            "lib/matplotlib/tests/test_axes.py::test_set_position",
                            "lib/matplotlib/tests/test_axes.py::test_spines_properbbox_after_zoom",
                            "lib/matplotlib/tests/test_axes.py::test_cartopy_backcompat",
                            "lib/matplotlib/tests/test_axes.py::test_gettightbbox_ignoreNaN",
                            "lib/matplotlib/tests/test_axes.py::test_scatter_empty_data",
                            "lib/matplotlib/tests/test_axes.py::test_annotate_across_transforms[png]",
                            "lib/matplotlib/tests/test_axes.py::test_deprecated_uppercase_colors",
                            "lib/matplotlib/tests/test_axes.py::test_secondary_fail",
                            "lib/matplotlib/tests/test_axes.py::test_secondary_resize",
                            "lib/matplotlib/tests/test_axes.py::test_nodecorator",
                            "lib/matplotlib/tests/test_axes.py::test_displaced_spine",
                            "lib/matplotlib/tests/test_axes.py::test_tickdirs",
                            "lib/matplotlib/tests/test_axes.py::test_minor_accountedfor",
                            "lib/matplotlib/tests/test_axes.py::test_axis_bool_arguments[png]",
                            "lib/matplotlib/tests/test_axes.py::test_datetime_masked",
                            "lib/matplotlib/tests/test_axes.py::test_hist_auto_bins",
                            "lib/matplotlib/tests/test_axes.py::test_hist_nan_data",
                            "lib/matplotlib/tests/test_axes.py::test_hist_range_and_density"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "mwaskom__seaborn-2766.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "seaborn/tests/test_algorithms.py::test_bootstrap",
                            "seaborn/tests/test_algorithms.py::test_bootstrap_length",
                            "seaborn/tests/test_algorithms.py::test_bootstrap_range",
                            "seaborn/tests/test_algorithms.py::test_bootstrap_multiarg",
                            "seaborn/tests/test_algorithms.py::test_bootstrap_axis",
                            "seaborn/tests/test_algorithms.py::test_bootstrap_seed",
                            "seaborn/tests/test_algorithms.py::test_bootstrap_ols",
                            "seaborn/tests/test_algorithms.py::test_bootstrap_units",
                            "seaborn/tests/test_algorithms.py::test_bootstrap_arglength",
                            "seaborn/tests/test_algorithms.py::test_bootstrap_string_func",
                            "seaborn/tests/test_algorithms.py::test_bootstrap_reproducibility",
                            "seaborn/tests/test_algorithms.py::test_seed_new",
                            "seaborn/tests/test_categorical.py::TestCategoricalPlotter::test_1d_input_data",
                            "seaborn/tests/test_categorical.py::TestCategoricalPlotter::test_2d_input_data",
                            "seaborn/tests/test_categorical.py::TestCategoricalPlotter::test_3d_input_data",
                            "seaborn/tests/test_categorical.py::TestCategoricalPlotter::test_list_of_array_input_data",
                            "seaborn/tests/test_categorical.py::TestCategoricalPlotter::test_wide_array_input_data",
                            "seaborn/tests/test_categorical.py::TestCategoricalPlotter::test_single_long_direct_inputs",
                            "seaborn/tests/test_categorical.py::TestCategoricalPlotter::test_single_long_indirect_inputs",
                            "seaborn/tests/test_categorical.py::TestCategoricalPlotter::test_longform_groupby",
                            "seaborn/tests/test_categorical.py::TestCategoricalPlotter::test_input_validation",
                            "seaborn/tests/test_categorical.py::TestCategoricalPlotter::test_hue_order",
                            "seaborn/tests/test_categorical.py::TestCategoricalPlotter::test_plot_units",
                            "seaborn/tests/test_categorical.py::TestCategoricalPlotter::test_default_palettes",
                            "seaborn/tests/test_categorical.py::TestCategoricalPlotter::test_default_palette_with_many_levels",
                            "seaborn/tests/test_categorical.py::TestCategoricalPlotter::test_specific_color",
                            "seaborn/tests/test_categorical.py::TestCategoricalPlotter::test_specific_palette",
                            "seaborn/tests/test_categorical.py::TestCategoricalPlotter::test_dict_as_palette",
                            "seaborn/tests/test_categorical.py::TestCategoricalPlotter::test_palette_desaturation",
                            "seaborn/tests/test_categorical.py::TestCategoricalStatPlotter::test_no_bootstrappig",
                            "seaborn/tests/test_categorical.py::TestCategoricalStatPlotter::test_single_layer_stats",
                            "seaborn/tests/test_categorical.py::TestCategoricalStatPlotter::test_single_layer_stats_with_units",
                            "seaborn/tests/test_categorical.py::TestCategoricalStatPlotter::test_single_layer_stats_with_missing_data",
                            "seaborn/tests/test_categorical.py::TestCategoricalStatPlotter::test_nested_stats",
                            "seaborn/tests/test_categorical.py::TestCategoricalStatPlotter::test_bootstrap_seed",
                            "seaborn/tests/test_categorical.py::TestCategoricalStatPlotter::test_nested_stats_with_units",
                            "seaborn/tests/test_categorical.py::TestCategoricalStatPlotter::test_nested_stats_with_missing_data",
                            "seaborn/tests/test_categorical.py::TestCategoricalStatPlotter::test_sd_error_bars",
                            "seaborn/tests/test_categorical.py::TestCategoricalStatPlotter::test_nested_sd_error_bars",
                            "seaborn/tests/test_categorical.py::TestCategoricalStatPlotter::test_draw_cis",
                            "seaborn/tests/test_categorical.py::TestBoxPlotter::test_nested_width",
                            "seaborn/tests/test_categorical.py::TestBoxPlotter::test_hue_offsets",
                            "seaborn/tests/test_categorical.py::TestBoxPlotter::test_axes_data",
                            "seaborn/tests/test_categorical.py::TestBoxPlotter::test_box_colors",
                            "seaborn/tests/test_categorical.py::TestBoxPlotter::test_draw_missing_boxes",
                            "seaborn/tests/test_categorical.py::TestBoxPlotter::test_missing_data",
                            "seaborn/tests/test_categorical.py::TestBoxPlotter::test_unaligned_index",
                            "seaborn/tests/test_categorical.py::TestBoxPlotter::test_boxplots",
                            "seaborn/tests/test_categorical.py::TestBoxPlotter::test_axes_annotation",
                            "seaborn/tests/test_categorical.py::TestViolinPlotter::test_split_error",
                            "seaborn/tests/test_categorical.py::TestViolinPlotter::test_no_observations",
                            "seaborn/tests/test_categorical.py::TestViolinPlotter::test_single_observation",
                            "seaborn/tests/test_categorical.py::TestViolinPlotter::test_dwidth",
                            "seaborn/tests/test_categorical.py::TestViolinPlotter::test_scale_area",
                            "seaborn/tests/test_categorical.py::TestViolinPlotter::test_scale_width",
                            "seaborn/tests/test_categorical.py::TestViolinPlotter::test_scale_count",
                            "seaborn/tests/test_categorical.py::TestViolinPlotter::test_bad_scale",
                            "seaborn/tests/test_categorical.py::TestViolinPlotter::test_kde_fit",
                            "seaborn/tests/test_categorical.py::TestViolinPlotter::test_draw_to_density",
                            "seaborn/tests/test_categorical.py::TestViolinPlotter::test_draw_single_observations",
                            "seaborn/tests/test_categorical.py::TestViolinPlotter::test_draw_box_lines",
                            "seaborn/tests/test_categorical.py::TestViolinPlotter::test_draw_quartiles",
                            "seaborn/tests/test_categorical.py::TestViolinPlotter::test_draw_points",
                            "seaborn/tests/test_categorical.py::TestViolinPlotter::test_draw_sticks",
                            "seaborn/tests/test_categorical.py::TestViolinPlotter::test_validate_inner",
                            "seaborn/tests/test_categorical.py::TestViolinPlotter::test_draw_violinplots",
                            "seaborn/tests/test_categorical.py::TestViolinPlotter::test_draw_violinplots_no_observations",
                            "seaborn/tests/test_categorical.py::TestViolinPlotter::test_draw_violinplots_single_observations",
                            "seaborn/tests/test_categorical.py::TestViolinPlotter::test_violinplots",
                            "seaborn/tests/test_categorical.py::TestCategoricalScatterPlotter::test_group_point_colors",
                            "seaborn/tests/test_categorical.py::TestCategoricalScatterPlotter::test_hue_point_colors",
                            "seaborn/tests/test_categorical.py::TestCategoricalScatterPlotter::test_scatterplot_legend",
                            "seaborn/tests/test_categorical.py::TestStripPlotter::test_stripplot_vertical",
                            "seaborn/tests/test_categorical.py::TestStripPlotter::test_stripplot_horiztonal",
                            "seaborn/tests/test_categorical.py::TestStripPlotter::test_stripplot_jitter",
                            "seaborn/tests/test_categorical.py::TestStripPlotter::test_dodge_nested_stripplot_vertical",
                            "seaborn/tests/test_categorical.py::TestStripPlotter::test_dodge_nested_stripplot_horizontal",
                            "seaborn/tests/test_categorical.py::TestStripPlotter::test_nested_stripplot_vertical",
                            "seaborn/tests/test_categorical.py::TestStripPlotter::test_nested_stripplot_horizontal",
                            "seaborn/tests/test_categorical.py::TestStripPlotter::test_three_strip_points",
                            "seaborn/tests/test_categorical.py::TestStripPlotter::test_unaligned_index",
                            "seaborn/tests/test_categorical.py::TestSwarmPlotter::test_could_overlap",
                            "seaborn/tests/test_categorical.py::TestSwarmPlotter::test_position_candidates",
                            "seaborn/tests/test_categorical.py::TestSwarmPlotter::test_find_first_non_overlapping_candidate",
                            "seaborn/tests/test_categorical.py::TestSwarmPlotter::test_beeswarm",
                            "seaborn/tests/test_categorical.py::TestSwarmPlotter::test_add_gutters",
                            "seaborn/tests/test_categorical.py::TestSwarmPlotter::test_swarmplot_vertical",
                            "seaborn/tests/test_categorical.py::TestSwarmPlotter::test_swarmplot_horizontal",
                            "seaborn/tests/test_categorical.py::TestSwarmPlotter::test_dodge_nested_swarmplot_vertical",
                            "seaborn/tests/test_categorical.py::TestSwarmPlotter::test_dodge_nested_swarmplot_horizontal",
                            "seaborn/tests/test_categorical.py::TestSwarmPlotter::test_nested_swarmplot_vertical",
                            "seaborn/tests/test_categorical.py::TestSwarmPlotter::test_nested_swarmplot_horizontal",
                            "seaborn/tests/test_categorical.py::TestSwarmPlotter::test_unaligned_index",
                            "seaborn/tests/test_categorical.py::TestBarPlotter::test_nested_width",
                            "seaborn/tests/test_categorical.py::TestBarPlotter::test_draw_vertical_bars",
                            "seaborn/tests/test_categorical.py::TestBarPlotter::test_draw_horizontal_bars",
                            "seaborn/tests/test_categorical.py::TestBarPlotter::test_draw_nested_vertical_bars",
                            "seaborn/tests/test_categorical.py::TestBarPlotter::test_draw_nested_horizontal_bars",
                            "seaborn/tests/test_categorical.py::TestBarPlotter::test_draw_missing_bars",
                            "seaborn/tests/test_categorical.py::TestBarPlotter::test_unaligned_index",
                            "seaborn/tests/test_categorical.py::TestBarPlotter::test_barplot_colors",
                            "seaborn/tests/test_categorical.py::TestBarPlotter::test_simple_barplots",
                            "seaborn/tests/test_categorical.py::TestPointPlotter::test_different_defualt_colors",
                            "seaborn/tests/test_categorical.py::TestPointPlotter::test_hue_offsets",
                            "seaborn/tests/test_categorical.py::TestPointPlotter::test_draw_vertical_points",
                            "seaborn/tests/test_categorical.py::TestPointPlotter::test_draw_horizontal_points",
                            "seaborn/tests/test_categorical.py::TestPointPlotter::test_draw_vertical_nested_points",
                            "seaborn/tests/test_categorical.py::TestPointPlotter::test_draw_horizontal_nested_points",
                            "seaborn/tests/test_categorical.py::TestPointPlotter::test_draw_missing_points",
                            "seaborn/tests/test_categorical.py::TestPointPlotter::test_unaligned_index",
                            "seaborn/tests/test_categorical.py::TestPointPlotter::test_pointplot_colors",
                            "seaborn/tests/test_categorical.py::TestPointPlotter::test_simple_pointplots",
                            "seaborn/tests/test_categorical.py::TestCountPlot::test_plot_elements",
                            "seaborn/tests/test_categorical.py::TestCountPlot::test_input_error",
                            "seaborn/tests/test_categorical.py::TestCatPlot::test_facet_organization",
                            "seaborn/tests/test_categorical.py::TestCatPlot::test_plot_elements",
                            "seaborn/tests/test_categorical.py::TestCatPlot::test_bad_plot_kind_error",
                            "seaborn/tests/test_categorical.py::TestCatPlot::test_count_x_and_y",
                            "seaborn/tests/test_categorical.py::TestCatPlot::test_plot_colors",
                            "seaborn/tests/test_categorical.py::TestCatPlot::test_ax_kwarg_removal",
                            "seaborn/tests/test_categorical.py::TestCatPlot::test_factorplot",
                            "seaborn/tests/test_categorical.py::TestBoxenPlotter::test_invalid_depths",
                            "seaborn/tests/test_categorical.py::TestBoxenPlotter::test_valid_scales",
                            "seaborn/tests/test_categorical.py::TestBoxenPlotter::test_hue_offsets",
                            "seaborn/tests/test_distributions.py::TestRugPlot::test_empty_data",
                            "seaborn/tests/test_distributions.py::TestKDEPlotUnivariate::test_empty_data",
                            "seaborn/tests/test_distributions.py::TestKDEPlotUnivariate::test_multiple_argument_check",
                            "seaborn/tests/test_distributions.py::TestKDEPlotUnivariate::test_input_checking",
                            "seaborn/tests/test_distributions.py::TestKDEPlotBivariate::test_quantile_to_level",
                            "seaborn/tests/test_distributions.py::TestKDEPlotBivariate::test_input_checking",
                            "seaborn/tests/test_distributions.py::TestHistPlotUnivariate::test_empty_data",
                            "seaborn/tests/test_distributions.py::TestHistPlotUnivariate::test_discrete_requires_bars",
                            "seaborn/tests/test_distributions.py::TestECDFPlotUnivariate::test_bivariate_error",
                            "seaborn/tests/test_distributions.py::TestDisPlot::test_empty",
                            "seaborn/tests/test_distributions.py::TestDisPlot::test_bivariate_ecdf_error",
                            "seaborn/tests/test_rcmod.py::TestAxesStyle::test_default_return",
                            "seaborn/tests/test_rcmod.py::TestAxesStyle::test_key_usage",
                            "seaborn/tests/test_rcmod.py::TestAxesStyle::test_bad_style",
                            "seaborn/tests/test_rcmod.py::TestAxesStyle::test_rc_override",
                            "seaborn/tests/test_rcmod.py::TestAxesStyle::test_set_style",
                            "seaborn/tests/test_rcmod.py::TestAxesStyle::test_style_context_manager",
                            "seaborn/tests/test_rcmod.py::TestAxesStyle::test_style_context_independence",
                            "seaborn/tests/test_rcmod.py::TestAxesStyle::test_set_rc",
                            "seaborn/tests/test_rcmod.py::TestAxesStyle::test_set_with_palette",
                            "seaborn/tests/test_rcmod.py::TestAxesStyle::test_reset_defaults",
                            "seaborn/tests/test_rcmod.py::TestAxesStyle::test_reset_orig",
                            "seaborn/tests/test_rcmod.py::TestAxesStyle::test_set_is_alias",
                            "seaborn/tests/test_rcmod.py::TestPlottingContext::test_default_return",
                            "seaborn/tests/test_rcmod.py::TestPlottingContext::test_key_usage",
                            "seaborn/tests/test_rcmod.py::TestPlottingContext::test_bad_context",
                            "seaborn/tests/test_rcmod.py::TestPlottingContext::test_font_scale",
                            "seaborn/tests/test_rcmod.py::TestPlottingContext::test_rc_override",
                            "seaborn/tests/test_rcmod.py::TestPlottingContext::test_set_context",
                            "seaborn/tests/test_rcmod.py::TestPlottingContext::test_context_context_manager",
                            "seaborn/tests/test_rcmod.py::TestPalette::test_set_palette",
                            "seaborn/tests/test_rcmod.py::TestFonts::test_set_serif_font",
                            "seaborn/tests/test_regression.py::TestLinearPlotter::test_establish_variables_from_frame",
                            "seaborn/tests/test_regression.py::TestLinearPlotter::test_establish_variables_from_series",
                            "seaborn/tests/test_regression.py::TestLinearPlotter::test_establish_variables_from_array",
                            "seaborn/tests/test_regression.py::TestLinearPlotter::test_establish_variables_from_lists",
                            "seaborn/tests/test_regression.py::TestLinearPlotter::test_establish_variables_from_mix",
                            "seaborn/tests/test_regression.py::TestLinearPlotter::test_establish_variables_from_bad",
                            "seaborn/tests/test_regression.py::TestLinearPlotter::test_dropna",
                            "seaborn/tests/test_regression.py::TestRegressionPlotter::test_variables_from_frame",
                            "seaborn/tests/test_regression.py::TestRegressionPlotter::test_variables_from_series",
                            "seaborn/tests/test_regression.py::TestRegressionPlotter::test_variables_from_mix",
                            "seaborn/tests/test_regression.py::TestRegressionPlotter::test_variables_must_be_1d",
                            "seaborn/tests/test_regression.py::TestRegressionPlotter::test_dropna",
                            "seaborn/tests/test_regression.py::TestRegressionPlotter::test_singleton[x0-y0]",
                            "seaborn/tests/test_regression.py::TestRegressionPlotter::test_singleton[x1-y1]",
                            "seaborn/tests/test_regression.py::TestRegressionPlotter::test_singleton[x2-y2]",
                            "seaborn/tests/test_regression.py::TestRegressionPlotter::test_ci",
                            "seaborn/tests/test_regression.py::TestRegressionPlotter::test_regress_logx",
                            "seaborn/tests/test_regression.py::TestRegressionPlotter::test_regress_bootstrap_seed",
                            "seaborn/tests/test_regression.py::TestRegressionPlotter::test_numeric_bins",
                            "seaborn/tests/test_regression.py::TestRegressionPlotter::test_provided_bins",
                            "seaborn/tests/test_regression.py::TestRegressionPlotter::test_bin_results",
                            "seaborn/tests/test_regression.py::TestRegressionPlotter::test_scatter_data",
                            "seaborn/tests/test_regression.py::TestRegressionPlotter::test_estimate_data",
                            "seaborn/tests/test_regression.py::TestRegressionPlotter::test_estimate_cis",
                            "seaborn/tests/test_regression.py::TestRegressionPlotter::test_estimate_units",
                            "seaborn/tests/test_regression.py::TestRegressionPlotter::test_partial",
                            "seaborn/tests/test_regression.py::TestRegressionPlotter::test_regression_options",
                            "seaborn/tests/test_regression.py::TestRegressionPlotter::test_regression_limits",
                            "seaborn/tests/test_regression.py::TestRegressionPlots::test_regplot_basic",
                            "seaborn/tests/test_regression.py::TestRegressionPlots::test_regplot_selective",
                            "seaborn/tests/test_regression.py::TestRegressionPlots::test_regplot_scatter_kws_alpha",
                            "seaborn/tests/test_regression.py::TestRegressionPlots::test_regplot_binned",
                            "seaborn/tests/test_regression.py::TestRegressionPlots::test_lmplot_no_data",
                            "seaborn/tests/test_regression.py::TestRegressionPlots::test_lmplot_basic",
                            "seaborn/tests/test_regression.py::TestRegressionPlots::test_lmplot_hue",
                            "seaborn/tests/test_regression.py::TestRegressionPlots::test_lmplot_markers",
                            "seaborn/tests/test_regression.py::TestRegressionPlots::test_lmplot_marker_linewidths",
                            "seaborn/tests/test_regression.py::TestRegressionPlots::test_lmplot_facets",
                            "seaborn/tests/test_regression.py::TestRegressionPlots::test_lmplot_hue_col_nolegend",
                            "seaborn/tests/test_regression.py::TestRegressionPlots::test_lmplot_scatter_kws",
                            "seaborn/tests/test_regression.py::TestRegressionPlots::test_lmplot_facet_truncate[True]",
                            "seaborn/tests/test_regression.py::TestRegressionPlots::test_lmplot_facet_truncate[False]",
                            "seaborn/tests/test_regression.py::TestRegressionPlots::test_lmplot_sharey",
                            "seaborn/tests/test_regression.py::TestRegressionPlots::test_lmplot_facet_kws",
                            "seaborn/tests/test_regression.py::TestRegressionPlots::test_residplot",
                            "seaborn/tests/test_regression.py::TestRegressionPlots::test_three_point_colors",
                            "seaborn/tests/test_regression.py::TestRegressionPlots::test_regplot_xlim",
                            "seaborn/tests/test_utils.py::test_pmf_hist_basics",
                            "seaborn/tests/test_utils.py::test_ci_to_errsize",
                            "seaborn/tests/test_utils.py::test_desaturate",
                            "seaborn/tests/test_utils.py::test_desaturation_prop",
                            "seaborn/tests/test_utils.py::test_saturate",
                            "seaborn/tests/test_utils.py::test_sig_stars[0.0001-***]",
                            "seaborn/tests/test_utils.py::test_sig_stars[0.001-**]",
                            "seaborn/tests/test_utils.py::test_sig_stars[0.01-*]",
                            "seaborn/tests/test_utils.py::test_sig_stars[0.09-.]",
                            "seaborn/tests/test_utils.py::test_sig_stars[1-]",
                            "seaborn/tests/test_utils.py::test_iqr",
                            "seaborn/tests/test_utils.py::test_to_utf8[a-a0]",
                            "seaborn/tests/test_utils.py::test_to_utf8[abc-abc0]",
                            "seaborn/tests/test_utils.py::test_to_utf8[a-a1]",
                            "seaborn/tests/test_utils.py::test_to_utf8[abc-abc1]",
                            "seaborn/tests/test_utils.py::test_to_utf8[s4-abc]",
                            "seaborn/tests/test_utils.py::test_to_utf8[s5-]",
                            "seaborn/tests/test_utils.py::test_to_utf8[1-1]",
                            "seaborn/tests/test_utils.py::test_to_utf8[0-0]",
                            "seaborn/tests/test_utils.py::test_to_utf8[s8-[]]",
                            "seaborn/tests/test_utils.py::TestSpineUtils::test_despine",
                            "seaborn/tests/test_utils.py::TestSpineUtils::test_despine_specific_axes",
                            "seaborn/tests/test_utils.py::TestSpineUtils::test_despine_with_offset",
                            "seaborn/tests/test_utils.py::TestSpineUtils::test_despine_side_specific_offset",
                            "seaborn/tests/test_utils.py::TestSpineUtils::test_despine_with_offset_specific_axes",
                            "seaborn/tests/test_utils.py::TestSpineUtils::test_despine_trim_spines",
                            "seaborn/tests/test_utils.py::TestSpineUtils::test_despine_trim_inverted",
                            "seaborn/tests/test_utils.py::TestSpineUtils::test_despine_trim_noticks",
                            "seaborn/tests/test_utils.py::TestSpineUtils::test_despine_trim_categorical",
                            "seaborn/tests/test_utils.py::TestSpineUtils::test_despine_moved_ticks",
                            "seaborn/tests/test_utils.py::test_ticklabels_overlap",
                            "seaborn/tests/test_utils.py::test_move_legend_matplotlib_objects",
                            "seaborn/tests/test_utils.py::test_move_legend_input_checks",
                            "seaborn/tests/test_utils.py::test_get_dataset_names",
                            "seaborn/tests/test_utils.py::test_load_datasets",
                            "seaborn/tests/test_utils.py::test_load_dataset_string_error",
                            "seaborn/tests/test_utils.py::test_load_dataset_passed_data_error",
                            "seaborn/tests/test_utils.py::test_load_cached_datasets",
                            "seaborn/tests/test_utils.py::test_relative_luminance",
                            "seaborn/tests/test_utils.py::test_get_color_cycle[cycler0-result0]",
                            "seaborn/tests/test_utils.py::test_get_color_cycle[cycler1-result1]",
                            "seaborn/tests/test_utils.py::test_get_color_cycle[cycler2-result2]",
                            "seaborn/tests/test_utils.py::test_get_color_cycle[cycler3-result3]",
                            "seaborn/tests/test_utils.py::test_get_color_cycle[cycler4-result4]",
                            "seaborn/tests/test_utils.py::test_get_color_cycle[cycler5-result5]",
                            "seaborn/tests/test_utils.py::test_get_color_cycle[cycler6-result6]",
                            "seaborn/tests/test_utils.py::test_remove_na",
                            "seaborn/tests/test_utils.py::test_assign_default_kwargs",
                            "seaborn/tests/test_utils.py::test_draw_figure"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "psf__requests-3362.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "tests/test_requests.py::TestRequests::test_response_decode_unicode"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "tests/test_requests.py::TestRequests::test_entry_points",
                            "tests/test_requests.py::TestRequests::test_invalid_url[MissingSchema-hiwpefhipowhefopw]",
                            "tests/test_requests.py::TestRequests::test_invalid_url[InvalidSchema-localhost:3128]",
                            "tests/test_requests.py::TestRequests::test_invalid_url[InvalidSchema-localhost.localdomain:3128/]",
                            "tests/test_requests.py::TestRequests::test_invalid_url[InvalidSchema-10.122.1.1:3128/]",
                            "tests/test_requests.py::TestRequests::test_invalid_url[InvalidURL-http://]",
                            "tests/test_requests.py::TestRequests::test_basic_building",
                            "tests/test_requests.py::TestRequests::test_path_is_not_double_encoded",
                            "tests/test_requests.py::TestRequests::test_params_are_added_before_fragment[http://example.com/path#fragment-http://example.com/path?a=b#fragment]",
                            "tests/test_requests.py::TestRequests::test_params_are_added_before_fragment[http://example.com/path?key=value#fragment-http://example.com/path?key=value&a=b#fragment]",
                            "tests/test_requests.py::TestRequests::test_params_original_order_is_preserved_by_default",
                            "tests/test_requests.py::TestRequests::test_params_bytes_are_encoded",
                            "tests/test_requests.py::TestRequests::test_binary_put",
                            "tests/test_requests.py::TestRequests::test_errors[http://doesnotexist.google.com-ConnectionError]",
                            "tests/test_requests.py::TestRequests::test_errors[http://localhost:1-ConnectionError]",
                            "tests/test_requests.py::TestRequests::test_errors[http://fe80::5054:ff:fe5a:fc0-InvalidURL]",
                            "tests/test_requests.py::TestRequests::test_proxy_error",
                            "tests/test_requests.py::TestRequests::test_non_prepared_request_error",
                            "tests/test_requests.py::TestRequests::test_prepare_request_with_bytestring_url",
                            "tests/test_requests.py::TestRequests::test_links",
                            "tests/test_requests.py::TestRequests::test_cookie_parameters",
                            "tests/test_requests.py::TestRequests::test_cookie_as_dict_keeps_len",
                            "tests/test_requests.py::TestRequests::test_cookie_as_dict_keeps_items",
                            "tests/test_requests.py::TestRequests::test_cookie_as_dict_keys",
                            "tests/test_requests.py::TestRequests::test_cookie_as_dict_values",
                            "tests/test_requests.py::TestRequests::test_cookie_as_dict_items",
                            "tests/test_requests.py::TestRequests::test_cookie_duplicate_names_different_domains",
                            "tests/test_requests.py::TestRequests::test_cookie_duplicate_names_raises_cookie_conflict_error",
                            "tests/test_requests.py::TestRequests::test_response_is_iterable",
                            "tests/test_requests.py::TestRequests::test_response_chunk_size_int",
                            "tests/test_requests.py::TestRequests::test_http_error",
                            "tests/test_requests.py::TestRequests::test_transport_adapter_ordering",
                            "tests/test_requests.py::TestRequests::test_long_authinfo_in_url",
                            "tests/test_requests.py::TestRequests::test_nonhttp_schemes_dont_check_URLs",
                            "tests/test_requests.py::TestRequests::test_basic_auth_str_is_always_native",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_init[cid0]",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_init[cid1]",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_init[cid2]",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_docstring_example",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_len",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_getitem",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_fixes_649",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_delitem",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_contains",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_get",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_update",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_update_retains_unchanged",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_iter",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_equality",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_setdefault",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_lower_items",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_preserve_key_case",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_preserve_last_key_case",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_copy",
                            "tests/test_requests.py::TestMorselToCookieExpires::test_expires_valid_str",
                            "tests/test_requests.py::TestMorselToCookieExpires::test_expires_invalid_int[100-TypeError]",
                            "tests/test_requests.py::TestMorselToCookieExpires::test_expires_invalid_int[woops-ValueError]",
                            "tests/test_requests.py::TestMorselToCookieExpires::test_expires_none",
                            "tests/test_requests.py::TestMorselToCookieMaxAge::test_max_age_valid_int",
                            "tests/test_requests.py::TestMorselToCookieMaxAge::test_max_age_invalid_str",
                            "tests/test_requests.py::TestTimeout::test_connect_timeout",
                            "tests/test_requests.py::TestTimeout::test_total_timeout_connect",
                            "tests/test_requests.py::test_json_encodes_as_bytes",
                            "tests/test_requests.py::test_proxy_env_vars_override_default[http_proxy-http://example.com-socks5://proxy.com:9876]",
                            "tests/test_requests.py::test_proxy_env_vars_override_default[https_proxy-https://example.com-socks5://proxy.com:9876]",
                            "tests/test_requests.py::test_proxy_env_vars_override_default[all_proxy-http://example.com-socks5://proxy.com:9876]",
                            "tests/test_requests.py::test_proxy_env_vars_override_default[all_proxy-https://example.com-socks5://proxy.com:9876]",
                            "tests/test_requests.py::test_data_argument_accepts_tuples[data0]",
                            "tests/test_requests.py::test_data_argument_accepts_tuples[data1]",
                            "tests/test_requests.py::test_data_argument_accepts_tuples[data2]",
                            "tests/test_requests.py::test_prepared_copy[None]",
                            "tests/test_requests.py::test_prepared_copy[kwargs1]",
                            "tests/test_requests.py::test_prepared_copy[kwargs2]",
                            "tests/test_requests.py::test_prepared_copy[kwargs3]",
                            "tests/test_requests.py::test_vendor_aliases"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "sphinx-doc__sphinx-9246.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "tests/test_transforms_post_transforms.py::test_missing_reference_conditional_pending_xref"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "tests/test_transforms_post_transforms.py::test_nitpicky_warning",
                            "tests/test_transforms_post_transforms.py::test_missing_reference"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "sphinx-doc__sphinx-10137.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "tests/test_ext_extlinks.py::test_all_replacements_suggested_if_multiple_replacements_possible"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "tests/test_ext_extlinks.py::test_extlinks_detect_candidates",
                            "tests/test_ext_extlinks.py::test_replaceable_uris_emit_extlinks_warnings"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "pallets__flask-4642.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "tests/test_cli.py::test_flaskgroup_nested"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "tests/test_cli.py::test_cli_name",
                            "tests/test_cli.py::test_find_best_app",
                            "tests/test_cli.py::test_prepare_import[test-path0-test]",
                            "tests/test_cli.py::test_prepare_import[test.py-path1-test]",
                            "tests/test_cli.py::test_prepare_import[a/test-path2-test]",
                            "tests/test_cli.py::test_prepare_import[test/__init__.py-path3-test]",
                            "tests/test_cli.py::test_prepare_import[test/__init__-path4-test]",
                            "tests/test_cli.py::test_prepare_import[value5-path5-cliapp.inner1]",
                            "tests/test_cli.py::test_prepare_import[value6-path6-cliapp.inner1.inner2]",
                            "tests/test_cli.py::test_prepare_import[test.a.b-path7-test.a.b]",
                            "tests/test_cli.py::test_prepare_import[value8-path8-cliapp.app]",
                            "tests/test_cli.py::test_prepare_import[value9-path9-cliapp.message.txt]",
                            "tests/test_cli.py::test_locate_app[cliapp.app-None-testapp]",
                            "tests/test_cli.py::test_locate_app[cliapp.app-testapp-testapp]",
                            "tests/test_cli.py::test_locate_app[cliapp.factory-None-app]",
                            "tests/test_cli.py::test_locate_app[cliapp.factory-create_app-app]",
                            "tests/test_cli.py::test_locate_app[cliapp.factory-create_app()-app]",
                            "tests/test_cli.py::test_locate_app[cliapp.factory-create_app2(\"foo\",",
                            "tests/test_cli.py::test_locate_app[cliapp.factory-",
                            "tests/test_cli.py::test_locate_app_raises[notanapp.py-None]",
                            "tests/test_cli.py::test_locate_app_raises[cliapp/app-None]",
                            "tests/test_cli.py::test_locate_app_raises[cliapp.app-notanapp]",
                            "tests/test_cli.py::test_locate_app_raises[cliapp.factory-create_app2(\"foo\")]",
                            "tests/test_cli.py::test_locate_app_raises[cliapp.factory-create_app(]",
                            "tests/test_cli.py::test_locate_app_raises[cliapp.factory-no_app]",
                            "tests/test_cli.py::test_locate_app_raises[cliapp.importerrorapp-None]",
                            "tests/test_cli.py::test_locate_app_raises[cliapp.message.txt-None]",
                            "tests/test_cli.py::test_locate_app_suppress_raise",
                            "tests/test_cli.py::test_get_version",
                            "tests/test_cli.py::test_scriptinfo",
                            "tests/test_cli.py::test_lazy_load_error",
                            "tests/test_cli.py::test_with_appcontext",
                            "tests/test_cli.py::test_appgroup",
                            "tests/test_cli.py::test_flaskgroup",
                            "tests/test_cli.py::test_flaskgroup_debug[True]",
                            "tests/test_cli.py::test_flaskgroup_debug[False]",
                            "tests/test_cli.py::test_no_command_echo_loading_error",
                            "tests/test_cli.py::test_help_echo_loading_error",
                            "tests/test_cli.py::test_help_echo_exception",
                            "tests/test_cli.py::TestRoutes::test_simple",
                            "tests/test_cli.py::TestRoutes::test_all_methods",
                            "tests/test_cli.py::TestRoutes::test_no_routes",
                            "tests/test_cli.py::test_load_dotenv",
                            "tests/test_cli.py::test_dotenv_path",
                            "tests/test_cli.py::test_dotenv_optional",
                            "tests/test_cli.py::test_disable_dotenv_from_env",
                            "tests/test_cli.py::test_run_cert_path",
                            "tests/test_cli.py::test_run_cert_adhoc",
                            "tests/test_cli.py::test_run_cert_import",
                            "tests/test_cli.py::test_run_cert_no_ssl",
                            "tests/test_cli.py::test_cli_blueprints",
                            "tests/test_cli.py::test_cli_empty"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "sympy__sympy-24909.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "test_prefix_operations"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "test_prefix_unit",
                            "test_bases"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "sympy__sympy-14817.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "test_MatrixSymbol_printing"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "test_pretty_ascii_str",
                            "test_pretty_unicode_str",
                            "test_upretty_greek",
                            "test_upretty_multiindex",
                            "test_upretty_sub_super",
                            "test_upretty_subs_missing_in_24",
                            "test_upretty_modifiers",
                            "test_pretty_Cycle",
                            "test_pretty_basic",
                            "test_negative_fractions",
                            "test_issue_5524",
                            "test_pretty_ordering",
                            "test_EulerGamma",
                            "test_GoldenRatio",
                            "test_pretty_relational",
                            "test_Assignment",
                            "test_AugmentedAssignment",
                            "test_issue_7117",
                            "test_pretty_rational",
                            "test_pretty_functions",
                            "test_pretty_sqrt",
                            "test_pretty_sqrt_char_knob",
                            "test_pretty_sqrt_longsymbol_no_sqrt_char",
                            "test_pretty_KroneckerDelta",
                            "test_pretty_product",
                            "test_pretty_lambda",
                            "test_pretty_order",
                            "test_pretty_derivatives",
                            "test_pretty_integrals",
                            "test_pretty_matrix",
                            "test_pretty_ndim_arrays",
                            "test_tensor_TensorProduct",
                            "test_diffgeom_print_WedgeProduct",
                            "test_Adjoint",
                            "test_pretty_Trace_issue_9044",
                            "test_MatrixExpressions",
                            "test_pretty_dotproduct",
                            "test_pretty_piecewise",
                            "test_pretty_ITE",
                            "test_pretty_seq",
                            "test_any_object_in_sequence",
                            "test_print_builtin_set",
                            "test_pretty_sets",
                            "test_pretty_SetExpr",
                            "test_pretty_ImageSet",
                            "test_pretty_ConditionSet",
                            "test_pretty_ComplexRegion",
                            "test_pretty_Union_issue_10414",
                            "test_pretty_Intersection_issue_10414",
                            "test_ProductSet_paranthesis",
                            "test_ProductSet_prod_char_issue_10413",
                            "test_pretty_sequences",
                            "test_pretty_FourierSeries",
                            "test_pretty_FormalPowerSeries",
                            "test_pretty_limits",
                            "test_pretty_ComplexRootOf",
                            "test_pretty_RootSum",
                            "test_GroebnerBasis",
                            "test_pretty_Boolean",
                            "test_pretty_Domain",
                            "test_pretty_prec",
                            "test_pprint",
                            "test_pretty_class",
                            "test_pretty_no_wrap_line",
                            "test_settings",
                            "test_pretty_sum",
                            "test_units",
                            "test_pretty_Subs",
                            "test_gammas",
                            "test_beta",
                            "test_function_subclass_different_name",
                            "test_SingularityFunction",
                            "test_deltas",
                            "test_hyper",
                            "test_meijerg",
                            "test_noncommutative",
                            "test_pretty_special_functions",
                            "test_expint",
                            "test_elliptic_functions",
                            "test_RandomDomain",
                            "test_PrettyPoly",
                            "test_issue_6285",
                            "test_issue_6359",
                            "test_issue_6739",
                            "test_complicated_symbol_unchanged",
                            "test_categories",
                            "test_PrettyModules",
                            "test_QuotientRing",
                            "test_Homomorphism",
                            "test_Tr",
                            "test_pretty_Add",
                            "test_issue_7179",
                            "test_issue_7180",
                            "test_pretty_Complement",
                            "test_pretty_SymmetricDifference",
                            "test_pretty_Contains",
                            "test_issue_4335",
                            "test_issue_6324",
                            "test_issue_7927",
                            "test_issue_6134",
                            "test_issue_9877",
                            "test_issue_13651",
                            "test_pretty_primenu",
                            "test_pretty_primeomega",
                            "test_pretty_Mod",
                            "test_issue_11801",
                            "test_pretty_UnevaluatedExpr",
                            "test_issue_10472",
                            "test_MatrixElement_printing",
                            "test_issue_12675",
                            "test_degree_printing"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "psf__requests-5087.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "tests/test_lowlevel.py::test_response_content_retains_error"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "tests/test_lowlevel.py::test_chunked_upload",
                            "tests/test_lowlevel.py::test_digestauth_401_count_reset_on_redirect",
                            "tests/test_lowlevel.py::test_digestauth_401_only_sent_once",
                            "tests/test_lowlevel.py::test_digestauth_only_on_4xx",
                            "tests/test_lowlevel.py::test_redirect_rfc1808_to_non_ascii_location",
                            "tests/test_lowlevel.py::test_fragment_not_sent_with_request",
                            "tests/test_lowlevel.py::test_fragment_update_on_redirect"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "psf__requests-1944.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "test_requests.py::RequestsTestCase::test_BASICAUTH_TUPLE_HTTP_200_OK_GET",
                            "test_requests.py::RequestsTestCase::test_DIGESTAUTH_WRONG_HTTP_401_GET",
                            "test_requests.py::RequestsTestCase::test_auth_is_retained_for_redirect_on_host",
                            "test_requests.py::RequestsTestCase::test_redirect_with_wrong_gzipped_header",
                            "test_requests.py::RequestsTestCase::test_session_pickling"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "test_requests.py::RequestsTestCase::test_DIGESTAUTH_QUOTES_QOP_VALUE",
                            "test_requests.py::RequestsTestCase::test_DIGEST_AUTH_RETURNS_COOKIE",
                            "test_requests.py::RequestsTestCase::test_DIGEST_AUTH_SETS_SESSION_COOKIES",
                            "test_requests.py::RequestsTestCase::test_DIGEST_STREAM",
                            "test_requests.py::RequestsTestCase::test_HTTP_200_OK_GET_ALTERNATIVE",
                            "test_requests.py::RequestsTestCase::test_HTTP_200_OK_GET_WITH_MIXED_PARAMS",
                            "test_requests.py::RequestsTestCase::test_HTTP_200_OK_GET_WITH_PARAMS",
                            "test_requests.py::RequestsTestCase::test_HTTP_200_OK_HEAD",
                            "test_requests.py::RequestsTestCase::test_HTTP_200_OK_PUT",
                            "test_requests.py::RequestsTestCase::test_HTTP_302_ALLOW_REDIRECT_GET",
                            "test_requests.py::RequestsTestCase::test_POSTBIN_GET_POST_FILES",
                            "test_requests.py::RequestsTestCase::test_POSTBIN_GET_POST_FILES_WITH_DATA",
                            "test_requests.py::RequestsTestCase::test_auth_is_stripped_on_redirect_off_host",
                            "test_requests.py::RequestsTestCase::test_autoset_header_values_are_native",
                            "test_requests.py::RequestsTestCase::test_basic_building",
                            "test_requests.py::RequestsTestCase::test_basicauth_with_netrc",
                            "test_requests.py::RequestsTestCase::test_can_send_nonstring_objects_with_files",
                            "test_requests.py::RequestsTestCase::test_cannot_send_unprepared_requests",
                            "test_requests.py::RequestsTestCase::test_cookie_as_dict_items",
                            "test_requests.py::RequestsTestCase::test_cookie_as_dict_keeps_items",
                            "test_requests.py::RequestsTestCase::test_cookie_as_dict_keeps_len",
                            "test_requests.py::RequestsTestCase::test_cookie_as_dict_keys",
                            "test_requests.py::RequestsTestCase::test_cookie_as_dict_values",
                            "test_requests.py::RequestsTestCase::test_cookie_parameters",
                            "test_requests.py::RequestsTestCase::test_cookie_persists_via_api",
                            "test_requests.py::RequestsTestCase::test_cookie_quote_wrapped",
                            "test_requests.py::RequestsTestCase::test_cookie_removed_on_expire",
                            "test_requests.py::RequestsTestCase::test_cookie_sent_on_redirect",
                            "test_requests.py::RequestsTestCase::test_custom_content_type",
                            "test_requests.py::RequestsTestCase::test_decompress_gzip",
                            "test_requests.py::RequestsTestCase::test_different_encodings_dont_break_post",
                            "test_requests.py::RequestsTestCase::test_entry_points",
                            "test_requests.py::RequestsTestCase::test_fixes_1329",
                            "test_requests.py::RequestsTestCase::test_generic_cookiejar_works",
                            "test_requests.py::RequestsTestCase::test_get_auth_from_url",
                            "test_requests.py::RequestsTestCase::test_get_auth_from_url_encoded_hashes",
                            "test_requests.py::RequestsTestCase::test_get_auth_from_url_encoded_spaces",
                            "test_requests.py::RequestsTestCase::test_get_auth_from_url_not_encoded_spaces",
                            "test_requests.py::RequestsTestCase::test_get_auth_from_url_percent_chars",
                            "test_requests.py::RequestsTestCase::test_header_keys_are_native",
                            "test_requests.py::RequestsTestCase::test_header_remove_is_case_insensitive",
                            "test_requests.py::RequestsTestCase::test_headers_on_session_with_None_are_not_sent",
                            "test_requests.py::RequestsTestCase::test_history_is_always_a_list",
                            "test_requests.py::RequestsTestCase::test_hook_receives_request_arguments",
                            "test_requests.py::RequestsTestCase::test_http_error",
                            "test_requests.py::RequestsTestCase::test_invalid_url",
                            "test_requests.py::RequestsTestCase::test_links",
                            "test_requests.py::RequestsTestCase::test_long_authinfo_in_url",
                            "test_requests.py::RequestsTestCase::test_manual_redirect_with_partial_body_read",
                            "test_requests.py::RequestsTestCase::test_mixed_case_scheme_acceptable",
                            "test_requests.py::RequestsTestCase::test_no_content_length",
                            "test_requests.py::RequestsTestCase::test_oddball_schemes_dont_check_URLs",
                            "test_requests.py::RequestsTestCase::test_params_are_added_before_fragment",
                            "test_requests.py::RequestsTestCase::test_params_are_merged_case_sensitive",
                            "test_requests.py::RequestsTestCase::test_path_is_not_double_encoded",
                            "test_requests.py::RequestsTestCase::test_prepared_from_session",
                            "test_requests.py::RequestsTestCase::test_prepared_request_hook",
                            "test_requests.py::RequestsTestCase::test_pyopenssl_redirect",
                            "test_requests.py::RequestsTestCase::test_request_and_response_are_pickleable",
                            "test_requests.py::RequestsTestCase::test_request_cookie_overrides_session_cookie",
                            "test_requests.py::RequestsTestCase::test_request_cookies_not_persisted",
                            "test_requests.py::RequestsTestCase::test_request_ok_set",
                            "test_requests.py::RequestsTestCase::test_requests_in_history_are_not_overridden",
                            "test_requests.py::RequestsTestCase::test_response_decode_unicode",
                            "test_requests.py::RequestsTestCase::test_response_is_iterable",
                            "test_requests.py::RequestsTestCase::test_session_hooks_are_overriden_by_request_hooks",
                            "test_requests.py::RequestsTestCase::test_session_hooks_are_used_with_no_request_hooks",
                            "test_requests.py::RequestsTestCase::test_set_cookie_on_301",
                            "test_requests.py::RequestsTestCase::test_status_raising",
                            "test_requests.py::RequestsTestCase::test_time_elapsed_blank",
                            "test_requests.py::RequestsTestCase::test_transport_adapter_ordering",
                            "test_requests.py::RequestsTestCase::test_unicode_get",
                            "test_requests.py::RequestsTestCase::test_unicode_header_name",
                            "test_requests.py::RequestsTestCase::test_unicode_method_name",
                            "test_requests.py::RequestsTestCase::test_unicode_multipart_post",
                            "test_requests.py::RequestsTestCase::test_unicode_multipart_post_fieldnames",
                            "test_requests.py::RequestsTestCase::test_uppercase_scheme_redirect",
                            "test_requests.py::RequestsTestCase::test_urlencoded_get_query_multivalued_param",
                            "test_requests.py::RequestsTestCase::test_user_agent_transfers",
                            "test_requests.py::TestContentEncodingDetection::test_html4_pragma",
                            "test_requests.py::TestContentEncodingDetection::test_html_charset",
                            "test_requests.py::TestContentEncodingDetection::test_none",
                            "test_requests.py::TestContentEncodingDetection::test_precedence",
                            "test_requests.py::TestContentEncodingDetection::test_xhtml_pragma",
                            "test_requests.py::TestContentEncodingDetection::test_xml",
                            "test_requests.py::TestCaseInsensitiveDict::test_contains",
                            "test_requests.py::TestCaseInsensitiveDict::test_delitem",
                            "test_requests.py::TestCaseInsensitiveDict::test_docstring_example",
                            "test_requests.py::TestCaseInsensitiveDict::test_equality",
                            "test_requests.py::TestCaseInsensitiveDict::test_fixes_649",
                            "test_requests.py::TestCaseInsensitiveDict::test_get",
                            "test_requests.py::TestCaseInsensitiveDict::test_getitem",
                            "test_requests.py::TestCaseInsensitiveDict::test_iter",
                            "test_requests.py::TestCaseInsensitiveDict::test_iterable_init",
                            "test_requests.py::TestCaseInsensitiveDict::test_kwargs_init",
                            "test_requests.py::TestCaseInsensitiveDict::test_len",
                            "test_requests.py::TestCaseInsensitiveDict::test_lower_items",
                            "test_requests.py::TestCaseInsensitiveDict::test_mapping_init",
                            "test_requests.py::TestCaseInsensitiveDict::test_preserve_key_case",
                            "test_requests.py::TestCaseInsensitiveDict::test_preserve_last_key_case",
                            "test_requests.py::TestCaseInsensitiveDict::test_setdefault",
                            "test_requests.py::TestCaseInsensitiveDict::test_update",
                            "test_requests.py::TestCaseInsensitiveDict::test_update_retains_unchanged",
                            "test_requests.py::UtilsTestCase::test_address_in_network",
                            "test_requests.py::UtilsTestCase::test_dotted_netmask",
                            "test_requests.py::UtilsTestCase::test_get_auth_from_url",
                            "test_requests.py::UtilsTestCase::test_get_environ_proxies",
                            "test_requests.py::UtilsTestCase::test_get_environ_proxies_ip_ranges",
                            "test_requests.py::UtilsTestCase::test_is_ipv4_address",
                            "test_requests.py::UtilsTestCase::test_is_valid_cidr",
                            "test_requests.py::UtilsTestCase::test_super_len_io_streams",
                            "test_requests.py::TestMorselToCookieExpires::test_expires_invalid_int",
                            "test_requests.py::TestMorselToCookieExpires::test_expires_invalid_str",
                            "test_requests.py::TestMorselToCookieExpires::test_expires_none",
                            "test_requests.py::TestMorselToCookieExpires::test_expires_valid_str",
                            "test_requests.py::TestMorselToCookieMaxAge::test_max_age_invalid_str",
                            "test_requests.py::TestMorselToCookieMaxAge::test_max_age_valid_int",
                            "test_requests.py::TestTimeout::test_stream_timeout",
                            "test_requests.py::TestRedirects::test_requests_are_updated_each_time",
                            "test_requests.py::test_data_argument_accepts_tuples"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "sphinx-doc__sphinx-10819.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "tests/test_search.py::test_IndexBuilder"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "tests/test_search.py::test_objects_are_escaped",
                            "tests/test_search.py::test_meta_keys_are_handled_for_language_en",
                            "tests/test_search.py::test_meta_keys_are_handled_for_language_de",
                            "tests/test_search.py::test_stemmer_does_not_remove_short_words",
                            "tests/test_search.py::test_stemmer",
                            "tests/test_search.py::test_term_in_heading_and_section",
                            "tests/test_search.py::test_term_in_raw_directive",
                            "tests/test_search.py::test_IndexBuilder_lookup",
                            "tests/test_search.py::test_search_index_gen_zh",
                            "tests/test_search.py::test_nosearch"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "django__django-17087.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "test_serialize_nested_class_method (migrations.test_writer.WriterTests.test_serialize_nested_class_method)"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "test_args_kwargs_signature (migrations.test_writer.OperationWriterTests.test_args_kwargs_signature)",
                            "test_args_signature (migrations.test_writer.OperationWriterTests.test_args_signature)",
                            "test_empty_signature (migrations.test_writer.OperationWriterTests.test_empty_signature)",
                            "test_expand_args_signature (migrations.test_writer.OperationWriterTests.test_expand_args_signature)",
                            "test_kwargs_signature (migrations.test_writer.OperationWriterTests.test_kwargs_signature)",
                            "test_multiline_args_signature (migrations.test_writer.OperationWriterTests.test_multiline_args_signature)",
                            "test_nested_args_signature (migrations.test_writer.OperationWriterTests.test_nested_args_signature)",
                            "test_nested_operation_expand_args_signature (migrations.test_writer.OperationWriterTests.test_nested_operation_expand_args_signature)",
                            "test_custom_operation (migrations.test_writer.WriterTests.test_custom_operation)",
                            "test_deconstruct_class_arguments (migrations.test_writer.WriterTests.test_deconstruct_class_arguments)",
                            "Test comments at top of file.",
                            "test_migration_path (migrations.test_writer.WriterTests.test_migration_path)",
                            "django.db.models shouldn't be imported if unused.",
                            "test_register_non_serializer (migrations.test_writer.WriterTests.test_register_non_serializer)",
                            "test_register_serializer (migrations.test_writer.WriterTests.test_register_serializer)",
                            "test_serialize_builtin_types (migrations.test_writer.WriterTests.test_serialize_builtin_types)",
                            "test_serialize_builtins (migrations.test_writer.WriterTests.test_serialize_builtins)",
                            "test_serialize_choices (migrations.test_writer.WriterTests.test_serialize_choices)",
                            "Ticket #22943: Test serialization of class-based validators, including",
                            "test_serialize_collections (migrations.test_writer.WriterTests.test_serialize_collections)",
                            "Make sure compiled regex can be serialized.",
                            "test_serialize_complex_func_index (migrations.test_writer.WriterTests.test_serialize_complex_func_index)",
                            "test_serialize_constants (migrations.test_writer.WriterTests.test_serialize_constants)",
                            "test_serialize_datetime (migrations.test_writer.WriterTests.test_serialize_datetime)",
                            "Ticket #22679: makemigrations generates invalid code for (an empty",
                            "test_serialize_enum_flags (migrations.test_writer.WriterTests.test_serialize_enum_flags)",
                            "test_serialize_enums (migrations.test_writer.WriterTests.test_serialize_enums)",
                            "test_serialize_fields (migrations.test_writer.WriterTests.test_serialize_fields)",
                            "test_serialize_frozensets (migrations.test_writer.WriterTests.test_serialize_frozensets)",
                            "test_serialize_functions (migrations.test_writer.WriterTests.test_serialize_functions)",
                            "test_serialize_functools_partial (migrations.test_writer.WriterTests.test_serialize_functools_partial)",
                            "test_serialize_functools_partialmethod (migrations.test_writer.WriterTests.test_serialize_functools_partialmethod)",
                            "test_serialize_iterators (migrations.test_writer.WriterTests.test_serialize_iterators)",
                            "test_serialize_lazy_objects (migrations.test_writer.WriterTests.test_serialize_lazy_objects)",
                            "A reference in a local scope can't be serialized.",
                            "test_serialize_managers (migrations.test_writer.WriterTests.test_serialize_managers)",
                            "test_serialize_multiline_strings (migrations.test_writer.WriterTests.test_serialize_multiline_strings)",
                            "test_serialize_nested_class (migrations.test_writer.WriterTests.test_serialize_nested_class)",
                            "test_serialize_numbers (migrations.test_writer.WriterTests.test_serialize_numbers)",
                            "test_serialize_path_like (migrations.test_writer.WriterTests.test_serialize_path_like)",
                            "test_serialize_pathlib (migrations.test_writer.WriterTests.test_serialize_pathlib)",
                            "test_serialize_range (migrations.test_writer.WriterTests.test_serialize_range)",
                            "test_serialize_set (migrations.test_writer.WriterTests.test_serialize_set)",
                            "test_serialize_settings (migrations.test_writer.WriterTests.test_serialize_settings)",
                            "test_serialize_strings (migrations.test_writer.WriterTests.test_serialize_strings)",
                            "test_serialize_timedelta (migrations.test_writer.WriterTests.test_serialize_timedelta)",
                            "test_serialize_type_model (migrations.test_writer.WriterTests.test_serialize_type_model)",
                            "test_serialize_type_none (migrations.test_writer.WriterTests.test_serialize_type_none)",
                            "An unbound method used within a class body can be serialized.",
                            "test_serialize_uuid (migrations.test_writer.WriterTests.test_serialize_uuid)",
                            "Tests serializing a simple migration.",
                            "test_sorted_dependencies (migrations.test_writer.WriterTests.test_sorted_dependencies)",
                            "#24155 - Tests ordering of imports."
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "psf__requests-2678.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "test_requests.py::RequestsTestCase::test_HTTP_302_ALLOW_REDIRECT_GET",
                            "test_requests.py::RequestsTestCase::test_auth_is_retained_for_redirect_on_host",
                            "test_requests.py::RequestsTestCase::test_auth_is_stripped_on_redirect_off_host",
                            "test_requests.py::RequestsTestCase::test_different_encodings_dont_break_post",
                            "test_requests.py::RequestsTestCase::test_prepared_from_session",
                            "test_requests.py::RequestsTestCase::test_user_agent_transfers",
                            "test_requests.py::test_urllib3_pool_connection_closed"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "test_requests.py::RequestsTestCase::test_BASICAUTH_TUPLE_HTTP_200_OK_GET",
                            "test_requests.py::RequestsTestCase::test_DIGESTAUTH_QUOTES_QOP_VALUE",
                            "test_requests.py::RequestsTestCase::test_DIGESTAUTH_WRONG_HTTP_401_GET",
                            "test_requests.py::RequestsTestCase::test_DIGEST_AUTH_RETURNS_COOKIE",
                            "test_requests.py::RequestsTestCase::test_DIGEST_AUTH_SETS_SESSION_COOKIES",
                            "test_requests.py::RequestsTestCase::test_DIGEST_HTTP_200_OK_GET",
                            "test_requests.py::RequestsTestCase::test_DIGEST_STREAM",
                            "test_requests.py::RequestsTestCase::test_HTTP_200_OK_GET_ALTERNATIVE",
                            "test_requests.py::RequestsTestCase::test_HTTP_200_OK_GET_WITH_MIXED_PARAMS",
                            "test_requests.py::RequestsTestCase::test_HTTP_200_OK_GET_WITH_PARAMS",
                            "test_requests.py::RequestsTestCase::test_HTTP_200_OK_PUT",
                            "test_requests.py::RequestsTestCase::test_LocationParseError",
                            "test_requests.py::RequestsTestCase::test_POSTBIN_GET_POST_FILES",
                            "test_requests.py::RequestsTestCase::test_POSTBIN_GET_POST_FILES_WITH_DATA",
                            "test_requests.py::RequestsTestCase::test_autoset_header_values_are_native",
                            "test_requests.py::RequestsTestCase::test_basic_auth_str_is_always_native",
                            "test_requests.py::RequestsTestCase::test_basic_building",
                            "test_requests.py::RequestsTestCase::test_basicauth_with_netrc",
                            "test_requests.py::RequestsTestCase::test_can_send_bytes_bytearray_objects_with_files",
                            "test_requests.py::RequestsTestCase::test_can_send_file_object_with_non_string_filename",
                            "test_requests.py::RequestsTestCase::test_can_send_nonstring_objects_with_files",
                            "test_requests.py::RequestsTestCase::test_cannot_send_unprepared_requests",
                            "test_requests.py::RequestsTestCase::test_connection_error_invalid_domain",
                            "test_requests.py::RequestsTestCase::test_connection_error_invalid_port",
                            "test_requests.py::RequestsTestCase::test_cookie_as_dict_items",
                            "test_requests.py::RequestsTestCase::test_cookie_as_dict_keeps_items",
                            "test_requests.py::RequestsTestCase::test_cookie_as_dict_keeps_len",
                            "test_requests.py::RequestsTestCase::test_cookie_as_dict_keys",
                            "test_requests.py::RequestsTestCase::test_cookie_as_dict_values",
                            "test_requests.py::RequestsTestCase::test_cookie_parameters",
                            "test_requests.py::RequestsTestCase::test_cookie_persists_via_api",
                            "test_requests.py::RequestsTestCase::test_cookie_quote_wrapped",
                            "test_requests.py::RequestsTestCase::test_cookie_removed_on_expire",
                            "test_requests.py::RequestsTestCase::test_cookie_sent_on_redirect",
                            "test_requests.py::RequestsTestCase::test_custom_content_type",
                            "test_requests.py::RequestsTestCase::test_decompress_gzip",
                            "test_requests.py::RequestsTestCase::test_entry_points",
                            "test_requests.py::RequestsTestCase::test_fixes_1329",
                            "test_requests.py::RequestsTestCase::test_generic_cookiejar_works",
                            "test_requests.py::RequestsTestCase::test_get_auth_from_url",
                            "test_requests.py::RequestsTestCase::test_get_auth_from_url_encoded_hashes",
                            "test_requests.py::RequestsTestCase::test_get_auth_from_url_encoded_spaces",
                            "test_requests.py::RequestsTestCase::test_get_auth_from_url_not_encoded_spaces",
                            "test_requests.py::RequestsTestCase::test_get_auth_from_url_percent_chars",
                            "test_requests.py::RequestsTestCase::test_header_keys_are_native",
                            "test_requests.py::RequestsTestCase::test_history_is_always_a_list",
                            "test_requests.py::RequestsTestCase::test_hook_receives_request_arguments",
                            "test_requests.py::RequestsTestCase::test_http_error",
                            "test_requests.py::RequestsTestCase::test_invalid_url",
                            "test_requests.py::RequestsTestCase::test_json_param_post_content_type_works",
                            "test_requests.py::RequestsTestCase::test_links",
                            "test_requests.py::RequestsTestCase::test_long_authinfo_in_url",
                            "test_requests.py::RequestsTestCase::test_manual_redirect_with_partial_body_read",
                            "test_requests.py::RequestsTestCase::test_mixed_case_scheme_acceptable",
                            "test_requests.py::RequestsTestCase::test_no_content_length",
                            "test_requests.py::RequestsTestCase::test_nonhttp_schemes_dont_check_URLs",
                            "test_requests.py::RequestsTestCase::test_override_content_length",
                            "test_requests.py::RequestsTestCase::test_param_cookiejar_works",
                            "test_requests.py::RequestsTestCase::test_params_are_added_before_fragment",
                            "test_requests.py::RequestsTestCase::test_params_are_merged_case_sensitive",
                            "test_requests.py::RequestsTestCase::test_params_original_order_is_preserved_by_default",
                            "test_requests.py::RequestsTestCase::test_path_is_not_double_encoded",
                            "test_requests.py::RequestsTestCase::test_prepare_request_with_bytestring_url",
                            "test_requests.py::RequestsTestCase::test_prepared_request_hook",
                            "test_requests.py::RequestsTestCase::test_pyopenssl_redirect",
                            "test_requests.py::RequestsTestCase::test_redirect_with_wrong_gzipped_header",
                            "test_requests.py::RequestsTestCase::test_request_and_response_are_pickleable",
                            "test_requests.py::RequestsTestCase::test_request_cookie_overrides_session_cookie",
                            "test_requests.py::RequestsTestCase::test_request_cookies_not_persisted",
                            "test_requests.py::RequestsTestCase::test_request_ok_set",
                            "test_requests.py::RequestsTestCase::test_requests_history_is_saved",
                            "test_requests.py::RequestsTestCase::test_requests_in_history_are_not_overridden",
                            "test_requests.py::RequestsTestCase::test_response_decode_unicode",
                            "test_requests.py::RequestsTestCase::test_response_is_iterable",
                            "test_requests.py::RequestsTestCase::test_response_iter_lines",
                            "test_requests.py::RequestsTestCase::test_session_hooks_are_overriden_by_request_hooks",
                            "test_requests.py::RequestsTestCase::test_session_hooks_are_used_with_no_request_hooks",
                            "test_requests.py::RequestsTestCase::test_session_pickling",
                            "test_requests.py::RequestsTestCase::test_set_cookie_on_301",
                            "test_requests.py::RequestsTestCase::test_status_raising",
                            "test_requests.py::RequestsTestCase::test_time_elapsed_blank",
                            "test_requests.py::RequestsTestCase::test_transport_adapter_ordering",
                            "test_requests.py::RequestsTestCase::test_unconsumed_session_response_closes_connection",
                            "test_requests.py::RequestsTestCase::test_unicode_get",
                            "test_requests.py::RequestsTestCase::test_unicode_header_name",
                            "test_requests.py::RequestsTestCase::test_unicode_method_name",
                            "test_requests.py::RequestsTestCase::test_unicode_multipart_post",
                            "test_requests.py::RequestsTestCase::test_unicode_multipart_post_fieldnames",
                            "test_requests.py::RequestsTestCase::test_uppercase_scheme_redirect",
                            "test_requests.py::RequestsTestCase::test_urlencoded_get_query_multivalued_param",
                            "test_requests.py::TestContentEncodingDetection::test_html4_pragma",
                            "test_requests.py::TestContentEncodingDetection::test_html_charset",
                            "test_requests.py::TestContentEncodingDetection::test_none",
                            "test_requests.py::TestContentEncodingDetection::test_precedence",
                            "test_requests.py::TestContentEncodingDetection::test_xhtml_pragma",
                            "test_requests.py::TestContentEncodingDetection::test_xml",
                            "test_requests.py::TestCaseInsensitiveDict::test_contains",
                            "test_requests.py::TestCaseInsensitiveDict::test_copy",
                            "test_requests.py::TestCaseInsensitiveDict::test_delitem",
                            "test_requests.py::TestCaseInsensitiveDict::test_docstring_example",
                            "test_requests.py::TestCaseInsensitiveDict::test_equality",
                            "test_requests.py::TestCaseInsensitiveDict::test_fixes_649",
                            "test_requests.py::TestCaseInsensitiveDict::test_get",
                            "test_requests.py::TestCaseInsensitiveDict::test_getitem",
                            "test_requests.py::TestCaseInsensitiveDict::test_iter",
                            "test_requests.py::TestCaseInsensitiveDict::test_iterable_init",
                            "test_requests.py::TestCaseInsensitiveDict::test_kwargs_init",
                            "test_requests.py::TestCaseInsensitiveDict::test_len",
                            "test_requests.py::TestCaseInsensitiveDict::test_lower_items",
                            "test_requests.py::TestCaseInsensitiveDict::test_mapping_init",
                            "test_requests.py::TestCaseInsensitiveDict::test_preserve_key_case",
                            "test_requests.py::TestCaseInsensitiveDict::test_preserve_last_key_case",
                            "test_requests.py::TestCaseInsensitiveDict::test_setdefault",
                            "test_requests.py::TestCaseInsensitiveDict::test_update",
                            "test_requests.py::TestCaseInsensitiveDict::test_update_retains_unchanged",
                            "test_requests.py::UtilsTestCase::test_address_in_network",
                            "test_requests.py::UtilsTestCase::test_dotted_netmask",
                            "test_requests.py::UtilsTestCase::test_get_auth_from_url",
                            "test_requests.py::UtilsTestCase::test_get_environ_proxies",
                            "test_requests.py::UtilsTestCase::test_get_environ_proxies_ip_ranges",
                            "test_requests.py::UtilsTestCase::test_guess_filename_when_filename_is_an_int",
                            "test_requests.py::UtilsTestCase::test_guess_filename_when_int",
                            "test_requests.py::UtilsTestCase::test_guess_filename_with_file_like_obj",
                            "test_requests.py::UtilsTestCase::test_guess_filename_with_unicode_name",
                            "test_requests.py::UtilsTestCase::test_is_ipv4_address",
                            "test_requests.py::UtilsTestCase::test_is_valid_cidr",
                            "test_requests.py::UtilsTestCase::test_requote_uri_properly_requotes",
                            "test_requests.py::UtilsTestCase::test_requote_uri_with_unquoted_percents",
                            "test_requests.py::UtilsTestCase::test_super_len_io_streams",
                            "test_requests.py::TestMorselToCookieExpires::test_expires_invalid_int",
                            "test_requests.py::TestMorselToCookieExpires::test_expires_invalid_str",
                            "test_requests.py::TestMorselToCookieExpires::test_expires_none",
                            "test_requests.py::TestMorselToCookieExpires::test_expires_valid_str",
                            "test_requests.py::TestMorselToCookieMaxAge::test_max_age_invalid_str",
                            "test_requests.py::TestMorselToCookieMaxAge::test_max_age_valid_int",
                            "test_requests.py::TestTimeout::test_stream_timeout",
                            "test_requests.py::TestTimeout::test_invalid_timeout",
                            "test_requests.py::TestTimeout::test_none_timeout",
                            "test_requests.py::TestTimeout::test_read_timeout",
                            "test_requests.py::TestTimeout::test_connect_timeout",
                            "test_requests.py::TestTimeout::test_total_timeout_connect",
                            "test_requests.py::TestRedirects::test_requests_are_updated_each_time",
                            "test_requests.py::test_data_argument_accepts_tuples",
                            "test_requests.py::test_prepared_request_empty_copy",
                            "test_requests.py::test_prepared_request_no_cookies_copy",
                            "test_requests.py::test_prepared_request_complete_copy",
                            "test_requests.py::test_prepare_unicode_url",
                            "test_requests.py::test_urllib3_retries",
                            "test_requests.py::test_vendor_aliases"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "scikit-learn__scikit-learn-12784.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "sklearn/compose/tests/test_column_transformer.py::test_make_column_transformer_pandas",
                            "sklearn/utils/tests/test_validation.py::test_check_array_series"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "sklearn/compose/tests/test_column_transformer.py::test_column_transformer",
                            "sklearn/compose/tests/test_column_transformer.py::test_column_transformer_dataframe",
                            "sklearn/compose/tests/test_column_transformer.py::test_column_transformer_empty_columns[list-pandas]",
                            "sklearn/compose/tests/test_column_transformer.py::test_column_transformer_empty_columns[list-numpy]",
                            "sklearn/compose/tests/test_column_transformer.py::test_column_transformer_empty_columns[bool-pandas]",
                            "sklearn/compose/tests/test_column_transformer.py::test_column_transformer_empty_columns[bool-numpy]",
                            "sklearn/compose/tests/test_column_transformer.py::test_column_transformer_sparse_array",
                            "sklearn/compose/tests/test_column_transformer.py::test_column_transformer_list",
                            "sklearn/compose/tests/test_column_transformer.py::test_column_transformer_sparse_stacking",
                            "sklearn/compose/tests/test_column_transformer.py::test_column_transformer_mixed_cols_sparse",
                            "sklearn/compose/tests/test_column_transformer.py::test_column_transformer_sparse_threshold",
                            "sklearn/compose/tests/test_column_transformer.py::test_column_transformer_error_msg_1D",
                            "sklearn/compose/tests/test_column_transformer.py::test_2D_transformer_output",
                            "sklearn/compose/tests/test_column_transformer.py::test_2D_transformer_output_pandas",
                            "sklearn/compose/tests/test_column_transformer.py::test_column_transformer_invalid_columns[drop]",
                            "sklearn/compose/tests/test_column_transformer.py::test_column_transformer_invalid_columns[passthrough]",
                            "sklearn/compose/tests/test_column_transformer.py::test_column_transformer_invalid_transformer",
                            "sklearn/compose/tests/test_column_transformer.py::test_make_column_transformer",
                            "sklearn/compose/tests/test_column_transformer.py::test_make_column_transformer_kwargs",
                            "sklearn/compose/tests/test_column_transformer.py::test_make_column_transformer_remainder_transformer",
                            "sklearn/compose/tests/test_column_transformer.py::test_column_transformer_get_set_params",
                            "sklearn/compose/tests/test_column_transformer.py::test_column_transformer_named_estimators",
                            "sklearn/compose/tests/test_column_transformer.py::test_column_transformer_cloning",
                            "sklearn/compose/tests/test_column_transformer.py::test_column_transformer_get_feature_names",
                            "sklearn/compose/tests/test_column_transformer.py::test_column_transformer_special_strings",
                            "sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder",
                            "sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_numpy[key0]",
                            "sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_numpy[key1]",
                            "sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_numpy[key2]",
                            "sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_numpy[key3]",
                            "sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_pandas[key0]",
                            "sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_pandas[key1]",
                            "sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_pandas[key2]",
                            "sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_pandas[key3]",
                            "sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_pandas[pd-index]",
                            "sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_pandas[key5]",
                            "sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_pandas[key6]",
                            "sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_pandas[key7]",
                            "sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_pandas[key8]",
                            "sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_transformer[key0]",
                            "sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_transformer[key1]",
                            "sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_transformer[key2]",
                            "sklearn/compose/tests/test_column_transformer.py::test_column_transformer_remainder_transformer[key3]",
                            "sklearn/compose/tests/test_column_transformer.py::test_column_transformer_no_remaining_remainder_transformer",
                            "sklearn/compose/tests/test_column_transformer.py::test_column_transformer_drops_all_remainder_transformer",
                            "sklearn/compose/tests/test_column_transformer.py::test_column_transformer_sparse_remainder_transformer",
                            "sklearn/compose/tests/test_column_transformer.py::test_column_transformer_drop_all_sparse_remainder_transformer",
                            "sklearn/compose/tests/test_column_transformer.py::test_column_transformer_get_set_params_with_remainder",
                            "sklearn/compose/tests/test_column_transformer.py::test_column_transformer_no_estimators",
                            "sklearn/compose/tests/test_column_transformer.py::test_column_transformer_no_estimators_set_params",
                            "sklearn/compose/tests/test_column_transformer.py::test_column_transformer_callable_specifier",
                            "sklearn/linear_model/tests/test_logistic.py::test_predict_2_classes",
                            "sklearn/linear_model/tests/test_logistic.py::test_error",
                            "sklearn/linear_model/tests/test_logistic.py::test_logistic_cv_mock_scorer",
                            "sklearn/linear_model/tests/test_logistic.py::test_logistic_cv_score_does_not_warn_by_default",
                            "sklearn/linear_model/tests/test_logistic.py::test_lr_liblinear_warning",
                            "sklearn/linear_model/tests/test_logistic.py::test_predict_3_classes",
                            "sklearn/linear_model/tests/test_logistic.py::test_predict_iris",
                            "sklearn/linear_model/tests/test_logistic.py::test_multinomial_validation[lbfgs]",
                            "sklearn/linear_model/tests/test_logistic.py::test_multinomial_validation[newton-cg]",
                            "sklearn/linear_model/tests/test_logistic.py::test_multinomial_validation[sag]",
                            "sklearn/linear_model/tests/test_logistic.py::test_multinomial_validation[saga]",
                            "sklearn/linear_model/tests/test_logistic.py::test_check_solver_option[LogisticRegression]",
                            "sklearn/linear_model/tests/test_logistic.py::test_check_solver_option[LogisticRegressionCV]",
                            "sklearn/linear_model/tests/test_logistic.py::test_logistic_regression_warnings[LogisticRegression-params0-True]",
                            "sklearn/linear_model/tests/test_logistic.py::test_logistic_regression_warnings[LogisticRegressionCV-params1-False]",
                            "sklearn/linear_model/tests/test_logistic.py::test_multinomial_binary[lbfgs]",
                            "sklearn/linear_model/tests/test_logistic.py::test_multinomial_binary[newton-cg]",
                            "sklearn/linear_model/tests/test_logistic.py::test_multinomial_binary[sag]",
                            "sklearn/linear_model/tests/test_logistic.py::test_multinomial_binary[saga]",
                            "sklearn/linear_model/tests/test_logistic.py::test_multinomial_binary_probabilities",
                            "sklearn/linear_model/tests/test_logistic.py::test_sparsify",
                            "sklearn/linear_model/tests/test_logistic.py::test_inconsistent_input",
                            "sklearn/linear_model/tests/test_logistic.py::test_write_parameters",
                            "sklearn/linear_model/tests/test_logistic.py::test_nan",
                            "sklearn/linear_model/tests/test_logistic.py::test_consistency_path",
                            "sklearn/linear_model/tests/test_logistic.py::test_logistic_regression_path_convergence_fail",
                            "sklearn/linear_model/tests/test_logistic.py::test_liblinear_dual_random_state",
                            "sklearn/linear_model/tests/test_logistic.py::test_logistic_loss_and_grad",
                            "sklearn/linear_model/tests/test_logistic.py::test_logistic_grad_hess",
                            "sklearn/linear_model/tests/test_logistic.py::test_logistic_cv",
                            "sklearn/linear_model/tests/test_logistic.py::test_logistic_cv_multinomial_score[accuracy-multiclass_agg_list0]",
                            "sklearn/linear_model/tests/test_logistic.py::test_logistic_cv_multinomial_score[precision-multiclass_agg_list1]",
                            "sklearn/linear_model/tests/test_logistic.py::test_logistic_cv_multinomial_score[f1-multiclass_agg_list2]",
                            "sklearn/linear_model/tests/test_logistic.py::test_logistic_cv_multinomial_score[neg_log_loss-multiclass_agg_list3]",
                            "sklearn/linear_model/tests/test_logistic.py::test_logistic_cv_multinomial_score[recall-multiclass_agg_list4]",
                            "sklearn/linear_model/tests/test_logistic.py::test_multinomial_logistic_regression_string_inputs",
                            "sklearn/linear_model/tests/test_logistic.py::test_logistic_cv_sparse",
                            "sklearn/linear_model/tests/test_logistic.py::test_intercept_logistic_helper",
                            "sklearn/linear_model/tests/test_logistic.py::test_ovr_multinomial_iris",
                            "sklearn/linear_model/tests/test_logistic.py::test_logistic_regression_solvers",
                            "sklearn/linear_model/tests/test_logistic.py::test_logistic_regression_solvers_multiclass",
                            "sklearn/linear_model/tests/test_logistic.py::test_logistic_regressioncv_class_weights",
                            "sklearn/linear_model/tests/test_logistic.py::test_logistic_regression_sample_weights",
                            "sklearn/linear_model/tests/test_logistic.py::test_logistic_regression_class_weights",
                            "sklearn/linear_model/tests/test_logistic.py::test_logistic_regression_multinomial",
                            "sklearn/linear_model/tests/test_logistic.py::test_multinomial_grad_hess",
                            "sklearn/linear_model/tests/test_logistic.py::test_liblinear_decision_function_zero",
                            "sklearn/linear_model/tests/test_logistic.py::test_liblinear_logregcv_sparse",
                            "sklearn/linear_model/tests/test_logistic.py::test_saga_sparse",
                            "sklearn/linear_model/tests/test_logistic.py::test_logreg_intercept_scaling",
                            "sklearn/linear_model/tests/test_logistic.py::test_logreg_intercept_scaling_zero",
                            "sklearn/linear_model/tests/test_logistic.py::test_logreg_l1",
                            "sklearn/linear_model/tests/test_logistic.py::test_logreg_l1_sparse_data",
                            "sklearn/linear_model/tests/test_logistic.py::test_logistic_regression_cv_refit[l1-42]",
                            "sklearn/linear_model/tests/test_logistic.py::test_logistic_regression_cv_refit[l2-42]",
                            "sklearn/linear_model/tests/test_logistic.py::test_logreg_predict_proba_multinomial",
                            "sklearn/linear_model/tests/test_logistic.py::test_max_iter",
                            "sklearn/linear_model/tests/test_logistic.py::test_n_iter[newton-cg]",
                            "sklearn/linear_model/tests/test_logistic.py::test_n_iter[liblinear]",
                            "sklearn/linear_model/tests/test_logistic.py::test_n_iter[sag]",
                            "sklearn/linear_model/tests/test_logistic.py::test_n_iter[saga]",
                            "sklearn/linear_model/tests/test_logistic.py::test_n_iter[lbfgs]",
                            "sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-True-True-newton-cg]",
                            "sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-True-True-sag]",
                            "sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-True-True-saga]",
                            "sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-True-True-lbfgs]",
                            "sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-True-False-newton-cg]",
                            "sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-True-False-sag]",
                            "sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-True-False-saga]",
                            "sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-True-False-lbfgs]",
                            "sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-False-True-newton-cg]",
                            "sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-False-True-sag]",
                            "sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-False-True-saga]",
                            "sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-False-True-lbfgs]",
                            "sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-False-False-newton-cg]",
                            "sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-False-False-sag]",
                            "sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-False-False-saga]",
                            "sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-False-False-lbfgs]",
                            "sklearn/linear_model/tests/test_logistic.py::test_warm_start[multinomial-True-True-newton-cg]",
                            "sklearn/linear_model/tests/test_logistic.py::test_warm_start[multinomial-True-True-sag]",
                            "sklearn/linear_model/tests/test_logistic.py::test_warm_start[multinomial-True-True-saga]",
                            "sklearn/linear_model/tests/test_logistic.py::test_warm_start[multinomial-True-True-lbfgs]",
                            "sklearn/linear_model/tests/test_logistic.py::test_warm_start[multinomial-True-False-newton-cg]",
                            "sklearn/linear_model/tests/test_logistic.py::test_warm_start[multinomial-True-False-sag]",
                            "sklearn/linear_model/tests/test_logistic.py::test_warm_start[multinomial-True-False-saga]",
                            "sklearn/linear_model/tests/test_logistic.py::test_warm_start[multinomial-True-False-lbfgs]",
                            "sklearn/linear_model/tests/test_logistic.py::test_warm_start[multinomial-False-True-newton-cg]",
                            "sklearn/linear_model/tests/test_logistic.py::test_warm_start[multinomial-False-True-sag]",
                            "sklearn/linear_model/tests/test_logistic.py::test_warm_start[multinomial-False-True-saga]",
                            "sklearn/linear_model/tests/test_logistic.py::test_warm_start[multinomial-False-True-lbfgs]",
                            "sklearn/linear_model/tests/test_logistic.py::test_warm_start[multinomial-False-False-newton-cg]",
                            "sklearn/linear_model/tests/test_logistic.py::test_warm_start[multinomial-False-False-sag]",
                            "sklearn/linear_model/tests/test_logistic.py::test_warm_start[multinomial-False-False-saga]",
                            "sklearn/linear_model/tests/test_logistic.py::test_warm_start[multinomial-False-False-lbfgs]",
                            "sklearn/linear_model/tests/test_logistic.py::test_saga_vs_liblinear",
                            "sklearn/linear_model/tests/test_logistic.py::test_dtype_match[ovr]",
                            "sklearn/linear_model/tests/test_logistic.py::test_dtype_match[multinomial]",
                            "sklearn/linear_model/tests/test_logistic.py::test_warm_start_converge_LR",
                            "sklearn/linear_model/tests/test_logistic.py::test_logistic_regression_path_coefs_multinomial",
                            "sklearn/linear_model/tests/test_logistic.py::test_logistic_regression_multi_class_auto[liblinear-est0]",
                            "sklearn/linear_model/tests/test_logistic.py::test_logistic_regression_multi_class_auto[liblinear-est1]",
                            "sklearn/linear_model/tests/test_logistic.py::test_logistic_regression_multi_class_auto[lbfgs-est0]",
                            "sklearn/linear_model/tests/test_logistic.py::test_logistic_regression_multi_class_auto[lbfgs-est1]",
                            "sklearn/linear_model/tests/test_logistic.py::test_logistic_regression_multi_class_auto[newton-cg-est0]",
                            "sklearn/linear_model/tests/test_logistic.py::test_logistic_regression_multi_class_auto[newton-cg-est1]",
                            "sklearn/linear_model/tests/test_logistic.py::test_logistic_regression_multi_class_auto[sag-est0]",
                            "sklearn/linear_model/tests/test_logistic.py::test_logistic_regression_multi_class_auto[sag-est1]",
                            "sklearn/linear_model/tests/test_logistic.py::test_logistic_regression_multi_class_auto[saga-est0]",
                            "sklearn/linear_model/tests/test_logistic.py::test_logistic_regression_multi_class_auto[saga-est1]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_boolean_distance[dice]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_boolean_distance[jaccard]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_boolean_distance[kulsinski]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_boolean_distance[matching]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_boolean_distance[rogerstanimoto]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_boolean_distance[russellrao]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_boolean_distance[sokalmichener]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_boolean_distance[sokalsneath]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_boolean_distance[yule]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_precomputed[pairwise_distances]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_precomputed[pairwise_kernels]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_parallel[pairwise_distances-euclidean-kwds0]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_parallel[pairwise_distances-wminkowski-kwds1]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_parallel[pairwise_distances-wminkowski-kwds2]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_parallel[pairwise_kernels-polynomial-kwds3]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_parallel[pairwise_kernels-callable_rbf_kernel-kwds4]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_callable_nonstrict_metric",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_kernels[rbf]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_kernels[laplacian]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_kernels[sigmoid]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_kernels[polynomial]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_kernels[linear]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_kernels[chi2]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_kernels[additive_chi2]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_kernels_callable",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_kernels_filter_param",
                            "sklearn/metrics/tests/test_pairwise.py::test_paired_distances[cosine-paired_cosine_distances]",
                            "sklearn/metrics/tests/test_pairwise.py::test_paired_distances[euclidean-paired_euclidean_distances]",
                            "sklearn/metrics/tests/test_pairwise.py::test_paired_distances[l2-paired_euclidean_distances]",
                            "sklearn/metrics/tests/test_pairwise.py::test_paired_distances[l1-paired_manhattan_distances]",
                            "sklearn/metrics/tests/test_pairwise.py::test_paired_distances[manhattan-paired_manhattan_distances]",
                            "sklearn/metrics/tests/test_pairwise.py::test_paired_distances[cityblock-paired_manhattan_distances]",
                            "sklearn/metrics/tests/test_pairwise.py::test_paired_distances_callable",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_argmin_min",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_chunked_reduce",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_chunked_reduce_valid[<lambda>0]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_chunked_reduce_valid[<lambda>1]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_chunked_reduce_valid[<lambda>2]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_chunked_reduce_valid[<lambda>3]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_chunked_reduce_valid[<lambda>4]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_chunked_reduce_invalid[<lambda>-ValueError-length",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_chunked_reduce_invalid[<lambda>-TypeError-returned",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_chunked_reduce_invalid[<lambda>-TypeError-,",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_chunked_diagonal[euclidean]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_chunked_diagonal[l2]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_chunked_diagonal[sqeuclidean]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_chunked",
                            "sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances",
                            "sklearn/metrics/tests/test_pairwise.py::test_cosine_distances",
                            "sklearn/metrics/tests/test_pairwise.py::test_paired_euclidean_distances",
                            "sklearn/metrics/tests/test_pairwise.py::test_paired_manhattan_distances",
                            "sklearn/metrics/tests/test_pairwise.py::test_chi_square_kernel",
                            "sklearn/metrics/tests/test_pairwise.py::test_kernel_symmetry[linear_kernel]",
                            "sklearn/metrics/tests/test_pairwise.py::test_kernel_symmetry[polynomial_kernel]",
                            "sklearn/metrics/tests/test_pairwise.py::test_kernel_symmetry[rbf_kernel]",
                            "sklearn/metrics/tests/test_pairwise.py::test_kernel_symmetry[laplacian_kernel]",
                            "sklearn/metrics/tests/test_pairwise.py::test_kernel_symmetry[sigmoid_kernel]",
                            "sklearn/metrics/tests/test_pairwise.py::test_kernel_symmetry[cosine_similarity]",
                            "sklearn/metrics/tests/test_pairwise.py::test_kernel_sparse[linear_kernel]",
                            "sklearn/metrics/tests/test_pairwise.py::test_kernel_sparse[polynomial_kernel]",
                            "sklearn/metrics/tests/test_pairwise.py::test_kernel_sparse[rbf_kernel]",
                            "sklearn/metrics/tests/test_pairwise.py::test_kernel_sparse[laplacian_kernel]",
                            "sklearn/metrics/tests/test_pairwise.py::test_kernel_sparse[sigmoid_kernel]",
                            "sklearn/metrics/tests/test_pairwise.py::test_kernel_sparse[cosine_similarity]",
                            "sklearn/metrics/tests/test_pairwise.py::test_linear_kernel",
                            "sklearn/metrics/tests/test_pairwise.py::test_rbf_kernel",
                            "sklearn/metrics/tests/test_pairwise.py::test_laplacian_kernel",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_similarity_sparse_output[linear-linear_kernel]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_similarity_sparse_output[cosine-cosine_similarity]",
                            "sklearn/metrics/tests/test_pairwise.py::test_cosine_similarity",
                            "sklearn/metrics/tests/test_pairwise.py::test_check_dense_matrices",
                            "sklearn/metrics/tests/test_pairwise.py::test_check_XB_returned",
                            "sklearn/metrics/tests/test_pairwise.py::test_check_different_dimensions",
                            "sklearn/metrics/tests/test_pairwise.py::test_check_invalid_dimensions",
                            "sklearn/metrics/tests/test_pairwise.py::test_check_sparse_arrays",
                            "sklearn/metrics/tests/test_pairwise.py::test_check_tuple_input",
                            "sklearn/metrics/tests/test_pairwise.py::test_check_preserve_type",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_data_derived_params[Y",
                            "sklearn/model_selection/tests/test_split.py::test_cross_validator_with_default_params",
                            "sklearn/model_selection/tests/test_split.py::test_2d_y",
                            "sklearn/model_selection/tests/test_split.py::test_kfold_valueerrors",
                            "sklearn/model_selection/tests/test_split.py::test_kfold_indices",
                            "sklearn/model_selection/tests/test_split.py::test_kfold_no_shuffle",
                            "sklearn/model_selection/tests/test_split.py::test_stratified_kfold_no_shuffle",
                            "sklearn/model_selection/tests/test_split.py::test_stratified_kfold_ratios",
                            "sklearn/model_selection/tests/test_split.py::test_kfold_balance",
                            "sklearn/model_selection/tests/test_split.py::test_stratifiedkfold_balance",
                            "sklearn/model_selection/tests/test_split.py::test_shuffle_kfold",
                            "sklearn/model_selection/tests/test_split.py::test_shuffle_stratifiedkfold",
                            "sklearn/model_selection/tests/test_split.py::test_kfold_can_detect_dependent_samples_on_digits",
                            "sklearn/model_selection/tests/test_split.py::test_shuffle_split",
                            "sklearn/model_selection/tests/test_split.py::test_stratified_shuffle_split_init",
                            "sklearn/model_selection/tests/test_split.py::test_stratified_shuffle_split_respects_test_size",
                            "sklearn/model_selection/tests/test_split.py::test_stratified_shuffle_split_iter",
                            "sklearn/model_selection/tests/test_split.py::test_stratified_shuffle_split_even",
                            "sklearn/model_selection/tests/test_split.py::test_stratified_shuffle_split_overlap_train_test_bug",
                            "sklearn/model_selection/tests/test_split.py::test_stratified_shuffle_split_multilabel",
                            "sklearn/model_selection/tests/test_split.py::test_stratified_shuffle_split_multilabel_many_labels",
                            "sklearn/model_selection/tests/test_split.py::test_predefinedsplit_with_kfold_split",
                            "sklearn/model_selection/tests/test_split.py::test_group_shuffle_split",
                            "sklearn/model_selection/tests/test_split.py::test_leave_one_p_group_out",
                            "sklearn/model_selection/tests/test_split.py::test_leave_group_out_changing_groups",
                            "sklearn/model_selection/tests/test_split.py::test_leave_one_p_group_out_error_on_fewer_number_of_groups",
                            "sklearn/model_selection/tests/test_split.py::test_repeated_cv_value_errors",
                            "sklearn/model_selection/tests/test_split.py::test_repeated_kfold_determinstic_split",
                            "sklearn/model_selection/tests/test_split.py::test_get_n_splits_for_repeated_kfold",
                            "sklearn/model_selection/tests/test_split.py::test_get_n_splits_for_repeated_stratified_kfold",
                            "sklearn/model_selection/tests/test_split.py::test_repeated_stratified_kfold_determinstic_split",
                            "sklearn/model_selection/tests/test_split.py::test_train_test_split_errors",
                            "sklearn/model_selection/tests/test_split.py::test_train_test_split",
                            "sklearn/model_selection/tests/test_split.py::test_shufflesplit_errors",
                            "sklearn/model_selection/tests/test_split.py::test_shufflesplit_reproducible",
                            "sklearn/model_selection/tests/test_split.py::test_stratifiedshufflesplit_list_input",
                            "sklearn/model_selection/tests/test_split.py::test_train_test_split_allow_nans",
                            "sklearn/model_selection/tests/test_split.py::test_check_cv",
                            "sklearn/model_selection/tests/test_split.py::test_cv_iterable_wrapper",
                            "sklearn/model_selection/tests/test_split.py::test_group_kfold",
                            "sklearn/model_selection/tests/test_split.py::test_time_series_cv",
                            "sklearn/model_selection/tests/test_split.py::test_time_series_max_train_size",
                            "sklearn/model_selection/tests/test_split.py::test_nested_cv",
                            "sklearn/model_selection/tests/test_split.py::test_train_test_default_warning",
                            "sklearn/model_selection/tests/test_split.py::test_nsplit_default_warn",
                            "sklearn/model_selection/tests/test_split.py::test_check_cv_default_warn",
                            "sklearn/model_selection/tests/test_split.py::test_build_repr",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_cdist[euclidean]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_cdist[cityblock]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_cdist[minkowski]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_cdist[chebyshev]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_cdist[seuclidean]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_cdist[wminkowski]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_cdist[mahalanobis]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_cdist[hamming]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_cdist[canberra]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_cdist[braycurtis]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_cdist_bool_metric[matching]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_cdist_bool_metric[jaccard]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_cdist_bool_metric[dice]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_cdist_bool_metric[kulsinski]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_cdist_bool_metric[rogerstanimoto]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_cdist_bool_metric[russellrao]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_cdist_bool_metric[sokalmichener]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_cdist_bool_metric[sokalsneath]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_pdist[euclidean]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_pdist[cityblock]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_pdist[minkowski]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_pdist[chebyshev]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_pdist[seuclidean]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_pdist[wminkowski]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_pdist[mahalanobis]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_pdist[hamming]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_pdist[canberra]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_pdist[braycurtis]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_pdist_bool_metrics[matching]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_pdist_bool_metrics[dice]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_pdist_bool_metrics[kulsinski]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_pdist_bool_metrics[rogerstanimoto]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_pdist_bool_metrics[russellrao]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_pdist_bool_metrics[sokalmichener]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_pdist_bool_metrics[sokalsneath]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_pickle[euclidean]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_pickle[cityblock]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_pickle[minkowski]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_pickle[chebyshev]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_pickle[seuclidean]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_pickle[wminkowski]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_pickle[mahalanobis]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_pickle[hamming]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_pickle[canberra]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_pickle[braycurtis]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_pickle_bool_metrics[matching]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_pickle_bool_metrics[jaccard]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_pickle_bool_metrics[dice]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_pickle_bool_metrics[kulsinski]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_pickle_bool_metrics[rogerstanimoto]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_pickle_bool_metrics[russellrao]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_pickle_bool_metrics[sokalmichener]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_pickle_bool_metrics[sokalsneath]",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_haversine_metric",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_pyfunc_metric",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_bad_pyfunc_metric",
                            "sklearn/neighbors/tests/test_dist_metrics.py::test_input_data_size",
                            "sklearn/utils/tests/test_validation.py::test_as_float_array",
                            "sklearn/utils/tests/test_validation.py::test_as_float_array_nan[X0]",
                            "sklearn/utils/tests/test_validation.py::test_as_float_array_nan[X1]",
                            "sklearn/utils/tests/test_validation.py::test_np_matrix",
                            "sklearn/utils/tests/test_validation.py::test_memmap",
                            "sklearn/utils/tests/test_validation.py::test_ordering",
                            "sklearn/utils/tests/test_validation.py::test_check_array_force_all_finite_valid[asarray-inf-False]",
                            "sklearn/utils/tests/test_validation.py::test_check_array_force_all_finite_valid[asarray-nan-allow-nan]",
                            "sklearn/utils/tests/test_validation.py::test_check_array_force_all_finite_valid[asarray-nan-False]",
                            "sklearn/utils/tests/test_validation.py::test_check_array_force_all_finite_valid[csr_matrix-inf-False]",
                            "sklearn/utils/tests/test_validation.py::test_check_array_force_all_finite_valid[csr_matrix-nan-allow-nan]",
                            "sklearn/utils/tests/test_validation.py::test_check_array_force_all_finite_valid[csr_matrix-nan-False]",
                            "sklearn/utils/tests/test_validation.py::test_check_array_force_all_finiteinvalid[asarray-inf-True-Input",
                            "sklearn/utils/tests/test_validation.py::test_check_array_force_all_finiteinvalid[asarray-inf-allow-nan-Input",
                            "sklearn/utils/tests/test_validation.py::test_check_array_force_all_finiteinvalid[asarray-nan-True-Input",
                            "sklearn/utils/tests/test_validation.py::test_check_array_force_all_finiteinvalid[asarray-nan-allow-inf-force_all_finite",
                            "sklearn/utils/tests/test_validation.py::test_check_array_force_all_finiteinvalid[asarray-nan-1-Input",
                            "sklearn/utils/tests/test_validation.py::test_check_array_force_all_finiteinvalid[csr_matrix-inf-True-Input",
                            "sklearn/utils/tests/test_validation.py::test_check_array_force_all_finiteinvalid[csr_matrix-inf-allow-nan-Input",
                            "sklearn/utils/tests/test_validation.py::test_check_array_force_all_finiteinvalid[csr_matrix-nan-True-Input",
                            "sklearn/utils/tests/test_validation.py::test_check_array_force_all_finiteinvalid[csr_matrix-nan-allow-inf-force_all_finite",
                            "sklearn/utils/tests/test_validation.py::test_check_array_force_all_finiteinvalid[csr_matrix-nan-1-Input",
                            "sklearn/utils/tests/test_validation.py::test_check_array",
                            "sklearn/utils/tests/test_validation.py::test_check_array_pandas_dtype_object_conversion",
                            "sklearn/utils/tests/test_validation.py::test_check_array_on_mock_dataframe",
                            "sklearn/utils/tests/test_validation.py::test_check_array_dtype_stability",
                            "sklearn/utils/tests/test_validation.py::test_check_array_dtype_warning",
                            "sklearn/utils/tests/test_validation.py::test_check_array_accept_sparse_type_exception",
                            "sklearn/utils/tests/test_validation.py::test_check_array_accept_sparse_no_exception",
                            "sklearn/utils/tests/test_validation.py::test_check_array_accept_large_sparse_no_exception[csr]",
                            "sklearn/utils/tests/test_validation.py::test_check_array_accept_large_sparse_no_exception[csc]",
                            "sklearn/utils/tests/test_validation.py::test_check_array_accept_large_sparse_no_exception[coo]",
                            "sklearn/utils/tests/test_validation.py::test_check_array_accept_large_sparse_no_exception[bsr]",
                            "sklearn/utils/tests/test_validation.py::test_check_array_accept_large_sparse_raise_exception[csr]",
                            "sklearn/utils/tests/test_validation.py::test_check_array_accept_large_sparse_raise_exception[csc]",
                            "sklearn/utils/tests/test_validation.py::test_check_array_accept_large_sparse_raise_exception[coo]",
                            "sklearn/utils/tests/test_validation.py::test_check_array_accept_large_sparse_raise_exception[bsr]",
                            "sklearn/utils/tests/test_validation.py::test_check_array_large_indices_non_supported_scipy_version[csr]",
                            "sklearn/utils/tests/test_validation.py::test_check_array_large_indices_non_supported_scipy_version[csc]",
                            "sklearn/utils/tests/test_validation.py::test_check_array_large_indices_non_supported_scipy_version[coo]",
                            "sklearn/utils/tests/test_validation.py::test_check_array_large_indices_non_supported_scipy_version[bsr]",
                            "sklearn/utils/tests/test_validation.py::test_check_array_min_samples_and_features_messages",
                            "sklearn/utils/tests/test_validation.py::test_check_array_complex_data_error",
                            "sklearn/utils/tests/test_validation.py::test_has_fit_parameter",
                            "sklearn/utils/tests/test_validation.py::test_check_symmetric",
                            "sklearn/utils/tests/test_validation.py::test_check_is_fitted",
                            "sklearn/utils/tests/test_validation.py::test_check_consistent_length",
                            "sklearn/utils/tests/test_validation.py::test_check_dataframe_fit_attribute",
                            "sklearn/utils/tests/test_validation.py::test_suppress_validation",
                            "sklearn/utils/tests/test_validation.py::test_check_dataframe_warns_on_dtype",
                            "sklearn/utils/tests/test_validation.py::test_check_memory",
                            "sklearn/utils/tests/test_validation.py::test_check_array_memmap[True]",
                            "sklearn/utils/tests/test_validation.py::test_check_array_memmap[False]",
                            "sklearn/utils/tests/test_validation.py::test_check_X_y_informative_error",
                            "sklearn/utils/tests/test_validation.py::test_retrieve_samples_from_non_standard_shape"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "psf__requests-1537.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "test_requests.py::RequestsTestCase::test_can_send_nonstring_objects_with_files"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "test_requests.py::RequestsTestCase::test_basic_building",
                            "test_requests.py::RequestsTestCase::test_cannot_send_unprepared_requests",
                            "test_requests.py::RequestsTestCase::test_cookie_parameters",
                            "test_requests.py::RequestsTestCase::test_entry_points",
                            "test_requests.py::RequestsTestCase::test_get_auth_from_url",
                            "test_requests.py::RequestsTestCase::test_header_keys_are_native",
                            "test_requests.py::RequestsTestCase::test_hook_receives_request_arguments",
                            "test_requests.py::RequestsTestCase::test_http_error",
                            "test_requests.py::RequestsTestCase::test_invalid_url",
                            "test_requests.py::RequestsTestCase::test_links",
                            "test_requests.py::RequestsTestCase::test_long_authinfo_in_url",
                            "test_requests.py::RequestsTestCase::test_no_content_length",
                            "test_requests.py::RequestsTestCase::test_params_are_added_before_fragment",
                            "test_requests.py::RequestsTestCase::test_path_is_not_double_encoded",
                            "test_requests.py::RequestsTestCase::test_response_is_iterable",
                            "test_requests.py::RequestsTestCase::test_transport_adapter_ordering",
                            "test_requests.py::RequestsTestCase::test_unicode_multipart_post_fieldnames",
                            "test_requests.py::TestCaseInsensitiveDict::test_contains",
                            "test_requests.py::TestCaseInsensitiveDict::test_delitem",
                            "test_requests.py::TestCaseInsensitiveDict::test_docstring_example",
                            "test_requests.py::TestCaseInsensitiveDict::test_equality",
                            "test_requests.py::TestCaseInsensitiveDict::test_fixes_649",
                            "test_requests.py::TestCaseInsensitiveDict::test_get",
                            "test_requests.py::TestCaseInsensitiveDict::test_getitem",
                            "test_requests.py::TestCaseInsensitiveDict::test_iter",
                            "test_requests.py::TestCaseInsensitiveDict::test_iterable_init",
                            "test_requests.py::TestCaseInsensitiveDict::test_kwargs_init",
                            "test_requests.py::TestCaseInsensitiveDict::test_len",
                            "test_requests.py::TestCaseInsensitiveDict::test_lower_items",
                            "test_requests.py::TestCaseInsensitiveDict::test_mapping_init",
                            "test_requests.py::TestCaseInsensitiveDict::test_preserve_key_case",
                            "test_requests.py::TestCaseInsensitiveDict::test_preserve_last_key_case",
                            "test_requests.py::TestCaseInsensitiveDict::test_setdefault",
                            "test_requests.py::TestCaseInsensitiveDict::test_update",
                            "test_requests.py::TestCaseInsensitiveDict::test_update_retains_unchanged"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "psf__requests-2754.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "test_requests.py::TestUtils::test_unquote_unreserved_handles_bytes"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "test_requests.py::TestRequests::test_entry_points",
                            "test_requests.py::TestRequests::test_invalid_url[MissingScheme-hiwpefhipowhefopw]",
                            "test_requests.py::TestRequests::test_invalid_url[InvalidScheme-localhost:3128]",
                            "test_requests.py::TestRequests::test_invalid_url[InvalidScheme-localhost.localdomain:3128/]",
                            "test_requests.py::TestRequests::test_invalid_url[InvalidScheme-10.122.1.1:3128/]",
                            "test_requests.py::TestRequests::test_invalid_url[InvalidURL-http://]",
                            "test_requests.py::TestRequests::test_basic_building",
                            "test_requests.py::TestRequests::test_path_is_not_double_encoded",
                            "test_requests.py::TestRequests::test_params_are_added_before_fragment[http://example.com/path#fragment-http://example.com/path?a=b#fragment]",
                            "test_requests.py::TestRequests::test_params_are_added_before_fragment[http://example.com/path?key=value#fragment-http://example.com/path?key=value&a=b#fragment]",
                            "test_requests.py::TestRequests::test_params_original_order_is_preserved_by_default",
                            "test_requests.py::TestRequests::test_params_bytes_are_encoded",
                            "test_requests.py::TestRequests::test_binary_put",
                            "test_requests.py::TestRequests::test_errors[http://doesnotexist.google.com-ConnectionError]",
                            "test_requests.py::TestRequests::test_errors[http://localhost:1-ConnectionError]",
                            "test_requests.py::TestRequests::test_errors[http://fe80::5054:ff:fe5a:fc0-InvalidURL]",
                            "test_requests.py::TestRequests::test_prepare_request_with_bytestring_url",
                            "test_requests.py::TestRequests::test_links",
                            "test_requests.py::TestRequests::test_cookie_parameters",
                            "test_requests.py::TestRequests::test_cookie_as_dict_keeps_len",
                            "test_requests.py::TestRequests::test_cookie_as_dict_keeps_items",
                            "test_requests.py::TestRequests::test_cookie_as_dict_keys",
                            "test_requests.py::TestRequests::test_cookie_as_dict_values",
                            "test_requests.py::TestRequests::test_cookie_as_dict_items",
                            "test_requests.py::TestRequests::test_response_is_iterable",
                            "test_requests.py::TestRequests::test_response_decode_unicode",
                            "test_requests.py::TestRequests::test_get_auth_from_url",
                            "test_requests.py::TestRequests::test_get_auth_from_url_encoded_spaces",
                            "test_requests.py::TestRequests::test_get_auth_from_url_not_encoded_spaces",
                            "test_requests.py::TestRequests::test_get_auth_from_url_percent_chars",
                            "test_requests.py::TestRequests::test_get_auth_from_url_encoded_hashes",
                            "test_requests.py::TestRequests::test_http_error",
                            "test_requests.py::TestRequests::test_transport_adapter_ordering",
                            "test_requests.py::TestRequests::test_long_authinfo_in_url",
                            "test_requests.py::TestRequests::test_nonhttp_schemes_dont_check_URLs",
                            "test_requests.py::TestRequests::test_basic_auth_str_is_always_native",
                            "test_requests.py::TestContentEncodingDetection::test_none",
                            "test_requests.py::TestContentEncodingDetection::test_pragmas[<meta",
                            "test_requests.py::TestContentEncodingDetection::test_pragmas[<?xml",
                            "test_requests.py::TestContentEncodingDetection::test_precedence",
                            "test_requests.py::TestCaseInsensitiveDict::test_init[cid0]",
                            "test_requests.py::TestCaseInsensitiveDict::test_init[cid1]",
                            "test_requests.py::TestCaseInsensitiveDict::test_init[cid2]",
                            "test_requests.py::TestCaseInsensitiveDict::test_docstring_example",
                            "test_requests.py::TestCaseInsensitiveDict::test_len",
                            "test_requests.py::TestCaseInsensitiveDict::test_getitem",
                            "test_requests.py::TestCaseInsensitiveDict::test_fixes_649",
                            "test_requests.py::TestCaseInsensitiveDict::test_delitem",
                            "test_requests.py::TestCaseInsensitiveDict::test_contains",
                            "test_requests.py::TestCaseInsensitiveDict::test_get",
                            "test_requests.py::TestCaseInsensitiveDict::test_update",
                            "test_requests.py::TestCaseInsensitiveDict::test_update_retains_unchanged",
                            "test_requests.py::TestCaseInsensitiveDict::test_iter",
                            "test_requests.py::TestCaseInsensitiveDict::test_equality",
                            "test_requests.py::TestCaseInsensitiveDict::test_setdefault",
                            "test_requests.py::TestCaseInsensitiveDict::test_lower_items",
                            "test_requests.py::TestCaseInsensitiveDict::test_preserve_key_case",
                            "test_requests.py::TestCaseInsensitiveDict::test_preserve_last_key_case",
                            "test_requests.py::TestCaseInsensitiveDict::test_copy",
                            "test_requests.py::TestUtils::test_super_len_io_streams",
                            "test_requests.py::TestUtils::test_super_len_correctly_calculates_len_of_partially_read_file",
                            "test_requests.py::TestUtils::test_get_environ_proxies_ip_ranges",
                            "test_requests.py::TestUtils::test_get_environ_proxies",
                            "test_requests.py::TestUtils::test_select_proxies",
                            "test_requests.py::TestUtils::test_guess_filename_when_int",
                            "test_requests.py::TestUtils::test_guess_filename_when_filename_is_an_int",
                            "test_requests.py::TestUtils::test_guess_filename_with_file_like_obj",
                            "test_requests.py::TestUtils::test_guess_filename_with_unicode_name",
                            "test_requests.py::TestUtils::test_is_ipv4_address",
                            "test_requests.py::TestUtils::test_is_valid_cidr",
                            "test_requests.py::TestUtils::test_dotted_netmask",
                            "test_requests.py::TestUtils::test_address_in_network",
                            "test_requests.py::TestUtils::test_get_auth_from_url",
                            "test_requests.py::TestUtils::test_requote_uri_with_unquoted_percents",
                            "test_requests.py::TestUtils::test_requote_uri_properly_requotes",
                            "test_requests.py::TestUtils::test_unquote_unreserved_handles_unicode",
                            "test_requests.py::TestMorselToCookieExpires::test_expires_valid_str",
                            "test_requests.py::TestMorselToCookieExpires::test_expires_invalid_int[100-TypeError]",
                            "test_requests.py::TestMorselToCookieExpires::test_expires_invalid_int[woops-ValueError]",
                            "test_requests.py::TestMorselToCookieExpires::test_expires_none",
                            "test_requests.py::TestMorselToCookieMaxAge::test_max_age_valid_int",
                            "test_requests.py::TestMorselToCookieMaxAge::test_max_age_invalid_str",
                            "test_requests.py::TestTimeout::test_connect_timeout",
                            "test_requests.py::TestTimeout::test_total_timeout_connect",
                            "test_requests.py::test_data_argument_accepts_tuples",
                            "test_requests.py::test_prepared_request_empty_copy",
                            "test_requests.py::test_prepared_request_no_cookies_copy",
                            "test_requests.py::test_prepared_request_complete_copy",
                            "test_requests.py::test_prepare_unicode_url",
                            "test_requests.py::test_prepare_requires_a_request_method",
                            "test_requests.py::test_vendor_aliases"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "astropy__astropy-14590.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_ufunc_inplace_where[True]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_ufunc_inplace_where[False]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_ufunc_inplace_masked_where[True]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_ufunc_inplace_masked_where[False]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityUfuncs::test_ufunc_inplace_where[True]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityUfuncs::test_ufunc_inplace_where[False]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityUfuncs::test_ufunc_inplace_masked_where[True]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityUfuncs::test_ufunc_inplace_masked_where[False]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeUfuncs::test_ufunc_inplace_where[True]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeUfuncs::test_ufunc_inplace_where[False]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeUfuncs::test_ufunc_inplace_masked_where[True]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeUfuncs::test_ufunc_inplace_masked_where[False]"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_2op_ufunc[add]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_2op_ufunc[subtract]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_2op_ufunc[divide]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_2op_ufunc[arctan2]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_2op_ufunc[minimum]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_ufunc_inplace[add]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_ufunc_inplace[subtract]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_ufunc_inplace[divide]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_ufunc_inplace[arctan2]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_ufunc_inplace[minimum]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_ufunc_inplace_no_masked_input",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_ufunc_inplace_error",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_ufunc_inplace_error_masked_where",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_2op_ufunc_outer[outer0]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_2op_ufunc_outer[outer1]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_3op_ufunc",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_add_reduce[0]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_add_reduce[1]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_add_reduce[None]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_add_reduce_no_masked_input",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_minimum_reduce[0]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_minimum_reduce[1]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_minimum_reduce[None]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_maximum_reduce[0]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_maximum_reduce[1]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_maximum_reduce[None]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_multiply_reduce[0]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_multiply_reduce[1]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_multiply_reduce[None]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_ufunc_not_implemented_for_other",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityUfuncs::test_2op_ufunc[add]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityUfuncs::test_2op_ufunc[subtract]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityUfuncs::test_2op_ufunc[divide]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityUfuncs::test_2op_ufunc[arctan2]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityUfuncs::test_2op_ufunc[minimum]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityUfuncs::test_ufunc_inplace[add]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityUfuncs::test_ufunc_inplace[subtract]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityUfuncs::test_ufunc_inplace[divide]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityUfuncs::test_ufunc_inplace[arctan2]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityUfuncs::test_ufunc_inplace[minimum]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityUfuncs::test_ufunc_inplace_no_masked_input",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityUfuncs::test_ufunc_inplace_error",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityUfuncs::test_ufunc_inplace_error_masked_where",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityUfuncs::test_2op_ufunc_outer[outer0]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityUfuncs::test_2op_ufunc_outer[outer1]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityUfuncs::test_3op_ufunc",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityUfuncs::test_add_reduce[0]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityUfuncs::test_add_reduce[1]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityUfuncs::test_add_reduce[None]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityUfuncs::test_add_reduce_no_masked_input",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityUfuncs::test_minimum_reduce[0]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityUfuncs::test_minimum_reduce[1]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityUfuncs::test_minimum_reduce[None]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityUfuncs::test_maximum_reduce[0]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityUfuncs::test_maximum_reduce[1]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityUfuncs::test_maximum_reduce[None]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityUfuncs::test_ufunc_inplace_error2",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeUfuncs::test_2op_ufunc[add]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeUfuncs::test_2op_ufunc[subtract]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeUfuncs::test_2op_ufunc[divide]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeUfuncs::test_2op_ufunc[arctan2]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeUfuncs::test_2op_ufunc[minimum]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeUfuncs::test_ufunc_inplace[add]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeUfuncs::test_ufunc_inplace[subtract]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeUfuncs::test_ufunc_inplace[divide]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeUfuncs::test_ufunc_inplace[arctan2]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeUfuncs::test_ufunc_inplace[minimum]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeUfuncs::test_ufunc_inplace_no_masked_input",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeUfuncs::test_ufunc_inplace_error",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeUfuncs::test_ufunc_inplace_error_masked_where",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeUfuncs::test_2op_ufunc_outer[outer0]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeUfuncs::test_2op_ufunc_outer[outer1]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeUfuncs::test_3op_ufunc",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeUfuncs::test_add_reduce[0]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeUfuncs::test_add_reduce[1]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeUfuncs::test_add_reduce[None]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeUfuncs::test_add_reduce_no_masked_input",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeUfuncs::test_minimum_reduce[0]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeUfuncs::test_minimum_reduce[1]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeUfuncs::test_minimum_reduce[None]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeUfuncs::test_maximum_reduce[0]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeUfuncs::test_maximum_reduce[1]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeUfuncs::test_maximum_reduce[None]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeUfuncs::test_ufunc_inplace_quantity_initial",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayConcatenation::test_concatenate",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayConcatenation::test_concatenate_not_all_masked",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayConcatenation::test_insert[1]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayConcatenation::test_insert[obj1]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayConcatenation::test_insert_masked_obj",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayConcatenation::test_append",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityConcatenation::test_concatenate",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityConcatenation::test_concatenate_not_all_masked",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityConcatenation::test_insert[1]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityConcatenation::test_insert[obj1]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityConcatenation::test_insert_masked_obj",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityConcatenation::test_append",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeConcatenation::test_concatenate",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeConcatenation::test_concatenate_not_all_masked",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeConcatenation::test_insert[1]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeConcatenation::test_insert[obj1]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeConcatenation::test_insert_masked_obj",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeConcatenation::test_append",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayBroadcast::test_broadcast_to",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayBroadcast::test_broadcast_to_using_apply",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayBroadcast::test_broadcast_arrays",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayBroadcast::test_broadcast_arrays_not_all_masked",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayBroadcast::test_broadcast_arrays_subok_false",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityBroadcast::test_broadcast_to",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityBroadcast::test_broadcast_to_using_apply",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityBroadcast::test_broadcast_arrays",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityBroadcast::test_broadcast_arrays_not_all_masked",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityBroadcast::test_broadcast_arrays_subok_false",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeBroadcast::test_broadcast_to",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeBroadcast::test_broadcast_to_using_apply",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeBroadcast::test_broadcast_arrays",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeBroadcast::test_broadcast_arrays_not_all_masked",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeBroadcast::test_broadcast_arrays_subok_false",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayCalculation::test_diff[1--1]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayCalculation::test_diff[2--1]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayCalculation::test_diff[1-0]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArrayCalculation::test_diff_explicit",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityCalculation::test_diff[1--1]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityCalculation::test_diff[2--1]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityCalculation::test_diff[1-0]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityCalculation::test_diff_explicit",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeCalculation::test_diff[1--1]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeCalculation::test_diff[2--1]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeCalculation::test_diff[1-0]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeCalculation::test_diff_explicit",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArraySorting::test_lexsort1[-1]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArraySorting::test_lexsort1[0]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArraySorting::test_lexsort2[-1]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArraySorting::test_lexsort2[0]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArraySorting::test_lexsort_mix[-1]",
                            "astropy/utils/masked/tests/test_functions.py::TestMaskedArraySorting::test_lexsort_mix[0]"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "pytest-dev__pytest-5840.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "testing/test_conftest.py::test_setinitial_conftest_subdirs[test]",
                            "testing/test_conftest.py::test_setinitial_conftest_subdirs[tests]"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "testing/test_conftest.py::TestConftestValueAccessGlobal::test_basic_init[global]",
                            "testing/test_conftest.py::TestConftestValueAccessGlobal::test_immediate_initialiation_and_incremental_are_the_same[global]",
                            "testing/test_conftest.py::TestConftestValueAccessGlobal::test_value_access_not_existing[global]",
                            "testing/test_conftest.py::TestConftestValueAccessGlobal::test_value_access_by_path[global]",
                            "testing/test_conftest.py::TestConftestValueAccessGlobal::test_value_access_with_confmod[global]",
                            "testing/test_conftest.py::TestConftestValueAccessGlobal::test_basic_init[inpackage]",
                            "testing/test_conftest.py::TestConftestValueAccessGlobal::test_immediate_initialiation_and_incremental_are_the_same[inpackage]",
                            "testing/test_conftest.py::TestConftestValueAccessGlobal::test_value_access_not_existing[inpackage]",
                            "testing/test_conftest.py::TestConftestValueAccessGlobal::test_value_access_by_path[inpackage]",
                            "testing/test_conftest.py::TestConftestValueAccessGlobal::test_value_access_with_confmod[inpackage]",
                            "testing/test_conftest.py::test_conftest_in_nonpkg_with_init",
                            "testing/test_conftest.py::test_doubledash_considered",
                            "testing/test_conftest.py::test_issue151_load_all_conftests",
                            "testing/test_conftest.py::test_conftest_global_import",
                            "testing/test_conftest.py::test_conftestcutdir",
                            "testing/test_conftest.py::test_conftestcutdir_inplace_considered",
                            "testing/test_conftest.py::test_setinitial_conftest_subdirs[whatever]",
                            "testing/test_conftest.py::test_setinitial_conftest_subdirs[.dotdir]",
                            "testing/test_conftest.py::test_conftest_confcutdir",
                            "testing/test_conftest.py::test_conftest_symlink",
                            "testing/test_conftest.py::test_conftest_symlink_files",
                            "testing/test_conftest.py::test_conftest_uppercase",
                            "testing/test_conftest.py::test_no_conftest",
                            "testing/test_conftest.py::test_conftest_existing_resultlog",
                            "testing/test_conftest.py::test_conftest_existing_junitxml",
                            "testing/test_conftest.py::test_conftest_import_order",
                            "testing/test_conftest.py::test_fixture_dependency",
                            "testing/test_conftest.py::test_conftest_found_with_double_dash",
                            "testing/test_conftest.py::TestConftestVisibility::test_parsefactories_relative_node_ids[runner-..-3]",
                            "testing/test_conftest.py::TestConftestVisibility::test_parsefactories_relative_node_ids[package-..-3]",
                            "testing/test_conftest.py::TestConftestVisibility::test_parsefactories_relative_node_ids[swc-../..-3]",
                            "testing/test_conftest.py::TestConftestVisibility::test_parsefactories_relative_node_ids[snc-../..-3]",
                            "testing/test_conftest.py::TestConftestVisibility::test_parsefactories_relative_node_ids[runner-../package-3]",
                            "testing/test_conftest.py::TestConftestVisibility::test_parsefactories_relative_node_ids[package-.-3]",
                            "testing/test_conftest.py::TestConftestVisibility::test_parsefactories_relative_node_ids[swc-..-3]",
                            "testing/test_conftest.py::TestConftestVisibility::test_parsefactories_relative_node_ids[snc-..-3]",
                            "testing/test_conftest.py::TestConftestVisibility::test_parsefactories_relative_node_ids[runner-../package/swc-1]",
                            "testing/test_conftest.py::TestConftestVisibility::test_parsefactories_relative_node_ids[package-./swc-1]",
                            "testing/test_conftest.py::TestConftestVisibility::test_parsefactories_relative_node_ids[swc-.-1]",
                            "testing/test_conftest.py::TestConftestVisibility::test_parsefactories_relative_node_ids[snc-../swc-1]",
                            "testing/test_conftest.py::TestConftestVisibility::test_parsefactories_relative_node_ids[runner-../package/snc-1]",
                            "testing/test_conftest.py::TestConftestVisibility::test_parsefactories_relative_node_ids[package-./snc-1]",
                            "testing/test_conftest.py::TestConftestVisibility::test_parsefactories_relative_node_ids[swc-../snc-1]",
                            "testing/test_conftest.py::TestConftestVisibility::test_parsefactories_relative_node_ids[snc-.-1]",
                            "testing/test_conftest.py::test_search_conftest_up_to_inifile[.-2-0]",
                            "testing/test_conftest.py::test_search_conftest_up_to_inifile[src-1-1]",
                            "testing/test_conftest.py::test_search_conftest_up_to_inifile[None-1-1]",
                            "testing/test_conftest.py::test_issue1073_conftest_special_objects",
                            "testing/test_conftest.py::test_conftest_exception_handling",
                            "testing/test_conftest.py::test_hook_proxy",
                            "testing/test_conftest.py::test_required_option_help"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "psf__requests-6028.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "tests/test_utils.py::test_prepend_scheme_if_needed[http://user:pass@example.com/path?query-http://user:pass@example.com/path?query]",
                            "tests/test_utils.py::test_prepend_scheme_if_needed[http://user@example.com/path?query-http://user@example.com/path?query]"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "tests/test_utils.py::TestSuperLen::test_io_streams[StringIO-Test]",
                            "tests/test_utils.py::TestSuperLen::test_io_streams[BytesIO-Test]",
                            "tests/test_utils.py::TestSuperLen::test_super_len_correctly_calculates_len_of_partially_read_file",
                            "tests/test_utils.py::TestSuperLen::test_super_len_handles_files_raising_weird_errors_in_tell[OSError0]",
                            "tests/test_utils.py::TestSuperLen::test_super_len_handles_files_raising_weird_errors_in_tell[OSError1]",
                            "tests/test_utils.py::TestSuperLen::test_super_len_tell_ioerror[OSError0]",
                            "tests/test_utils.py::TestSuperLen::test_super_len_tell_ioerror[OSError1]",
                            "tests/test_utils.py::TestSuperLen::test_string",
                            "tests/test_utils.py::TestSuperLen::test_file[r-1]",
                            "tests/test_utils.py::TestSuperLen::test_file[rb-0]",
                            "tests/test_utils.py::TestSuperLen::test_tarfile_member",
                            "tests/test_utils.py::TestSuperLen::test_super_len_with__len__",
                            "tests/test_utils.py::TestSuperLen::test_super_len_with_no__len__",
                            "tests/test_utils.py::TestSuperLen::test_super_len_with_tell",
                            "tests/test_utils.py::TestSuperLen::test_super_len_with_fileno",
                            "tests/test_utils.py::TestSuperLen::test_super_len_with_no_matches",
                            "tests/test_utils.py::TestToKeyValList::test_valid[value0-expected0]",
                            "tests/test_utils.py::TestToKeyValList::test_valid[value1-expected1]",
                            "tests/test_utils.py::TestToKeyValList::test_valid[value2-expected2]",
                            "tests/test_utils.py::TestToKeyValList::test_valid[None-None]",
                            "tests/test_utils.py::TestToKeyValList::test_invalid",
                            "tests/test_utils.py::TestUnquoteHeaderValue::test_valid[None-None]",
                            "tests/test_utils.py::TestUnquoteHeaderValue::test_valid[Test-Test]",
                            "tests/test_utils.py::TestUnquoteHeaderValue::test_valid[\"Test\"-Test]",
                            "tests/test_utils.py::TestUnquoteHeaderValue::test_valid[\"Test\\\\\\\\\"-Test\\\\]",
                            "tests/test_utils.py::TestUnquoteHeaderValue::test_valid[\"\\\\\\\\Comp\\\\Res\"-\\\\Comp\\\\Res]",
                            "tests/test_utils.py::TestUnquoteHeaderValue::test_is_filename",
                            "tests/test_utils.py::TestGetEnvironProxies::test_bypass[no_proxy-http://192.168.0.1:5000/]",
                            "tests/test_utils.py::TestGetEnvironProxies::test_bypass[no_proxy-http://192.168.0.1/]",
                            "tests/test_utils.py::TestGetEnvironProxies::test_bypass[no_proxy-http://172.16.1.1/]",
                            "tests/test_utils.py::TestGetEnvironProxies::test_bypass[no_proxy-http://172.16.1.1:5000/]",
                            "tests/test_utils.py::TestGetEnvironProxies::test_bypass[no_proxy-http://localhost.localdomain:5000/v1.0/]",
                            "tests/test_utils.py::TestGetEnvironProxies::test_bypass[NO_PROXY-http://192.168.0.1:5000/]",
                            "tests/test_utils.py::TestGetEnvironProxies::test_bypass[NO_PROXY-http://192.168.0.1/]",
                            "tests/test_utils.py::TestGetEnvironProxies::test_bypass[NO_PROXY-http://172.16.1.1/]",
                            "tests/test_utils.py::TestGetEnvironProxies::test_bypass[NO_PROXY-http://172.16.1.1:5000/]",
                            "tests/test_utils.py::TestGetEnvironProxies::test_bypass[NO_PROXY-http://localhost.localdomain:5000/v1.0/]",
                            "tests/test_utils.py::TestGetEnvironProxies::test_not_bypass[no_proxy-http://192.168.1.1:5000/]",
                            "tests/test_utils.py::TestGetEnvironProxies::test_not_bypass[no_proxy-http://192.168.1.1/]",
                            "tests/test_utils.py::TestGetEnvironProxies::test_not_bypass[no_proxy-http://www.requests.com/]",
                            "tests/test_utils.py::TestGetEnvironProxies::test_not_bypass[NO_PROXY-http://192.168.1.1:5000/]",
                            "tests/test_utils.py::TestGetEnvironProxies::test_not_bypass[NO_PROXY-http://192.168.1.1/]",
                            "tests/test_utils.py::TestGetEnvironProxies::test_not_bypass[NO_PROXY-http://www.requests.com/]",
                            "tests/test_utils.py::TestGetEnvironProxies::test_bypass_no_proxy_keyword[no_proxy-http://192.168.1.1:5000/]",
                            "tests/test_utils.py::TestGetEnvironProxies::test_bypass_no_proxy_keyword[no_proxy-http://192.168.1.1/]",
                            "tests/test_utils.py::TestGetEnvironProxies::test_bypass_no_proxy_keyword[no_proxy-http://www.requests.com/]",
                            "tests/test_utils.py::TestGetEnvironProxies::test_bypass_no_proxy_keyword[NO_PROXY-http://192.168.1.1:5000/]",
                            "tests/test_utils.py::TestGetEnvironProxies::test_bypass_no_proxy_keyword[NO_PROXY-http://192.168.1.1/]",
                            "tests/test_utils.py::TestGetEnvironProxies::test_bypass_no_proxy_keyword[NO_PROXY-http://www.requests.com/]",
                            "tests/test_utils.py::TestGetEnvironProxies::test_not_bypass_no_proxy_keyword[no_proxy-http://192.168.0.1:5000/]",
                            "tests/test_utils.py::TestGetEnvironProxies::test_not_bypass_no_proxy_keyword[no_proxy-http://192.168.0.1/]",
                            "tests/test_utils.py::TestGetEnvironProxies::test_not_bypass_no_proxy_keyword[no_proxy-http://172.16.1.1/]",
                            "tests/test_utils.py::TestGetEnvironProxies::test_not_bypass_no_proxy_keyword[no_proxy-http://172.16.1.1:5000/]",
                            "tests/test_utils.py::TestGetEnvironProxies::test_not_bypass_no_proxy_keyword[no_proxy-http://localhost.localdomain:5000/v1.0/]",
                            "tests/test_utils.py::TestGetEnvironProxies::test_not_bypass_no_proxy_keyword[NO_PROXY-http://192.168.0.1:5000/]",
                            "tests/test_utils.py::TestGetEnvironProxies::test_not_bypass_no_proxy_keyword[NO_PROXY-http://192.168.0.1/]",
                            "tests/test_utils.py::TestGetEnvironProxies::test_not_bypass_no_proxy_keyword[NO_PROXY-http://172.16.1.1/]",
                            "tests/test_utils.py::TestGetEnvironProxies::test_not_bypass_no_proxy_keyword[NO_PROXY-http://172.16.1.1:5000/]",
                            "tests/test_utils.py::TestGetEnvironProxies::test_not_bypass_no_proxy_keyword[NO_PROXY-http://localhost.localdomain:5000/v1.0/]",
                            "tests/test_utils.py::TestIsIPv4Address::test_valid",
                            "tests/test_utils.py::TestIsIPv4Address::test_invalid[8.8.8.8.8]",
                            "tests/test_utils.py::TestIsIPv4Address::test_invalid[localhost.localdomain]",
                            "tests/test_utils.py::TestIsValidCIDR::test_valid",
                            "tests/test_utils.py::TestIsValidCIDR::test_invalid[8.8.8.8]",
                            "tests/test_utils.py::TestIsValidCIDR::test_invalid[192.168.1.0/a]",
                            "tests/test_utils.py::TestIsValidCIDR::test_invalid[192.168.1.0/128]",
                            "tests/test_utils.py::TestIsValidCIDR::test_invalid[192.168.1.0/-1]",
                            "tests/test_utils.py::TestIsValidCIDR::test_invalid[192.168.1.999/24]",
                            "tests/test_utils.py::TestAddressInNetwork::test_valid",
                            "tests/test_utils.py::TestAddressInNetwork::test_invalid",
                            "tests/test_utils.py::TestGuessFilename::test_guess_filename_invalid[1]",
                            "tests/test_utils.py::TestGuessFilename::test_guess_filename_invalid[value1]",
                            "tests/test_utils.py::TestGuessFilename::test_guess_filename_valid[value-bytes]",
                            "tests/test_utils.py::TestGuessFilename::test_guess_filename_valid[value-str]",
                            "tests/test_utils.py::TestExtractZippedPaths::test_unzipped_paths_unchanged[/]",
                            "tests/test_utils.py::TestExtractZippedPaths::test_unzipped_paths_unchanged[/test_utils.py]",
                            "tests/test_utils.py::TestExtractZippedPaths::test_unzipped_paths_unchanged[/__init__.py]",
                            "tests/test_utils.py::TestExtractZippedPaths::test_unzipped_paths_unchanged[/location]",
                            "tests/test_utils.py::TestExtractZippedPaths::test_zipped_paths_extracted",
                            "tests/test_utils.py::TestExtractZippedPaths::test_invalid_unc_path",
                            "tests/test_utils.py::TestContentEncodingDetection::test_none",
                            "tests/test_utils.py::TestContentEncodingDetection::test_pragmas[<meta",
                            "tests/test_utils.py::TestContentEncodingDetection::test_pragmas[<?xml",
                            "tests/test_utils.py::TestContentEncodingDetection::test_precedence",
                            "tests/test_utils.py::TestGuessJSONUTF::test_encoded[utf-32]",
                            "tests/test_utils.py::TestGuessJSONUTF::test_encoded[utf-8-sig]",
                            "tests/test_utils.py::TestGuessJSONUTF::test_encoded[utf-16]",
                            "tests/test_utils.py::TestGuessJSONUTF::test_encoded[utf-8]",
                            "tests/test_utils.py::TestGuessJSONUTF::test_encoded[utf-16-be]",
                            "tests/test_utils.py::TestGuessJSONUTF::test_encoded[utf-16-le]",
                            "tests/test_utils.py::TestGuessJSONUTF::test_encoded[utf-32-be]",
                            "tests/test_utils.py::TestGuessJSONUTF::test_encoded[utf-32-le]",
                            "tests/test_utils.py::TestGuessJSONUTF::test_bad_utf_like_encoding",
                            "tests/test_utils.py::TestGuessJSONUTF::test_guess_by_bom[utf-16-be-utf-16]",
                            "tests/test_utils.py::TestGuessJSONUTF::test_guess_by_bom[utf-16-le-utf-16]",
                            "tests/test_utils.py::TestGuessJSONUTF::test_guess_by_bom[utf-32-be-utf-32]",
                            "tests/test_utils.py::TestGuessJSONUTF::test_guess_by_bom[utf-32-le-utf-32]",
                            "tests/test_utils.py::test_get_auth_from_url[http://%25%21%2A%27%28%29%3B%3A%40%26%3D%2B%24%2C%2F%3F%23%5B%5D%20:%25%21%2A%27%28%29%3B%3A%40%26%3D%2B%24%2C%2F%3F%23%5B%5D%20@request.com/url.html#test-auth0]",
                            "tests/test_utils.py::test_get_auth_from_url[http://user:pass@complex.url.com/path?query=yes-auth1]",
                            "tests/test_utils.py::test_get_auth_from_url[http://user:pass%20pass@complex.url.com/path?query=yes-auth2]",
                            "tests/test_utils.py::test_get_auth_from_url[http://user:pass",
                            "tests/test_utils.py::test_get_auth_from_url[http://user%25user:pass@complex.url.com/path?query=yes-auth4]",
                            "tests/test_utils.py::test_get_auth_from_url[http://user:pass%23pass@complex.url.com/path?query=yes-auth5]",
                            "tests/test_utils.py::test_get_auth_from_url[http://complex.url.com/path?query=yes-auth6]",
                            "tests/test_utils.py::test_requote_uri_with_unquoted_percents[http://example.com/fiz?buz=%25ppicture-http://example.com/fiz?buz=%25ppicture]",
                            "tests/test_utils.py::test_requote_uri_with_unquoted_percents[http://example.com/fiz?buz=%ppicture-http://example.com/fiz?buz=%25ppicture]",
                            "tests/test_utils.py::test_unquote_unreserved[http://example.com/?a=%---http://example.com/?a=%--]",
                            "tests/test_utils.py::test_unquote_unreserved[http://example.com/?a=%300-http://example.com/?a=00]",
                            "tests/test_utils.py::test_dotted_netmask[8-255.0.0.0]",
                            "tests/test_utils.py::test_dotted_netmask[24-255.255.255.0]",
                            "tests/test_utils.py::test_dotted_netmask[25-255.255.255.128]",
                            "tests/test_utils.py::test_select_proxies[hTTp://u:p@Some.Host/path-http://some.host.proxy-proxies0]",
                            "tests/test_utils.py::test_select_proxies[hTTp://u:p@Other.Host/path-http://http.proxy-proxies1]",
                            "tests/test_utils.py::test_select_proxies[hTTp:///path-http://http.proxy-proxies2]",
                            "tests/test_utils.py::test_select_proxies[hTTps://Other.Host-None-proxies3]",
                            "tests/test_utils.py::test_select_proxies[file:///etc/motd-None-proxies4]",
                            "tests/test_utils.py::test_select_proxies[hTTp://u:p@Some.Host/path-socks5://some.host.proxy-proxies5]",
                            "tests/test_utils.py::test_select_proxies[hTTp://u:p@Other.Host/path-socks5://http.proxy-proxies6]",
                            "tests/test_utils.py::test_select_proxies[hTTp:///path-socks5://http.proxy-proxies7]",
                            "tests/test_utils.py::test_select_proxies[hTTps://Other.Host-socks5://http.proxy-proxies8]",
                            "tests/test_utils.py::test_select_proxies[http://u:p@other.host/path-http://http.proxy-proxies9]",
                            "tests/test_utils.py::test_select_proxies[http://u:p@some.host/path-http://some.host.proxy-proxies10]",
                            "tests/test_utils.py::test_select_proxies[https://u:p@other.host/path-socks5://http.proxy-proxies11]",
                            "tests/test_utils.py::test_select_proxies[https://u:p@some.host/path-socks5://http.proxy-proxies12]",
                            "tests/test_utils.py::test_select_proxies[https://-socks5://http.proxy-proxies13]",
                            "tests/test_utils.py::test_select_proxies[file:///etc/motd-socks5://http.proxy-proxies14]",
                            "tests/test_utils.py::test_parse_dict_header[foo=\"is",
                            "tests/test_utils.py::test_parse_dict_header[key_without_value-expected1]",
                            "tests/test_utils.py::test__parse_content_type_header[application/xml-expected0]",
                            "tests/test_utils.py::test__parse_content_type_header[application/json",
                            "tests/test_utils.py::test__parse_content_type_header[text/plain-expected3]",
                            "tests/test_utils.py::test__parse_content_type_header[multipart/form-data;",
                            "tests/test_utils.py::test_get_encoding_from_headers[value0-None]",
                            "tests/test_utils.py::test_get_encoding_from_headers[value1-utf-8]",
                            "tests/test_utils.py::test_get_encoding_from_headers[value2-ISO-8859-1]",
                            "tests/test_utils.py::test_iter_slices[-0]",
                            "tests/test_utils.py::test_iter_slices[T-1]",
                            "tests/test_utils.py::test_iter_slices[Test-4]",
                            "tests/test_utils.py::test_iter_slices[Cont-0]",
                            "tests/test_utils.py::test_iter_slices[Other--5]",
                            "tests/test_utils.py::test_iter_slices[Content-None]",
                            "tests/test_utils.py::test_parse_header_links[<http:/.../front.jpeg>;",
                            "tests/test_utils.py::test_parse_header_links[<http:/.../front.jpeg>-expected1]",
                            "tests/test_utils.py::test_parse_header_links[<http:/.../front.jpeg>;-expected2]",
                            "tests/test_utils.py::test_parse_header_links[-expected4]",
                            "tests/test_utils.py::test_prepend_scheme_if_needed[example.com/path-http://example.com/path]",
                            "tests/test_utils.py::test_prepend_scheme_if_needed[//example.com/path-http://example.com/path]",
                            "tests/test_utils.py::test_prepend_scheme_if_needed[example.com:80-http://example.com:80]",
                            "tests/test_utils.py::test_to_native_string[T-T0]",
                            "tests/test_utils.py::test_to_native_string[T-T1]",
                            "tests/test_utils.py::test_to_native_string[T-T2]",
                            "tests/test_utils.py::test_urldefragauth[http://u:p@example.com/path?a=1#test-http://example.com/path?a=1]",
                            "tests/test_utils.py::test_urldefragauth[http://example.com/path-http://example.com/path]",
                            "tests/test_utils.py::test_urldefragauth[//u:p@example.com/path-//example.com/path]",
                            "tests/test_utils.py::test_urldefragauth[//example.com/path-//example.com/path]",
                            "tests/test_utils.py::test_urldefragauth[example.com/path-//example.com/path]",
                            "tests/test_utils.py::test_urldefragauth[scheme:u:p@example.com/path-scheme://example.com/path]",
                            "tests/test_utils.py::test_should_bypass_proxies[http://192.168.0.1:5000/-True]",
                            "tests/test_utils.py::test_should_bypass_proxies[http://192.168.0.1/-True]",
                            "tests/test_utils.py::test_should_bypass_proxies[http://172.16.1.1/-True]",
                            "tests/test_utils.py::test_should_bypass_proxies[http://172.16.1.1:5000/-True]",
                            "tests/test_utils.py::test_should_bypass_proxies[http://localhost.localdomain:5000/v1.0/-True]",
                            "tests/test_utils.py::test_should_bypass_proxies[http://google.com:6000/-True]",
                            "tests/test_utils.py::test_should_bypass_proxies[http://172.16.1.12/-False]",
                            "tests/test_utils.py::test_should_bypass_proxies[http://172.16.1.12:5000/-False]",
                            "tests/test_utils.py::test_should_bypass_proxies[http://google.com:5000/v1.0/-False]",
                            "tests/test_utils.py::test_should_bypass_proxies[file:///some/path/on/disk-True]",
                            "tests/test_utils.py::test_add_dict_to_cookiejar[cookiejar0]",
                            "tests/test_utils.py::test_add_dict_to_cookiejar[cookiejar1]",
                            "tests/test_utils.py::test_unicode_is_ascii[test-True]",
                            "tests/test_utils.py::test_unicode_is_ascii[\\xe6\\xed\\xf6\\xfb-False]",
                            "tests/test_utils.py::test_unicode_is_ascii[\\u30b8\\u30a7\\u30fc\\u30d4\\u30fc\\u30cb\\u30c3\\u30af-False]",
                            "tests/test_utils.py::test_should_bypass_proxies_no_proxy[http://192.168.0.1:5000/-True]",
                            "tests/test_utils.py::test_should_bypass_proxies_no_proxy[http://192.168.0.1/-True]",
                            "tests/test_utils.py::test_should_bypass_proxies_no_proxy[http://172.16.1.1/-True]",
                            "tests/test_utils.py::test_should_bypass_proxies_no_proxy[http://172.16.1.1:5000/-True]",
                            "tests/test_utils.py::test_should_bypass_proxies_no_proxy[http://localhost.localdomain:5000/v1.0/-True]",
                            "tests/test_utils.py::test_should_bypass_proxies_no_proxy[http://172.16.1.12/-False]",
                            "tests/test_utils.py::test_should_bypass_proxies_no_proxy[http://172.16.1.12:5000/-False]",
                            "tests/test_utils.py::test_should_bypass_proxies_no_proxy[http://google.com:5000/v1.0/-False]",
                            "tests/test_utils.py::test_set_environ[no_proxy-192.168.0.0/24,127.0.0.1,localhost.localdomain]",
                            "tests/test_utils.py::test_set_environ[no_proxy-None]",
                            "tests/test_utils.py::test_set_environ[a_new_key-192.168.0.0/24,127.0.0.1,localhost.localdomain]",
                            "tests/test_utils.py::test_set_environ[a_new_key-None]",
                            "tests/test_utils.py::test_set_environ_raises_exception"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "sphinx-doc__sphinx-11550.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "tests/test_ext_autodoc_preserve_defaults.py::test_preserve_defaults",
                            "tests/test_ext_autodoc_preserve_defaults.py::test_preserve_defaults_special_constructs"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "psf__requests-4718.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "tests/test_requests.py::TestRequests::test_should_strip_auth_host_change",
                            "tests/test_requests.py::TestRequests::test_should_strip_auth_http_downgrade",
                            "tests/test_requests.py::TestRequests::test_should_strip_auth_https_upgrade",
                            "tests/test_requests.py::TestRequests::test_should_strip_auth_port_change"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "tests/test_requests.py::TestRequests::test_entry_points",
                            "tests/test_requests.py::TestRequests::test_invalid_url[MissingSchema-hiwpefhipowhefopw]",
                            "tests/test_requests.py::TestRequests::test_invalid_url[InvalidSchema-localhost:3128]",
                            "tests/test_requests.py::TestRequests::test_invalid_url[InvalidSchema-localhost.localdomain:3128/]",
                            "tests/test_requests.py::TestRequests::test_invalid_url[InvalidSchema-10.122.1.1:3128/]",
                            "tests/test_requests.py::TestRequests::test_invalid_url[InvalidURL-http://]",
                            "tests/test_requests.py::TestRequests::test_basic_building",
                            "tests/test_requests.py::TestRequests::test_path_is_not_double_encoded",
                            "tests/test_requests.py::TestRequests::test_params_are_added_before_fragment[http://example.com/path#fragment-http://example.com/path?a=b#fragment]",
                            "tests/test_requests.py::TestRequests::test_params_are_added_before_fragment[http://example.com/path?key=value#fragment-http://example.com/path?key=value&a=b#fragment]",
                            "tests/test_requests.py::TestRequests::test_params_original_order_is_preserved_by_default",
                            "tests/test_requests.py::TestRequests::test_params_bytes_are_encoded",
                            "tests/test_requests.py::TestRequests::test_binary_put",
                            "tests/test_requests.py::TestRequests::test_whitespaces_are_removed_from_url",
                            "tests/test_requests.py::TestRequests::test_basicauth_encodes_byte_strings",
                            "tests/test_requests.py::TestRequests::test_errors[http://doesnotexist.google.com-ConnectionError]",
                            "tests/test_requests.py::TestRequests::test_errors[http://localhost:1-ConnectionError]",
                            "tests/test_requests.py::TestRequests::test_errors[http://fe80::5054:ff:fe5a:fc0-InvalidURL]",
                            "tests/test_requests.py::TestRequests::test_proxy_error",
                            "tests/test_requests.py::TestRequests::test_non_prepared_request_error",
                            "tests/test_requests.py::TestRequests::test_prepare_request_with_bytestring_url",
                            "tests/test_requests.py::TestRequests::test_links",
                            "tests/test_requests.py::TestRequests::test_cookie_parameters",
                            "tests/test_requests.py::TestRequests::test_cookie_as_dict_keeps_len",
                            "tests/test_requests.py::TestRequests::test_cookie_as_dict_keeps_items",
                            "tests/test_requests.py::TestRequests::test_cookie_as_dict_keys",
                            "tests/test_requests.py::TestRequests::test_cookie_as_dict_values",
                            "tests/test_requests.py::TestRequests::test_cookie_as_dict_items",
                            "tests/test_requests.py::TestRequests::test_cookie_duplicate_names_different_domains",
                            "tests/test_requests.py::TestRequests::test_cookie_duplicate_names_raises_cookie_conflict_error",
                            "tests/test_requests.py::TestRequests::test_cookie_policy_copy",
                            "tests/test_requests.py::TestRequests::test_empty_response_has_content_none",
                            "tests/test_requests.py::TestRequests::test_response_is_iterable",
                            "tests/test_requests.py::TestRequests::test_response_decode_unicode",
                            "tests/test_requests.py::TestRequests::test_response_reason_unicode",
                            "tests/test_requests.py::TestRequests::test_response_reason_unicode_fallback",
                            "tests/test_requests.py::TestRequests::test_response_chunk_size_type",
                            "tests/test_requests.py::TestRequests::test_http_error",
                            "tests/test_requests.py::TestRequests::test_transport_adapter_ordering",
                            "tests/test_requests.py::TestRequests::test_session_get_adapter_prefix_matching",
                            "tests/test_requests.py::TestRequests::test_session_get_adapter_prefix_matching_mixed_case",
                            "tests/test_requests.py::TestRequests::test_session_get_adapter_prefix_matching_is_case_insensitive",
                            "tests/test_requests.py::TestRequests::test_long_authinfo_in_url",
                            "tests/test_requests.py::TestRequests::test_nonhttp_schemes_dont_check_URLs",
                            "tests/test_requests.py::TestRequests::test_prepare_body_position_non_stream",
                            "tests/test_requests.py::TestRequests::test_rewind_body",
                            "tests/test_requests.py::TestRequests::test_rewind_partially_read_body",
                            "tests/test_requests.py::TestRequests::test_rewind_body_no_seek",
                            "tests/test_requests.py::TestRequests::test_rewind_body_failed_seek",
                            "tests/test_requests.py::TestRequests::test_rewind_body_failed_tell",
                            "tests/test_requests.py::TestRequests::test_basic_auth_str_is_always_native[test-test-Basic",
                            "tests/test_requests.py::TestRequests::test_basic_auth_str_is_always_native[\\xd0\\xb8\\xd0\\xbc\\xd1\\x8f-\\xd0\\xbf\\xd0\\xb0\\xd1\\x80\\xd0\\xbe\\xd0\\xbb\\xd1\\x8c-Basic",
                            "tests/test_requests.py::TestRequests::test_proxy_auth",
                            "tests/test_requests.py::TestRequests::test_proxy_auth_empty_pass",
                            "tests/test_requests.py::TestRequests::test_response_without_release_conn",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_init[cid0]",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_init[cid1]",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_init[cid2]",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_docstring_example",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_len",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_getitem",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_fixes_649",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_delitem",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_contains",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_get",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_update",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_update_retains_unchanged",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_iter",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_equality",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_setdefault",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_lower_items",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_preserve_key_case",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_preserve_last_key_case",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_copy",
                            "tests/test_requests.py::TestMorselToCookieExpires::test_expires_valid_str",
                            "tests/test_requests.py::TestMorselToCookieExpires::test_expires_invalid_int[100-TypeError]",
                            "tests/test_requests.py::TestMorselToCookieExpires::test_expires_invalid_int[woops-ValueError]",
                            "tests/test_requests.py::TestMorselToCookieExpires::test_expires_none",
                            "tests/test_requests.py::TestMorselToCookieMaxAge::test_max_age_valid_int",
                            "tests/test_requests.py::TestMorselToCookieMaxAge::test_max_age_invalid_str",
                            "tests/test_requests.py::TestTimeout::test_connect_timeout[timeout0]",
                            "tests/test_requests.py::TestTimeout::test_connect_timeout[timeout1]",
                            "tests/test_requests.py::TestTimeout::test_total_timeout_connect[timeout0]",
                            "tests/test_requests.py::TestTimeout::test_total_timeout_connect[timeout1]",
                            "tests/test_requests.py::test_json_encodes_as_bytes",
                            "tests/test_requests.py::test_proxy_env_vars_override_default[http_proxy-http://example.com-socks5://proxy.com:9876]",
                            "tests/test_requests.py::test_proxy_env_vars_override_default[https_proxy-https://example.com-socks5://proxy.com:9876]",
                            "tests/test_requests.py::test_proxy_env_vars_override_default[all_proxy-http://example.com-socks5://proxy.com:9876]",
                            "tests/test_requests.py::test_proxy_env_vars_override_default[all_proxy-https://example.com-socks5://proxy.com:9876]",
                            "tests/test_requests.py::test_data_argument_accepts_tuples[data0]",
                            "tests/test_requests.py::test_data_argument_accepts_tuples[data1]",
                            "tests/test_requests.py::test_data_argument_accepts_tuples[data2]",
                            "tests/test_requests.py::test_prepared_copy[None]",
                            "tests/test_requests.py::test_prepared_copy[kwargs1]",
                            "tests/test_requests.py::test_prepared_copy[kwargs2]",
                            "tests/test_requests.py::test_prepared_copy[kwargs3]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://google.com-http://google.com/]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://\\u30b8\\u30a7\\u30fc\\u30d4\\u30fc\\u30cb\\u30c3\\u30af.jp-http://xn--hckqz9bzb1cyrb.jp/]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://xn--n3h.net/-http://xn--n3h.net/0]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://\\xe3\\x82\\xb8\\xe3\\x82\\xa7\\xe3\\x83\\xbc\\xe3\\x83\\x94\\xe3\\x83\\xbc\\xe3\\x83\\x8b\\xe3\\x83\\x83\\xe3\\x82\\xaf.jp-http://xn--hckqz9bzb1cyrb.jp/]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://stra\\xdfe.de/stra\\xdfe-http://xn--strae-oqa.de/stra%C3%9Fe]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://stra\\xc3\\x9fe.de/stra\\xc3\\x9fe-http://xn--strae-oqa.de/stra%C3%9Fe]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://K\\xf6nigsg\\xe4\\xdfchen.de/stra\\xdfe-http://xn--knigsgchen-b4a3dun.de/stra%C3%9Fe]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://K\\xc3\\xb6nigsg\\xc3\\xa4\\xc3\\x9fchen.de/stra\\xc3\\x9fe-http://xn--knigsgchen-b4a3dun.de/stra%C3%9Fe]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://xn--n3h.net/-http://xn--n3h.net/1]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://[1200:0000:ab00:1234:0000:2552:7777:1313]:12345/-http://[1200:0000:ab00:1234:0000:2552:7777:1313]:12345/0]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://[1200:0000:ab00:1234:0000:2552:7777:1313]:12345/-http://[1200:0000:ab00:1234:0000:2552:7777:1313]:12345/1]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_bad_url[http://*.google.com0]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_bad_url[http://*0]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_bad_url[http://*.google.com1]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_bad_url[http://*1]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_bad_url[http://\\u2603.net/]",
                            "tests/test_requests.py::TestPreparingURLs::test_url_mutation[http+unix://%2Fvar%2Frun%2Fsocket/path%7E-http+unix://%2Fvar%2Frun%2Fsocket/path~0]",
                            "tests/test_requests.py::TestPreparingURLs::test_url_mutation[http+unix://%2Fvar%2Frun%2Fsocket/path%7E-http+unix://%2Fvar%2Frun%2Fsocket/path~1]",
                            "tests/test_requests.py::TestPreparingURLs::test_url_mutation[mailto:user@example.org-mailto:user@example.org0]",
                            "tests/test_requests.py::TestPreparingURLs::test_url_mutation[mailto:user@example.org-mailto:user@example.org1]",
                            "tests/test_requests.py::TestPreparingURLs::test_url_mutation[data:SSDimaUgUHl0aG9uIQ==-data:SSDimaUgUHl0aG9uIQ==]",
                            "tests/test_requests.py::TestPreparingURLs::test_parameters_for_nonstandard_schemes[http+unix://%2Fvar%2Frun%2Fsocket/path-params0-http+unix://%2Fvar%2Frun%2Fsocket/path?key=value]",
                            "tests/test_requests.py::TestPreparingURLs::test_parameters_for_nonstandard_schemes[http+unix://%2Fvar%2Frun%2Fsocket/path-params1-http+unix://%2Fvar%2Frun%2Fsocket/path?key=value]",
                            "tests/test_requests.py::TestPreparingURLs::test_parameters_for_nonstandard_schemes[mailto:user@example.org-params2-mailto:user@example.org]",
                            "tests/test_requests.py::TestPreparingURLs::test_parameters_for_nonstandard_schemes[mailto:user@example.org-params3-mailto:user@example.org]"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "sphinx-doc__sphinx-10504.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "tests/test_transforms_post_transforms.py::test_keyboard_hyphen_spaces"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "tests/test_transforms_post_transforms.py::test_nitpicky_warning",
                            "tests/test_transforms_post_transforms.py::test_missing_reference",
                            "tests/test_transforms_post_transforms.py::test_missing_reference_conditional_pending_xref"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "pytest-dev__pytest-8641.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "testing/logging/test_formatter.py::test_coloredlogformatter_with_width_precision"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "testing/logging/test_formatter.py::test_coloredlogformatter",
                            "testing/logging/test_formatter.py::test_multiline_message",
                            "testing/logging/test_formatter.py::test_colored_short_level"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "sphinx-doc__sphinx-11544.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "tests/test_build_linkcheck.py::test_too_many_requests_retry_after_HTTP_date"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "tests/test_build_linkcheck.py::test_defaults",
                            "tests/test_build_linkcheck.py::test_check_link_response_only",
                            "tests/test_build_linkcheck.py::test_too_many_retries",
                            "tests/test_build_linkcheck.py::test_raw_node",
                            "tests/test_build_linkcheck.py::test_anchors_ignored",
                            "tests/test_build_linkcheck.py::test_anchors_ignored_for_url",
                            "tests/test_build_linkcheck.py::test_raises_for_invalid_status",
                            "tests/test_build_linkcheck.py::test_auth_header_uses_first_match",
                            "tests/test_build_linkcheck.py::test_auth_header_no_match",
                            "tests/test_build_linkcheck.py::test_linkcheck_request_headers",
                            "tests/test_build_linkcheck.py::test_linkcheck_request_headers_no_slash",
                            "tests/test_build_linkcheck.py::test_linkcheck_request_headers_default",
                            "tests/test_build_linkcheck.py::test_follows_redirects_on_HEAD",
                            "tests/test_build_linkcheck.py::test_follows_redirects_on_GET",
                            "tests/test_build_linkcheck.py::test_linkcheck_allowed_redirects",
                            "tests/test_build_linkcheck.py::test_invalid_ssl",
                            "tests/test_build_linkcheck.py::test_connect_to_selfsigned_fails",
                            "tests/test_build_linkcheck.py::test_connect_to_selfsigned_with_tls_verify_false",
                            "tests/test_build_linkcheck.py::test_connect_to_selfsigned_with_tls_cacerts",
                            "tests/test_build_linkcheck.py::test_connect_to_selfsigned_with_requests_env_var",
                            "tests/test_build_linkcheck.py::test_connect_to_selfsigned_nonexistent_cert_file",
                            "tests/test_build_linkcheck.py::test_TooManyRedirects_on_HEAD",
                            "tests/test_build_linkcheck.py::test_too_many_requests_retry_after_int_delay",
                            "tests/test_build_linkcheck.py::test_too_many_requests_retry_after_without_header",
                            "tests/test_build_linkcheck.py::test_too_many_requests_user_timeout",
                            "tests/test_build_linkcheck.py::test_limit_rate_default_sleep",
                            "tests/test_build_linkcheck.py::test_limit_rate_user_max_delay",
                            "tests/test_build_linkcheck.py::test_limit_rate_doubles_previous_wait_time",
                            "tests/test_build_linkcheck.py::test_limit_rate_clips_wait_time_to_max_time",
                            "tests/test_build_linkcheck.py::test_limit_rate_bails_out_after_waiting_max_time",
                            "tests/test_build_linkcheck.py::test_connection_contention",
                            "tests/test_build_linkcheck.py::test_get_after_head_raises_connection_error",
                            "tests/test_build_linkcheck.py::test_linkcheck_exclude_documents"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "sphinx-doc__sphinx-7501.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "tests/test_domain_std.py::test_glossary"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "tests/test_domain_std.py::test_process_doc_handle_figure_caption",
                            "tests/test_domain_std.py::test_process_doc_handle_table_title",
                            "tests/test_domain_std.py::test_get_full_qualified_name",
                            "tests/test_domain_std.py::test_glossary_warning",
                            "tests/test_domain_std.py::test_glossary_comment",
                            "tests/test_domain_std.py::test_glossary_comment2",
                            "tests/test_domain_std.py::test_glossary_sorted",
                            "tests/test_domain_std.py::test_glossary_alphanumeric",
                            "tests/test_domain_std.py::test_glossary_conflicted_labels",
                            "tests/test_domain_std.py::test_cmdoption",
                            "tests/test_domain_std.py::test_multiple_cmdoptions",
                            "tests/test_domain_std.py::test_disabled_docref"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "sympy__sympy-18763.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "test_latex_subs"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "test_printmethod",
                            "test_latex_basic",
                            "test_latex_builtins",
                            "test_latex_SingularityFunction",
                            "test_latex_cycle",
                            "test_latex_permutation",
                            "test_latex_Float",
                            "test_latex_vector_expressions",
                            "test_latex_symbols",
                            "test_latex_functions",
                            "test_function_subclass_different_name",
                            "test_hyper_printing",
                            "test_latex_bessel",
                            "test_latex_fresnel",
                            "test_latex_brackets",
                            "test_latex_indexed",
                            "test_latex_derivatives",
                            "test_latex_integrals",
                            "test_latex_sets",
                            "test_latex_SetExpr",
                            "test_latex_Range",
                            "test_latex_sequences",
                            "test_latex_FourierSeries",
                            "test_latex_FormalPowerSeries",
                            "test_latex_intervals",
                            "test_latex_AccumuBounds",
                            "test_latex_emptyset",
                            "test_latex_universalset",
                            "test_latex_commutator",
                            "test_latex_union",
                            "test_latex_intersection",
                            "test_latex_symmetric_difference",
                            "test_latex_Complement",
                            "test_latex_productset",
                            "test_set_operators_parenthesis",
                            "test_latex_Complexes",
                            "test_latex_Naturals",
                            "test_latex_Naturals0",
                            "test_latex_Integers",
                            "test_latex_ImageSet",
                            "test_latex_ConditionSet",
                            "test_latex_ComplexRegion",
                            "test_latex_Contains",
                            "test_latex_sum",
                            "test_latex_product",
                            "test_latex_limits",
                            "test_latex_log",
                            "test_issue_3568",
                            "test_latex",
                            "test_latex_dict",
                            "test_latex_list",
                            "test_latex_rational",
                            "test_latex_inverse",
                            "test_latex_DiracDelta",
                            "test_latex_Heaviside",
                            "test_latex_KroneckerDelta",
                            "test_latex_LeviCivita",
                            "test_mode",
                            "test_latex_mathieu",
                            "test_latex_Piecewise",
                            "test_latex_Matrix",
                            "test_latex_matrix_with_functions",
                            "test_latex_NDimArray",
                            "test_latex_mul_symbol",
                            "test_latex_issue_4381",
                            "test_latex_issue_4576",
                            "test_latex_pow_fraction",
                            "test_noncommutative",
                            "test_latex_order",
                            "test_latex_Lambda",
                            "test_latex_PolyElement",
                            "test_latex_FracElement",
                            "test_latex_Poly",
                            "test_latex_Poly_order",
                            "test_latex_ComplexRootOf",
                            "test_latex_RootSum",
                            "test_settings",
                            "test_latex_numbers",
                            "test_latex_euler",
                            "test_lamda",
                            "test_custom_symbol_names",
                            "test_matAdd",
                            "test_matMul",
                            "test_latex_MatrixSlice",
                            "test_latex_RandomDomain",
                            "test_PrettyPoly",
                            "test_integral_transforms",
                            "test_PolynomialRingBase",
                            "test_categories",
                            "test_Modules",
                            "test_QuotientRing",
                            "test_Tr",
                            "test_Adjoint",
                            "test_Transpose",
                            "test_Hadamard",
                            "test_ElementwiseApplyFunction",
                            "test_ZeroMatrix",
                            "test_OneMatrix",
                            "test_Identity",
                            "test_boolean_args_order",
                            "test_imaginary",
                            "test_builtins_without_args",
                            "test_latex_greek_functions",
                            "test_translate",
                            "test_other_symbols",
                            "test_modifiers",
                            "test_greek_symbols",
                            "test_fancyset_symbols",
                            "test_builtin_no_args",
                            "test_issue_6853",
                            "test_Mul",
                            "test_Pow",
                            "test_issue_7180",
                            "test_issue_8409",
                            "test_issue_7117",
                            "test_issue_15439",
                            "test_issue_2934",
                            "test_issue_10489",
                            "test_issue_12886",
                            "test_issue_13651",
                            "test_latex_UnevaluatedExpr",
                            "test_MatrixElement_printing",
                            "test_MatrixSymbol_printing",
                            "test_KroneckerProduct_printing",
                            "test_Quaternion_latex_printing",
                            "test_TensorProduct_printing",
                            "test_WedgeProduct_printing",
                            "test_issue_14041",
                            "test_issue_9216",
                            "test_latex_printer_tensor",
                            "test_multiline_latex",
                            "test_issue_15353",
                            "test_trace",
                            "test_print_basic",
                            "test_MatrixSymbol_bold",
                            "test_imaginary_unit",
                            "test_text_re_im",
                            "test_DiffGeomMethods",
                            "test_unit_printing",
                            "test_issue_17092",
                            "test_latex_decimal_separator"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "django__django-9003.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "test_join_reuse_order (queries.tests.Queries4Tests)"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "test_ticket15786 (queries.tests.Exclude15786)",
                            "test_no_extra_params (queries.tests.DefaultValuesInsertTest)",
                            "test_infinite_loop (queries.tests.ConditionalTests)",
                            "test_ticket7371 (queries.tests.CustomPkTests)",
                            "test_empty_string_promotion (queries.tests.EmptyStringPromotionTests)",
                            "#13227 -- If a queryset is already evaluated, it can still be used as a query arg",
                            "test_no_fields_cloning (queries.tests.CloneTests)",
                            "test_no_model_options_cloning (queries.tests.CloneTests)",
                            "test_ticket_7302 (queries.tests.EscapingTests)",
                            "test_21001 (queries.tests.EmptyStringsAsNullTest)",
                            "test_direct_exclude (queries.tests.EmptyStringsAsNullTest)",
                            "test_joined_exclude (queries.tests.EmptyStringsAsNullTest)",
                            "test_ticket_24605 (queries.tests.TestTicket24605)",
                            "test_ticket10432 (queries.tests.GeneratorExpressionTests)",
                            "test_tickets_3045_3288 (queries.tests.SelectRelatedTests)",
                            "test_ticket_20101 (queries.tests.Ticket20101Tests)",
                            "test_evaluated_proxy_count (queries.tests.ProxyQueryCleanupTest)",
                            "test_ticket14729 (queries.tests.RawQueriesTests)",
                            "test_ticket_24278 (queries.tests.TestTicket24279)",
                            "test_ticket7872 (queries.tests.DisjunctiveFilterTests)",
                            "test_ticket8283 (queries.tests.DisjunctiveFilterTests)",
                            "test_exists (queries.tests.ExistsSql)",
                            "test_ticket_18414 (queries.tests.ExistsSql)",
                            "test_invalid_order_by (queries.tests.QuerySetExceptionTests)",
                            "test_invalid_qs_list (queries.tests.QuerySetExceptionTests)",
                            "test_invalid_queryset_model (queries.tests.QuerySetExceptionTests)",
                            "test_iter_exceptions (queries.tests.QuerySetExceptionTests)",
                            "test_double_subquery_in (queries.tests.DoubleInSubqueryTests)",
                            "test_ticket22023 (queries.tests.Queries3Tests)",
                            "test_ticket7107 (queries.tests.Queries3Tests)",
                            "test_ticket8683 (queries.tests.Queries3Tests)",
                            "test_invalid_values (queries.tests.TestInvalidValuesRelation)",
                            "test_empty_full_handling_conjunction (queries.tests.WhereNodeTest)",
                            "test_empty_full_handling_disjunction (queries.tests.WhereNodeTest)",
                            "test_empty_nodes (queries.tests.WhereNodeTest)",
                            "test_ticket8597 (queries.tests.ComparisonTests)",
                            "test_annotated_ordering (queries.tests.QuerysetOrderedTests)",
                            "test_cleared_default_ordering (queries.tests.QuerysetOrderedTests)",
                            "test_explicit_ordering (queries.tests.QuerysetOrderedTests)",
                            "test_no_default_or_explicit_ordering (queries.tests.QuerysetOrderedTests)",
                            "test_order_by_extra (queries.tests.QuerysetOrderedTests)",
                            "test_ticket_12807 (queries.tests.Ticket12807Tests)",
                            "test_reverse_trimming (queries.tests.ReverseJoinTrimmingTest)",
                            "test_emptyqueryset_values (queries.tests.EmptyQuerySetTests)",
                            "test_ticket_19151 (queries.tests.EmptyQuerySetTests)",
                            "test_values_subquery (queries.tests.EmptyQuerySetTests)",
                            "test_extra_multiple_select_params_values_order_by (queries.tests.ValuesQuerysetTests)",
                            "test_extra_select_params_values_order_in_extra (queries.tests.ValuesQuerysetTests)",
                            "test_extra_values (queries.tests.ValuesQuerysetTests)",
                            "test_extra_values_list (queries.tests.ValuesQuerysetTests)",
                            "test_extra_values_order_in_extra (queries.tests.ValuesQuerysetTests)",
                            "test_extra_values_order_multiple (queries.tests.ValuesQuerysetTests)",
                            "test_extra_values_order_twice (queries.tests.ValuesQuerysetTests)",
                            "test_field_error_values_list (queries.tests.ValuesQuerysetTests)",
                            "test_flat_extra_values_list (queries.tests.ValuesQuerysetTests)",
                            "test_flat_values_list (queries.tests.ValuesQuerysetTests)",
                            "test_join_already_in_query (queries.tests.NullableRelOrderingTests)",
                            "test_ticket10028 (queries.tests.NullableRelOrderingTests)",
                            "test_ticket_18785 (queries.tests.Ticket18785Tests)",
                            "test_ticket_21787 (queries.tests.ForeignKeyToBaseExcludeTests)",
                            "test_ticket_21203 (queries.tests.Ticket21203Tests)",
                            "test_exclude_plain (queries.tests.ExcludeTest17600)",
                            "test_exclude_plain_distinct (queries.tests.ExcludeTest17600)",
                            "test_exclude_with_q_is_equal_to_plain_exclude (queries.tests.ExcludeTest17600)",
                            "test_exclude_with_q_is_equal_to_plain_exclude_variation (queries.tests.ExcludeTest17600)",
                            "test_exclude_with_q_object_distinct (queries.tests.ExcludeTest17600)",
                            "test_exclude_with_q_object_no_distinct (queries.tests.ExcludeTest17600)",
                            "test_primary_key (queries.tests.IsNullTests)",
                            "test_to_field (queries.tests.IsNullTests)",
                            "test_ticket_21879 (queries.tests.ReverseM2MCustomPkTests)",
                            "test_fk_reuse (queries.tests.JoinReuseTest)",
                            "test_fk_reuse_annotation (queries.tests.JoinReuseTest)",
                            "test_fk_reuse_disjunction (queries.tests.JoinReuseTest)",
                            "test_fk_reuse_order_by (queries.tests.JoinReuseTest)",
                            "test_fk_reuse_select_related (queries.tests.JoinReuseTest)",
                            "test_revfk_noreuse (queries.tests.JoinReuseTest)",
                            "test_revo2o_reuse (queries.tests.JoinReuseTest)",
                            "test_ticket_14056 (queries.tests.Ticket14056Tests)",
                            "test_values_in_subquery (queries.tests.ValuesSubqueryTests)",
                            "test_ticket_22429 (queries.tests.Ticket22429Tests)",
                            "test_ticket_19964 (queries.tests.RelabelCloneTest)",
                            "test_ticket7778 (queries.tests.SubclassFKTests)",
                            "test_empty_resultset_sql (queries.tests.WeirdQuerysetSlicingTests)",
                            "test_empty_sliced_subquery (queries.tests.WeirdQuerysetSlicingTests)",
                            "test_empty_sliced_subquery_exclude (queries.tests.WeirdQuerysetSlicingTests)",
                            "test_tickets_7698_10202 (queries.tests.WeirdQuerysetSlicingTests)",
                            "test_zero_length_values_slicing (queries.tests.WeirdQuerysetSlicingTests)",
                            "test_ticket_20788 (queries.tests.Ticket20788Tests)",
                            "test_can_combine_queries_using_and_and_or_operators (queries.tests.QuerySetSupportsPythonIdioms)",
                            "test_can_get_items_using_index_and_slice_notation (queries.tests.QuerySetSupportsPythonIdioms)",
                            "test_can_get_number_of_items_in_queryset_using_standard_len (queries.tests.QuerySetSupportsPythonIdioms)",
                            "test_slicing_can_slice_again_after_slicing (queries.tests.QuerySetSupportsPythonIdioms)",
                            "test_slicing_cannot_combine_queries_once_sliced (queries.tests.QuerySetSupportsPythonIdioms)",
                            "test_slicing_cannot_filter_queryset_once_sliced (queries.tests.QuerySetSupportsPythonIdioms)",
                            "test_slicing_cannot_reorder_queryset_once_sliced (queries.tests.QuerySetSupportsPythonIdioms)",
                            "hint: inverting your ordering might do what you need",
                            "test_slicing_with_steps_can_be_used (queries.tests.QuerySetSupportsPythonIdioms)",
                            "test_slicing_with_tests_is_not_lazy (queries.tests.QuerySetSupportsPythonIdioms)",
                            "test_slicing_without_step_is_lazy (queries.tests.QuerySetSupportsPythonIdioms)",
                            "test_double_exclude (queries.tests.NullInExcludeTest)",
                            "test_null_in_exclude_qs (queries.tests.NullInExcludeTest)",
                            "test_non_nullable_fk_not_promoted (queries.tests.ValuesJoinPromotionTests)",
                            "test_ticket_21376 (queries.tests.ValuesJoinPromotionTests)",
                            "test_values_no_promotion_for_existing (queries.tests.ValuesJoinPromotionTests)",
                            "test_ticket_20955 (queries.tests.Ticket20955Tests)",
                            "test_correct_lookup (queries.tests.RelatedLookupTypeTests)",
                            "test_values_queryset_lookup (queries.tests.RelatedLookupTypeTests)",
                            "test_wrong_backward_lookup (queries.tests.RelatedLookupTypeTests)",
                            "test_wrong_type_lookup (queries.tests.RelatedLookupTypeTests)",
                            "test_ticket12239 (queries.tests.Queries2Tests)",
                            "test_ticket4289 (queries.tests.Queries2Tests)",
                            "test_ticket7759 (queries.tests.Queries2Tests)",
                            "test_ticket_23605 (queries.tests.Ticket23605Tests)",
                            "test_nested_queries_sql (queries.tests.Queries6Tests)",
                            "test_parallel_iterators (queries.tests.Queries6Tests)",
                            "test_ticket3739 (queries.tests.Queries6Tests)",
                            "test_ticket_11320 (queries.tests.Queries6Tests)",
                            "test_tickets_8921_9188 (queries.tests.Queries6Tests)",
                            "test_exclude_many_to_many (queries.tests.ManyToManyExcludeTest)",
                            "test_ticket_12823 (queries.tests.ManyToManyExcludeTest)",
                            "test_ticket14511 (queries.tests.ExcludeTests)",
                            "test_to_field (queries.tests.ExcludeTests)",
                            "test_disjunction_promotion1 (queries.tests.DisjunctionPromotionTests)",
                            "test_disjunction_promotion2 (queries.tests.DisjunctionPromotionTests)",
                            "test_disjunction_promotion3 (queries.tests.DisjunctionPromotionTests)",
                            "test_disjunction_promotion3_demote (queries.tests.DisjunctionPromotionTests)",
                            "test_disjunction_promotion4 (queries.tests.DisjunctionPromotionTests)",
                            "test_disjunction_promotion4_demote (queries.tests.DisjunctionPromotionTests)",
                            "test_disjunction_promotion5_demote (queries.tests.DisjunctionPromotionTests)",
                            "test_disjunction_promotion6 (queries.tests.DisjunctionPromotionTests)",
                            "test_disjunction_promotion7 (queries.tests.DisjunctionPromotionTests)",
                            "test_disjunction_promotion_fexpression (queries.tests.DisjunctionPromotionTests)",
                            "test_disjunction_promotion_select_related (queries.tests.DisjunctionPromotionTests)",
                            "Subselects honor any manual ordering",
                            "test_related_sliced_subquery (queries.tests.SubqueryTests)",
                            "test_slice_subquery_and_query (queries.tests.SubqueryTests)",
                            "Delete queries can safely contain sliced subqueries",
                            "test_in_query (queries.tests.ToFieldTests)",
                            "test_in_subquery (queries.tests.ToFieldTests)",
                            "test_nested_in_subquery (queries.tests.ToFieldTests)",
                            "test_recursive_fk (queries.tests.ToFieldTests)",
                            "test_recursive_fk_reverse (queries.tests.ToFieldTests)",
                            "test_reverse_in (queries.tests.ToFieldTests)",
                            "test_single_object (queries.tests.ToFieldTests)",
                            "test_single_object_reverse (queries.tests.ToFieldTests)",
                            "test_extra_select_literal_percent_s (queries.tests.Queries5Tests)",
                            "test_ordering (queries.tests.Queries5Tests)",
                            "test_ticket5261 (queries.tests.Queries5Tests)",
                            "test_ticket7045 (queries.tests.Queries5Tests)",
                            "test_ticket7256 (queries.tests.Queries5Tests)",
                            "test_ticket9848 (queries.tests.Queries5Tests)",
                            "test_AB_ACB (queries.tests.UnionTests)",
                            "test_A_AB (queries.tests.UnionTests)",
                            "test_A_AB2 (queries.tests.UnionTests)",
                            "test_BAB_BAC (queries.tests.UnionTests)",
                            "test_BAB_BACB (queries.tests.UnionTests)",
                            "test_BA_BCA__BAB_BAC_BCA (queries.tests.UnionTests)",
                            "test_isnull_filter_promotion (queries.tests.NullJoinPromotionOrTest)",
                            "test_null_join_demotion (queries.tests.NullJoinPromotionOrTest)",
                            "test_ticket_17886 (queries.tests.NullJoinPromotionOrTest)",
                            "test_ticket_21366 (queries.tests.NullJoinPromotionOrTest)",
                            "test_ticket_21748 (queries.tests.NullJoinPromotionOrTest)",
                            "test_ticket_21748_complex_filter (queries.tests.NullJoinPromotionOrTest)",
                            "test_ticket_21748_double_negated_and (queries.tests.NullJoinPromotionOrTest)",
                            "test_ticket_21748_double_negated_or (queries.tests.NullJoinPromotionOrTest)",
                            "test_combine_join_reuse (queries.tests.Queries4Tests)",
                            "test_order_by_resetting (queries.tests.Queries4Tests)",
                            "test_order_by_reverse_fk (queries.tests.Queries4Tests)",
                            "test_ticket10181 (queries.tests.Queries4Tests)",
                            "test_ticket11811 (queries.tests.Queries4Tests)",
                            "test_ticket14876 (queries.tests.Queries4Tests)",
                            "test_ticket15316_exclude_false (queries.tests.Queries4Tests)",
                            "test_ticket15316_exclude_true (queries.tests.Queries4Tests)",
                            "test_ticket15316_filter_false (queries.tests.Queries4Tests)",
                            "test_ticket15316_filter_true (queries.tests.Queries4Tests)",
                            "test_ticket15316_one2one_exclude_false (queries.tests.Queries4Tests)",
                            "test_ticket15316_one2one_exclude_true (queries.tests.Queries4Tests)",
                            "test_ticket15316_one2one_filter_false (queries.tests.Queries4Tests)",
                            "test_ticket15316_one2one_filter_true (queries.tests.Queries4Tests)",
                            "test_ticket24525 (queries.tests.Queries4Tests)",
                            "test_ticket7095 (queries.tests.Queries4Tests)",
                            "test_avoid_infinite_loop_on_too_many_subqueries (queries.tests.Queries1Tests)",
                            "test_deferred_load_qs_pickling (queries.tests.Queries1Tests)",
                            "test_double_exclude (queries.tests.Queries1Tests)",
                            "test_error_raised_on_filter_with_dictionary (queries.tests.Queries1Tests)",
                            "test_exclude (queries.tests.Queries1Tests)",
                            "test_exclude_in (queries.tests.Queries1Tests)",
                            "test_get_clears_ordering (queries.tests.Queries1Tests)",
                            "test_heterogeneous_qs_combination (queries.tests.Queries1Tests)",
                            "test_lookup_constraint_fielderror (queries.tests.Queries1Tests)",
                            "test_nested_exclude (queries.tests.Queries1Tests)",
                            "test_order_by_join_unref (queries.tests.Queries1Tests)",
                            "test_order_by_tables (queries.tests.Queries1Tests)",
                            "test_reasonable_number_of_subq_aliases (queries.tests.Queries1Tests)",
                            "test_subquery_condition (queries.tests.Queries1Tests)",
                            "test_ticket10205 (queries.tests.Queries1Tests)",
                            "test_ticket10432 (queries.tests.Queries1Tests)",
                            "test_ticket1050 (queries.tests.Queries1Tests)",
                            "test_ticket10742 (queries.tests.Queries1Tests)",
                            "test_ticket17429 (queries.tests.Queries1Tests)",
                            "test_ticket1801 (queries.tests.Queries1Tests)",
                            "test_ticket19672 (queries.tests.Queries1Tests)",
                            "test_ticket2091 (queries.tests.Queries1Tests)",
                            "test_ticket2253 (queries.tests.Queries1Tests)",
                            "test_ticket2306 (queries.tests.Queries1Tests)",
                            "test_ticket2400 (queries.tests.Queries1Tests)",
                            "test_ticket2496 (queries.tests.Queries1Tests)",
                            "test_ticket2902 (queries.tests.Queries1Tests)",
                            "test_ticket3037 (queries.tests.Queries1Tests)",
                            "test_ticket3141 (queries.tests.Queries1Tests)",
                            "test_ticket4358 (queries.tests.Queries1Tests)",
                            "test_ticket4464 (queries.tests.Queries1Tests)",
                            "test_ticket4510 (queries.tests.Queries1Tests)",
                            "test_ticket6074 (queries.tests.Queries1Tests)",
                            "test_ticket6154 (queries.tests.Queries1Tests)",
                            "test_ticket6981 (queries.tests.Queries1Tests)",
                            "test_ticket7076 (queries.tests.Queries1Tests)",
                            "test_ticket7096 (queries.tests.Queries1Tests)",
                            "test_ticket7098 (queries.tests.Queries1Tests)",
                            "test_ticket7155 (queries.tests.Queries1Tests)",
                            "test_ticket7181 (queries.tests.Queries1Tests)",
                            "test_ticket7235 (queries.tests.Queries1Tests)",
                            "test_ticket7277 (queries.tests.Queries1Tests)",
                            "test_ticket7323 (queries.tests.Queries1Tests)",
                            "test_ticket7378 (queries.tests.Queries1Tests)",
                            "test_ticket7791 (queries.tests.Queries1Tests)",
                            "test_ticket7813 (queries.tests.Queries1Tests)",
                            "test_ticket8439 (queries.tests.Queries1Tests)",
                            "test_ticket9411 (queries.tests.Queries1Tests)",
                            "test_ticket9926 (queries.tests.Queries1Tests)",
                            "test_ticket9985 (queries.tests.Queries1Tests)",
                            "test_ticket9997 (queries.tests.Queries1Tests)",
                            "test_ticket_10790_1 (queries.tests.Queries1Tests)",
                            "test_ticket_10790_2 (queries.tests.Queries1Tests)",
                            "test_ticket_10790_3 (queries.tests.Queries1Tests)",
                            "test_ticket_10790_4 (queries.tests.Queries1Tests)",
                            "test_ticket_10790_5 (queries.tests.Queries1Tests)",
                            "test_ticket_10790_6 (queries.tests.Queries1Tests)",
                            "test_ticket_10790_7 (queries.tests.Queries1Tests)",
                            "test_ticket_10790_8 (queries.tests.Queries1Tests)",
                            "test_ticket_10790_combine (queries.tests.Queries1Tests)",
                            "test_ticket_20250 (queries.tests.Queries1Tests)",
                            "test_tickets_1878_2939 (queries.tests.Queries1Tests)",
                            "test_tickets_2076_7256 (queries.tests.Queries1Tests)",
                            "test_tickets_2080_3592 (queries.tests.Queries1Tests)",
                            "test_tickets_2874_3002 (queries.tests.Queries1Tests)",
                            "test_tickets_4088_4306 (queries.tests.Queries1Tests)",
                            "test_tickets_5321_7070 (queries.tests.Queries1Tests)",
                            "test_tickets_5324_6704 (queries.tests.Queries1Tests)",
                            "test_tickets_6180_6203 (queries.tests.Queries1Tests)",
                            "test_tickets_7087_12242 (queries.tests.Queries1Tests)",
                            "test_tickets_7204_7506 (queries.tests.Queries1Tests)",
                            "test_tickets_7448_7707 (queries.tests.Queries1Tests)"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "sympy__sympy-19601.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "test_collect_pr19431"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "test_radsimp",
                            "test_radsimp_issue_3214",
                            "test_collect_1",
                            "test_collect_2",
                            "test_collect_3",
                            "test_collect_4",
                            "test_collect_5",
                            "test_collect_D",
                            "test_collect_func",
                            "test_collect_order",
                            "test_rcollect",
                            "test_collect_D_0",
                            "test_collect_Wild",
                            "test_collect_const",
                            "test_issue_13143",
                            "test_issue_6097",
                            "test_fraction_expand",
                            "test_fraction",
                            "test_issue_5615",
                            "test_issue_5933",
                            "test_issue_14608",
                            "test_collect_abs"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "astropy__astropy-13033.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "astropy/timeseries/tests/test_sampled.py::test_required_columns"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "astropy/timeseries/tests/test_sampled.py::test_empty_initialization",
                            "astropy/timeseries/tests/test_sampled.py::test_empty_initialization_invalid",
                            "astropy/timeseries/tests/test_sampled.py::test_initialize_only_time",
                            "astropy/timeseries/tests/test_sampled.py::test_initialization_with_data",
                            "astropy/timeseries/tests/test_sampled.py::test_initialize_only_data",
                            "astropy/timeseries/tests/test_sampled.py::test_initialization_with_table",
                            "astropy/timeseries/tests/test_sampled.py::test_initialization_missing_time_delta",
                            "astropy/timeseries/tests/test_sampled.py::test_initialization_invalid_time_and_time_start",
                            "astropy/timeseries/tests/test_sampled.py::test_initialization_invalid_time_delta",
                            "astropy/timeseries/tests/test_sampled.py::test_initialization_with_time_in_data",
                            "astropy/timeseries/tests/test_sampled.py::test_initialization_n_samples",
                            "astropy/timeseries/tests/test_sampled.py::test_initialization_length_mismatch",
                            "astropy/timeseries/tests/test_sampled.py::test_initialization_invalid_both_time_and_time_delta",
                            "astropy/timeseries/tests/test_sampled.py::test_fold",
                            "astropy/timeseries/tests/test_sampled.py::test_fold_invalid_options",
                            "astropy/timeseries/tests/test_sampled.py::test_read_time_missing",
                            "astropy/timeseries/tests/test_sampled.py::test_read_time_wrong",
                            "astropy/timeseries/tests/test_sampled.py::test_read",
                            "astropy/timeseries/tests/test_sampled.py::test_periodogram[BoxLeastSquares]",
                            "astropy/timeseries/tests/test_sampled.py::test_periodogram[LombScargle]"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "django__django-10426.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "test_squashmigrations_initial_attribute (migrations.test_commands.SquashMigrationsTests)"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "test_makemigrations_app_name_specified_as_label (migrations.test_commands.AppLabelErrorTests)",
                            "test_makemigrations_nonexistent_app_label (migrations.test_commands.AppLabelErrorTests)",
                            "test_migrate_app_name_specified_as_label (migrations.test_commands.AppLabelErrorTests)",
                            "test_migrate_nonexistent_app_label (migrations.test_commands.AppLabelErrorTests)",
                            "test_sqlmigrate_app_name_specified_as_label (migrations.test_commands.AppLabelErrorTests)",
                            "test_sqlmigrate_nonexistent_app_label (migrations.test_commands.AppLabelErrorTests)",
                            "test_squashmigrations_app_name_specified_as_label (migrations.test_commands.AppLabelErrorTests)",
                            "test_squashmigrations_nonexistent_app_label (migrations.test_commands.AppLabelErrorTests)",
                            "--squashed-name specifies the new migration's name.",
                            "--squashed-name also works if a start migration is omitted.",
                            "test_squashmigrations_invalid_start (migrations.test_commands.SquashMigrationsTests)",
                            "test_squashmigrations_squashes (migrations.test_commands.SquashMigrationsTests)",
                            "test_squashmigrations_valid_start (migrations.test_commands.SquashMigrationsTests)",
                            "test_ticket_23799_squashmigrations_no_optimize (migrations.test_commands.SquashMigrationsTests)",
                            "test_failing_migration (migrations.test_commands.MakeMigrationsTests)",
                            "test_files_content (migrations.test_commands.MakeMigrationsTests)",
                            "test_makemigration_merge_dry_run (migrations.test_commands.MakeMigrationsTests)",
                            "test_makemigration_merge_dry_run_verbosity_3 (migrations.test_commands.MakeMigrationsTests)",
                            "test_makemigrations_auto_now_add_interactive (migrations.test_commands.MakeMigrationsTests)",
                            "test_makemigrations_check (migrations.test_commands.MakeMigrationsTests)",
                            "test_makemigrations_conflict_exit (migrations.test_commands.MakeMigrationsTests)",
                            "test_makemigrations_consistency_checks_respect_routers (migrations.test_commands.MakeMigrationsTests)",
                            "test_makemigrations_default_merge_name (migrations.test_commands.MakeMigrationsTests)",
                            "test_makemigrations_disabled_migrations_for_app (migrations.test_commands.MakeMigrationsTests)",
                            "test_makemigrations_dry_run (migrations.test_commands.MakeMigrationsTests)",
                            "test_makemigrations_dry_run_verbosity_3 (migrations.test_commands.MakeMigrationsTests)",
                            "test_makemigrations_empty_connections (migrations.test_commands.MakeMigrationsTests)",
                            "test_makemigrations_empty_migration (migrations.test_commands.MakeMigrationsTests)",
                            "test_makemigrations_empty_no_app_specified (migrations.test_commands.MakeMigrationsTests)",
                            "test_makemigrations_handle_merge (migrations.test_commands.MakeMigrationsTests)",
                            "test_makemigrations_inconsistent_history (migrations.test_commands.MakeMigrationsTests)",
                            "test_makemigrations_interactive_accept (migrations.test_commands.MakeMigrationsTests)",
                            "test_makemigrations_interactive_by_default (migrations.test_commands.MakeMigrationsTests)",
                            "test_makemigrations_interactive_reject (migrations.test_commands.MakeMigrationsTests)",
                            "test_makemigrations_merge_dont_output_dependency_operations (migrations.test_commands.MakeMigrationsTests)",
                            "test_makemigrations_merge_no_conflict (migrations.test_commands.MakeMigrationsTests)",
                            "test_makemigrations_migration_path_output (migrations.test_commands.MakeMigrationsTests)",
                            "test_makemigrations_migration_path_output_valueerror (migrations.test_commands.MakeMigrationsTests)",
                            "test_makemigrations_migrations_announce (migrations.test_commands.MakeMigrationsTests)",
                            "test_makemigrations_migrations_modules_nonexistent_toplevel_package (migrations.test_commands.MakeMigrationsTests)",
                            "test_makemigrations_migrations_modules_path_not_exist (migrations.test_commands.MakeMigrationsTests)",
                            "test_makemigrations_no_apps_initial (migrations.test_commands.MakeMigrationsTests)",
                            "test_makemigrations_no_changes (migrations.test_commands.MakeMigrationsTests)",
                            "test_makemigrations_no_changes_no_apps (migrations.test_commands.MakeMigrationsTests)",
                            "test_makemigrations_no_common_ancestor (migrations.test_commands.MakeMigrationsTests)",
                            "Migration directories without an __init__.py file are allowed.",
                            "test_makemigrations_non_interactive_no_field_rename (migrations.test_commands.MakeMigrationsTests)",
                            "test_makemigrations_non_interactive_no_model_rename (migrations.test_commands.MakeMigrationsTests)",
                            "test_makemigrations_non_interactive_not_null_addition (migrations.test_commands.MakeMigrationsTests)",
                            "test_makemigrations_non_interactive_not_null_alteration (migrations.test_commands.MakeMigrationsTests)",
                            "test_makemigrations_order (migrations.test_commands.MakeMigrationsTests)",
                            "test_makemigrations_unspecified_app_with_conflict_merge (migrations.test_commands.MakeMigrationsTests)",
                            "test_makemigrations_unspecified_app_with_conflict_no_merge (migrations.test_commands.MakeMigrationsTests)",
                            "test_makemigrations_with_custom_name (migrations.test_commands.MakeMigrationsTests)",
                            "test_makemigrations_with_invalid_custom_name (migrations.test_commands.MakeMigrationsTests)",
                            "test_ambigious_prefix (migrations.test_commands.MigrateTests)",
                            "test_app_without_migrations (migrations.test_commands.MigrateTests)",
                            "test_migrate (migrations.test_commands.MigrateTests)",
                            "test_migrate_conflict_exit (migrations.test_commands.MigrateTests)",
                            "test_migrate_fake_initial (migrations.test_commands.MigrateTests)",
                            "test_migrate_fake_split_initial (migrations.test_commands.MigrateTests)",
                            "test_migrate_inconsistent_history (migrations.test_commands.MigrateTests)",
                            "test_migrate_initial_false (migrations.test_commands.MigrateTests)",
                            "Tests migrate --plan output.",
                            "test_migrate_record_replaced (migrations.test_commands.MigrateTests)",
                            "test_migrate_record_squashed (migrations.test_commands.MigrateTests)",
                            "test_migrate_syncdb_deferred_sql_executed_with_schemaeditor (migrations.test_commands.MigrateTests)",
                            "test_migrate_with_system_checks (migrations.test_commands.MigrateTests)",
                            "test_regression_22823_unmigrated_fk_to_migrated_model (migrations.test_commands.MigrateTests)",
                            "test_showmigrations_list (migrations.test_commands.MigrateTests)",
                            "test_showmigrations_no_migrations (migrations.test_commands.MigrateTests)",
                            "test_showmigrations_plan (migrations.test_commands.MigrateTests)",
                            "test_showmigrations_plan_multiple_app_labels (migrations.test_commands.MigrateTests)",
                            "test_showmigrations_plan_single_app_label (migrations.test_commands.MigrateTests)",
                            "test_showmigrations_plan_squashed (migrations.test_commands.MigrateTests)",
                            "test_sqlmigrate_backwards (migrations.test_commands.MigrateTests)",
                            "test_sqlmigrate_for_non_atomic_migration (migrations.test_commands.MigrateTests)",
                            "test_sqlmigrate_forwards (migrations.test_commands.MigrateTests)",
                            "test_unknown_prefix (migrations.test_commands.MigrateTests)"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "matplotlib__matplotlib-25129.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "lib/matplotlib/tests/test_widgets.py::test_MultiCursor[False-False]",
                            "lib/matplotlib/tests/test_widgets.py::test_MultiCursor[False-True]",
                            "lib/matplotlib/tests/test_widgets.py::test_MultiCursor[True-False]",
                            "lib/matplotlib/tests/test_widgets.py::test_MultiCursor[True-True]"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_selector[kwargs0]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_selector[kwargs1]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_selector[kwargs2]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_selector[kwargs3]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[0-10-0-10-data]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[0-10-0-10-pixels]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[0-10-1-10.5-data]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[0-10-1-10.5-pixels]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[0-10-1-11-data]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[0-10-1-11-pixels]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-10.5-0-10-data]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-10.5-0-10-pixels]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-10.5-1-10.5-data]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-10.5-1-10.5-pixels]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-10.5-1-11-data]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-10.5-1-11-pixels]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-11-0-10-data]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-11-0-10-pixels]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-11-1-10.5-data]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-11-1-10.5-pixels]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-11-1-11-data]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_minspan[1-11-1-11-pixels]",
                            "lib/matplotlib/tests/test_widgets.py::test_deprecation_selector_visible_attribute",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_drag[True-new_center0]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_drag[False-new_center1]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_selector_set_props_handle_props",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_resize",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_add_state",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_resize_center[True]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_resize_center[False]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_resize_square[True]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_resize_square[False]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_resize_square_center",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_rotate[RectangleSelector]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_rotate[EllipseSelector]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_add_remove_set",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_resize_square_center_aspect[False]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_resize_square_center_aspect[True]",
                            "lib/matplotlib/tests/test_widgets.py::test_ellipse",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_handles",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_selector_onselect[True]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_selector_onselect[False]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_selector_ignore_outside[True]",
                            "lib/matplotlib/tests/test_widgets.py::test_rectangle_selector_ignore_outside[False]",
                            "lib/matplotlib/tests/test_widgets.py::test_span_selector[horizontal-False-kwargs0]",
                            "lib/matplotlib/tests/test_widgets.py::test_span_selector[vertical-True-kwargs1]",
                            "lib/matplotlib/tests/test_widgets.py::test_span_selector[horizontal-False-kwargs2]",
                            "lib/matplotlib/tests/test_widgets.py::test_span_selector[horizontal-False-kwargs3]",
                            "lib/matplotlib/tests/test_widgets.py::test_span_selector_onselect[True]",
                            "lib/matplotlib/tests/test_widgets.py::test_span_selector_onselect[False]",
                            "lib/matplotlib/tests/test_widgets.py::test_span_selector_ignore_outside[True]",
                            "lib/matplotlib/tests/test_widgets.py::test_span_selector_ignore_outside[False]",
                            "lib/matplotlib/tests/test_widgets.py::test_span_selector_drag[True]",
                            "lib/matplotlib/tests/test_widgets.py::test_span_selector_drag[False]",
                            "lib/matplotlib/tests/test_widgets.py::test_span_selector_direction",
                            "lib/matplotlib/tests/test_widgets.py::test_span_selector_set_props_handle_props",
                            "lib/matplotlib/tests/test_widgets.py::test_selector_clear[span]",
                            "lib/matplotlib/tests/test_widgets.py::test_selector_clear[rectangle]",
                            "lib/matplotlib/tests/test_widgets.py::test_selector_clear_method[span]",
                            "lib/matplotlib/tests/test_widgets.py::test_selector_clear_method[rectangle]",
                            "lib/matplotlib/tests/test_widgets.py::test_span_selector_add_state",
                            "lib/matplotlib/tests/test_widgets.py::test_tool_line_handle",
                            "lib/matplotlib/tests/test_widgets.py::test_span_selector_bound[horizontal]",
                            "lib/matplotlib/tests/test_widgets.py::test_span_selector_bound[vertical]",
                            "lib/matplotlib/tests/test_widgets.py::test_snapping_values_span_selector",
                            "lib/matplotlib/tests/test_widgets.py::test_span_selector_snap",
                            "lib/matplotlib/tests/test_widgets.py::test_lasso_selector[kwargs0]",
                            "lib/matplotlib/tests/test_widgets.py::test_lasso_selector[kwargs1]",
                            "lib/matplotlib/tests/test_widgets.py::test_lasso_selector[kwargs2]",
                            "lib/matplotlib/tests/test_widgets.py::test_CheckButtons",
                            "lib/matplotlib/tests/test_widgets.py::test_TextBox[none]",
                            "lib/matplotlib/tests/test_widgets.py::test_TextBox[toolbar2]",
                            "lib/matplotlib/tests/test_widgets.py::test_TextBox[toolmanager]",
                            "lib/matplotlib/tests/test_widgets.py::test_check_radio_buttons_image[png]",
                            "lib/matplotlib/tests/test_widgets.py::test_radio_buttons[png]",
                            "lib/matplotlib/tests/test_widgets.py::test_radio_buttons_props[png]",
                            "lib/matplotlib/tests/test_widgets.py::test_radio_button_active_conflict",
                            "lib/matplotlib/tests/test_widgets.py::test_radio_buttons_activecolor_change[png]",
                            "lib/matplotlib/tests/test_widgets.py::test_check_buttons[png]",
                            "lib/matplotlib/tests/test_widgets.py::test_check_button_props[png]",
                            "lib/matplotlib/tests/test_widgets.py::test_check_buttons_rectangles[png]",
                            "lib/matplotlib/tests/test_widgets.py::test_check_buttons_lines[png]",
                            "lib/matplotlib/tests/test_widgets.py::test_slider_slidermin_slidermax_invalid",
                            "lib/matplotlib/tests/test_widgets.py::test_slider_slidermin_slidermax",
                            "lib/matplotlib/tests/test_widgets.py::test_slider_valmin_valmax",
                            "lib/matplotlib/tests/test_widgets.py::test_slider_valstep_snapping",
                            "lib/matplotlib/tests/test_widgets.py::test_slider_horizontal_vertical",
                            "lib/matplotlib/tests/test_widgets.py::test_slider_reset",
                            "lib/matplotlib/tests/test_widgets.py::test_range_slider[horizontal]",
                            "lib/matplotlib/tests/test_widgets.py::test_range_slider[vertical]",
                            "lib/matplotlib/tests/test_widgets.py::test_range_slider_same_init_values[horizontal]",
                            "lib/matplotlib/tests/test_widgets.py::test_range_slider_same_init_values[vertical]",
                            "lib/matplotlib/tests/test_widgets.py::test_polygon_selector[False]",
                            "lib/matplotlib/tests/test_widgets.py::test_polygon_selector[True]",
                            "lib/matplotlib/tests/test_widgets.py::test_polygon_selector_set_props_handle_props[False]",
                            "lib/matplotlib/tests/test_widgets.py::test_polygon_selector_set_props_handle_props[True]",
                            "lib/matplotlib/tests/test_widgets.py::test_rect_visibility[png]",
                            "lib/matplotlib/tests/test_widgets.py::test_rect_visibility[pdf]",
                            "lib/matplotlib/tests/test_widgets.py::test_polygon_selector_remove[False-1]",
                            "lib/matplotlib/tests/test_widgets.py::test_polygon_selector_remove[False-2]",
                            "lib/matplotlib/tests/test_widgets.py::test_polygon_selector_remove[False-3]",
                            "lib/matplotlib/tests/test_widgets.py::test_polygon_selector_remove[True-1]",
                            "lib/matplotlib/tests/test_widgets.py::test_polygon_selector_remove[True-2]",
                            "lib/matplotlib/tests/test_widgets.py::test_polygon_selector_remove[True-3]",
                            "lib/matplotlib/tests/test_widgets.py::test_polygon_selector_remove_first_point[False]",
                            "lib/matplotlib/tests/test_widgets.py::test_polygon_selector_remove_first_point[True]",
                            "lib/matplotlib/tests/test_widgets.py::test_polygon_selector_redraw[False]",
                            "lib/matplotlib/tests/test_widgets.py::test_polygon_selector_redraw[True]",
                            "lib/matplotlib/tests/test_widgets.py::test_polygon_selector_verts_setter[png-False]",
                            "lib/matplotlib/tests/test_widgets.py::test_polygon_selector_verts_setter[png-True]",
                            "lib/matplotlib/tests/test_widgets.py::test_polygon_selector_box"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "sympy__sympy-22914.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "test_PythonCodePrinter"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "test_PythonCodePrinter_standard",
                            "test_MpmathPrinter",
                            "test_NumPyPrinter",
                            "test_SciPyPrinter",
                            "test_pycode_reserved_words",
                            "test_sqrt",
                            "test_frac",
                            "test_printmethod",
                            "test_codegen_ast_nodes",
                            "test_issue_14283",
                            "test_NumPyPrinter_print_seq",
                            "test_issue_16535_16536",
                            "test_Integral",
                            "test_fresnel_integrals",
                            "test_beta",
                            "test_airy",
                            "test_airy_prime"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "sphinx-doc__sphinx-11266.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "tests/test_build_latex.py::test_writer"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "tests/test_build_latex.py::test_latex_warnings",
                            "tests/test_build_latex.py::test_latex_basic",
                            "tests/test_build_latex.py::test_latex_basic_manual",
                            "tests/test_build_latex.py::test_latex_basic_howto",
                            "tests/test_build_latex.py::test_latex_basic_manual_ja",
                            "tests/test_build_latex.py::test_latex_basic_howto_ja",
                            "tests/test_build_latex.py::test_latex_theme",
                            "tests/test_build_latex.py::test_latex_theme_papersize",
                            "tests/test_build_latex.py::test_latex_theme_options",
                            "tests/test_build_latex.py::test_latex_additional_settings_for_language_code",
                            "tests/test_build_latex.py::test_latex_additional_settings_for_greek",
                            "tests/test_build_latex.py::test_latex_title_after_admonitions",
                            "tests/test_build_latex.py::test_latex_release",
                            "tests/test_build_latex.py::test_numref",
                            "tests/test_build_latex.py::test_numref_with_prefix1",
                            "tests/test_build_latex.py::test_numref_with_prefix2",
                            "tests/test_build_latex.py::test_numref_with_language_ja",
                            "tests/test_build_latex.py::test_latex_obey_numfig_is_false",
                            "tests/test_build_latex.py::test_latex_obey_numfig_secnum_depth_is_zero",
                            "tests/test_build_latex.py::test_latex_obey_numfig_secnum_depth_is_two",
                            "tests/test_build_latex.py::test_latex_obey_numfig_but_math_numfig_false",
                            "tests/test_build_latex.py::test_latex_add_latex_package",
                            "tests/test_build_latex.py::test_babel_with_no_language_settings",
                            "tests/test_build_latex.py::test_babel_with_language_de",
                            "tests/test_build_latex.py::test_babel_with_language_ru",
                            "tests/test_build_latex.py::test_babel_with_language_tr",
                            "tests/test_build_latex.py::test_babel_with_language_ja",
                            "tests/test_build_latex.py::test_babel_with_unknown_language",
                            "tests/test_build_latex.py::test_polyglossia_with_language_de",
                            "tests/test_build_latex.py::test_polyglossia_with_language_de_1901",
                            "tests/test_build_latex.py::test_footnote",
                            "tests/test_build_latex.py::test_reference_in_caption_and_codeblock_in_footnote",
                            "tests/test_build_latex.py::test_footnote_referred_multiple_times",
                            "tests/test_build_latex.py::test_latex_show_urls_is_inline",
                            "tests/test_build_latex.py::test_latex_show_urls_is_footnote",
                            "tests/test_build_latex.py::test_latex_show_urls_is_no",
                            "tests/test_build_latex.py::test_latex_show_urls_footnote_and_substitutions",
                            "tests/test_build_latex.py::test_image_in_section",
                            "tests/test_build_latex.py::test_latex_logo_if_not_found",
                            "tests/test_build_latex.py::test_toctree_maxdepth_manual",
                            "tests/test_build_latex.py::test_toctree_maxdepth_howto",
                            "tests/test_build_latex.py::test_toctree_not_found",
                            "tests/test_build_latex.py::test_toctree_without_maxdepth",
                            "tests/test_build_latex.py::test_toctree_with_deeper_maxdepth",
                            "tests/test_build_latex.py::test_latex_toplevel_sectioning_is_None",
                            "tests/test_build_latex.py::test_latex_toplevel_sectioning_is_part",
                            "tests/test_build_latex.py::test_latex_toplevel_sectioning_is_part_with_howto",
                            "tests/test_build_latex.py::test_latex_toplevel_sectioning_is_chapter",
                            "tests/test_build_latex.py::test_latex_toplevel_sectioning_is_chapter_with_howto",
                            "tests/test_build_latex.py::test_latex_toplevel_sectioning_is_section",
                            "tests/test_build_latex.py::test_latex_table_tabulars",
                            "tests/test_build_latex.py::test_latex_table_longtable",
                            "tests/test_build_latex.py::test_latex_table_complex_tables",
                            "tests/test_build_latex.py::test_latex_table_with_booktabs_and_colorrows",
                            "tests/test_build_latex.py::test_latex_table_custom_template_caseA",
                            "tests/test_build_latex.py::test_latex_table_custom_template_caseB",
                            "tests/test_build_latex.py::test_latex_table_custom_template_caseC",
                            "tests/test_build_latex.py::test_latex_raw_directive",
                            "tests/test_build_latex.py::test_latex_images",
                            "tests/test_build_latex.py::test_latex_index",
                            "tests/test_build_latex.py::test_latex_equations",
                            "tests/test_build_latex.py::test_latex_image_in_parsed_literal",
                            "tests/test_build_latex.py::test_latex_nested_enumerated_list",
                            "tests/test_build_latex.py::test_latex_thebibliography",
                            "tests/test_build_latex.py::test_latex_glossary",
                            "tests/test_build_latex.py::test_latex_labels",
                            "tests/test_build_latex.py::test_latex_figure_in_admonition",
                            "tests/test_build_latex.py::test_default_latex_documents",
                            "tests/test_build_latex.py::test_index_on_title",
                            "tests/test_build_latex.py::test_texescape_for_non_unicode_supported_engine",
                            "tests/test_build_latex.py::test_texescape_for_unicode_supported_engine",
                            "tests/test_build_latex.py::test_latex_elements_extrapackages",
                            "tests/test_build_latex.py::test_latex_nested_tables",
                            "tests/test_build_latex.py::test_latex_container",
                            "tests/test_build_latex.py::test_latex_code_role",
                            "tests/test_build_latex.py::test_copy_images"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "sympy__sympy-20590.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "test_immutable"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "test__aresame",
                            "test_structure",
                            "test_equality",
                            "test_matches_basic",
                            "test_has",
                            "test_subs",
                            "test_subs_with_unicode_symbols",
                            "test_atoms",
                            "test_free_symbols_empty",
                            "test_doit",
                            "test_S",
                            "test_xreplace",
                            "test_preorder_traversal",
                            "test_sorted_args",
                            "test_call",
                            "test_rewrite",
                            "test_literal_evalf_is_number_is_zero_is_comparable",
                            "test_as_Basic",
                            "test_atomic",
                            "test_as_dummy",
                            "test_canonical_variables"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "sympy__sympy-16334.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "test_Pow_is_pos_neg"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "test_symbol_unset",
                            "test_zero",
                            "test_one",
                            "test_negativeone",
                            "test_infinity",
                            "test_neg_infinity",
                            "test_zoo",
                            "test_nan",
                            "test_pos_rational",
                            "test_neg_rational",
                            "test_pi",
                            "test_E",
                            "test_I",
                            "test_symbol_real",
                            "test_symbol_imaginary",
                            "test_symbol_zero",
                            "test_symbol_positive",
                            "test_neg_symbol_positive",
                            "test_symbol_nonpositive",
                            "test_neg_symbol_nonpositive",
                            "test_symbol_falsepositive",
                            "test_symbol_falsepositive_mul",
                            "test_neg_symbol_falsepositive",
                            "test_neg_symbol_falsenegative",
                            "test_symbol_falsepositive_real",
                            "test_neg_symbol_falsepositive_real",
                            "test_symbol_falsenonnegative",
                            "test_symbol_falsenonnegative_real",
                            "test_neg_symbol_falsenonnegative_real",
                            "test_prime",
                            "test_composite",
                            "test_prime_symbol",
                            "test_symbol_noncommutative",
                            "test_other_symbol",
                            "test_issue_3825",
                            "test_issue_4822",
                            "test_hash_vs_typeinfo",
                            "test_hash_vs_typeinfo_2",
                            "test_hash_vs_eq",
                            "test_Add_is_pos_neg",
                            "test_Add_is_imaginary",
                            "test_Add_is_algebraic",
                            "test_Mul_is_algebraic",
                            "test_Pow_is_algebraic",
                            "test_Mul_is_prime_composite",
                            "test_Pow_is_prime_composite",
                            "test_Mul_is_infinite",
                            "test_special_is_rational",
                            "test_sanitize_assumptions",
                            "test_special_assumptions",
                            "test_inconsistent",
                            "test_issue_6631",
                            "test_issue_2730",
                            "test_issue_4149",
                            "test_issue_2920",
                            "test_issue_7899",
                            "test_issue_8075",
                            "test_issue_8642",
                            "test_issues_8632_8633_8638_8675_8992",
                            "test_issue_9115_9150",
                            "test_issue_9165",
                            "test_issue_10024",
                            "test_issue_10302"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "pytest-dev__pytest-5281.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "testing/test_capture.py::TestFDCapture::test_capfd_sys_stdout_mode"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "[100%]",
                            "testing/test_capture.py::TestCaptureManager::test_getmethod_default_no_fd",
                            "testing/test_capture.py::TestCaptureManager::test_capturing_basic_api[no]",
                            "testing/test_capture.py::TestCaptureManager::test_capturing_basic_api[sys]",
                            "testing/test_capture.py::TestCaptureManager::test_capturing_basic_api[fd]",
                            "testing/test_capture.py::TestCaptureManager::test_init_capturing",
                            "testing/test_capture.py::TestCaptureIO::test_text",
                            "testing/test_capture.py::TestCaptureIO::test_unicode_and_str_mixture",
                            "testing/test_capture.py::TestCaptureIO::test_write_bytes_to_buffer",
                            "testing/test_capture.py::test_dontreadfrominput",
                            "testing/test_capture.py::test_dontreadfrominput_buffer_python3",
                            "testing/test_capture.py::test_dupfile_on_bytesio",
                            "testing/test_capture.py::test_dupfile_on_textio",
                            "testing/test_capture.py::TestFDCapture::test_stderr",
                            "testing/test_capture.py::TestStdCapture::test_capturing_done_simple",
                            "testing/test_capture.py::TestStdCapture::test_capturing_reset_simple",
                            "testing/test_capture.py::TestStdCapture::test_capturing_readouterr",
                            "testing/test_capture.py::TestStdCapture::test_capture_results_accessible_by_attribute",
                            "testing/test_capture.py::TestStdCapture::test_capturing_readouterr_unicode",
                            "testing/test_capture.py::TestStdCapture::test_reset_twice_error",
                            "testing/test_capture.py::TestStdCapture::test_capturing_modify_sysouterr_in_between",
                            "testing/test_capture.py::TestStdCapture::test_capturing_error_recursive",
                            "testing/test_capture.py::TestStdCapture::test_just_out_capture",
                            "testing/test_capture.py::TestStdCapture::test_just_err_capture",
                            "testing/test_capture.py::TestStdCapture::test_stdin_restored",
                            "testing/test_capture.py::TestStdCapture::test_stdin_nulled_by_default",
                            "testing/test_capture.py::TestStdCaptureFD::test_capturing_done_simple",
                            "testing/test_capture.py::TestStdCaptureFD::test_capturing_reset_simple",
                            "testing/test_capture.py::TestStdCaptureFD::test_capturing_readouterr",
                            "testing/test_capture.py::TestStdCaptureFD::test_capture_results_accessible_by_attribute",
                            "testing/test_capture.py::TestStdCaptureFD::test_capturing_readouterr_unicode",
                            "testing/test_capture.py::TestStdCaptureFD::test_reset_twice_error",
                            "testing/test_capture.py::TestStdCaptureFD::test_capturing_modify_sysouterr_in_between",
                            "testing/test_capture.py::TestStdCaptureFD::test_capturing_error_recursive",
                            "testing/test_capture.py::TestStdCaptureFD::test_just_out_capture",
                            "testing/test_capture.py::TestStdCaptureFD::test_just_err_capture",
                            "testing/test_capture.py::TestStdCaptureFD::test_stdin_restored",
                            "testing/test_capture.py::TestStdCaptureFD::test_stdin_nulled_by_default",
                            "testing/test_capture.py::TestStdCaptureFD::test_intermingling",
                            "testing/test_capture.py::test_capture_not_started_but_reset",
                            "testing/test_capture.py::test_using_capsys_fixture_works_with_sys_stdout_encoding",
                            "testing/test_capture.py::test_capsys_results_accessible_by_attribute",
                            "testing/test_capture.py::test_pickling_and_unpickling_encoded_file",
                            "testing/test_capture.py::test_capturing_unicode[fd]",
                            "testing/test_capture.py::test_capturing_unicode[sys]",
                            "testing/test_capture.py::test_capturing_bytes_in_utf8_encoding[fd]",
                            "testing/test_capture.py::test_capturing_bytes_in_utf8_encoding[sys]",
                            "testing/test_capture.py::test_collect_capturing",
                            "testing/test_capture.py::TestPerTestCapturing::test_capture_and_fixtures",
                            "testing/test_capture.py::TestPerTestCapturing::test_no_carry_over",
                            "testing/test_capture.py::TestPerTestCapturing::test_teardown_capturing",
                            "testing/test_capture.py::TestPerTestCapturing::test_teardown_capturing_final",
                            "testing/test_capture.py::TestPerTestCapturing::test_capturing_outerr",
                            "testing/test_capture.py::TestLoggingInteraction::test_logging_stream_ownership",
                            "testing/test_capture.py::TestLoggingInteraction::test_logging_and_immediate_setupteardown",
                            "testing/test_capture.py::TestLoggingInteraction::test_logging_and_crossscope_fixtures",
                            "testing/test_capture.py::TestLoggingInteraction::test_conftestlogging_is_shown",
                            "testing/test_capture.py::TestLoggingInteraction::test_conftestlogging_and_test_logging",
                            "testing/test_capture.py::TestLoggingInteraction::test_logging_after_cap_stopped",
                            "testing/test_capture.py::TestCaptureFixture::test_std_functional[opt0]",
                            "testing/test_capture.py::TestCaptureFixture::test_std_functional[opt1]",
                            "testing/test_capture.py::TestCaptureFixture::test_capsyscapfd",
                            "testing/test_capture.py::TestCaptureFixture::test_capturing_getfixturevalue",
                            "testing/test_capture.py::TestCaptureFixture::test_capsyscapfdbinary",
                            "testing/test_capture.py::TestCaptureFixture::test_capture_is_represented_on_failure_issue128[sys]",
                            "testing/test_capture.py::TestCaptureFixture::test_capture_is_represented_on_failure_issue128[fd]",
                            "testing/test_capture.py::TestCaptureFixture::test_stdfd_functional",
                            "testing/test_capture.py::TestCaptureFixture::test_capfdbinary",
                            "testing/test_capture.py::TestCaptureFixture::test_capsysbinary",
                            "testing/test_capture.py::TestCaptureFixture::test_partial_setup_failure",
                            "testing/test_capture.py::TestCaptureFixture::test_keyboardinterrupt_disables_capturing",
                            "testing/test_capture.py::TestCaptureFixture::test_capture_and_logging",
                            "testing/test_capture.py::TestCaptureFixture::test_disabled_capture_fixture[True-capsys]",
                            "testing/test_capture.py::TestCaptureFixture::test_disabled_capture_fixture[True-capfd]",
                            "testing/test_capture.py::TestCaptureFixture::test_disabled_capture_fixture[False-capsys]",
                            "testing/test_capture.py::TestCaptureFixture::test_disabled_capture_fixture[False-capfd]",
                            "testing/test_capture.py::TestCaptureFixture::test_fixture_use_by_other_fixtures[capsys]",
                            "testing/test_capture.py::TestCaptureFixture::test_fixture_use_by_other_fixtures[capfd]",
                            "testing/test_capture.py::TestCaptureFixture::test_fixture_use_by_other_fixtures_teardown[capsys]",
                            "testing/test_capture.py::TestCaptureFixture::test_fixture_use_by_other_fixtures_teardown[capfd]",
                            "testing/test_capture.py::test_setup_failure_does_not_kill_capturing",
                            "testing/test_capture.py::test_fdfuncarg_skips_on_no_osdup",
                            "testing/test_capture.py::test_capture_conftest_runtest_setup",
                            "testing/test_capture.py::test_capture_badoutput_issue412",
                            "testing/test_capture.py::test_capture_early_option_parsing",
                            "testing/test_capture.py::test_capture_binary_output",
                            "testing/test_capture.py::test_error_during_readouterr",
                            "testing/test_capture.py::test_dupfile",
                            "testing/test_capture.py::TestFDCapture::test_simple",
                            "testing/test_capture.py::TestFDCapture::test_simple_many",
                            "testing/test_capture.py::TestFDCapture::test_simple_fail_second_start",
                            "testing/test_capture.py::TestFDCapture::test_stdin",
                            "testing/test_capture.py::TestFDCapture::test_writeorg",
                            "testing/test_capture.py::TestFDCapture::test_simple_resume_suspend",
                            "testing/test_capture.py::TestStdCaptureFD::test_simple_only_fd",
                            "testing/test_capture.py::TestStdCaptureFDinvalidFD::test_stdcapture_fd_invalid_fd",
                            "testing/test_capture.py::test_fdcapture_tmpfile_remains_the_same[True]",
                            "testing/test_capture.py::test_fdcapture_tmpfile_remains_the_same[False]",
                            "testing/test_capture.py::test_close_and_capture_again",
                            "testing/test_capture.py::test_capturing_and_logging_fundamentals[SysCapture]",
                            "testing/test_capture.py::test_capturing_and_logging_fundamentals[FDCapture]",
                            "testing/test_capture.py::test_error_attribute_issue555",
                            "testing/test_capture.py::test_dontreadfrominput_has_encoding",
                            "testing/test_capture.py::test_crash_on_closing_tmpfile_py27",
                            "testing/test_capture.py::test_global_capture_with_live_logging",
                            "testing/test_capture.py::test_capture_with_live_logging[capsys]",
                            "testing/test_capture.py::test_capture_with_live_logging[capfd]",
                            "testing/test_capture.py::test_typeerror_encodedfile_write"
                        ],
                        "failure": [
                            "testing/test_capture.py::TestStdCaptureFD::test_many",
                            "testing/test_capture.py::TestFDCapture::test_simple_many_check_open_files"
                        ]
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "django__django-16429.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "test_depth (utils_tests.test_timesince.TZAwareTimesinceTests)",
                            "test_depth_invalid (utils_tests.test_timesince.TZAwareTimesinceTests)",
                            "Test other units.",
                            "test_thousand_years_ago (utils_tests.test_timesince.TZAwareTimesinceTests)"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "Timesince should work with both date objects (#9672)",
                            "Both timesince and timeuntil should work on date objects (#17937).",
                            "When using two different timezones.",
                            "If the two differing units aren't adjacent, only the first unit is",
                            "When the second date occurs before the first, we should always",
                            "equal datetimes.",
                            "Microseconds and seconds are ignored.",
                            "test_leap_year (utils_tests.test_timesince.TZAwareTimesinceTests)",
                            "test_leap_year_new_years_eve (utils_tests.test_timesince.TZAwareTimesinceTests)",
                            "test_months_edge (utils_tests.test_timesince.TZAwareTimesinceTests)",
                            "Test multiple units.",
                            "test_naive_datetime_with_tzinfo_attribute (utils_tests.test_timesince.TZAwareTimesinceTests)",
                            "test_second_before_equal_first_humanize_time_strings (utils_tests.test_timesince.TZAwareTimesinceTests)",
                            "test_depth (utils_tests.test_timesince.TimesinceTests)",
                            "test_depth_invalid (utils_tests.test_timesince.TimesinceTests)",
                            "test_leap_year (utils_tests.test_timesince.TimesinceTests)",
                            "test_leap_year_new_years_eve (utils_tests.test_timesince.TimesinceTests)",
                            "test_months_edge (utils_tests.test_timesince.TimesinceTests)",
                            "test_naive_datetime_with_tzinfo_attribute (utils_tests.test_timesince.TimesinceTests)",
                            "test_second_before_equal_first_humanize_time_strings (utils_tests.test_timesince.TimesinceTests)",
                            "test_thousand_years_ago (utils_tests.test_timesince.TimesinceTests)"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "sphinx-doc__sphinx-10551.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "tests/test_domain_py.py::test_pyfunction_with_unary_operators",
                            "tests/test_domain_py.py::test_pyfunction_with_binary_operators",
                            "tests/test_pycode_ast.py::test_unparse[~1-~1]",
                            "tests/test_pycode_ast.py::test_unparse[a**b-a**b]",
                            "tests/test_pycode_ast.py::test_unparse[+a-+a]",
                            "tests/test_pycode_ast.py::test_unparse[-1--1]",
                            "tests/test_pycode_ast.py::test_unparse[-a--a]"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "tests/test_domain_py.py::test_function_signatures",
                            "tests/test_domain_py.py::test_domain_py_xrefs",
                            "tests/test_domain_py.py::test_domain_py_xrefs_abbreviations",
                            "tests/test_domain_py.py::test_domain_py_objects",
                            "tests/test_domain_py.py::test_resolve_xref_for_properties",
                            "tests/test_domain_py.py::test_domain_py_find_obj",
                            "tests/test_domain_py.py::test_domain_py_canonical",
                            "tests/test_domain_py.py::test_get_full_qualified_name",
                            "tests/test_domain_py.py::test_parse_annotation",
                            "tests/test_domain_py.py::test_parse_annotation_suppress",
                            "tests/test_domain_py.py::test_parse_annotation_Literal",
                            "tests/test_domain_py.py::test_pyfunction_signature",
                            "tests/test_domain_py.py::test_pyfunction_signature_full",
                            "tests/test_domain_py.py::test_pyfunction_signature_full_py38",
                            "tests/test_domain_py.py::test_pyfunction_with_number_literals",
                            "tests/test_domain_py.py::test_pyfunction_with_union_type_operator",
                            "tests/test_domain_py.py::test_optional_pyfunction_signature",
                            "tests/test_domain_py.py::test_pyexception_signature",
                            "tests/test_domain_py.py::test_pydata_signature",
                            "tests/test_domain_py.py::test_pydata_signature_old",
                            "tests/test_domain_py.py::test_pydata_with_union_type_operator",
                            "tests/test_domain_py.py::test_pyobject_prefix",
                            "tests/test_domain_py.py::test_pydata",
                            "tests/test_domain_py.py::test_pyfunction",
                            "tests/test_domain_py.py::test_pyclass_options",
                            "tests/test_domain_py.py::test_pymethod_options",
                            "tests/test_domain_py.py::test_pyclassmethod",
                            "tests/test_domain_py.py::test_pystaticmethod",
                            "tests/test_domain_py.py::test_pyattribute",
                            "tests/test_domain_py.py::test_pyproperty",
                            "tests/test_domain_py.py::test_pydecorator_signature",
                            "tests/test_domain_py.py::test_pydecoratormethod_signature",
                            "tests/test_domain_py.py::test_canonical",
                            "tests/test_domain_py.py::test_canonical_definition_overrides",
                            "tests/test_domain_py.py::test_canonical_definition_skip",
                            "tests/test_domain_py.py::test_canonical_duplicated",
                            "tests/test_domain_py.py::test_info_field_list",
                            "tests/test_domain_py.py::test_info_field_list_piped_type",
                            "tests/test_domain_py.py::test_info_field_list_Literal",
                            "tests/test_domain_py.py::test_info_field_list_var",
                            "tests/test_domain_py.py::test_type_field",
                            "tests/test_domain_py.py::test_module_index",
                            "tests/test_domain_py.py::test_module_index_submodule",
                            "tests/test_domain_py.py::test_module_index_not_collapsed",
                            "tests/test_domain_py.py::test_modindex_common_prefix",
                            "tests/test_domain_py.py::test_noindexentry",
                            "tests/test_domain_py.py::test_python_python_use_unqualified_type_names",
                            "tests/test_domain_py.py::test_python_python_use_unqualified_type_names_disabled",
                            "tests/test_domain_py.py::test_warn_missing_reference",
                            "tests/test_pycode_ast.py::test_unparse[a",
                            "tests/test_pycode_ast.py::test_unparse[os.path-os.path]",
                            "tests/test_pycode_ast.py::test_unparse[1",
                            "tests/test_pycode_ast.py::test_unparse[b'bytes'-b'bytes']",
                            "tests/test_pycode_ast.py::test_unparse[object()-object()]",
                            "tests/test_pycode_ast.py::test_unparse[1234-1234_0]",
                            "tests/test_pycode_ast.py::test_unparse[{'key1':",
                            "tests/test_pycode_ast.py::test_unparse[...-...]",
                            "tests/test_pycode_ast.py::test_unparse[Tuple[int,",
                            "tests/test_pycode_ast.py::test_unparse[lambda",
                            "tests/test_pycode_ast.py::test_unparse[[1,",
                            "tests/test_pycode_ast.py::test_unparse[sys-sys]",
                            "tests/test_pycode_ast.py::test_unparse[1234-1234_1]",
                            "tests/test_pycode_ast.py::test_unparse[not",
                            "tests/test_pycode_ast.py::test_unparse[{1,",
                            "tests/test_pycode_ast.py::test_unparse['str'-'str']",
                            "tests/test_pycode_ast.py::test_unparse[(1,",
                            "tests/test_pycode_ast.py::test_unparse[()-()]",
                            "tests/test_pycode_ast.py::test_unparse[(1,)-(1,)]",
                            "tests/test_pycode_ast.py::test_unparse_None",
                            "tests/test_pycode_ast.py::test_unparse_py38[lambda",
                            "tests/test_pycode_ast.py::test_unparse_py38[0x1234-0x1234]",
                            "tests/test_pycode_ast.py::test_unparse_py38[1_000_000-1_000_000]"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "astropy__astropy-13842.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "astropy/table/tests/test_mixin.py::test_add_column[arrayswap-False]",
                            "astropy/table/tests/test_mixin.py::test_add_column[arraywrap-False]",
                            "astropy/table/tests/test_mixin.py::test_add_column[cartesianrep-False]",
                            "astropy/table/tests/test_mixin.py::test_add_column[earthlocation-False]",
                            "astropy/table/tests/test_mixin.py::test_add_column[latitude-False]",
                            "astropy/table/tests/test_mixin.py::test_add_column[longitude-False]",
                            "astropy/table/tests/test_mixin.py::test_add_column[ndarraybig-False]",
                            "astropy/table/tests/test_mixin.py::test_add_column[ndarraylil-False]",
                            "astropy/table/tests/test_mixin.py::test_add_column[quantity-False]",
                            "astropy/table/tests/test_mixin.py::test_add_column[skycoord-False]",
                            "astropy/table/tests/test_mixin.py::test_add_column[sphericaldiff-False]",
                            "astropy/table/tests/test_mixin.py::test_add_column[sphericalrep-False]",
                            "astropy/table/tests/test_mixin.py::test_add_column[sphericalrepdiff-False]",
                            "astropy/table/tests/test_mixin.py::test_add_column[time-False]",
                            "astropy/table/tests/test_mixin.py::test_add_column[timedelta-False]",
                            "astropy/table/tests/test_mixin.py::test_ensure_input_info_is_unchanged[QTable-False]"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "astropy/table/tests/test_mixin.py::test_attributes[arrayswap]",
                            "astropy/table/tests/test_mixin.py::test_attributes[arraywrap]",
                            "astropy/table/tests/test_mixin.py::test_attributes[cartesianrep]",
                            "astropy/table/tests/test_mixin.py::test_attributes[earthlocation]",
                            "astropy/table/tests/test_mixin.py::test_attributes[latitude]",
                            "astropy/table/tests/test_mixin.py::test_attributes[longitude]",
                            "astropy/table/tests/test_mixin.py::test_attributes[ndarraybig]",
                            "astropy/table/tests/test_mixin.py::test_attributes[ndarraylil]",
                            "astropy/table/tests/test_mixin.py::test_attributes[quantity]",
                            "astropy/table/tests/test_mixin.py::test_attributes[skycoord]",
                            "astropy/table/tests/test_mixin.py::test_attributes[sphericaldiff]",
                            "astropy/table/tests/test_mixin.py::test_attributes[sphericalrep]",
                            "astropy/table/tests/test_mixin.py::test_attributes[sphericalrepdiff]",
                            "astropy/table/tests/test_mixin.py::test_attributes[time]",
                            "astropy/table/tests/test_mixin.py::test_attributes[timedelta]",
                            "astropy/table/tests/test_mixin.py::test_make_table[unmasked-arrayswap]",
                            "astropy/table/tests/test_mixin.py::test_make_table[unmasked-arraywrap]",
                            "astropy/table/tests/test_mixin.py::test_make_table[unmasked-cartesianrep]",
                            "astropy/table/tests/test_mixin.py::test_make_table[unmasked-earthlocation]",
                            "astropy/table/tests/test_mixin.py::test_make_table[unmasked-latitude]",
                            "astropy/table/tests/test_mixin.py::test_make_table[unmasked-longitude]",
                            "astropy/table/tests/test_mixin.py::test_make_table[unmasked-ndarraybig]",
                            "astropy/table/tests/test_mixin.py::test_make_table[unmasked-ndarraylil]",
                            "astropy/table/tests/test_mixin.py::test_make_table[unmasked-quantity]",
                            "astropy/table/tests/test_mixin.py::test_make_table[unmasked-skycoord]",
                            "astropy/table/tests/test_mixin.py::test_make_table[unmasked-sphericaldiff]",
                            "astropy/table/tests/test_mixin.py::test_make_table[unmasked-sphericalrep]",
                            "astropy/table/tests/test_mixin.py::test_make_table[unmasked-sphericalrepdiff]",
                            "astropy/table/tests/test_mixin.py::test_make_table[unmasked-time]",
                            "astropy/table/tests/test_mixin.py::test_make_table[unmasked-timedelta]",
                            "astropy/table/tests/test_mixin.py::test_make_table[masked-arrayswap]",
                            "astropy/table/tests/test_mixin.py::test_make_table[masked-arraywrap]",
                            "astropy/table/tests/test_mixin.py::test_make_table[masked-cartesianrep]",
                            "astropy/table/tests/test_mixin.py::test_make_table[masked-earthlocation]",
                            "astropy/table/tests/test_mixin.py::test_make_table[masked-latitude]",
                            "astropy/table/tests/test_mixin.py::test_make_table[masked-longitude]",
                            "astropy/table/tests/test_mixin.py::test_make_table[masked-ndarraybig]",
                            "astropy/table/tests/test_mixin.py::test_make_table[masked-ndarraylil]",
                            "astropy/table/tests/test_mixin.py::test_make_table[masked-quantity]",
                            "astropy/table/tests/test_mixin.py::test_make_table[masked-skycoord]",
                            "astropy/table/tests/test_mixin.py::test_make_table[masked-sphericaldiff]",
                            "astropy/table/tests/test_mixin.py::test_make_table[masked-sphericalrep]",
                            "astropy/table/tests/test_mixin.py::test_make_table[masked-sphericalrepdiff]",
                            "astropy/table/tests/test_mixin.py::test_make_table[masked-time]",
                            "astropy/table/tests/test_mixin.py::test_make_table[masked-timedelta]",
                            "astropy/table/tests/test_mixin.py::test_make_table[subclass-arrayswap]",
                            "astropy/table/tests/test_mixin.py::test_make_table[subclass-arraywrap]",
                            "astropy/table/tests/test_mixin.py::test_make_table[subclass-cartesianrep]",
                            "astropy/table/tests/test_mixin.py::test_make_table[subclass-earthlocation]",
                            "astropy/table/tests/test_mixin.py::test_make_table[subclass-latitude]",
                            "astropy/table/tests/test_mixin.py::test_make_table[subclass-longitude]",
                            "astropy/table/tests/test_mixin.py::test_make_table[subclass-ndarraybig]",
                            "astropy/table/tests/test_mixin.py::test_make_table[subclass-ndarraylil]",
                            "astropy/table/tests/test_mixin.py::test_make_table[subclass-quantity]",
                            "astropy/table/tests/test_mixin.py::test_make_table[subclass-skycoord]",
                            "astropy/table/tests/test_mixin.py::test_make_table[subclass-sphericaldiff]",
                            "astropy/table/tests/test_mixin.py::test_make_table[subclass-sphericalrep]",
                            "astropy/table/tests/test_mixin.py::test_make_table[subclass-sphericalrepdiff]",
                            "astropy/table/tests/test_mixin.py::test_make_table[subclass-time]",
                            "astropy/table/tests/test_mixin.py::test_make_table[subclass-timedelta]",
                            "astropy/table/tests/test_mixin.py::test_votable_quantity_write",
                            "astropy/table/tests/test_mixin.py::test_io_time_write_fits_local[Table]",
                            "astropy/table/tests/test_mixin.py::test_io_time_write_fits_local[QTable]",
                            "astropy/table/tests/test_mixin.py::test_votable_mixin_write_fail[arrayswap]",
                            "astropy/table/tests/test_mixin.py::test_votable_mixin_write_fail[arraywrap]",
                            "astropy/table/tests/test_mixin.py::test_votable_mixin_write_fail[cartesianrep]",
                            "astropy/table/tests/test_mixin.py::test_votable_mixin_write_fail[ndarraybig]",
                            "astropy/table/tests/test_mixin.py::test_votable_mixin_write_fail[ndarraylil]",
                            "astropy/table/tests/test_mixin.py::test_votable_mixin_write_fail[skycoord]",
                            "astropy/table/tests/test_mixin.py::test_votable_mixin_write_fail[sphericaldiff]",
                            "astropy/table/tests/test_mixin.py::test_votable_mixin_write_fail[sphericalrep]",
                            "astropy/table/tests/test_mixin.py::test_votable_mixin_write_fail[sphericalrepdiff]",
                            "astropy/table/tests/test_mixin.py::test_votable_mixin_write_fail[time]",
                            "astropy/table/tests/test_mixin.py::test_votable_mixin_write_fail[timedelta]",
                            "astropy/table/tests/test_mixin.py::test_join[unmasked]",
                            "astropy/table/tests/test_mixin.py::test_join[masked]",
                            "astropy/table/tests/test_mixin.py::test_join[subclass]",
                            "astropy/table/tests/test_mixin.py::test_hstack[unmasked]",
                            "astropy/table/tests/test_mixin.py::test_hstack[masked]",
                            "astropy/table/tests/test_mixin.py::test_hstack[subclass]",
                            "astropy/table/tests/test_mixin.py::test_get_items[arrayswap]",
                            "astropy/table/tests/test_mixin.py::test_get_items[arraywrap]",
                            "astropy/table/tests/test_mixin.py::test_get_items[cartesianrep]",
                            "astropy/table/tests/test_mixin.py::test_get_items[earthlocation]",
                            "astropy/table/tests/test_mixin.py::test_get_items[latitude]",
                            "astropy/table/tests/test_mixin.py::test_get_items[longitude]",
                            "astropy/table/tests/test_mixin.py::test_get_items[ndarraybig]",
                            "astropy/table/tests/test_mixin.py::test_get_items[ndarraylil]",
                            "astropy/table/tests/test_mixin.py::test_get_items[quantity]",
                            "astropy/table/tests/test_mixin.py::test_get_items[skycoord]",
                            "astropy/table/tests/test_mixin.py::test_get_items[sphericaldiff]",
                            "astropy/table/tests/test_mixin.py::test_get_items[sphericalrep]",
                            "astropy/table/tests/test_mixin.py::test_get_items[sphericalrepdiff]",
                            "astropy/table/tests/test_mixin.py::test_get_items[time]",
                            "astropy/table/tests/test_mixin.py::test_get_items[timedelta]",
                            "astropy/table/tests/test_mixin.py::test_info_preserved_pickle_copy_init[arrayswap]",
                            "astropy/table/tests/test_mixin.py::test_info_preserved_pickle_copy_init[arraywrap]",
                            "astropy/table/tests/test_mixin.py::test_info_preserved_pickle_copy_init[cartesianrep]",
                            "astropy/table/tests/test_mixin.py::test_info_preserved_pickle_copy_init[earthlocation]",
                            "astropy/table/tests/test_mixin.py::test_info_preserved_pickle_copy_init[latitude]",
                            "astropy/table/tests/test_mixin.py::test_info_preserved_pickle_copy_init[longitude]",
                            "astropy/table/tests/test_mixin.py::test_info_preserved_pickle_copy_init[ndarraybig]",
                            "astropy/table/tests/test_mixin.py::test_info_preserved_pickle_copy_init[ndarraylil]",
                            "astropy/table/tests/test_mixin.py::test_info_preserved_pickle_copy_init[quantity]",
                            "astropy/table/tests/test_mixin.py::test_info_preserved_pickle_copy_init[skycoord]",
                            "astropy/table/tests/test_mixin.py::test_info_preserved_pickle_copy_init[sphericaldiff]",
                            "astropy/table/tests/test_mixin.py::test_info_preserved_pickle_copy_init[sphericalrep]",
                            "astropy/table/tests/test_mixin.py::test_info_preserved_pickle_copy_init[sphericalrepdiff]",
                            "astropy/table/tests/test_mixin.py::test_info_preserved_pickle_copy_init[time]",
                            "astropy/table/tests/test_mixin.py::test_info_preserved_pickle_copy_init[timedelta]",
                            "astropy/table/tests/test_mixin.py::test_add_column[arrayswap-True]",
                            "astropy/table/tests/test_mixin.py::test_add_column[arraywrap-True]",
                            "astropy/table/tests/test_mixin.py::test_add_column[cartesianrep-True]",
                            "astropy/table/tests/test_mixin.py::test_add_column[earthlocation-True]",
                            "astropy/table/tests/test_mixin.py::test_add_column[latitude-True]",
                            "astropy/table/tests/test_mixin.py::test_add_column[longitude-True]",
                            "astropy/table/tests/test_mixin.py::test_add_column[ndarraybig-True]",
                            "astropy/table/tests/test_mixin.py::test_add_column[ndarraylil-True]",
                            "astropy/table/tests/test_mixin.py::test_add_column[quantity-True]",
                            "astropy/table/tests/test_mixin.py::test_add_column[skycoord-True]",
                            "astropy/table/tests/test_mixin.py::test_add_column[sphericaldiff-True]",
                            "astropy/table/tests/test_mixin.py::test_add_column[sphericalrep-True]",
                            "astropy/table/tests/test_mixin.py::test_add_column[sphericalrepdiff-True]",
                            "astropy/table/tests/test_mixin.py::test_add_column[time-True]",
                            "astropy/table/tests/test_mixin.py::test_add_column[timedelta-True]",
                            "astropy/table/tests/test_mixin.py::test_vstack",
                            "astropy/table/tests/test_mixin.py::test_insert_row[arrayswap]",
                            "astropy/table/tests/test_mixin.py::test_insert_row[arraywrap]",
                            "astropy/table/tests/test_mixin.py::test_insert_row[cartesianrep]",
                            "astropy/table/tests/test_mixin.py::test_insert_row[earthlocation]",
                            "astropy/table/tests/test_mixin.py::test_insert_row[latitude]",
                            "astropy/table/tests/test_mixin.py::test_insert_row[longitude]",
                            "astropy/table/tests/test_mixin.py::test_insert_row[ndarraybig]",
                            "astropy/table/tests/test_mixin.py::test_insert_row[ndarraylil]",
                            "astropy/table/tests/test_mixin.py::test_insert_row[quantity]",
                            "astropy/table/tests/test_mixin.py::test_insert_row[skycoord]",
                            "astropy/table/tests/test_mixin.py::test_insert_row[sphericaldiff]",
                            "astropy/table/tests/test_mixin.py::test_insert_row[sphericalrep]",
                            "astropy/table/tests/test_mixin.py::test_insert_row[sphericalrepdiff]",
                            "astropy/table/tests/test_mixin.py::test_insert_row[time]",
                            "astropy/table/tests/test_mixin.py::test_insert_row[timedelta]",
                            "astropy/table/tests/test_mixin.py::test_insert_row_bad_unit",
                            "astropy/table/tests/test_mixin.py::test_convert_np_array[arrayswap]",
                            "astropy/table/tests/test_mixin.py::test_convert_np_array[arraywrap]",
                            "astropy/table/tests/test_mixin.py::test_convert_np_array[cartesianrep]",
                            "astropy/table/tests/test_mixin.py::test_convert_np_array[earthlocation]",
                            "astropy/table/tests/test_mixin.py::test_convert_np_array[latitude]",
                            "astropy/table/tests/test_mixin.py::test_convert_np_array[longitude]",
                            "astropy/table/tests/test_mixin.py::test_convert_np_array[ndarraybig]",
                            "astropy/table/tests/test_mixin.py::test_convert_np_array[ndarraylil]",
                            "astropy/table/tests/test_mixin.py::test_convert_np_array[quantity]",
                            "astropy/table/tests/test_mixin.py::test_convert_np_array[skycoord]",
                            "astropy/table/tests/test_mixin.py::test_convert_np_array[sphericaldiff]",
                            "astropy/table/tests/test_mixin.py::test_convert_np_array[sphericalrep]",
                            "astropy/table/tests/test_mixin.py::test_convert_np_array[sphericalrepdiff]",
                            "astropy/table/tests/test_mixin.py::test_convert_np_array[time]",
                            "astropy/table/tests/test_mixin.py::test_convert_np_array[timedelta]",
                            "astropy/table/tests/test_mixin.py::test_assignment_and_copy",
                            "astropy/table/tests/test_mixin.py::test_conversion_qtable_table",
                            "astropy/table/tests/test_mixin.py::test_setitem_as_column_name",
                            "astropy/table/tests/test_mixin.py::test_quantity_representation",
                            "astropy/table/tests/test_mixin.py::test_representation_representation",
                            "astropy/table/tests/test_mixin.py::test_skycoord_representation",
                            "astropy/table/tests/test_mixin.py::test_ndarray_mixin[True]",
                            "astropy/table/tests/test_mixin.py::test_ndarray_mixin[False]",
                            "astropy/table/tests/test_mixin.py::test_possible_string_format_functions",
                            "astropy/table/tests/test_mixin.py::test_rename_mixin_columns[arrayswap]",
                            "astropy/table/tests/test_mixin.py::test_rename_mixin_columns[arraywrap]",
                            "astropy/table/tests/test_mixin.py::test_rename_mixin_columns[cartesianrep]",
                            "astropy/table/tests/test_mixin.py::test_rename_mixin_columns[earthlocation]",
                            "astropy/table/tests/test_mixin.py::test_rename_mixin_columns[latitude]",
                            "astropy/table/tests/test_mixin.py::test_rename_mixin_columns[longitude]",
                            "astropy/table/tests/test_mixin.py::test_rename_mixin_columns[ndarraybig]",
                            "astropy/table/tests/test_mixin.py::test_rename_mixin_columns[ndarraylil]",
                            "astropy/table/tests/test_mixin.py::test_rename_mixin_columns[quantity]",
                            "astropy/table/tests/test_mixin.py::test_rename_mixin_columns[skycoord]",
                            "astropy/table/tests/test_mixin.py::test_rename_mixin_columns[sphericaldiff]",
                            "astropy/table/tests/test_mixin.py::test_rename_mixin_columns[sphericalrep]",
                            "astropy/table/tests/test_mixin.py::test_rename_mixin_columns[sphericalrepdiff]",
                            "astropy/table/tests/test_mixin.py::test_rename_mixin_columns[time]",
                            "astropy/table/tests/test_mixin.py::test_rename_mixin_columns[timedelta]",
                            "astropy/table/tests/test_mixin.py::test_represent_mixins_as_columns_unit_fix",
                            "astropy/table/tests/test_mixin.py::test_primary_data_column_gets_description",
                            "astropy/table/tests/test_mixin.py::test_skycoord_with_velocity",
                            "astropy/table/tests/test_mixin.py::test_ensure_input_info_is_unchanged[Table-True]",
                            "astropy/table/tests/test_mixin.py::test_ensure_input_info_is_unchanged[Table-False]",
                            "astropy/table/tests/test_mixin.py::test_ensure_input_info_is_unchanged[QTable-True]",
                            "astropy/table/tests/test_mixin.py::test_bad_info_class"
                        ],
                        "failure": [
                            "astropy/table/tests/test_mixin.py::test_io_ascii_write"
                        ]
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "sphinx-doc__sphinx-8801.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "tests/test_ext_autodoc_autoclass.py::test_uninitialized_attributes"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "tests/test_ext_autodoc_autoclass.py::test_classes",
                            "tests/test_ext_autodoc_autoclass.py::test_instance_variable",
                            "tests/test_ext_autodoc_autoclass.py::test_inherited_instance_variable",
                            "tests/test_ext_autodoc_autoclass.py::test_undocumented_uninitialized_attributes",
                            "tests/test_ext_autodoc_autoclass.py::test_decorators",
                            "tests/test_ext_autodoc_autoclass.py::test_slots_attribute",
                            "tests/test_ext_autodoc_autoclass.py::test_show_inheritance_for_subclass_of_generic_type",
                            "tests/test_ext_autodoc_autoclass.py::test_class_alias"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "sympy__sympy-22005.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "test_solve_poly_system"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "test_solve_biquadratic",
                            "test_solve_triangulated"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "pydata__xarray-6601.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "xarray/tests/test_computation.py::test_polyval[broadcast-x-False]"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "xarray/tests/test_computation.py::test_signature_properties",
                            "xarray/tests/test_computation.py::test_result_name",
                            "xarray/tests/test_computation.py::test_ordered_set_union",
                            "xarray/tests/test_computation.py::test_ordered_set_intersection",
                            "xarray/tests/test_computation.py::test_join_dict_keys",
                            "xarray/tests/test_computation.py::test_collect_dict_values",
                            "xarray/tests/test_computation.py::test_apply_identity",
                            "xarray/tests/test_computation.py::test_apply_two_inputs",
                            "xarray/tests/test_computation.py::test_apply_1d_and_0d",
                            "xarray/tests/test_computation.py::test_apply_two_outputs",
                            "xarray/tests/test_computation.py::test_apply_dask_parallelized_two_outputs",
                            "xarray/tests/test_computation.py::test_apply_input_core_dimension",
                            "xarray/tests/test_computation.py::test_apply_output_core_dimension",
                            "xarray/tests/test_computation.py::test_apply_exclude",
                            "xarray/tests/test_computation.py::test_apply_groupby_add",
                            "xarray/tests/test_computation.py::test_unified_dim_sizes",
                            "xarray/tests/test_computation.py::test_broadcast_compat_data_1d",
                            "xarray/tests/test_computation.py::test_broadcast_compat_data_2d",
                            "xarray/tests/test_computation.py::test_keep_attrs",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_variable[default]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_variable[False]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_variable[True]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_variable[override]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_variable[drop]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_variable[drop_conflicts]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_variable[no_conflicts]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray[default]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray[False]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray[True]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray[override]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray[drop]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray[drop_conflicts]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray[no_conflicts]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray_variables[default-dim]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray_variables[default-coord]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray_variables[False-dim]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray_variables[False-coord]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray_variables[True-dim]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray_variables[True-coord]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray_variables[override-dim]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray_variables[override-coord]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray_variables[drop-dim]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray_variables[drop-coord]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray_variables[drop_conflicts-dim]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray_variables[drop_conflicts-coord]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray_variables[no_conflicts-dim]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataarray_variables[no_conflicts-coord]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset[default]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset[False]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset[True]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset[override]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset[drop]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset[drop_conflicts]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset[no_conflicts]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[default-data]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[default-dim]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[default-coord]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[False-data]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[False-dim]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[False-coord]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[True-data]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[True-dim]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[True-coord]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[override-data]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[override-dim]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[override-coord]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[drop-data]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[drop-dim]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[drop-coord]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[drop_conflicts-data]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[drop_conflicts-dim]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[drop_conflicts-coord]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[no_conflicts-data]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[no_conflicts-dim]",
                            "xarray/tests/test_computation.py::test_keep_attrs_strategies_dataset_variables[no_conflicts-coord]",
                            "xarray/tests/test_computation.py::test_dataset_join",
                            "xarray/tests/test_computation.py::test_apply_dask",
                            "xarray/tests/test_computation.py::test_apply_dask_parallelized_one_arg",
                            "xarray/tests/test_computation.py::test_apply_dask_parallelized_two_args",
                            "xarray/tests/test_computation.py::test_apply_dask_parallelized_errors",
                            "xarray/tests/test_computation.py::test_apply_dask_multiple_inputs",
                            "xarray/tests/test_computation.py::test_apply_dask_new_output_dimension",
                            "xarray/tests/test_computation.py::test_apply_dask_new_output_sizes",
                            "xarray/tests/test_computation.py::test_vectorize",
                            "xarray/tests/test_computation.py::test_vectorize_dask",
                            "xarray/tests/test_computation.py::test_vectorize_dask_dtype",
                            "xarray/tests/test_computation.py::test_vectorize_dask_dtype_without_output_dtypes[data_array0]",
                            "xarray/tests/test_computation.py::test_vectorize_dask_dtype_without_output_dtypes[data_array1]",
                            "xarray/tests/test_computation.py::test_vectorize_exclude_dims",
                            "xarray/tests/test_computation.py::test_vectorize_exclude_dims_dask",
                            "xarray/tests/test_computation.py::test_corr_only_dataarray",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[None-da_a0-da_b0-0]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[None-da_a0-da_b0-1]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[None-da_a1-da_b1-0]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[None-da_a1-da_b1-1]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[None-da_a2-da_b2-0]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[None-da_a2-da_b2-1]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[None-da_a3-da_b3-0]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[None-da_a3-da_b3-1]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[None-da_a4-da_b4-0]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[None-da_a4-da_b4-1]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[None-da_a5-da_b5-0]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[None-da_a5-da_b5-1]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[x-da_a0-da_b0-0]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[x-da_a0-da_b0-1]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[x-da_a1-da_b1-0]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[x-da_a1-da_b1-1]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[x-da_a2-da_b2-0]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[x-da_a2-da_b2-1]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[x-da_a3-da_b3-0]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[x-da_a3-da_b3-1]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[x-da_a4-da_b4-0]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[x-da_a4-da_b4-1]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[x-da_a5-da_b5-0]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[x-da_a5-da_b5-1]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[time-da_a0-da_b0-0]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[time-da_a0-da_b0-1]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[time-da_a1-da_b1-0]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[time-da_a1-da_b1-1]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[time-da_a2-da_b2-0]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[time-da_a2-da_b2-1]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[time-da_a3-da_b3-0]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[time-da_a3-da_b3-1]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[time-da_a4-da_b4-0]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[time-da_a4-da_b4-1]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[time-da_a5-da_b5-0]",
                            "xarray/tests/test_computation.py::test_lazy_corrcov[time-da_a5-da_b5-1]",
                            "xarray/tests/test_computation.py::test_cov[None-da_a0-da_b0-0]",
                            "xarray/tests/test_computation.py::test_cov[None-da_a0-da_b0-1]",
                            "xarray/tests/test_computation.py::test_cov[None-da_a1-da_b1-0]",
                            "xarray/tests/test_computation.py::test_cov[None-da_a1-da_b1-1]",
                            "xarray/tests/test_computation.py::test_cov[None-da_a2-da_b2-0]",
                            "xarray/tests/test_computation.py::test_cov[None-da_a2-da_b2-1]",
                            "xarray/tests/test_computation.py::test_cov[time-da_a0-da_b0-0]",
                            "xarray/tests/test_computation.py::test_cov[time-da_a0-da_b0-1]",
                            "xarray/tests/test_computation.py::test_cov[time-da_a1-da_b1-0]",
                            "xarray/tests/test_computation.py::test_cov[time-da_a1-da_b1-1]",
                            "xarray/tests/test_computation.py::test_cov[time-da_a2-da_b2-0]",
                            "xarray/tests/test_computation.py::test_cov[time-da_a2-da_b2-1]",
                            "xarray/tests/test_computation.py::test_corr[None-da_a0-da_b0]",
                            "xarray/tests/test_computation.py::test_corr[None-da_a1-da_b1]",
                            "xarray/tests/test_computation.py::test_corr[None-da_a2-da_b2]",
                            "xarray/tests/test_computation.py::test_corr[time-da_a0-da_b0]",
                            "xarray/tests/test_computation.py::test_corr[time-da_a1-da_b1]",
                            "xarray/tests/test_computation.py::test_corr[time-da_a2-da_b2]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[None-da_a0-da_b0]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[None-da_a1-da_b1]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[None-da_a2-da_b2]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[None-da_a3-da_b3]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[None-da_a4-da_b4]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[None-da_a5-da_b5]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[None-da_a6-da_b6]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[None-da_a7-da_b7]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[None-da_a8-da_b8]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[time-da_a0-da_b0]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[time-da_a1-da_b1]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[time-da_a2-da_b2]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[time-da_a3-da_b3]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[time-da_a4-da_b4]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[time-da_a5-da_b5]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[time-da_a6-da_b6]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[time-da_a7-da_b7]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[time-da_a8-da_b8]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[x-da_a0-da_b0]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[x-da_a1-da_b1]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[x-da_a2-da_b2]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[x-da_a3-da_b3]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[x-da_a4-da_b4]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[x-da_a5-da_b5]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[x-da_a6-da_b6]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[x-da_a7-da_b7]",
                            "xarray/tests/test_computation.py::test_covcorr_consistency[x-da_a8-da_b8]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[None-da_a0-da_b0]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[None-da_a1-da_b1]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[None-da_a2-da_b2]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[None-da_a3-da_b3]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[None-da_a4-da_b4]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[None-da_a5-da_b5]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[None-da_a6-da_b6]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[None-da_a7-da_b7]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[None-da_a8-da_b8]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[time-da_a0-da_b0]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[time-da_a1-da_b1]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[time-da_a2-da_b2]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[time-da_a3-da_b3]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[time-da_a4-da_b4]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[time-da_a5-da_b5]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[time-da_a6-da_b6]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[time-da_a7-da_b7]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[time-da_a8-da_b8]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[x-da_a0-da_b0]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[x-da_a1-da_b1]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[x-da_a2-da_b2]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[x-da_a3-da_b3]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[x-da_a4-da_b4]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[x-da_a5-da_b5]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[x-da_a6-da_b6]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[x-da_a7-da_b7]",
                            "xarray/tests/test_computation.py::test_corr_lazycorr_consistency[x-da_a8-da_b8]",
                            "xarray/tests/test_computation.py::test_corr_dtype_error",
                            "xarray/tests/test_computation.py::test_autocov[None-da_a0]",
                            "xarray/tests/test_computation.py::test_autocov[None-da_a1]",
                            "xarray/tests/test_computation.py::test_autocov[None-da_a2]",
                            "xarray/tests/test_computation.py::test_autocov[None-da_a3]",
                            "xarray/tests/test_computation.py::test_autocov[None-da_a4]",
                            "xarray/tests/test_computation.py::test_autocov[time-da_a0]",
                            "xarray/tests/test_computation.py::test_autocov[time-da_a1]",
                            "xarray/tests/test_computation.py::test_autocov[time-da_a2]",
                            "xarray/tests/test_computation.py::test_autocov[time-da_a3]",
                            "xarray/tests/test_computation.py::test_autocov[time-da_a4]",
                            "xarray/tests/test_computation.py::test_autocov[x-da_a0]",
                            "xarray/tests/test_computation.py::test_autocov[x-da_a1]",
                            "xarray/tests/test_computation.py::test_autocov[x-da_a2]",
                            "xarray/tests/test_computation.py::test_autocov[x-da_a3]",
                            "xarray/tests/test_computation.py::test_autocov[x-da_a4]",
                            "xarray/tests/test_computation.py::test_autocov[dim3-da_a0]",
                            "xarray/tests/test_computation.py::test_autocov[dim3-da_a1]",
                            "xarray/tests/test_computation.py::test_autocov[dim3-da_a2]",
                            "xarray/tests/test_computation.py::test_autocov[dim3-da_a3]",
                            "xarray/tests/test_computation.py::test_autocov[dim3-da_a4]",
                            "xarray/tests/test_computation.py::test_vectorize_dask_new_output_dims",
                            "xarray/tests/test_computation.py::test_output_wrong_number",
                            "xarray/tests/test_computation.py::test_output_wrong_dims",
                            "xarray/tests/test_computation.py::test_output_wrong_dim_size",
                            "xarray/tests/test_computation.py::test_dot[True]",
                            "xarray/tests/test_computation.py::test_dot[False]",
                            "xarray/tests/test_computation.py::test_dot_align_coords[True]",
                            "xarray/tests/test_computation.py::test_dot_align_coords[False]",
                            "xarray/tests/test_computation.py::test_where",
                            "xarray/tests/test_computation.py::test_where_attrs",
                            "xarray/tests/test_computation.py::test_polyval[simple-False]",
                            "xarray/tests/test_computation.py::test_polyval[simple-True]",
                            "xarray/tests/test_computation.py::test_polyval[broadcast-x-True]",
                            "xarray/tests/test_computation.py::test_polyval[shared-dim-False]",
                            "xarray/tests/test_computation.py::test_polyval[shared-dim-True]",
                            "xarray/tests/test_computation.py::test_polyval[reordered-index-False]",
                            "xarray/tests/test_computation.py::test_polyval[reordered-index-True]",
                            "xarray/tests/test_computation.py::test_polyval[sparse-index-False]",
                            "xarray/tests/test_computation.py::test_polyval[sparse-index-True]",
                            "xarray/tests/test_computation.py::test_polyval[array-dataset-False]",
                            "xarray/tests/test_computation.py::test_polyval[array-dataset-True]",
                            "xarray/tests/test_computation.py::test_polyval[dataset-array-False]",
                            "xarray/tests/test_computation.py::test_polyval[dataset-array-True]",
                            "xarray/tests/test_computation.py::test_polyval[dataset-dataset-False]",
                            "xarray/tests/test_computation.py::test_polyval[dataset-dataset-True]",
                            "xarray/tests/test_computation.py::test_polyval[datetime-False]",
                            "xarray/tests/test_computation.py::test_polyval[datetime-True]",
                            "xarray/tests/test_computation.py::test_polyval[timedelta-False]",
                            "xarray/tests/test_computation.py::test_polyval[timedelta-True]",
                            "xarray/tests/test_computation.py::test_polyval_degree_dim_checks",
                            "xarray/tests/test_computation.py::test_cross[a0-b0-ae0-be0-dim_0--1-False]",
                            "xarray/tests/test_computation.py::test_cross[a0-b0-ae0-be0-dim_0--1-True]",
                            "xarray/tests/test_computation.py::test_cross[a1-b1-ae1-be1-dim_0--1-False]",
                            "xarray/tests/test_computation.py::test_cross[a1-b1-ae1-be1-dim_0--1-True]",
                            "xarray/tests/test_computation.py::test_cross[a2-b2-ae2-be2-dim_0--1-False]",
                            "xarray/tests/test_computation.py::test_cross[a2-b2-ae2-be2-dim_0--1-True]",
                            "xarray/tests/test_computation.py::test_cross[a3-b3-ae3-be3-dim_0--1-False]",
                            "xarray/tests/test_computation.py::test_cross[a3-b3-ae3-be3-dim_0--1-True]",
                            "xarray/tests/test_computation.py::test_cross[a4-b4-ae4-be4-cartesian-1-False]",
                            "xarray/tests/test_computation.py::test_cross[a4-b4-ae4-be4-cartesian-1-True]",
                            "xarray/tests/test_computation.py::test_cross[a5-b5-ae5-be5-cartesian--1-False]",
                            "xarray/tests/test_computation.py::test_cross[a5-b5-ae5-be5-cartesian--1-True]",
                            "xarray/tests/test_computation.py::test_cross[a6-b6-ae6-be6-cartesian--1-False]",
                            "xarray/tests/test_computation.py::test_cross[a6-b6-ae6-be6-cartesian--1-True]"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "pytest-dev__pytest-5692.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "testing/test_junitxml.py::TestPython::test_hostname_in_xml",
                            "testing/test_junitxml.py::TestPython::test_timestamp_in_xml"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "testing/test_junitxml.py::test_mangle_test_address",
                            "testing/test_junitxml.py::test_dont_configure_on_slaves",
                            "testing/test_junitxml.py::test_invalid_xml_escape",
                            "testing/test_junitxml.py::test_logxml_path_expansion",
                            "testing/test_junitxml.py::TestPython::test_summing_simple",
                            "testing/test_junitxml.py::TestPython::test_summing_simple_with_errors",
                            "testing/test_junitxml.py::TestPython::test_timing_function",
                            "testing/test_junitxml.py::TestPython::test_junit_duration_report[call]",
                            "testing/test_junitxml.py::TestPython::test_junit_duration_report[total]",
                            "testing/test_junitxml.py::TestPython::test_setup_error",
                            "testing/test_junitxml.py::TestPython::test_teardown_error",
                            "testing/test_junitxml.py::TestPython::test_call_failure_teardown_error",
                            "testing/test_junitxml.py::TestPython::test_skip_contains_name_reason",
                            "testing/test_junitxml.py::TestPython::test_mark_skip_contains_name_reason",
                            "testing/test_junitxml.py::TestPython::test_mark_skipif_contains_name_reason",
                            "testing/test_junitxml.py::TestPython::test_mark_skip_doesnt_capture_output",
                            "testing/test_junitxml.py::TestPython::test_classname_instance",
                            "testing/test_junitxml.py::TestPython::test_classname_nested_dir",
                            "testing/test_junitxml.py::TestPython::test_internal_error",
                            "testing/test_junitxml.py::TestPython::test_failure_function[no]",
                            "testing/test_junitxml.py::TestPython::test_failure_function[system-out]",
                            "testing/test_junitxml.py::TestPython::test_failure_function[system-err]",
                            "testing/test_junitxml.py::TestPython::test_failure_verbose_message",
                            "testing/test_junitxml.py::TestPython::test_failure_escape",
                            "testing/test_junitxml.py::TestPython::test_junit_prefixing",
                            "testing/test_junitxml.py::TestPython::test_xfailure_function",
                            "testing/test_junitxml.py::TestPython::test_xfailure_marker",
                            "testing/test_junitxml.py::TestPython::test_xfail_captures_output_once",
                            "testing/test_junitxml.py::TestPython::test_xfailure_xpass",
                            "testing/test_junitxml.py::TestPython::test_xfailure_xpass_strict",
                            "testing/test_junitxml.py::TestPython::test_collect_error",
                            "testing/test_junitxml.py::TestPython::test_unicode",
                            "testing/test_junitxml.py::TestPython::test_assertion_binchars",
                            "testing/test_junitxml.py::TestPython::test_pass_captures_stdout",
                            "testing/test_junitxml.py::TestPython::test_pass_captures_stderr",
                            "testing/test_junitxml.py::TestPython::test_setup_error_captures_stdout",
                            "testing/test_junitxml.py::TestPython::test_setup_error_captures_stderr",
                            "testing/test_junitxml.py::TestPython::test_avoid_double_stdout",
                            "testing/test_junitxml.py::TestNonPython::test_summing_simple",
                            "testing/test_junitxml.py::test_nullbyte",
                            "testing/test_junitxml.py::test_nullbyte_replace",
                            "testing/test_junitxml.py::test_logxml_changingdir",
                            "testing/test_junitxml.py::test_logxml_makedir",
                            "testing/test_junitxml.py::test_logxml_check_isdir",
                            "testing/test_junitxml.py::test_escaped_parametrized_names_xml",
                            "testing/test_junitxml.py::test_double_colon_split_function_issue469",
                            "testing/test_junitxml.py::test_double_colon_split_method_issue469",
                            "testing/test_junitxml.py::test_unicode_issue368",
                            "testing/test_junitxml.py::test_record_property",
                            "testing/test_junitxml.py::test_record_property_same_name",
                            "testing/test_junitxml.py::test_record_fixtures_without_junitxml[record_property]",
                            "testing/test_junitxml.py::test_record_fixtures_without_junitxml[record_xml_attribute]",
                            "testing/test_junitxml.py::test_record_attribute",
                            "testing/test_junitxml.py::test_record_fixtures_xunit2[record_xml_attribute]",
                            "testing/test_junitxml.py::test_record_fixtures_xunit2[record_property]",
                            "testing/test_junitxml.py::test_root_testsuites_tag",
                            "testing/test_junitxml.py::test_runs_twice",
                            "testing/test_junitxml.py::test_fancy_items_regression",
                            "testing/test_junitxml.py::test_global_properties",
                            "testing/test_junitxml.py::test_url_property",
                            "testing/test_junitxml.py::test_record_testsuite_property",
                            "testing/test_junitxml.py::test_record_testsuite_property_junit_disabled",
                            "testing/test_junitxml.py::test_record_testsuite_property_type_checking[True]",
                            "testing/test_junitxml.py::test_record_testsuite_property_type_checking[False]",
                            "testing/test_junitxml.py::test_set_suite_name[my_suite]",
                            "testing/test_junitxml.py::test_set_suite_name[]",
                            "testing/test_junitxml.py::test_escaped_skipreason_issue3533",
                            "testing/test_junitxml.py::test_logging_passing_tests_disabled_does_not_log_test_output"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "psf__requests-4356.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "tests/test_requests.py::TestRequests::test_entry_points",
                            "tests/test_requests.py::TestRequests::test_invalid_url[MissingSchema-hiwpefhipowhefopw]",
                            "tests/test_requests.py::TestRequests::test_invalid_url[InvalidSchema-localhost:3128]",
                            "tests/test_requests.py::TestRequests::test_invalid_url[InvalidSchema-localhost.localdomain:3128/]",
                            "tests/test_requests.py::TestRequests::test_invalid_url[InvalidSchema-10.122.1.1:3128/]",
                            "tests/test_requests.py::TestRequests::test_invalid_url[InvalidURL-http://]",
                            "tests/test_requests.py::TestRequests::test_basic_building",
                            "tests/test_requests.py::TestRequests::test_path_is_not_double_encoded",
                            "tests/test_requests.py::TestRequests::test_params_are_added_before_fragment[http://example.com/path#fragment-http://example.com/path?a=b#fragment]",
                            "tests/test_requests.py::TestRequests::test_params_are_added_before_fragment[http://example.com/path?key=value#fragment-http://example.com/path?key=value&a=b#fragment]",
                            "tests/test_requests.py::TestRequests::test_params_original_order_is_preserved_by_default",
                            "tests/test_requests.py::TestRequests::test_params_bytes_are_encoded",
                            "tests/test_requests.py::TestRequests::test_binary_put",
                            "tests/test_requests.py::TestRequests::test_whitespaces_are_removed_from_url",
                            "tests/test_requests.py::TestRequests::test_basicauth_encodes_byte_strings",
                            "tests/test_requests.py::TestRequests::test_errors[http://doesnotexist.google.com-ConnectionError]",
                            "tests/test_requests.py::TestRequests::test_errors[http://localhost:1-ConnectionError]",
                            "tests/test_requests.py::TestRequests::test_errors[http://fe80::5054:ff:fe5a:fc0-InvalidURL]",
                            "tests/test_requests.py::TestRequests::test_proxy_error",
                            "tests/test_requests.py::TestRequests::test_non_prepared_request_error",
                            "tests/test_requests.py::TestRequests::test_prepare_request_with_bytestring_url",
                            "tests/test_requests.py::TestRequests::test_links",
                            "tests/test_requests.py::TestRequests::test_cookie_parameters",
                            "tests/test_requests.py::TestRequests::test_cookie_as_dict_keeps_len",
                            "tests/test_requests.py::TestRequests::test_cookie_as_dict_keeps_items",
                            "tests/test_requests.py::TestRequests::test_cookie_as_dict_keys",
                            "tests/test_requests.py::TestRequests::test_cookie_as_dict_values",
                            "tests/test_requests.py::TestRequests::test_cookie_as_dict_items",
                            "tests/test_requests.py::TestRequests::test_cookie_duplicate_names_different_domains",
                            "tests/test_requests.py::TestRequests::test_cookie_duplicate_names_raises_cookie_conflict_error",
                            "tests/test_requests.py::TestRequests::test_empty_response_has_content_none",
                            "tests/test_requests.py::TestRequests::test_response_is_iterable",
                            "tests/test_requests.py::TestRequests::test_response_decode_unicode",
                            "tests/test_requests.py::TestRequests::test_response_reason_unicode",
                            "tests/test_requests.py::TestRequests::test_response_reason_unicode_fallback",
                            "tests/test_requests.py::TestRequests::test_response_chunk_size_type",
                            "tests/test_requests.py::TestRequests::test_http_error",
                            "tests/test_requests.py::TestRequests::test_transport_adapter_ordering",
                            "tests/test_requests.py::TestRequests::test_long_authinfo_in_url",
                            "tests/test_requests.py::TestRequests::test_nonhttp_schemes_dont_check_URLs",
                            "tests/test_requests.py::TestRequests::test_prepare_body_position_non_stream",
                            "tests/test_requests.py::TestRequests::test_rewind_body",
                            "tests/test_requests.py::TestRequests::test_rewind_partially_read_body",
                            "tests/test_requests.py::TestRequests::test_rewind_body_no_seek",
                            "tests/test_requests.py::TestRequests::test_rewind_body_failed_seek",
                            "tests/test_requests.py::TestRequests::test_rewind_body_failed_tell",
                            "tests/test_requests.py::TestRequests::test_basic_auth_str_is_always_native[test-test-Basic",
                            "tests/test_requests.py::TestRequests::test_basic_auth_str_is_always_native[\\xd0\\xb8\\xd0\\xbc\\xd1\\x8f-\\xd0\\xbf\\xd0\\xb0\\xd1\\x80\\xd0\\xbe\\xd0\\xbb\\xd1\\x8c-Basic",
                            "tests/test_requests.py::TestRequests::test_response_without_release_conn",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_init[cid0]",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_init[cid1]",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_init[cid2]",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_docstring_example",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_len",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_getitem",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_fixes_649",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_delitem",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_contains",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_get",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_update",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_update_retains_unchanged",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_iter",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_equality",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_setdefault",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_lower_items",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_preserve_key_case",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_preserve_last_key_case",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_copy",
                            "tests/test_requests.py::TestMorselToCookieExpires::test_expires_valid_str",
                            "tests/test_requests.py::TestMorselToCookieExpires::test_expires_invalid_int[100-TypeError]",
                            "tests/test_requests.py::TestMorselToCookieExpires::test_expires_invalid_int[woops-ValueError]",
                            "tests/test_requests.py::TestMorselToCookieExpires::test_expires_none",
                            "tests/test_requests.py::TestMorselToCookieMaxAge::test_max_age_valid_int",
                            "tests/test_requests.py::TestMorselToCookieMaxAge::test_max_age_invalid_str",
                            "tests/test_requests.py::TestTimeout::test_connect_timeout[timeout0]",
                            "tests/test_requests.py::TestTimeout::test_connect_timeout[timeout1]",
                            "tests/test_requests.py::TestTimeout::test_total_timeout_connect[timeout0]",
                            "tests/test_requests.py::TestTimeout::test_total_timeout_connect[timeout1]",
                            "tests/test_requests.py::test_json_encodes_as_bytes",
                            "tests/test_requests.py::test_proxy_env_vars_override_default[http_proxy-http://example.com-socks5://proxy.com:9876]",
                            "tests/test_requests.py::test_proxy_env_vars_override_default[https_proxy-https://example.com-socks5://proxy.com:9876]",
                            "tests/test_requests.py::test_proxy_env_vars_override_default[all_proxy-http://example.com-socks5://proxy.com:9876]",
                            "tests/test_requests.py::test_proxy_env_vars_override_default[all_proxy-https://example.com-socks5://proxy.com:9876]",
                            "tests/test_requests.py::test_data_argument_accepts_tuples[data0]",
                            "tests/test_requests.py::test_data_argument_accepts_tuples[data1]",
                            "tests/test_requests.py::test_data_argument_accepts_tuples[data2]",
                            "tests/test_requests.py::test_prepared_copy[None]",
                            "tests/test_requests.py::test_prepared_copy[kwargs1]",
                            "tests/test_requests.py::test_prepared_copy[kwargs2]",
                            "tests/test_requests.py::test_prepared_copy[kwargs3]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://google.com-http://google.com/]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://\\u30b8\\u30a7\\u30fc\\u30d4\\u30fc\\u30cb\\u30c3\\u30af.jp-http://xn--hckqz9bzb1cyrb.jp/]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://xn--n3h.net/-http://xn--n3h.net/0]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://\\xe3\\x82\\xb8\\xe3\\x82\\xa7\\xe3\\x83\\xbc\\xe3\\x83\\x94\\xe3\\x83\\xbc\\xe3\\x83\\x8b\\xe3\\x83\\x83\\xe3\\x82\\xaf.jp-http://xn--hckqz9bzb1cyrb.jp/]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://stra\\xdfe.de/stra\\xdfe-http://xn--strae-oqa.de/stra%C3%9Fe]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://stra\\xc3\\x9fe.de/stra\\xc3\\x9fe-http://xn--strae-oqa.de/stra%C3%9Fe]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://K\\xf6nigsg\\xe4\\xdfchen.de/stra\\xdfe-http://xn--knigsgchen-b4a3dun.de/stra%C3%9Fe]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://K\\xc3\\xb6nigsg\\xc3\\xa4\\xc3\\x9fchen.de/stra\\xc3\\x9fe-http://xn--knigsgchen-b4a3dun.de/stra%C3%9Fe]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://xn--n3h.net/-http://xn--n3h.net/1]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://[1200:0000:ab00:1234:0000:2552:7777:1313]:12345/-http://[1200:0000:ab00:1234:0000:2552:7777:1313]:12345/0]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://[1200:0000:ab00:1234:0000:2552:7777:1313]:12345/-http://[1200:0000:ab00:1234:0000:2552:7777:1313]:12345/1]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_bad_url[http://*.google.com0]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_bad_url[http://*0]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_bad_url[http://*.google.com1]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_bad_url[http://*1]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_bad_url[http://\\u2603.net/]",
                            "tests/test_requests.py::TestPreparingURLs::test_url_mutation[http+unix://%2Fvar%2Frun%2Fsocket/path%7E-http+unix://%2Fvar%2Frun%2Fsocket/path~0]",
                            "tests/test_requests.py::TestPreparingURLs::test_url_mutation[http+unix://%2Fvar%2Frun%2Fsocket/path%7E-http+unix://%2Fvar%2Frun%2Fsocket/path~1]",
                            "tests/test_requests.py::TestPreparingURLs::test_url_mutation[mailto:user@example.org-mailto:user@example.org0]",
                            "tests/test_requests.py::TestPreparingURLs::test_url_mutation[mailto:user@example.org-mailto:user@example.org1]",
                            "tests/test_requests.py::TestPreparingURLs::test_url_mutation[data:SSDimaUgUHl0aG9uIQ==-data:SSDimaUgUHl0aG9uIQ==]",
                            "tests/test_requests.py::TestPreparingURLs::test_parameters_for_nonstandard_schemes[http+unix://%2Fvar%2Frun%2Fsocket/path-params0-http+unix://%2Fvar%2Frun%2Fsocket/path?key=value]",
                            "tests/test_requests.py::TestPreparingURLs::test_parameters_for_nonstandard_schemes[http+unix://%2Fvar%2Frun%2Fsocket/path-params1-http+unix://%2Fvar%2Frun%2Fsocket/path?key=value]",
                            "tests/test_requests.py::TestPreparingURLs::test_parameters_for_nonstandard_schemes[mailto:user@example.org-params2-mailto:user@example.org]",
                            "tests/test_requests.py::TestPreparingURLs::test_parameters_for_nonstandard_schemes[mailto:user@example.org-params3-mailto:user@example.org]"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "pydata__xarray-5233.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_field_access[year]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_field_access[month]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_field_access[day]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_field_access[hour]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_field_access[minute]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_field_access[second]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_field_access[microsecond]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_field_access[nanosecond]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_field_access[week]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_field_access[weekofyear]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_field_access[dayofweek]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_field_access[weekday]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_field_access[dayofyear]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_field_access[quarter]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_field_access[date]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_field_access[time]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_field_access[is_month_start]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_field_access[is_month_end]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_field_access[is_quarter_start]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_field_access[is_quarter_end]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_field_access[is_year_start]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_field_access[is_year_end]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_field_access[is_leap_year]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_calendar",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_strftime",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_not_datetime_type",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_seasons",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_accessor_method[floor-D]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_accessor_method[ceil-D]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_accessor_method[round-D]",
                            "xarray/tests/test_accessor_dt.py::TestTimedeltaAccessor::test_not_datetime_type",
                            "xarray/tests/test_accessor_dt.py::TestTimedeltaAccessor::test_field_access[days]",
                            "xarray/tests/test_accessor_dt.py::TestTimedeltaAccessor::test_field_access[seconds]",
                            "xarray/tests/test_accessor_dt.py::TestTimedeltaAccessor::test_field_access[microseconds]",
                            "xarray/tests/test_accessor_dt.py::TestTimedeltaAccessor::test_field_access[nanoseconds]",
                            "xarray/tests/test_accessor_dt.py::TestTimedeltaAccessor::test_accessor_methods[floor-D]",
                            "xarray/tests/test_accessor_dt.py::TestTimedeltaAccessor::test_accessor_methods[ceil-D]",
                            "xarray/tests/test_accessor_dt.py::TestTimedeltaAccessor::test_accessor_methods[round-D]",
                            "xarray/tests/test_coding_times.py::test_decode_cf_datetime_non_standard_units",
                            "xarray/tests/test_coding_times.py::test_infer_datetime_units[N-nanoseconds]",
                            "xarray/tests/test_coding_times.py::test_infer_datetime_units[U-microseconds]",
                            "xarray/tests/test_coding_times.py::test_infer_datetime_units[L-milliseconds]",
                            "xarray/tests/test_coding_times.py::test_infer_datetime_units[S-seconds]",
                            "xarray/tests/test_coding_times.py::test_infer_datetime_units[T-minutes]",
                            "xarray/tests/test_coding_times.py::test_infer_datetime_units[H-hours]",
                            "xarray/tests/test_coding_times.py::test_infer_datetime_units[D-days]",
                            "xarray/tests/test_coding_times.py::test_infer_datetime_units_with_NaT[dates0-days",
                            "xarray/tests/test_coding_times.py::test_infer_datetime_units_with_NaT[dates1-days",
                            "xarray/tests/test_coding_times.py::test_infer_datetime_units_with_NaT[dates2-days",
                            "xarray/tests/test_coding_times.py::test_cf_timedelta[1D-days-numbers0]",
                            "xarray/tests/test_coding_times.py::test_cf_timedelta[timedeltas1-days-numbers1]",
                            "xarray/tests/test_coding_times.py::test_cf_timedelta[1h-hours-numbers2]",
                            "xarray/tests/test_coding_times.py::test_cf_timedelta[1ms-milliseconds-numbers3]",
                            "xarray/tests/test_coding_times.py::test_cf_timedelta[1us-microseconds-numbers4]",
                            "xarray/tests/test_coding_times.py::test_cf_timedelta[1ns-nanoseconds-numbers5]",
                            "xarray/tests/test_coding_times.py::test_cf_timedelta[timedeltas6-None-numbers6]",
                            "xarray/tests/test_coding_times.py::test_cf_timedelta[timedeltas7-hours-numbers7]",
                            "xarray/tests/test_coding_times.py::test_cf_timedelta[NaT-days-nan]",
                            "xarray/tests/test_coding_times.py::test_cf_timedelta[timedeltas9-days-numbers9]",
                            "xarray/tests/test_coding_times.py::test_cf_timedelta_2d",
                            "xarray/tests/test_coding_times.py::test_infer_timedelta_units[deltas0-days]",
                            "xarray/tests/test_coding_times.py::test_infer_timedelta_units[deltas1-hours]",
                            "xarray/tests/test_coding_times.py::test_infer_timedelta_units[deltas2-minutes]",
                            "xarray/tests/test_coding_times.py::test_infer_timedelta_units[deltas3-seconds]",
                            "xarray/tests/test_coding_times.py::test_decode_cf[360_day]",
                            "xarray/tests/test_coding_times.py::test_decode_cf[365_day]",
                            "xarray/tests/test_coding_times.py::test_decode_cf[366_day]",
                            "xarray/tests/test_coding_times.py::test_decode_cf[all_leap]",
                            "xarray/tests/test_coding_times.py::test_decode_cf[gregorian]",
                            "xarray/tests/test_coding_times.py::test_decode_cf[julian]",
                            "xarray/tests/test_coding_times.py::test_decode_cf[noleap]",
                            "xarray/tests/test_coding_times.py::test_decode_cf[proleptic_gregorian]",
                            "xarray/tests/test_coding_times.py::test_decode_cf[standard]",
                            "xarray/tests/test_coding_times.py::test_decode_cf_time_bounds",
                            "xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_non_cftimes[non_cftime_data0]",
                            "xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_non_cftimes[non_cftime_data1]",
                            "xarray/tests/test_coding_times.py::test_encode_expected_failures",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_pandas_min",
                            "xarray/tests/test_coding_times.py::test_use_cftime_false_standard_calendar_out_of_range[1500-gregorian]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_false_standard_calendar_out_of_range[1500-proleptic_gregorian]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_false_standard_calendar_out_of_range[1500-standard]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_false_standard_calendar_out_of_range[2500-gregorian]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_false_standard_calendar_out_of_range[2500-proleptic_gregorian]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_false_standard_calendar_out_of_range[2500-standard]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[1500-360_day]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[1500-365_day]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[1500-366_day]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[1500-all_leap]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[1500-julian]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[1500-noleap]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[2000-360_day]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[2000-365_day]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[2000-366_day]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[2000-all_leap]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[2000-julian]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[2000-noleap]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[2500-360_day]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[2500-365_day]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[2500-366_day]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[2500-all_leap]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[2500-julian]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_false_non_standard_calendar[2500-noleap]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-N-nanoseconds]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-N-microseconds]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-N-milliseconds]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-N-seconds]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-N-minutes]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-N-hours]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-N-days]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-U-nanoseconds]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-U-microseconds]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-U-milliseconds]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-U-seconds]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-U-minutes]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-U-hours]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-U-days]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-L-nanoseconds]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-L-microseconds]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-L-milliseconds]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-L-seconds]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-L-minutes]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-L-hours]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-L-days]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-S-nanoseconds]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-S-microseconds]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-S-milliseconds]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-S-seconds]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-S-minutes]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-S-hours]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-S-days]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-T-nanoseconds]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-T-microseconds]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-T-milliseconds]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-T-seconds]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-T-minutes]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-T-hours]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-T-days]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-H-nanoseconds]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-H-microseconds]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-H-milliseconds]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-H-seconds]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-H-minutes]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-H-hours]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-H-days]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-D-nanoseconds]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-D-microseconds]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-D-milliseconds]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-D-seconds]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-D-minutes]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-D-hours]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[date_range-D-days]",
                            "xarray/tests/test_coding_times.py::test_encode_decode_roundtrip_datetime64[N]",
                            "xarray/tests/test_coding_times.py::test_encode_decode_roundtrip_datetime64[U]",
                            "xarray/tests/test_coding_times.py::test_encode_decode_roundtrip_datetime64[L]",
                            "xarray/tests/test_coding_times.py::test_encode_decode_roundtrip_datetime64[S]",
                            "xarray/tests/test_coding_times.py::test_encode_decode_roundtrip_datetime64[T]",
                            "xarray/tests/test_coding_times.py::test_encode_decode_roundtrip_datetime64[H]",
                            "xarray/tests/test_coding_times.py::test_encode_decode_roundtrip_datetime64[D]",
                            "xarray/tests/test_coding_times.py::test_decode_encode_roundtrip_with_non_lowercase_letters[gregorian]",
                            "xarray/tests/test_coding_times.py::test_decode_encode_roundtrip_with_non_lowercase_letters[Gregorian]",
                            "xarray/tests/test_coding_times.py::test_decode_encode_roundtrip_with_non_lowercase_letters[GREGORIAN]"
                        ],
                        "failure": [
                            "xarray/tests/test_coding_times.py::test_use_cftime_default_standard_calendar_in_range[gregorian]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_default_standard_calendar_in_range[proleptic_gregorian]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_default_standard_calendar_in_range[standard]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_false_standard_calendar_in_range[gregorian]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_false_standard_calendar_in_range[proleptic_gregorian]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_false_standard_calendar_in_range[standard]"
                        ]
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_isocalendar[year-year]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_isocalendar[week-week]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_isocalendar[weekday-day]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_field_access[year]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_field_access[month]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_field_access[day]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_field_access[hour]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_field_access[minute]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_field_access[second]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_field_access[microsecond]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_field_access[nanosecond]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_field_access[week]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_field_access[weekofyear]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_field_access[dayofweek]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_field_access[weekday]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_field_access[dayofyear]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_field_access[quarter]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_field_access[date]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_field_access[time]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_field_access[is_month_start]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_field_access[is_month_end]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_field_access[is_quarter_start]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_field_access[is_quarter_end]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_field_access[is_year_start]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_field_access[is_year_end]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_field_access[is_leap_year]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_isocalendar_dask[year]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_isocalendar_dask[week]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_isocalendar_dask[weekday]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_accessor_method[floor-D]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_accessor_method[ceil-D]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_accessor_method[round-D]",
                            "xarray/tests/test_accessor_dt.py::TestDatetimeAccessor::test_dask_accessor_method[strftime-%Y-%m-%d",
                            "xarray/tests/test_accessor_dt.py::TestTimedeltaAccessor::test_dask_field_access[days]",
                            "xarray/tests/test_accessor_dt.py::TestTimedeltaAccessor::test_dask_field_access[seconds]",
                            "xarray/tests/test_accessor_dt.py::TestTimedeltaAccessor::test_dask_field_access[microseconds]",
                            "xarray/tests/test_accessor_dt.py::TestTimedeltaAccessor::test_dask_field_access[nanoseconds]",
                            "xarray/tests/test_accessor_dt.py::TestTimedeltaAccessor::test_dask_accessor_method[floor-D]",
                            "xarray/tests/test_accessor_dt.py::TestTimedeltaAccessor::test_dask_accessor_method[ceil-D]",
                            "xarray/tests/test_accessor_dt.py::TestTimedeltaAccessor::test_dask_accessor_method[round-D]",
                            "xarray/tests/test_accessor_dt.py::test_field_access[365_day-year]",
                            "xarray/tests/test_accessor_dt.py::test_field_access[365_day-month]",
                            "xarray/tests/test_accessor_dt.py::test_field_access[365_day-day]",
                            "xarray/tests/test_accessor_dt.py::test_field_access[365_day-hour]",
                            "xarray/tests/test_accessor_dt.py::test_field_access[365_day-dayofyear]",
                            "xarray/tests/test_accessor_dt.py::test_field_access[365_day-dayofweek]",
                            "xarray/tests/test_accessor_dt.py::test_field_access[360_day-year]",
                            "xarray/tests/test_accessor_dt.py::test_field_access[360_day-month]",
                            "xarray/tests/test_accessor_dt.py::test_field_access[360_day-day]",
                            "xarray/tests/test_accessor_dt.py::test_field_access[360_day-hour]",
                            "xarray/tests/test_accessor_dt.py::test_field_access[360_day-dayofyear]",
                            "xarray/tests/test_accessor_dt.py::test_field_access[360_day-dayofweek]",
                            "xarray/tests/test_accessor_dt.py::test_field_access[julian-year]",
                            "xarray/tests/test_accessor_dt.py::test_field_access[julian-month]",
                            "xarray/tests/test_accessor_dt.py::test_field_access[julian-day]",
                            "xarray/tests/test_accessor_dt.py::test_field_access[julian-hour]",
                            "xarray/tests/test_accessor_dt.py::test_field_access[julian-dayofyear]",
                            "xarray/tests/test_accessor_dt.py::test_field_access[julian-dayofweek]",
                            "xarray/tests/test_accessor_dt.py::test_field_access[all_leap-year]",
                            "xarray/tests/test_accessor_dt.py::test_field_access[all_leap-month]",
                            "xarray/tests/test_accessor_dt.py::test_field_access[all_leap-day]",
                            "xarray/tests/test_accessor_dt.py::test_field_access[all_leap-hour]",
                            "xarray/tests/test_accessor_dt.py::test_field_access[all_leap-dayofyear]",
                            "xarray/tests/test_accessor_dt.py::test_field_access[all_leap-dayofweek]",
                            "xarray/tests/test_accessor_dt.py::test_field_access[366_day-year]",
                            "xarray/tests/test_accessor_dt.py::test_field_access[366_day-month]",
                            "xarray/tests/test_accessor_dt.py::test_field_access[366_day-day]",
                            "xarray/tests/test_accessor_dt.py::test_field_access[366_day-hour]",
                            "xarray/tests/test_accessor_dt.py::test_field_access[366_day-dayofyear]",
                            "xarray/tests/test_accessor_dt.py::test_field_access[366_day-dayofweek]",
                            "xarray/tests/test_accessor_dt.py::test_field_access[gregorian-year]",
                            "xarray/tests/test_accessor_dt.py::test_field_access[gregorian-month]",
                            "xarray/tests/test_accessor_dt.py::test_field_access[gregorian-day]",
                            "xarray/tests/test_accessor_dt.py::test_field_access[gregorian-hour]",
                            "xarray/tests/test_accessor_dt.py::test_field_access[gregorian-dayofyear]",
                            "xarray/tests/test_accessor_dt.py::test_field_access[gregorian-dayofweek]",
                            "xarray/tests/test_accessor_dt.py::test_field_access[proleptic_gregorian-year]",
                            "xarray/tests/test_accessor_dt.py::test_field_access[proleptic_gregorian-month]",
                            "xarray/tests/test_accessor_dt.py::test_field_access[proleptic_gregorian-day]",
                            "xarray/tests/test_accessor_dt.py::test_field_access[proleptic_gregorian-hour]",
                            "xarray/tests/test_accessor_dt.py::test_field_access[proleptic_gregorian-dayofyear]",
                            "xarray/tests/test_accessor_dt.py::test_field_access[proleptic_gregorian-dayofweek]",
                            "xarray/tests/test_accessor_dt.py::test_calendar_cftime[365_day]",
                            "xarray/tests/test_accessor_dt.py::test_calendar_cftime[360_day]",
                            "xarray/tests/test_accessor_dt.py::test_calendar_cftime[julian]",
                            "xarray/tests/test_accessor_dt.py::test_calendar_cftime[all_leap]",
                            "xarray/tests/test_accessor_dt.py::test_calendar_cftime[366_day]",
                            "xarray/tests/test_accessor_dt.py::test_calendar_cftime[gregorian]",
                            "xarray/tests/test_accessor_dt.py::test_calendar_cftime[proleptic_gregorian]",
                            "xarray/tests/test_accessor_dt.py::test_calendar_cftime_2D[365_day]",
                            "xarray/tests/test_accessor_dt.py::test_calendar_cftime_2D[360_day]",
                            "xarray/tests/test_accessor_dt.py::test_calendar_cftime_2D[julian]",
                            "xarray/tests/test_accessor_dt.py::test_calendar_cftime_2D[all_leap]",
                            "xarray/tests/test_accessor_dt.py::test_calendar_cftime_2D[366_day]",
                            "xarray/tests/test_accessor_dt.py::test_calendar_cftime_2D[gregorian]",
                            "xarray/tests/test_accessor_dt.py::test_calendar_cftime_2D[proleptic_gregorian]",
                            "xarray/tests/test_accessor_dt.py::test_calendar_dask",
                            "xarray/tests/test_accessor_dt.py::test_calendar_dask_cftime",
                            "xarray/tests/test_accessor_dt.py::test_isocalendar_cftime[365_day]",
                            "xarray/tests/test_accessor_dt.py::test_isocalendar_cftime[360_day]",
                            "xarray/tests/test_accessor_dt.py::test_isocalendar_cftime[julian]",
                            "xarray/tests/test_accessor_dt.py::test_isocalendar_cftime[all_leap]",
                            "xarray/tests/test_accessor_dt.py::test_isocalendar_cftime[366_day]",
                            "xarray/tests/test_accessor_dt.py::test_isocalendar_cftime[gregorian]",
                            "xarray/tests/test_accessor_dt.py::test_isocalendar_cftime[proleptic_gregorian]",
                            "xarray/tests/test_accessor_dt.py::test_date_cftime[365_day]",
                            "xarray/tests/test_accessor_dt.py::test_date_cftime[360_day]",
                            "xarray/tests/test_accessor_dt.py::test_date_cftime[julian]",
                            "xarray/tests/test_accessor_dt.py::test_date_cftime[all_leap]",
                            "xarray/tests/test_accessor_dt.py::test_date_cftime[366_day]",
                            "xarray/tests/test_accessor_dt.py::test_date_cftime[gregorian]",
                            "xarray/tests/test_accessor_dt.py::test_date_cftime[proleptic_gregorian]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_strftime_access[365_day]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_strftime_access[360_day]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_strftime_access[julian]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_strftime_access[all_leap]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_strftime_access[366_day]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_strftime_access[gregorian]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_strftime_access[proleptic_gregorian]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[365_day-year]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[365_day-month]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[365_day-day]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[365_day-hour]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[365_day-dayofyear]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[365_day-dayofweek]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[360_day-year]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[360_day-month]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[360_day-day]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[360_day-hour]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[360_day-dayofyear]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[360_day-dayofweek]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[julian-year]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[julian-month]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[julian-day]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[julian-hour]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[julian-dayofyear]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[julian-dayofweek]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[all_leap-year]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[all_leap-month]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[all_leap-day]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[all_leap-hour]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[all_leap-dayofyear]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[all_leap-dayofweek]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[366_day-year]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[366_day-month]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[366_day-day]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[366_day-hour]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[366_day-dayofyear]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[366_day-dayofweek]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[gregorian-year]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[gregorian-month]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[gregorian-day]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[gregorian-hour]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[gregorian-dayofyear]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[gregorian-dayofweek]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[proleptic_gregorian-year]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[proleptic_gregorian-month]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[proleptic_gregorian-day]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[proleptic_gregorian-hour]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[proleptic_gregorian-dayofyear]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access_1d[proleptic_gregorian-dayofweek]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access[365_day-year]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access[365_day-month]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access[365_day-day]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access[365_day-hour]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access[365_day-dayofyear]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access[365_day-dayofweek]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access[360_day-year]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access[360_day-month]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access[360_day-day]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access[360_day-hour]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access[360_day-dayofyear]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access[360_day-dayofweek]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access[julian-year]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access[julian-month]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access[julian-day]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access[julian-hour]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access[julian-dayofyear]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access[julian-dayofweek]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access[all_leap-year]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access[all_leap-month]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access[all_leap-day]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access[all_leap-hour]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access[all_leap-dayofyear]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access[all_leap-dayofweek]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access[366_day-year]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access[366_day-month]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access[366_day-day]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access[366_day-hour]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access[366_day-dayofyear]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access[366_day-dayofweek]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access[gregorian-year]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access[gregorian-month]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access[gregorian-day]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access[gregorian-hour]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access[gregorian-dayofyear]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access[gregorian-dayofweek]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access[proleptic_gregorian-year]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access[proleptic_gregorian-month]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access[proleptic_gregorian-day]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access[proleptic_gregorian-hour]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access[proleptic_gregorian-dayofyear]",
                            "xarray/tests/test_accessor_dt.py::test_dask_field_access[proleptic_gregorian-dayofweek]",
                            "xarray/tests/test_accessor_dt.py::test_seasons[365_day]",
                            "xarray/tests/test_accessor_dt.py::test_seasons[360_day]",
                            "xarray/tests/test_accessor_dt.py::test_seasons[julian]",
                            "xarray/tests/test_accessor_dt.py::test_seasons[all_leap]",
                            "xarray/tests/test_accessor_dt.py::test_seasons[366_day]",
                            "xarray/tests/test_accessor_dt.py::test_seasons[gregorian]",
                            "xarray/tests/test_accessor_dt.py::test_seasons[proleptic_gregorian]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_floor_accessor[365_day-False]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_floor_accessor[365_day-True]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_floor_accessor[360_day-False]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_floor_accessor[360_day-True]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_floor_accessor[julian-False]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_floor_accessor[julian-True]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_floor_accessor[all_leap-False]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_floor_accessor[all_leap-True]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_floor_accessor[366_day-False]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_floor_accessor[366_day-True]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_floor_accessor[gregorian-False]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_floor_accessor[gregorian-True]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_floor_accessor[proleptic_gregorian-False]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_floor_accessor[proleptic_gregorian-True]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_ceil_accessor[365_day-False]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_ceil_accessor[365_day-True]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_ceil_accessor[360_day-False]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_ceil_accessor[360_day-True]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_ceil_accessor[julian-False]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_ceil_accessor[julian-True]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_ceil_accessor[all_leap-False]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_ceil_accessor[all_leap-True]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_ceil_accessor[366_day-False]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_ceil_accessor[366_day-True]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_ceil_accessor[gregorian-False]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_ceil_accessor[gregorian-True]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_ceil_accessor[proleptic_gregorian-False]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_ceil_accessor[proleptic_gregorian-True]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_round_accessor[365_day-False]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_round_accessor[365_day-True]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_round_accessor[360_day-False]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_round_accessor[360_day-True]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_round_accessor[julian-False]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_round_accessor[julian-True]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_round_accessor[all_leap-False]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_round_accessor[all_leap-True]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_round_accessor[366_day-False]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_round_accessor[366_day-True]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_round_accessor[gregorian-False]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_round_accessor[gregorian-True]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_round_accessor[proleptic_gregorian-False]",
                            "xarray/tests/test_accessor_dt.py::test_cftime_round_accessor[proleptic_gregorian-True]",
                            "xarray/tests/test_calendar_ops.py::test_convert_calendar[standard-noleap-None-D]",
                            "xarray/tests/test_calendar_ops.py::test_convert_calendar[noleap-proleptic_gregorian-True-D]",
                            "xarray/tests/test_calendar_ops.py::test_convert_calendar[noleap-all_leap-None-D]",
                            "xarray/tests/test_calendar_ops.py::test_convert_calendar[all_leap-proleptic_gregorian-False-4H]",
                            "xarray/tests/test_calendar_ops.py::test_convert_calendar_360_days[date-standard-360_day-D]",
                            "xarray/tests/test_calendar_ops.py::test_convert_calendar_360_days[date-360_day-proleptic_gregorian-D]",
                            "xarray/tests/test_calendar_ops.py::test_convert_calendar_360_days[date-proleptic_gregorian-360_day-4H]",
                            "xarray/tests/test_calendar_ops.py::test_convert_calendar_360_days[year-standard-360_day-D]",
                            "xarray/tests/test_calendar_ops.py::test_convert_calendar_360_days[year-360_day-proleptic_gregorian-D]",
                            "xarray/tests/test_calendar_ops.py::test_convert_calendar_360_days[year-proleptic_gregorian-360_day-4H]",
                            "xarray/tests/test_calendar_ops.py::test_convert_calendar_missing[standard-noleap-D]",
                            "xarray/tests/test_calendar_ops.py::test_convert_calendar_missing[noleap-proleptic_gregorian-4H]",
                            "xarray/tests/test_calendar_ops.py::test_convert_calendar_missing[noleap-all_leap-M]",
                            "xarray/tests/test_calendar_ops.py::test_convert_calendar_missing[360_day-noleap-D]",
                            "xarray/tests/test_calendar_ops.py::test_convert_calendar_missing[noleap-360_day-D]",
                            "xarray/tests/test_calendar_ops.py::test_convert_calendar_errors",
                            "xarray/tests/test_calendar_ops.py::test_convert_calendar_same_calendar",
                            "xarray/tests/test_calendar_ops.py::test_interp_calendar[standard-noleap]",
                            "xarray/tests/test_calendar_ops.py::test_interp_calendar[noleap-proleptic_gregorian]",
                            "xarray/tests/test_calendar_ops.py::test_interp_calendar[standard-360_day]",
                            "xarray/tests/test_calendar_ops.py::test_interp_calendar[360_day-proleptic_gregorian]",
                            "xarray/tests/test_calendar_ops.py::test_interp_calendar[noleap-all_leap]",
                            "xarray/tests/test_calendar_ops.py::test_interp_calendar[360_day-noleap]",
                            "xarray/tests/test_calendar_ops.py::test_interp_calendar_errors",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_offset_constructor_valid_n[<BaseCFTimeOffset:",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_offset_constructor_valid_n[<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_offset_constructor_valid_n[<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_offset_constructor_valid_n[<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_offset_constructor_valid_n[<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_offset_constructor_invalid_n[<class",
                            "xarray/tests/test_cftime_offsets.py::test_year_offset_constructor_valid_month[<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_year_offset_constructor_valid_month[<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_year_offset_constructor_valid_month[<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_year_offset_constructor_valid_month[<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_year_offset_constructor_invalid_month[<class",
                            "xarray/tests/test_cftime_offsets.py::test_rule_code[<BaseCFTimeOffset:",
                            "xarray/tests/test_cftime_offsets.py::test_rule_code[<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rule_code[<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rule_code[<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_str_and_repr[<BaseCFTimeOffset:",
                            "xarray/tests/test_cftime_offsets.py::test_str_and_repr[<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_str_and_repr[<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_offset_input[<BaseCFTimeOffset:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_offset_input[<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_offset_input[<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_offset_input[<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_sub_annual[M-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_sub_annual[2M-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_sub_annual[MS-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_sub_annual[2MS-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_sub_annual[D-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_sub_annual[2D-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_sub_annual[H-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_sub_annual[2H-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_sub_annual[T-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_sub_annual[2T-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_sub_annual[min-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_sub_annual[2min-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_sub_annual[S-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_sub_annual[2S-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_sub_annual[L-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_sub_annual[2L-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_sub_annual[ms-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_sub_annual[2ms-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_sub_annual[U-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_sub_annual[2U-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_sub_annual[us-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_sub_annual[2us-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-None-1-JAN]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-None-2-FEB]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-None-3-MAR]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-None-4-APR]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-None-5-MAY]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-None-6-JUN]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-None-7-JUL]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-None-8-AUG]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-None-9-SEP]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-None-10-OCT]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-None-11-NOV]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-None-12-DEC]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-None-0-]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-2-1-JAN]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-2-2-FEB]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-2-3-MAR]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-2-4-APR]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-2-5-MAY]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-2-6-JUN]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-2-7-JUL]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-2-8-AUG]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-2-9-SEP]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-2-10-OCT]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-2-11-NOV]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-2-12-DEC]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[AS-2-0-]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-None-1-JAN]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-None-2-FEB]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-None-3-MAR]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-None-4-APR]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-None-5-MAY]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-None-6-JUN]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-None-7-JUL]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-None-8-AUG]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-None-9-SEP]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-None-10-OCT]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-None-11-NOV]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-None-12-DEC]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-None-0-]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-2-1-JAN]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-2-2-FEB]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-2-3-MAR]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-2-4-APR]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-2-5-MAY]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-2-6-JUN]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-2-7-JUL]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-2-8-AUG]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-2-9-SEP]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-2-10-OCT]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-2-11-NOV]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-2-12-DEC]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_annual[A-2-0-]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-None-1-JAN]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-None-2-FEB]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-None-3-MAR]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-None-4-APR]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-None-5-MAY]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-None-6-JUN]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-None-7-JUL]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-None-8-AUG]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-None-9-SEP]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-None-10-OCT]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-None-11-NOV]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-None-12-DEC]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-None-0-]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-2-1-JAN]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-2-2-FEB]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-2-3-MAR]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-2-4-APR]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-2-5-MAY]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-2-6-JUN]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-2-7-JUL]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-2-8-AUG]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-2-9-SEP]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-2-10-OCT]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-2-11-NOV]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-2-12-DEC]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[QS-2-0-]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-None-1-JAN]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-None-2-FEB]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-None-3-MAR]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-None-4-APR]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-None-5-MAY]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-None-6-JUN]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-None-7-JUL]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-None-8-AUG]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-None-9-SEP]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-None-10-OCT]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-None-11-NOV]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-None-12-DEC]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-None-0-]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-2-1-JAN]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-2-2-FEB]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-2-3-MAR]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-2-4-APR]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-2-5-MAY]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-2-6-JUN]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-2-7-JUL]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-2-8-AUG]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-2-9-SEP]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-2-10-OCT]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-2-11-NOV]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-2-12-DEC]",
                            "xarray/tests/test_cftime_offsets.py::test_to_offset_quarter[Q-2-0-]",
                            "xarray/tests/test_cftime_offsets.py::test_invalid_to_offset_str[Z]",
                            "xarray/tests/test_cftime_offsets.py::test_invalid_to_offset_str[7min2]",
                            "xarray/tests/test_cftime_offsets.py::test_invalid_to_offset_str[AM]",
                            "xarray/tests/test_cftime_offsets.py::test_invalid_to_offset_str[M-]",
                            "xarray/tests/test_cftime_offsets.py::test_invalid_to_offset_str[AS-]",
                            "xarray/tests/test_cftime_offsets.py::test_invalid_to_offset_str[QS-]",
                            "xarray/tests/test_cftime_offsets.py::test_invalid_to_offset_str[1H1min]",
                            "xarray/tests/test_cftime_offsets.py::test_to_cftime_datetime[365_day-2000-01-01-(2000,",
                            "xarray/tests/test_cftime_offsets.py::test_to_cftime_datetime[365_day-(2000,",
                            "xarray/tests/test_cftime_offsets.py::test_to_cftime_datetime[360_day-2000-01-01-(2000,",
                            "xarray/tests/test_cftime_offsets.py::test_to_cftime_datetime[360_day-(2000,",
                            "xarray/tests/test_cftime_offsets.py::test_to_cftime_datetime[julian-2000-01-01-(2000,",
                            "xarray/tests/test_cftime_offsets.py::test_to_cftime_datetime[julian-(2000,",
                            "xarray/tests/test_cftime_offsets.py::test_to_cftime_datetime[all_leap-2000-01-01-(2000,",
                            "xarray/tests/test_cftime_offsets.py::test_to_cftime_datetime[all_leap-(2000,",
                            "xarray/tests/test_cftime_offsets.py::test_to_cftime_datetime[366_day-2000-01-01-(2000,",
                            "xarray/tests/test_cftime_offsets.py::test_to_cftime_datetime[366_day-(2000,",
                            "xarray/tests/test_cftime_offsets.py::test_to_cftime_datetime[gregorian-2000-01-01-(2000,",
                            "xarray/tests/test_cftime_offsets.py::test_to_cftime_datetime[gregorian-(2000,",
                            "xarray/tests/test_cftime_offsets.py::test_to_cftime_datetime[proleptic_gregorian-2000-01-01-(2000,",
                            "xarray/tests/test_cftime_offsets.py::test_to_cftime_datetime[proleptic_gregorian-(2000,",
                            "xarray/tests/test_cftime_offsets.py::test_to_cftime_datetime[standard-2000-01-01-(2000,",
                            "xarray/tests/test_cftime_offsets.py::test_to_cftime_datetime[standard-(2000,",
                            "xarray/tests/test_cftime_offsets.py::test_to_cftime_datetime_error_no_calendar",
                            "xarray/tests/test_cftime_offsets.py::test_to_cftime_datetime_error_type_error",
                            "xarray/tests/test_cftime_offsets.py::test_neq[<BaseCFTimeOffset:",
                            "xarray/tests/test_cftime_offsets.py::test_neq[<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_neq[<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_neq[<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_neq[<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_neq[<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_neq[<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_neq[<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_neq[<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_neq[<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_neq[<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_neq[<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_neq[<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_eq[<BaseCFTimeOffset:",
                            "xarray/tests/test_cftime_offsets.py::test_eq[<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_eq[<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_eq[<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_eq[<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_eq[<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_eq[<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_eq[<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_eq[<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_eq[<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_eq[<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_eq[<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_eq[<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_mul[<BaseCFTimeOffset:",
                            "xarray/tests/test_cftime_offsets.py::test_mul[<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_mul[<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_mul[<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_mul[<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_mul[<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_mul[<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_mul[<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_mul[<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_mul[<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_mul[<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_mul[<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_mul[<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rmul[<BaseCFTimeOffset:",
                            "xarray/tests/test_cftime_offsets.py::test_rmul[<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rmul[<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rmul[<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rmul[<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rmul[<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rmul[<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rmul[<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rmul[<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rmul[<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rmul[<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rmul[<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rmul[<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_neg[<BaseCFTimeOffset:",
                            "xarray/tests/test_cftime_offsets.py::test_neg[<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_neg[<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_neg[<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_neg[<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_neg[<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_neg[<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_neg[<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_neg[<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_neg[<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_neg[<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_neg[<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_neg[<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[365_day-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[365_day-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[365_day-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[365_day-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[365_day-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[365_day-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[360_day-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[360_day-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[360_day-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[360_day-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[360_day-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[360_day-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[julian-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[julian-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[julian-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[julian-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[julian-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[julian-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[all_leap-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[all_leap-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[all_leap-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[all_leap-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[all_leap-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[all_leap-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[366_day-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[366_day-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[366_day-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[366_day-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[366_day-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[366_day-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[gregorian-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[gregorian-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[gregorian-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[gregorian-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[gregorian-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[gregorian-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[proleptic_gregorian-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[proleptic_gregorian-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[proleptic_gregorian-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[proleptic_gregorian-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[proleptic_gregorian-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[proleptic_gregorian-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[standard-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[standard-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[standard-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[standard-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[standard-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_add_sub_monthly[standard-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[365_day-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[365_day-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[365_day-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[365_day-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[365_day-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[365_day-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[360_day-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[360_day-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[360_day-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[360_day-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[360_day-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[360_day-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[julian-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[julian-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[julian-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[julian-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[julian-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[julian-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[all_leap-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[all_leap-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[all_leap-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[all_leap-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[all_leap-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[all_leap-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[366_day-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[366_day-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[366_day-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[366_day-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[366_day-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[366_day-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[gregorian-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[gregorian-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[gregorian-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[gregorian-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[gregorian-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[gregorian-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[proleptic_gregorian-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[proleptic_gregorian-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[proleptic_gregorian-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[proleptic_gregorian-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[proleptic_gregorian-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[proleptic_gregorian-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[standard-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[standard-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[standard-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[standard-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[standard-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_radd_sub_monthly[standard-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[365_day-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[365_day-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[365_day-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[365_day-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[365_day-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[365_day-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[360_day-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[360_day-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[360_day-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[360_day-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[360_day-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[360_day-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[julian-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[julian-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[julian-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[julian-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[julian-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[julian-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[all_leap-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[all_leap-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[all_leap-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[all_leap-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[all_leap-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[all_leap-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[366_day-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[366_day-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[366_day-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[366_day-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[366_day-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[366_day-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[gregorian-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[gregorian-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[gregorian-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[gregorian-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[gregorian-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[gregorian-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[proleptic_gregorian-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[proleptic_gregorian-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[proleptic_gregorian-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[proleptic_gregorian-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[proleptic_gregorian-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[proleptic_gregorian-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[standard-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[standard-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[standard-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[standard-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[standard-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rsub_sub_monthly[standard-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[365_day-<BaseCFTimeOffset:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[365_day-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[365_day-<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[365_day-<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[365_day-<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[365_day-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[365_day-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[365_day-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[365_day-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[365_day-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[365_day-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[365_day-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[365_day-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[360_day-<BaseCFTimeOffset:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[360_day-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[360_day-<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[360_day-<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[360_day-<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[360_day-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[360_day-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[360_day-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[360_day-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[360_day-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[360_day-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[360_day-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[360_day-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[julian-<BaseCFTimeOffset:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[julian-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[julian-<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[julian-<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[julian-<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[julian-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[julian-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[julian-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[julian-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[julian-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[julian-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[julian-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[julian-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[all_leap-<BaseCFTimeOffset:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[all_leap-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[all_leap-<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[all_leap-<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[all_leap-<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[all_leap-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[all_leap-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[all_leap-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[all_leap-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[all_leap-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[all_leap-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[all_leap-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[all_leap-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[366_day-<BaseCFTimeOffset:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[366_day-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[366_day-<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[366_day-<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[366_day-<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[366_day-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[366_day-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[366_day-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[366_day-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[366_day-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[366_day-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[366_day-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[366_day-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[gregorian-<BaseCFTimeOffset:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[gregorian-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[gregorian-<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[gregorian-<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[gregorian-<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[gregorian-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[gregorian-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[gregorian-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[gregorian-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[gregorian-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[gregorian-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[gregorian-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[gregorian-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[proleptic_gregorian-<BaseCFTimeOffset:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[proleptic_gregorian-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[proleptic_gregorian-<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[proleptic_gregorian-<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[proleptic_gregorian-<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[proleptic_gregorian-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[proleptic_gregorian-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[proleptic_gregorian-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[proleptic_gregorian-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[proleptic_gregorian-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[proleptic_gregorian-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[proleptic_gregorian-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[proleptic_gregorian-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[standard-<BaseCFTimeOffset:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[standard-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[standard-<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[standard-<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[standard-<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[standard-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[standard-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[standard-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[standard-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[standard-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[standard-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[standard-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_sub_error[standard-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset[<BaseCFTimeOffset:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset[<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset[<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset[<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset[<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset[<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset[<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset[<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset[<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset[<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset[<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset[<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset[<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset_error[<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset_error[<BaseCFTimeOffset:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset_error[<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset_error[<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset_error[<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset_error[<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset_error[<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset_error[<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset_error[<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset_error[<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset_error[<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset_error[<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_minus_offset_error[<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_days_in_month_non_december[365_day]",
                            "xarray/tests/test_cftime_offsets.py::test_days_in_month_non_december[360_day]",
                            "xarray/tests/test_cftime_offsets.py::test_days_in_month_non_december[julian]",
                            "xarray/tests/test_cftime_offsets.py::test_days_in_month_non_december[all_leap]",
                            "xarray/tests/test_cftime_offsets.py::test_days_in_month_non_december[366_day]",
                            "xarray/tests/test_cftime_offsets.py::test_days_in_month_non_december[gregorian]",
                            "xarray/tests/test_cftime_offsets.py::test_days_in_month_non_december[proleptic_gregorian]",
                            "xarray/tests/test_cftime_offsets.py::test_days_in_month_non_december[standard]",
                            "xarray/tests/test_cftime_offsets.py::test_days_in_month_december[365_day]",
                            "xarray/tests/test_cftime_offsets.py::test_days_in_month_december[360_day]",
                            "xarray/tests/test_cftime_offsets.py::test_days_in_month_december[julian]",
                            "xarray/tests/test_cftime_offsets.py::test_days_in_month_december[all_leap]",
                            "xarray/tests/test_cftime_offsets.py::test_days_in_month_december[366_day]",
                            "xarray/tests/test_cftime_offsets.py::test_days_in_month_december[gregorian]",
                            "xarray/tests/test_cftime_offsets.py::test_days_in_month_december[proleptic_gregorian]",
                            "xarray/tests/test_cftime_offsets.py::test_days_in_month_december[standard]",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_begin[365_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_begin[365_day-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_begin[360_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_begin[360_day-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_begin[julian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_begin[julian-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_begin[all_leap-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_begin[all_leap-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_begin[366_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_begin[366_day-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_begin[gregorian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_begin[gregorian-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_begin[proleptic_gregorian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_begin[proleptic_gregorian-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_begin[standard-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_begin[standard-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end[365_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end[365_day-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end[360_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end[360_day-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end[julian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end[julian-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end[all_leap-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end[all_leap-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end[366_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end[366_day-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end[gregorian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end[gregorian-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end[proleptic_gregorian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end[proleptic_gregorian-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end[standard-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end[standard-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end_onOffset[365_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end_onOffset[365_day-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end_onOffset[360_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end_onOffset[360_day-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end_onOffset[julian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end_onOffset[julian-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end_onOffset[all_leap-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end_onOffset[all_leap-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end_onOffset[366_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end_onOffset[366_day-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end_onOffset[gregorian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end_onOffset[gregorian-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end_onOffset[proleptic_gregorian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end_onOffset[proleptic_gregorian-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end_onOffset[standard-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_month_end_onOffset[standard-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_begin[365_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_begin[365_day-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_begin[360_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_begin[360_day-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_begin[julian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_begin[julian-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_begin[all_leap-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_begin[all_leap-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_begin[366_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_begin[366_day-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_begin[gregorian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_begin[gregorian-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_begin[proleptic_gregorian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_begin[proleptic_gregorian-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_begin[standard-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_begin[standard-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end[365_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end[365_day-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end[360_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end[360_day-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end[julian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end[julian-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end[all_leap-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end[all_leap-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end[366_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end[366_day-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end[gregorian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end[gregorian-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end[proleptic_gregorian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end[proleptic_gregorian-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end[standard-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end[standard-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end_onOffset[365_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end_onOffset[365_day-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end_onOffset[365_day-(3,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end_onOffset[360_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end_onOffset[360_day-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end_onOffset[360_day-(3,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end_onOffset[julian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end_onOffset[julian-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end_onOffset[julian-(3,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end_onOffset[all_leap-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end_onOffset[all_leap-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end_onOffset[all_leap-(3,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end_onOffset[366_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end_onOffset[366_day-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end_onOffset[366_day-(3,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end_onOffset[gregorian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end_onOffset[gregorian-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end_onOffset[gregorian-(3,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end_onOffset[proleptic_gregorian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end_onOffset[proleptic_gregorian-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end_onOffset[proleptic_gregorian-(3,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end_onOffset[standard-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end_onOffset[standard-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_year_end_onOffset[standard-(3,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_begin[365_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_begin[365_day-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_begin[360_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_begin[360_day-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_begin[julian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_begin[julian-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_begin[all_leap-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_begin[all_leap-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_begin[366_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_begin[366_day-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_begin[gregorian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_begin[gregorian-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_begin[proleptic_gregorian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_begin[proleptic_gregorian-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_begin[standard-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_begin[standard-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_end[365_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_end[365_day-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_end[360_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_end[360_day-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_end[julian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_end[julian-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_end[all_leap-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_end[all_leap-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_end[366_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_end[366_day-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_end[gregorian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_end[gregorian-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_end[proleptic_gregorian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_end[proleptic_gregorian-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_end[standard-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_end[standard-(2,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_end_onOffset[365_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_end_onOffset[360_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_end_onOffset[julian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_end_onOffset[all_leap-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_end_onOffset[366_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_end_onOffset[gregorian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_end_onOffset[proleptic_gregorian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_add_quarter_end_onOffset[standard-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_onOffset[365_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_onOffset[360_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_onOffset[julian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_onOffset[all_leap-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_onOffset[366_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_onOffset[gregorian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_onOffset[proleptic_gregorian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_onOffset[standard-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_onOffset_month_or_quarter_or_year_end[365_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_onOffset_month_or_quarter_or_year_end[360_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_onOffset_month_or_quarter_or_year_end[julian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_onOffset_month_or_quarter_or_year_end[all_leap-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_onOffset_month_or_quarter_or_year_end[366_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_onOffset_month_or_quarter_or_year_end[gregorian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_onOffset_month_or_quarter_or_year_end[proleptic_gregorian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_onOffset_month_or_quarter_or_year_end[standard-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[365_day-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[365_day-<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[365_day-<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[365_day-<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[365_day-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[365_day-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[365_day-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[365_day-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[365_day-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[365_day-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[365_day-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[365_day-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[360_day-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[360_day-<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[360_day-<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[360_day-<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[360_day-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[360_day-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[360_day-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[360_day-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[360_day-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[360_day-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[360_day-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[360_day-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[julian-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[julian-<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[julian-<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[julian-<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[julian-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[julian-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[julian-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[julian-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[julian-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[julian-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[julian-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[julian-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[all_leap-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[all_leap-<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[all_leap-<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[all_leap-<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[all_leap-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[all_leap-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[all_leap-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[all_leap-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[all_leap-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[all_leap-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[all_leap-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[all_leap-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[366_day-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[366_day-<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[366_day-<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[366_day-<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[366_day-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[366_day-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[366_day-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[366_day-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[366_day-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[366_day-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[366_day-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[366_day-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[gregorian-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[gregorian-<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[gregorian-<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[gregorian-<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[gregorian-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[gregorian-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[gregorian-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[gregorian-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[gregorian-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[gregorian-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[gregorian-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[gregorian-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[proleptic_gregorian-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[proleptic_gregorian-<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[proleptic_gregorian-<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[proleptic_gregorian-<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[proleptic_gregorian-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[proleptic_gregorian-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[proleptic_gregorian-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[proleptic_gregorian-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[proleptic_gregorian-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[proleptic_gregorian-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[proleptic_gregorian-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[proleptic_gregorian-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[standard-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[standard-<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[standard-<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[standard-<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[standard-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[standard-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[standard-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[standard-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[standard-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[standard-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[standard-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollforward[standard-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[365_day-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[365_day-<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[365_day-<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[365_day-<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[365_day-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[365_day-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[365_day-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[365_day-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[365_day-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[365_day-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[365_day-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[365_day-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[360_day-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[360_day-<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[360_day-<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[360_day-<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[360_day-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[360_day-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[360_day-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[360_day-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[360_day-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[360_day-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[360_day-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[360_day-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[julian-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[julian-<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[julian-<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[julian-<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[julian-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[julian-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[julian-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[julian-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[julian-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[julian-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[julian-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[julian-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[all_leap-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[all_leap-<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[all_leap-<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[all_leap-<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[all_leap-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[all_leap-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[all_leap-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[all_leap-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[all_leap-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[all_leap-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[all_leap-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[all_leap-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[366_day-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[366_day-<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[366_day-<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[366_day-<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[366_day-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[366_day-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[366_day-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[366_day-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[366_day-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[366_day-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[366_day-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[366_day-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[gregorian-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[gregorian-<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[gregorian-<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[gregorian-<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[gregorian-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[gregorian-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[gregorian-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[gregorian-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[gregorian-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[gregorian-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[gregorian-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[gregorian-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[proleptic_gregorian-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[proleptic_gregorian-<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[proleptic_gregorian-<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[proleptic_gregorian-<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[proleptic_gregorian-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[proleptic_gregorian-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[proleptic_gregorian-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[proleptic_gregorian-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[proleptic_gregorian-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[proleptic_gregorian-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[proleptic_gregorian-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[proleptic_gregorian-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[standard-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[standard-<YearEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[standard-<QuarterBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[standard-<QuarterEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[standard-<MonthBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[standard-<MonthEnd:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[standard-<Day:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[standard-<Hour:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[standard-<Minute:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[standard-<Second:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[standard-<Millisecond:",
                            "xarray/tests/test_cftime_offsets.py::test_rollback[standard-<Microsecond:",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[365_day-0001-01-01-0001-01-04-None-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[365_day-0001-01-01-0001-01-04-None-D-left-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[365_day-0001-01-01-0001-01-04-None-D-right-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[365_day-0001-01-01T01:00:00-0001-01-04-None-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[365_day-0001-01-01",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[365_day-0001-01-01T01:00:00-0001-01-04-None-D-None-True-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[365_day-0001-01-01-None-4-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[365_day-None-0001-01-04-4-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[365_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[365_day-0001-01-30-0011-02-01-None-3AS-JUN-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[365_day-0001-01-04-0001-01-01-None-D-None-False-[]]",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[365_day-0010-None-4-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[365_day-0001-01-01-0001-01-04-4-None-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[365_day-0001-06-01-None-4-3QS-JUN-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[360_day-0001-01-01-0001-01-04-None-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[360_day-0001-01-01-0001-01-04-None-D-left-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[360_day-0001-01-01-0001-01-04-None-D-right-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[360_day-0001-01-01T01:00:00-0001-01-04-None-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[360_day-0001-01-01",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[360_day-0001-01-01T01:00:00-0001-01-04-None-D-None-True-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[360_day-0001-01-01-None-4-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[360_day-None-0001-01-04-4-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[360_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[360_day-0001-01-30-0011-02-01-None-3AS-JUN-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[360_day-0001-01-04-0001-01-01-None-D-None-False-[]]",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[360_day-0010-None-4-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[360_day-0001-01-01-0001-01-04-4-None-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[360_day-0001-06-01-None-4-3QS-JUN-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[julian-0001-01-01-0001-01-04-None-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[julian-0001-01-01-0001-01-04-None-D-left-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[julian-0001-01-01-0001-01-04-None-D-right-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[julian-0001-01-01T01:00:00-0001-01-04-None-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[julian-0001-01-01",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[julian-0001-01-01T01:00:00-0001-01-04-None-D-None-True-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[julian-0001-01-01-None-4-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[julian-None-0001-01-04-4-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[julian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[julian-0001-01-30-0011-02-01-None-3AS-JUN-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[julian-0001-01-04-0001-01-01-None-D-None-False-[]]",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[julian-0010-None-4-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[julian-0001-01-01-0001-01-04-4-None-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[julian-0001-06-01-None-4-3QS-JUN-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[all_leap-0001-01-01-0001-01-04-None-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[all_leap-0001-01-01-0001-01-04-None-D-left-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[all_leap-0001-01-01-0001-01-04-None-D-right-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[all_leap-0001-01-01T01:00:00-0001-01-04-None-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[all_leap-0001-01-01",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[all_leap-0001-01-01T01:00:00-0001-01-04-None-D-None-True-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[all_leap-0001-01-01-None-4-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[all_leap-None-0001-01-04-4-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[all_leap-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[all_leap-0001-01-30-0011-02-01-None-3AS-JUN-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[all_leap-0001-01-04-0001-01-01-None-D-None-False-[]]",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[all_leap-0010-None-4-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[all_leap-0001-01-01-0001-01-04-4-None-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[all_leap-0001-06-01-None-4-3QS-JUN-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[366_day-0001-01-01-0001-01-04-None-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[366_day-0001-01-01-0001-01-04-None-D-left-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[366_day-0001-01-01-0001-01-04-None-D-right-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[366_day-0001-01-01T01:00:00-0001-01-04-None-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[366_day-0001-01-01",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[366_day-0001-01-01T01:00:00-0001-01-04-None-D-None-True-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[366_day-0001-01-01-None-4-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[366_day-None-0001-01-04-4-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[366_day-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[366_day-0001-01-30-0011-02-01-None-3AS-JUN-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[366_day-0001-01-04-0001-01-01-None-D-None-False-[]]",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[366_day-0010-None-4-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[366_day-0001-01-01-0001-01-04-4-None-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[366_day-0001-06-01-None-4-3QS-JUN-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[gregorian-0001-01-01-0001-01-04-None-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[gregorian-0001-01-01-0001-01-04-None-D-left-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[gregorian-0001-01-01-0001-01-04-None-D-right-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[gregorian-0001-01-01T01:00:00-0001-01-04-None-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[gregorian-0001-01-01",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[gregorian-0001-01-01T01:00:00-0001-01-04-None-D-None-True-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[gregorian-0001-01-01-None-4-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[gregorian-None-0001-01-04-4-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[gregorian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[gregorian-0001-01-30-0011-02-01-None-3AS-JUN-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[gregorian-0001-01-04-0001-01-01-None-D-None-False-[]]",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[gregorian-0010-None-4-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[gregorian-0001-01-01-0001-01-04-4-None-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[gregorian-0001-06-01-None-4-3QS-JUN-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[proleptic_gregorian-0001-01-01-0001-01-04-None-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[proleptic_gregorian-0001-01-01-0001-01-04-None-D-left-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[proleptic_gregorian-0001-01-01-0001-01-04-None-D-right-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[proleptic_gregorian-0001-01-01T01:00:00-0001-01-04-None-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[proleptic_gregorian-0001-01-01",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[proleptic_gregorian-0001-01-01T01:00:00-0001-01-04-None-D-None-True-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[proleptic_gregorian-0001-01-01-None-4-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[proleptic_gregorian-None-0001-01-04-4-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[proleptic_gregorian-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[proleptic_gregorian-0001-01-30-0011-02-01-None-3AS-JUN-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[proleptic_gregorian-0001-01-04-0001-01-01-None-D-None-False-[]]",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[proleptic_gregorian-0010-None-4-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[proleptic_gregorian-0001-01-01-0001-01-04-4-None-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[proleptic_gregorian-0001-06-01-None-4-3QS-JUN-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[standard-0001-01-01-0001-01-04-None-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[standard-0001-01-01-0001-01-04-None-D-left-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[standard-0001-01-01-0001-01-04-None-D-right-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[standard-0001-01-01T01:00:00-0001-01-04-None-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[standard-0001-01-01",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[standard-0001-01-01T01:00:00-0001-01-04-None-D-None-True-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[standard-0001-01-01-None-4-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[standard-None-0001-01-04-4-D-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[standard-(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[standard-0001-01-30-0011-02-01-None-3AS-JUN-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[standard-0001-01-04-0001-01-01-None-D-None-False-[]]",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[standard-0010-None-4-<YearBegin:",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[standard-0001-01-01-0001-01-04-4-None-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range[standard-0001-06-01-None-4-3QS-JUN-None-False-[(1,",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range_name",
                            "xarray/tests/test_cftime_offsets.py::test_invalid_cftime_range_inputs[None-None-5-A-None]",
                            "xarray/tests/test_cftime_offsets.py::test_invalid_cftime_range_inputs[2000-None-None-A-None]",
                            "xarray/tests/test_cftime_offsets.py::test_invalid_cftime_range_inputs[None-2000-None-A-None]",
                            "xarray/tests/test_cftime_offsets.py::test_invalid_cftime_range_inputs[2000-2001-None-None-None]",
                            "xarray/tests/test_cftime_offsets.py::test_invalid_cftime_range_inputs[None-None-None-None-None]",
                            "xarray/tests/test_cftime_offsets.py::test_invalid_cftime_range_inputs[2000-2001-None-A-up]",
                            "xarray/tests/test_cftime_offsets.py::test_invalid_cftime_range_inputs[2000-2001-5-A-None]",
                            "xarray/tests/test_cftime_offsets.py::test_calendar_specific_month_end[2M-noleap-[(2,",
                            "xarray/tests/test_cftime_offsets.py::test_calendar_specific_month_end[2M-all_leap-[(2,",
                            "xarray/tests/test_cftime_offsets.py::test_calendar_specific_month_end[2M-360_day-[(2,",
                            "xarray/tests/test_cftime_offsets.py::test_calendar_specific_month_end[2M-standard-[(2,",
                            "xarray/tests/test_cftime_offsets.py::test_calendar_specific_month_end[2M-gregorian-[(2,",
                            "xarray/tests/test_cftime_offsets.py::test_calendar_specific_month_end[2M-julian-[(2,",
                            "xarray/tests/test_cftime_offsets.py::test_calendar_year_length[noleap-2000-2001-365]",
                            "xarray/tests/test_cftime_offsets.py::test_calendar_year_length[all_leap-2000-2001-366]",
                            "xarray/tests/test_cftime_offsets.py::test_calendar_year_length[360_day-2000-2001-360]",
                            "xarray/tests/test_cftime_offsets.py::test_calendar_year_length[standard-2000-2001-366]",
                            "xarray/tests/test_cftime_offsets.py::test_calendar_year_length[gregorian-2000-2001-366]",
                            "xarray/tests/test_cftime_offsets.py::test_calendar_year_length[julian-2000-2001-366]",
                            "xarray/tests/test_cftime_offsets.py::test_calendar_year_length[noleap-2001-2002-365]",
                            "xarray/tests/test_cftime_offsets.py::test_calendar_year_length[all_leap-2001-2002-366]",
                            "xarray/tests/test_cftime_offsets.py::test_calendar_year_length[360_day-2001-2002-360]",
                            "xarray/tests/test_cftime_offsets.py::test_calendar_year_length[standard-2001-2002-365]",
                            "xarray/tests/test_cftime_offsets.py::test_calendar_year_length[gregorian-2001-2002-365]",
                            "xarray/tests/test_cftime_offsets.py::test_calendar_year_length[julian-2001-2002-365]",
                            "xarray/tests/test_cftime_offsets.py::test_dayofweek_after_cftime_range[A]",
                            "xarray/tests/test_cftime_offsets.py::test_dayofweek_after_cftime_range[M]",
                            "xarray/tests/test_cftime_offsets.py::test_dayofweek_after_cftime_range[D]",
                            "xarray/tests/test_cftime_offsets.py::test_dayofyear_after_cftime_range[A]",
                            "xarray/tests/test_cftime_offsets.py::test_dayofyear_after_cftime_range[M]",
                            "xarray/tests/test_cftime_offsets.py::test_dayofyear_after_cftime_range[D]",
                            "xarray/tests/test_cftime_offsets.py::test_cftime_range_standard_calendar_refers_to_gregorian",
                            "xarray/tests/test_cftime_offsets.py::test_date_range[1990-01-01-standard-None-DatetimeIndex]",
                            "xarray/tests/test_cftime_offsets.py::test_date_range[1990-01-01-proleptic_gregorian-True-CFTimeIndex]",
                            "xarray/tests/test_cftime_offsets.py::test_date_range[1990-01-01-noleap-None-CFTimeIndex]",
                            "xarray/tests/test_cftime_offsets.py::test_date_range[1990-01-01-gregorian-False-DatetimeIndex]",
                            "xarray/tests/test_cftime_offsets.py::test_date_range[1400-01-01-standard-None-CFTimeIndex]",
                            "xarray/tests/test_cftime_offsets.py::test_date_range[3400-01-01-standard-None-CFTimeIndex]",
                            "xarray/tests/test_cftime_offsets.py::test_date_range_errors",
                            "xarray/tests/test_cftime_offsets.py::test_date_range_like[2020-02-01-4M-standard-noleap-None-2020-02-28-False]",
                            "xarray/tests/test_cftime_offsets.py::test_date_range_like[2020-02-01-M-noleap-gregorian-True-2020-02-29-True]",
                            "xarray/tests/test_cftime_offsets.py::test_date_range_like[2020-02-28-3H-all_leap-gregorian-False-2020-02-28-True]",
                            "xarray/tests/test_cftime_offsets.py::test_date_range_like[2020-03-30-M-360_day-gregorian-False-2020-03-31-True]",
                            "xarray/tests/test_cftime_offsets.py::test_date_range_like[2020-03-31-M-gregorian-360_day-None-2020-03-30-False]",
                            "xarray/tests/test_cftime_offsets.py::test_date_range_like_same_calendar",
                            "xarray/tests/test_cftime_offsets.py::test_date_range_like_errors",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates0-days",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates1-days",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates2-days",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates3-days",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates4-days",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates5-days",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates6-days",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates7-days",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates8-days",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates9-days",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates10-days",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates11-days",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates12-hours",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates13-hours",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates14-hours",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates15-hour",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates16-hour",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates17-hour",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates18-Hour",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates19-Hour",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates20-Hour",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates21-",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates22-",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates23-",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[10-days",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates27-daYs",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates28-daYs",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates29-daYs",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates30-days",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates31-days",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates32-days",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates33-days",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates34-days",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates35-days",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates36-days",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates37-days",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates38-days",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[0-days",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates42-days",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates43-days",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates44-days",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates45-days",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates46-days",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates47-days",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates48-days",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates49-days",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates50-days",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates51-days",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates52-days",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates53-days",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates54-days",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates55-days",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates56-days",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[17093352.0-hours",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates60-hours",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates61-hours",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates62-hours",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[0-milliseconds",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[0-microseconds",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates69-seconds",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates70-seconds",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates71-seconds",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates72-hour",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates73-hour",
                            "xarray/tests/test_coding_times.py::test_cf_datetime[num_dates74-hour",
                            "xarray/tests/test_coding_times.py::test_decode_cf_datetime_non_iso_strings",
                            "xarray/tests/test_coding_times.py::test_decode_standard_calendar_inside_timestamp_range[gregorian]",
                            "xarray/tests/test_coding_times.py::test_decode_standard_calendar_inside_timestamp_range[proleptic_gregorian]",
                            "xarray/tests/test_coding_times.py::test_decode_standard_calendar_inside_timestamp_range[standard]",
                            "xarray/tests/test_coding_times.py::test_decode_non_standard_calendar_inside_timestamp_range[360_day]",
                            "xarray/tests/test_coding_times.py::test_decode_non_standard_calendar_inside_timestamp_range[365_day]",
                            "xarray/tests/test_coding_times.py::test_decode_non_standard_calendar_inside_timestamp_range[366_day]",
                            "xarray/tests/test_coding_times.py::test_decode_non_standard_calendar_inside_timestamp_range[all_leap]",
                            "xarray/tests/test_coding_times.py::test_decode_non_standard_calendar_inside_timestamp_range[julian]",
                            "xarray/tests/test_coding_times.py::test_decode_non_standard_calendar_inside_timestamp_range[noleap]",
                            "xarray/tests/test_coding_times.py::test_decode_dates_outside_timestamp_range[360_day]",
                            "xarray/tests/test_coding_times.py::test_decode_dates_outside_timestamp_range[365_day]",
                            "xarray/tests/test_coding_times.py::test_decode_dates_outside_timestamp_range[366_day]",
                            "xarray/tests/test_coding_times.py::test_decode_dates_outside_timestamp_range[all_leap]",
                            "xarray/tests/test_coding_times.py::test_decode_dates_outside_timestamp_range[gregorian]",
                            "xarray/tests/test_coding_times.py::test_decode_dates_outside_timestamp_range[julian]",
                            "xarray/tests/test_coding_times.py::test_decode_dates_outside_timestamp_range[noleap]",
                            "xarray/tests/test_coding_times.py::test_decode_dates_outside_timestamp_range[proleptic_gregorian]",
                            "xarray/tests/test_coding_times.py::test_decode_dates_outside_timestamp_range[standard]",
                            "xarray/tests/test_coding_times.py::test_decode_standard_calendar_single_element_inside_timestamp_range[gregorian]",
                            "xarray/tests/test_coding_times.py::test_decode_standard_calendar_single_element_inside_timestamp_range[proleptic_gregorian]",
                            "xarray/tests/test_coding_times.py::test_decode_standard_calendar_single_element_inside_timestamp_range[standard]",
                            "xarray/tests/test_coding_times.py::test_decode_non_standard_calendar_single_element_inside_timestamp_range[360_day]",
                            "xarray/tests/test_coding_times.py::test_decode_non_standard_calendar_single_element_inside_timestamp_range[365_day]",
                            "xarray/tests/test_coding_times.py::test_decode_non_standard_calendar_single_element_inside_timestamp_range[366_day]",
                            "xarray/tests/test_coding_times.py::test_decode_non_standard_calendar_single_element_inside_timestamp_range[all_leap]",
                            "xarray/tests/test_coding_times.py::test_decode_non_standard_calendar_single_element_inside_timestamp_range[julian]",
                            "xarray/tests/test_coding_times.py::test_decode_non_standard_calendar_single_element_inside_timestamp_range[noleap]",
                            "xarray/tests/test_coding_times.py::test_decode_single_element_outside_timestamp_range[360_day]",
                            "xarray/tests/test_coding_times.py::test_decode_single_element_outside_timestamp_range[365_day]",
                            "xarray/tests/test_coding_times.py::test_decode_single_element_outside_timestamp_range[366_day]",
                            "xarray/tests/test_coding_times.py::test_decode_single_element_outside_timestamp_range[all_leap]",
                            "xarray/tests/test_coding_times.py::test_decode_single_element_outside_timestamp_range[julian]",
                            "xarray/tests/test_coding_times.py::test_decode_single_element_outside_timestamp_range[noleap]",
                            "xarray/tests/test_coding_times.py::test_decode_standard_calendar_multidim_time_inside_timestamp_range[gregorian]",
                            "xarray/tests/test_coding_times.py::test_decode_standard_calendar_multidim_time_inside_timestamp_range[proleptic_gregorian]",
                            "xarray/tests/test_coding_times.py::test_decode_standard_calendar_multidim_time_inside_timestamp_range[standard]",
                            "xarray/tests/test_coding_times.py::test_decode_nonstandard_calendar_multidim_time_inside_timestamp_range[360_day]",
                            "xarray/tests/test_coding_times.py::test_decode_nonstandard_calendar_multidim_time_inside_timestamp_range[365_day]",
                            "xarray/tests/test_coding_times.py::test_decode_nonstandard_calendar_multidim_time_inside_timestamp_range[366_day]",
                            "xarray/tests/test_coding_times.py::test_decode_nonstandard_calendar_multidim_time_inside_timestamp_range[all_leap]",
                            "xarray/tests/test_coding_times.py::test_decode_nonstandard_calendar_multidim_time_inside_timestamp_range[julian]",
                            "xarray/tests/test_coding_times.py::test_decode_nonstandard_calendar_multidim_time_inside_timestamp_range[noleap]",
                            "xarray/tests/test_coding_times.py::test_decode_multidim_time_outside_timestamp_range[360_day]",
                            "xarray/tests/test_coding_times.py::test_decode_multidim_time_outside_timestamp_range[365_day]",
                            "xarray/tests/test_coding_times.py::test_decode_multidim_time_outside_timestamp_range[366_day]",
                            "xarray/tests/test_coding_times.py::test_decode_multidim_time_outside_timestamp_range[all_leap]",
                            "xarray/tests/test_coding_times.py::test_decode_multidim_time_outside_timestamp_range[gregorian]",
                            "xarray/tests/test_coding_times.py::test_decode_multidim_time_outside_timestamp_range[julian]",
                            "xarray/tests/test_coding_times.py::test_decode_multidim_time_outside_timestamp_range[noleap]",
                            "xarray/tests/test_coding_times.py::test_decode_multidim_time_outside_timestamp_range[proleptic_gregorian]",
                            "xarray/tests/test_coding_times.py::test_decode_multidim_time_outside_timestamp_range[standard]",
                            "xarray/tests/test_coding_times.py::test_decode_non_standard_calendar_single_element[360_day-720058.0]",
                            "xarray/tests/test_coding_times.py::test_decode_non_standard_calendar_single_element[all_leap-732059.0]",
                            "xarray/tests/test_coding_times.py::test_decode_non_standard_calendar_single_element[366_day-732059.0]",
                            "xarray/tests/test_coding_times.py::test_decode_360_day_calendar",
                            "xarray/tests/test_coding_times.py::test_decode_abbreviation",
                            "xarray/tests/test_coding_times.py::test_cf_datetime_nan[num_dates0-days",
                            "xarray/tests/test_coding_times.py::test_cf_datetime_nan[num_dates1-days",
                            "xarray/tests/test_coding_times.py::test_cf_datetime_nan[num_dates2-days",
                            "xarray/tests/test_coding_times.py::test_decoded_cf_datetime_array_2d",
                            "xarray/tests/test_coding_times.py::test_infer_cftime_datetime_units[date_args0-days",
                            "xarray/tests/test_coding_times.py::test_infer_cftime_datetime_units[date_args1-seconds",
                            "xarray/tests/test_coding_times.py::test_infer_cftime_datetime_units[date_args2-days",
                            "xarray/tests/test_coding_times.py::test_format_cftime_datetime[date_args0-0001-02-03",
                            "xarray/tests/test_coding_times.py::test_format_cftime_datetime[date_args1-0010-02-03",
                            "xarray/tests/test_coding_times.py::test_format_cftime_datetime[date_args2-0100-02-03",
                            "xarray/tests/test_coding_times.py::test_format_cftime_datetime[date_args3-1000-02-03",
                            "xarray/tests/test_coding_times.py::test_encode_time_bounds",
                            "xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_1d[360_day]",
                            "xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_1d[365_day]",
                            "xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_1d[366_day]",
                            "xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_1d[all_leap]",
                            "xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_1d[gregorian]",
                            "xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_1d[julian]",
                            "xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_1d[noleap]",
                            "xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_1d[proleptic_gregorian]",
                            "xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_1d[standard]",
                            "xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_1d[360_day]",
                            "xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_1d[365_day]",
                            "xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_1d[366_day]",
                            "xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_1d[all_leap]",
                            "xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_1d[gregorian]",
                            "xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_1d[julian]",
                            "xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_1d[noleap]",
                            "xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_1d[proleptic_gregorian]",
                            "xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_1d[standard]",
                            "xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_3d[360_day]",
                            "xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_3d[365_day]",
                            "xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_3d[366_day]",
                            "xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_3d[all_leap]",
                            "xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_3d[gregorian]",
                            "xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_3d[julian]",
                            "xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_3d[noleap]",
                            "xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_3d[proleptic_gregorian]",
                            "xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_3d[standard]",
                            "xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_3d[360_day]",
                            "xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_3d[365_day]",
                            "xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_3d[366_day]",
                            "xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_3d[all_leap]",
                            "xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_3d[gregorian]",
                            "xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_3d[julian]",
                            "xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_3d[noleap]",
                            "xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_3d[proleptic_gregorian]",
                            "xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_dask_3d[standard]",
                            "xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_non_cftimes_dask[non_cftime_data0]",
                            "xarray/tests/test_coding_times.py::test_contains_cftime_datetimes_non_cftimes_dask[non_cftime_data1]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_invalid_pandas_valid_cftime",
                            "xarray/tests/test_coding_times.py::test_time_units_with_timezone_roundtrip[360_day]",
                            "xarray/tests/test_coding_times.py::test_time_units_with_timezone_roundtrip[365_day]",
                            "xarray/tests/test_coding_times.py::test_time_units_with_timezone_roundtrip[366_day]",
                            "xarray/tests/test_coding_times.py::test_time_units_with_timezone_roundtrip[all_leap]",
                            "xarray/tests/test_coding_times.py::test_time_units_with_timezone_roundtrip[gregorian]",
                            "xarray/tests/test_coding_times.py::test_time_units_with_timezone_roundtrip[julian]",
                            "xarray/tests/test_coding_times.py::test_time_units_with_timezone_roundtrip[noleap]",
                            "xarray/tests/test_coding_times.py::test_time_units_with_timezone_roundtrip[proleptic_gregorian]",
                            "xarray/tests/test_coding_times.py::test_time_units_with_timezone_roundtrip[standard]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_default_standard_calendar_out_of_range[1500-gregorian]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_default_standard_calendar_out_of_range[1500-proleptic_gregorian]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_default_standard_calendar_out_of_range[1500-standard]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_default_standard_calendar_out_of_range[2500-gregorian]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_default_standard_calendar_out_of_range[2500-proleptic_gregorian]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_default_standard_calendar_out_of_range[2500-standard]",
                            "xarray/tests/test_coding_times.py::test_decode_ambiguous_time_warns[gregorian]",
                            "xarray/tests/test_coding_times.py::test_decode_ambiguous_time_warns[proleptic_gregorian]",
                            "xarray/tests/test_coding_times.py::test_decode_ambiguous_time_warns[standard]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-U-microseconds]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-U-milliseconds]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-U-seconds]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-U-minutes]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-U-hours]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-U-days]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-L-microseconds]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-L-milliseconds]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-L-seconds]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-L-minutes]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-L-hours]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-L-days]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-S-microseconds]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-S-milliseconds]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-S-seconds]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-S-minutes]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-S-hours]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-S-days]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-T-microseconds]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-T-milliseconds]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-T-seconds]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-T-minutes]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-T-hours]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-T-days]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-H-microseconds]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-H-milliseconds]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-H-seconds]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-H-minutes]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-H-hours]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-H-days]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-D-microseconds]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-D-milliseconds]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-D-seconds]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-D-minutes]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-D-hours]",
                            "xarray/tests/test_coding_times.py::test_encode_cf_datetime_defaults_to_correct_dtype[cftime_range-D-days]",
                            "xarray/tests/test_coding_times.py::test_encode_decode_roundtrip_cftime[U]",
                            "xarray/tests/test_coding_times.py::test_encode_decode_roundtrip_cftime[L]",
                            "xarray/tests/test_coding_times.py::test_encode_decode_roundtrip_cftime[S]",
                            "xarray/tests/test_coding_times.py::test_encode_decode_roundtrip_cftime[T]",
                            "xarray/tests/test_coding_times.py::test_encode_decode_roundtrip_cftime[H]",
                            "xarray/tests/test_coding_times.py::test_encode_decode_roundtrip_cftime[D]",
                            "xarray/tests/test_coding_times.py::test__encode_datetime_with_cftime",
                            "xarray/tests/test_coding_times.py::test_should_cftime_be_used_source_outside_range",
                            "xarray/tests/test_coding_times.py::test_should_cftime_be_used_target_not_npable"
                        ],
                        "failure": [
                            "xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[1500-360_day]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[1500-365_day]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[1500-366_day]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[1500-all_leap]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[1500-julian]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[1500-noleap]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[2000-360_day]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[2000-365_day]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[2000-366_day]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[2000-all_leap]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[2000-julian]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[2000-noleap]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[2500-360_day]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[2500-365_day]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[2500-366_day]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[2500-all_leap]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[2500-julian]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_default_non_standard_calendar[2500-noleap]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_true[1500-360_day]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_true[1500-365_day]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_true[1500-366_day]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_true[1500-all_leap]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_true[1500-gregorian]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_true[1500-julian]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_true[1500-noleap]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_true[1500-proleptic_gregorian]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_true[1500-standard]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_true[2000-360_day]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_true[2000-365_day]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_true[2000-366_day]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_true[2000-all_leap]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_true[2000-gregorian]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_true[2000-julian]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_true[2000-noleap]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_true[2000-proleptic_gregorian]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_true[2000-standard]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_true[2500-360_day]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_true[2500-365_day]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_true[2500-366_day]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_true[2500-all_leap]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_true[2500-gregorian]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_true[2500-julian]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_true[2500-noleap]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_true[2500-proleptic_gregorian]",
                            "xarray/tests/test_coding_times.py::test_use_cftime_true[2500-standard]",
                            "xarray/tests/test_coding_times.py::test_decode_ambiguous_time_warns[360_day]",
                            "xarray/tests/test_coding_times.py::test_decode_ambiguous_time_warns[365_day]",
                            "xarray/tests/test_coding_times.py::test_decode_ambiguous_time_warns[366_day]",
                            "xarray/tests/test_coding_times.py::test_decode_ambiguous_time_warns[all_leap]",
                            "xarray/tests/test_coding_times.py::test_decode_ambiguous_time_warns[julian]",
                            "xarray/tests/test_coding_times.py::test_decode_ambiguous_time_warns[noleap]"
                        ]
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "matplotlib__matplotlib-17810.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [],
                        "failure": [
                            "lib/matplotlib/tests/test_animation.py::test_exhausted_animation",
                            "lib/matplotlib/tests/test_animation.py::test_no_frame_warning"
                        ]
                    },
                    "PASS_TO_PASS": {
                        "success": [],
                        "failure": [
                            "lib/matplotlib/tests/test_animation.py::test_null_movie_writer",
                            "lib/matplotlib/tests/test_animation.py::test_animation_delete[anim0]",
                            "lib/matplotlib/tests/test_animation.py::test_movie_writer_dpi_default",
                            "lib/matplotlib/tests/test_animation.py::test_animation_repr_html[anim0-none-None-ffmpeg]",
                            "lib/matplotlib/tests/test_animation.py::test_animation_repr_html[anim0-none-None-imagemagick]",
                            "lib/matplotlib/tests/test_animation.py::test_animation_repr_html[anim0-html5-<video",
                            "lib/matplotlib/tests/test_animation.py::test_animation_repr_html[anim0-jshtml-<script",
                            "lib/matplotlib/tests/test_animation.py::test_no_length_frames[anim0]",
                            "lib/matplotlib/tests/test_animation.py::test_movie_writer_registry",
                            "lib/matplotlib/tests/test_animation.py::test_embed_limit[anim0-to_html5_video]",
                            "lib/matplotlib/tests/test_animation.py::test_embed_limit[anim0-to_jshtml]",
                            "lib/matplotlib/tests/test_animation.py::test_cleanup_temporaries[anim0-to_html5_video]",
                            "lib/matplotlib/tests/test_animation.py::test_cleanup_temporaries[anim0-to_jshtml]",
                            "lib/matplotlib/tests/test_animation.py::test_failing_ffmpeg",
                            "lib/matplotlib/tests/test_animation.py::test_funcanimation_cache_frame_data[False]",
                            "lib/matplotlib/tests/test_animation.py::test_funcanimation_cache_frame_data[True]",
                            "lib/matplotlib/tests/test_animation.py::test_draw_frame[None]",
                            "lib/matplotlib/tests/test_animation.py::test_draw_frame[string]",
                            "lib/matplotlib/tests/test_animation.py::test_draw_frame[1]",
                            "lib/matplotlib/tests/test_animation.py::test_draw_frame[return_value3]",
                            "lib/matplotlib/tests/test_animation.py::test_draw_frame[artist]"
                        ]
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "django__django-14855.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "test_readonly_foreignkey_links_custom_admin_site (admin_views.tests.ReadonlyTest)"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "test_explicitly_provided_pk (admin_views.tests.GetFormsetsWithInlinesArgumentTest)",
                            "test_implicitly_generated_pk (admin_views.tests.GetFormsetsWithInlinesArgumentTest)",
                            "test_should_be_able_to_edit_related_objects_on_add_view (admin_views.tests.AdminCustomSaveRelatedTests)",
                            "test_should_be_able_to_edit_related_objects_on_change_view (admin_views.tests.AdminCustomSaveRelatedTests)",
                            "test_should_be_able_to_edit_related_objects_on_changelist_view (admin_views.tests.AdminCustomSaveRelatedTests)",
                            "Admin index views don't break when user's ModelAdmin removes standard urls",
                            "Test for ticket 2445 changes to admin.",
                            "test_lang_name_present (admin_views.tests.ValidXHTMLTests)",
                            "The delete_view handles non-ASCII characters",
                            "A test to ensure that POST on edit_view handles non-ASCII characters.",
                            "InlineModelAdmin broken?",
                            "test_secure_view_shows_login_if_not_logged_in (admin_views.tests.SecureViewTests)",
                            "Staff_member_required decorator works with an argument",
                            "test_generic_content_object_in_list_display (admin_views.tests.TestGenericRelations)",
                            "Inline models which inherit from a common parent are correctly handled.",
                            "test_client_logout_url_can_be_used_to_login (admin_views.tests.AdminViewLogoutTests)",
                            "test_logout (admin_views.tests.AdminViewLogoutTests)",
                            "Validate that a custom ChangeList class can be used (#9749)",
                            "change_view has form_url in response.context",
                            "The behavior for setting initial form data can be overridden in the",
                            "test_all_fields_hidden (admin_views.tests.TestLabelVisibility)",
                            "test_all_fields_visible (admin_views.tests.TestLabelVisibility)",
                            "test_mixin (admin_views.tests.TestLabelVisibility)",
                            "The minified versions of the JS files are only used when DEBUG is False.",
                            "test_form_has_multipart_enctype (admin_views.tests.AdminInlineFileUploadTest)",
                            "Inline file uploads correctly display prior data (#10002).",
                            "test_known_url_missing_slash_redirects_login_if_not_authenticated (admin_views.tests.AdminSiteFinalCatchAllPatternTests)",
                            "test_known_url_missing_slash_redirects_with_slash_if_not_authenticated_without_final_catch_all_view (admin_views.tests.AdminSiteFinalCatchAllPatternTests)",
                            "test_known_url_redirects_login_if_not_authenticated (admin_views.tests.AdminSiteFinalCatchAllPatternTests)",
                            "test_known_url_redirects_login_if_not_authenticated_without_final_catch_all_view (admin_views.tests.AdminSiteFinalCatchAllPatternTests)",
                            "test_missing_slash_append_slash_false (admin_views.tests.AdminSiteFinalCatchAllPatternTests)",
                            "test_missing_slash_append_slash_false_without_final_catch_all_view (admin_views.tests.AdminSiteFinalCatchAllPatternTests)",
                            "test_missing_slash_append_slash_true (admin_views.tests.AdminSiteFinalCatchAllPatternTests)",
                            "test_missing_slash_append_slash_true_force_script_name (admin_views.tests.AdminSiteFinalCatchAllPatternTests)",
                            "test_missing_slash_append_slash_true_non_staff_user (admin_views.tests.AdminSiteFinalCatchAllPatternTests)",
                            "test_missing_slash_append_slash_true_script_name (admin_views.tests.AdminSiteFinalCatchAllPatternTests)",
                            "test_missing_slash_append_slash_true_unknown_url (admin_views.tests.AdminSiteFinalCatchAllPatternTests)",
                            "test_missing_slash_append_slash_true_unknown_url_without_final_catch_all_view (admin_views.tests.AdminSiteFinalCatchAllPatternTests)",
                            "test_missing_slash_append_slash_true_without_final_catch_all_view (admin_views.tests.AdminSiteFinalCatchAllPatternTests)",
                            "test_non_admin_url_404_if_not_authenticated (admin_views.tests.AdminSiteFinalCatchAllPatternTests)",
                            "test_non_admin_url_shares_url_prefix (admin_views.tests.AdminSiteFinalCatchAllPatternTests)",
                            "test_non_admin_url_shares_url_prefix_without_final_catch_all_view (admin_views.tests.AdminSiteFinalCatchAllPatternTests)",
                            "test_single_model_no_append_slash (admin_views.tests.AdminSiteFinalCatchAllPatternTests)",
                            "test_unknown_url_404_if_authenticated (admin_views.tests.AdminSiteFinalCatchAllPatternTests)",
                            "test_unknown_url_404_if_authenticated_without_final_catch_all_view (admin_views.tests.AdminSiteFinalCatchAllPatternTests)",
                            "test_unknown_url_404_if_not_authenticated_without_final_catch_all_view (admin_views.tests.AdminSiteFinalCatchAllPatternTests)",
                            "test_unknown_url_redirects_login_if_not_authenticated (admin_views.tests.AdminSiteFinalCatchAllPatternTests)",
                            "test_unkown_url_without_trailing_slash_if_not_authenticated (admin_views.tests.AdminSiteFinalCatchAllPatternTests)",
                            "test_unkown_url_without_trailing_slash_if_not_authenticated_without_final_catch_all_view (admin_views.tests.AdminSiteFinalCatchAllPatternTests)",
                            "test_url_without_trailing_slash_if_not_authenticated (admin_views.tests.AdminSiteFinalCatchAllPatternTests)",
                            "test_url_without_trailing_slash_if_not_authenticated_without_final_catch_all_view (admin_views.tests.AdminSiteFinalCatchAllPatternTests)",
                            "Regression test for #15938: if USE_THOUSAND_SEPARATOR is set, make sure",
                            "test_prepopulated_off (admin_views.tests.PrePopulatedTest)",
                            "test_prepopulated_on (admin_views.tests.PrePopulatedTest)",
                            "PrePopulatedPostReadOnlyAdmin.prepopulated_fields includes 'slug'",
                            "PrePopulatedPostReadOnlyAdmin.prepopulated_fields includes 'slug'. That",
                            "test_add (admin_views.tests.AdminViewProxyModelPermissionsTests)",
                            "test_change (admin_views.tests.AdminViewProxyModelPermissionsTests)",
                            "test_delete (admin_views.tests.AdminViewProxyModelPermissionsTests)",
                            "test_view (admin_views.tests.AdminViewProxyModelPermissionsTests)",
                            "The right link is displayed if view_on_site is a callable",
                            "The 'View on site' button is not displayed if view_on_site is False",
                            "The 'View on site' button is displayed if view_on_site is True",
                            "test_custom_admin_site_app_index_view_and_template (admin_views.tests.CustomModelAdminTest)",
                            "test_custom_admin_site_index_view_and_template (admin_views.tests.CustomModelAdminTest)",
                            "test_custom_admin_site_login_form (admin_views.tests.CustomModelAdminTest)",
                            "test_custom_admin_site_login_template (admin_views.tests.CustomModelAdminTest)",
                            "test_custom_admin_site_logout_template (admin_views.tests.CustomModelAdminTest)",
                            "test_custom_admin_site_password_change_done_template (admin_views.tests.CustomModelAdminTest)",
                            "test_custom_admin_site_password_change_template (admin_views.tests.CustomModelAdminTest)",
                            "test_custom_admin_site_password_change_with_extra_context (admin_views.tests.CustomModelAdminTest)",
                            "test_custom_admin_site_view (admin_views.tests.CustomModelAdminTest)",
                            "test_pwd_change_custom_template (admin_views.tests.CustomModelAdminTest)",
                            "test_group_permission_performance (admin_views.tests.GroupAdminTest)",
                            "test_save_button (admin_views.tests.GroupAdminTest)",
                            "Regression test for 14880",
                            "Regression test for 20182",
                            "Should be able to use a ModelAdmin method in list_display that has the",
                            "Saving a new object using \"Save as new\" redirects to the changelist",
                            "'save as' creates a new person",
                            "test_save_as_new_with_inlines_with_validation_errors (admin_views.tests.SaveAsTests)",
                            "When you click \"Save as new\" and have a validation error,",
                            "test_save_as_new_with_validation_errors_with_inlines (admin_views.tests.SaveAsTests)",
                            "Issue #20522",
                            "The view_on_site value is either a boolean or a callable",
                            "None is returned if model doesn't have get_absolute_url",
                            "The default behavior is followed if view_on_site is True",
                            "test_message_debug (admin_views.tests.AdminUserMessageTest)",
                            "test_message_error (admin_views.tests.AdminUserMessageTest)",
                            "test_message_extra_tags (admin_views.tests.AdminUserMessageTest)",
                            "test_message_info (admin_views.tests.AdminUserMessageTest)",
                            "test_message_success (admin_views.tests.AdminUserMessageTest)",
                            "test_message_warning (admin_views.tests.AdminUserMessageTest)",
                            "Check the never-cache status of the JavaScript i18n view",
                            "Check the never-cache status of the main index",
                            "Check the never-cache status of an application index",
                            "Check the never-cache status of login views",
                            "Check the never-cache status of logout view",
                            "Check the never-cache status of a model add page",
                            "Check the never-cache status of a model delete page",
                            "Check the never-cache status of a model history page",
                            "Check the never-cache status of a model index",
                            "Check the never-cache status of a model edit page",
                            "Check the never-cache status of the password change view",
                            "Check the never-cache status of the password change done view",
                            "Ensure app and model tag are correctly read by app_index template",
                            "Ensure app and model tag are correctly read by delete_confirmation",
                            "Ensure app and model tag are correctly read by",
                            "Ensure app and model tag are correctly read by change_form template",
                            "Ensure app and model tag are correctly read by change_list template",
                            "Cells of the change list table should contain the field name in their class attribute",
                            "Fields have a CSS class name with a 'field-' prefix.",
                            "CSS class names are used for each app and model on the admin index",
                            "Object history button link should work and contain the pk value quoted.",
                            "Link to the changeform of the object in changelist should use reverse() and be quoted -- #18072",
                            "The link from the delete confirmation page referring back to the changeform of the object should be quoted",
                            "Retrieving the object using urlencoded form of primary key should work",
                            "Retrieving the history for an object using urlencoded form of primary",
                            "The link from the recent actions list referring to the changeform of the object should be quoted",
                            "As soon as an object is added using \"Save and continue editing\"",
                            "'View on site should' work properly with char fields",
                            "A model with a primary key that ends with add or is `add` should be visible",
                            "A model with a primary key that ends with delete should be visible",
                            "A model with a primary key that ends with history should be visible",
                            "No date hierarchy links display with empty changelist.",
                            "year-level links appear for year-spanning changelist.",
                            "test_related_field (admin_views.tests.DateHierarchyTests)",
                            "Single day-level date hierarchy appears for single object.",
                            "day-level links appear for changelist within single month.",
                            "month-level links appear for changelist within single year.",
                            "Cyclic relationships should still cause each object to only be",
                            "The delete view uses ModelAdmin.get_deleted_objects().",
                            "If a deleted object has GenericForeignKeys pointing to it,",
                            "If a deleted object has GenericForeignKey with",
                            "In the case of an inherited model, if either the child or",
                            "If a deleted object has two relationships pointing to it from",
                            "If a deleted object has two relationships from another model,",
                            "Objects should be nested to display the relationships that",
                            "test_not_registered (admin_views.tests.AdminViewDeletedObjectsTest)",
                            "test_perms_needed (admin_views.tests.AdminViewDeletedObjectsTest)",
                            "A POST request to delete protected objects should display the page",
                            "test_post_delete_restricted (admin_views.tests.AdminViewDeletedObjectsTest)",
                            "test_protected (admin_views.tests.AdminViewDeletedObjectsTest)",
                            "test_restricted (admin_views.tests.AdminViewDeletedObjectsTest)",
                            "test_change_password_template (admin_views.tests.AdminCustomTemplateTests)",
                            "test_custom_model_admin_templates (admin_views.tests.AdminCustomTemplateTests)",
                            "The admin/change_list.html' template uses block.super",
                            "The admin/change_form.html template uses block.super in the",
                            "The admin/delete_confirmation.html template uses",
                            "The admin/delete_selected_confirmation.html template uses",
                            "The admin/index.html template uses block.super in the bodyclass block.",
                            "The admin/login.html template uses block.super in the",
                            "A custom template can be used to render an admin filter.",
                            "test_changelist_input_html (admin_views.tests.AdminViewListEditable)",
                            "test_custom_pk (admin_views.tests.AdminViewListEditable)",
                            "test_inheritance (admin_views.tests.AdminViewListEditable)",
                            "test_inheritance_2 (admin_views.tests.AdminViewListEditable)",
                            "test_list_editable_action_choices (admin_views.tests.AdminViewListEditable)",
                            "test_list_editable_action_submit (admin_views.tests.AdminViewListEditable)",
                            "test_list_editable_ordering (admin_views.tests.AdminViewListEditable)",
                            "Pagination works for list_editable items.",
                            "Fields should not be list-editable in popups.",
                            "Non-field errors are displayed for each of the forms in the",
                            "test_non_form_errors (admin_views.tests.AdminViewListEditable)",
                            "test_non_form_errors_is_errorlist (admin_views.tests.AdminViewListEditable)",
                            "hidden pk fields aren't displayed in the table body and their",
                            "Similarly as test_pk_hidden_fields, but when the hidden pk fields are",
                            "test_post_messages (admin_views.tests.AdminViewListEditable)",
                            "test_post_submission (admin_views.tests.AdminViewListEditable)",
                            "test_filters (admin_views.tests.AdminDocsTest)",
                            "test_tags (admin_views.tests.AdminDocsTest)",
                            "test_beginning_matches (admin_views.tests.AdminSearchTest)",
                            "test_exact_matches (admin_views.tests.AdminSearchTest)",
                            "#8408 -- \"Show all\" should be displayed instead of the total count if",
                            "test_pluggable_search (admin_views.tests.AdminSearchTest)",
                            "Test presence of reset link in search bar (\"1 result (_x total_)\").",
                            "A search that mentions sibling models",
                            "test_search_with_spaces (admin_views.tests.AdminSearchTest)",
                            "The to_field GET parameter is preserved when a search is performed.",
                            "A model with a character PK can be saved as inlines. Regression for #10992",
                            "A model with an explicit autofield primary key can be saved as inlines. Regression for #8093",
                            "An inherited model can be saved as inlines. Regression for #11042",
                            "A model with an integer PK can be saved as inlines. Regression for #10992",
                            "An inline with an editable ordering fields is updated correctly.",
                            "A simple model can be saved as inlines",
                            "test_add_view (admin_views.tests.NamespacedAdminKeepChangeListFiltersTests)",
                            "test_add_view_without_preserved_filters (admin_views.tests.NamespacedAdminKeepChangeListFiltersTests)",
                            "test_assert_url_equal (admin_views.tests.NamespacedAdminKeepChangeListFiltersTests)",
                            "test_change_view (admin_views.tests.NamespacedAdminKeepChangeListFiltersTests)",
                            "test_change_view_without_preserved_filters (admin_views.tests.NamespacedAdminKeepChangeListFiltersTests)",
                            "test_changelist_view (admin_views.tests.NamespacedAdminKeepChangeListFiltersTests)",
                            "test_delete_view (admin_views.tests.NamespacedAdminKeepChangeListFiltersTests)",
                            "test_url_prefix (admin_views.tests.NamespacedAdminKeepChangeListFiltersTests)",
                            "test_form_url_present_in_context (admin_views.tests.UserAdminTest)",
                            "test_password_mismatch (admin_views.tests.UserAdminTest)",
                            "test_save_add_another_button (admin_views.tests.UserAdminTest)",
                            "test_save_button (admin_views.tests.UserAdminTest)",
                            "test_save_continue_editing_button (admin_views.tests.UserAdminTest)",
                            "User addition through a FK popup should return the appropriate JavaScript response.",
                            "User change through a FK popup should return the appropriate JavaScript response.",
                            "User deletion through a FK popup should return the appropriate JavaScript response.",
                            "test_user_permission_performance (admin_views.tests.UserAdminTest)",
                            "test_add_view (admin_views.tests.AdminKeepChangeListFiltersTests)",
                            "test_add_view_without_preserved_filters (admin_views.tests.AdminKeepChangeListFiltersTests)",
                            "test_assert_url_equal (admin_views.tests.AdminKeepChangeListFiltersTests)",
                            "test_change_view (admin_views.tests.AdminKeepChangeListFiltersTests)",
                            "test_change_view_without_preserved_filters (admin_views.tests.AdminKeepChangeListFiltersTests)",
                            "test_changelist_view (admin_views.tests.AdminKeepChangeListFiltersTests)",
                            "test_delete_view (admin_views.tests.AdminKeepChangeListFiltersTests)",
                            "test_url_prefix (admin_views.tests.AdminKeepChangeListFiltersTests)",
                            "test_add_model_modeladmin_defer_qs (admin_views.tests.AdminCustomQuerysetTest)",
                            "test_add_model_modeladmin_only_qs (admin_views.tests.AdminCustomQuerysetTest)",
                            "test_change_view (admin_views.tests.AdminCustomQuerysetTest)",
                            "test_changelist_view (admin_views.tests.AdminCustomQuerysetTest)",
                            "test_changelist_view_count_queries (admin_views.tests.AdminCustomQuerysetTest)",
                            "test_edit_model_modeladmin_defer_qs (admin_views.tests.AdminCustomQuerysetTest)",
                            "test_edit_model_modeladmin_only_qs (admin_views.tests.AdminCustomQuerysetTest)",
                            "Custom querysets are considered for the admin history view.",
                            "Regression test for #17911.",
                            "Make sure that non-field readonly elements are properly autoescaped (#24461)",
                            "test_label_suffix_translated (admin_views.tests.ReadonlyTest)",
                            "Regression test for #22087 - ModelForm Meta overrides are ignored by",
                            "test_readonly_foreignkey_links_default_admin_site (admin_views.tests.ReadonlyTest)",
                            "test_readonly_get (admin_views.tests.ReadonlyTest)",
                            "Regression test for #13004",
                            "Regression test for #16433 - backwards references for related objects",
                            "test_readonly_manytomany_forwards_ref (admin_views.tests.ReadonlyTest)",
                            "Can reference a reverse OneToOneField in ModelAdmin.readonly_fields.",
                            "test_readonly_post (admin_views.tests.ReadonlyTest)",
                            "test_readonly_text_field (admin_views.tests.ReadonlyTest)",
                            "test_user_password_change_limited_queryset (admin_views.tests.ReadonlyTest)",
                            "Test add view restricts access and actually adds items.",
                            "User with add permission to a section but view-only for inlines.",
                            "If a user has no module perms, the app list returns a 404.",
                            "Change view should restrict access and allow users to edit items.",
                            "'Save as new' should raise PermissionDenied for users without the 'add'",
                            "User has view and add permissions on the inline model.",
                            "User has view and delete permissions on the inline model.",
                            "User with change permission to a section but view-only for inlines.",
                            "The object should be read-only if the user has permission to view it",
                            "The foreign key widget should only show the \"add related\" button if the",
                            "The foreign key widget should only show the \"change related\" button if",
                            "The foreign key widget should only show the \"delete related\" button if",
                            "Delete view should restrict access and actually delete items.",
                            "test_delete_view_nonexistent_obj (admin_views.tests.AdminViewPermissionsTest)",
                            "The delete view allows users to delete collected objects without a",
                            "test_disabled_permissions_when_logged_in (admin_views.tests.AdminViewPermissionsTest)",
                            "test_disabled_staff_permissions_when_logged_in (admin_views.tests.AdminViewPermissionsTest)",
                            "Regression test for #19327",
                            "has_module_permission() returns True for all users who",
                            "History view should restrict access.",
                            "test_history_view_bad_url (admin_views.tests.AdminViewPermissionsTest)",
                            "Make sure only staff members can log in.",
                            "test_login_has_permission (admin_views.tests.AdminViewPermissionsTest)",
                            "A logged-in non-staff user trying to access the admin index should be",
                            "Login redirect should be to the admin index page when going directly to",
                            "test_login_successfully_redirects_to_original_URL (admin_views.tests.AdminViewPermissionsTest)",
                            "If has_module_permission() always returns False, the module shouldn't",
                            "Post-save message shouldn't contain a link to the change form if the",
                            "Only admin users should be able to use the admin shortcut view.",
                            "test_add_with_GET_args (admin_views.tests.AdminViewBasicTest)",
                            "#13749 - Admin should display link to front-end site 'View site'",
                            "Regressions test for ticket 15103 - filtering on fields defined in a",
                            "AttributeErrors are allowed to bubble when raised inside a change list",
                            "test_app_index_context (admin_views.tests.AdminViewBasicTest)",
                            "A smoke test to ensure GET on the add_view works.",
                            "A smoke test to ensure POST on add_view works.",
                            "A smoke test to ensure GET on the change_view works.",
                            "The change URL changed in Django 1.9, but the old one still redirects.",
                            "GET on the change_view (when passing a string as the PK argument for a",
                            "A smoke test to ensure POST on edit_view works.",
                            "GET on the change_view (for inherited models) redirects to the index",
                            "test_change_list_column_field_classes (admin_views.tests.AdminViewBasicTest)",
                            "test_change_list_null_boolean_display (admin_views.tests.AdminViewBasicTest)",
                            "Ensure we can sort on a list_display field that is a callable",
                            "Query expressions may be used for admin_order_field.",
                            "test_change_list_sorting_callable_query_expression_reverse (admin_views.tests.AdminViewBasicTest)",
                            "Ensure we can sort on a list_display field that is a Model method",
                            "Ensure we can sort on a list_display field that is a ModelAdmin method",
                            "Ensure we can sort on a list_display field that is a ModelAdmin",
                            "test_change_list_sorting_model_meta (admin_views.tests.AdminViewBasicTest)",
                            "test_change_list_sorting_multiple (admin_views.tests.AdminViewBasicTest)",
                            "test_change_list_sorting_override_model_admin (admin_views.tests.AdminViewBasicTest)",
                            "If no ordering is defined in `ModelAdmin.ordering` or in the query",
                            "Sort on a list_display field that is a property (column 10 is",
                            "Changes to ManyToManyFields are included in the object's history.",
                            "test_change_view_subtitle_per_object (admin_views.tests.AdminViewBasicTest)",
                            "The 'show_delete' context variable in the admin's change view controls",
                            "ModelAdmin.changelist_view shouldn't result in a NoReverseMatch if url",
                            "test_date_hierarchy_empty_queryset (admin_views.tests.AdminViewBasicTest)",
                            "test_date_hierarchy_local_date_differ_from_utc (admin_views.tests.AdminViewBasicTest)",
                            "test_date_hierarchy_timezone_dst (admin_views.tests.AdminViewBasicTest)",
                            "test_disallowed_filtering (admin_views.tests.AdminViewBasicTest)",
                            "test_disallowed_to_field (admin_views.tests.AdminViewBasicTest)",
                            "test_display_decorator_with_boolean_and_empty_value (admin_views.tests.AdminViewBasicTest)",
                            "Test \"save as\".",
                            "Should be able to \"Save as new\" while also deleting an inline.",
                            "test_formset_kwargs_can_be_overridden (admin_views.tests.AdminViewBasicTest)",
                            "test_get_sortable_by_columns_subset (admin_views.tests.AdminViewBasicTest)",
                            "test_get_sortable_by_no_column (admin_views.tests.AdminViewBasicTest)",
                            "Joins shouldn't be performed for <FK>_id fields in list display.",
                            "Joins shouldn't be performed for <O2O>_id fields in list display.",
                            "Tests if the \"change password\" link in the admin is hidden if the User",
                            "Check if the JavaScript i18n view returns an empty language catalog",
                            "Makes sure that the fallback language is still working properly",
                            "Ensure incorrect lookup parameters are handled gracefully.",
                            "#21056 -- URL reversing shouldn't work for nonexistent apps.",
                            "Ensure is_null is handled correctly.",
                            "The JavaScript i18n view doesn't return localized date/time formats",
                            "test_jsi18n_with_context (admin_views.tests.AdminViewBasicTest)",
                            "Ensure admin changelist filters do not contain objects excluded via limit_choices_to.",
                            "test_logout_and_password_change_URLs (admin_views.tests.AdminViewBasicTest)",
                            "test_multiple_sort_same_field (admin_views.tests.AdminViewBasicTest)",
                            "Ensures the admin changelist shows correct values in the relevant column",
                            "Ensures the filter UI shows correctly when at least one named group has",
                            "Ensure http response from a popup is properly escaped.",
                            "Regression test for ticket 20664 - ensure the pk is properly quoted.",
                            "test_relation_spanning_filters (admin_views.tests.AdminViewBasicTest)",
                            "test_render_views_no_subtitle (admin_views.tests.AdminViewBasicTest)",
                            "test_resolve_admin_views (admin_views.tests.AdminViewBasicTest)",
                            "The admin shows default sort indicators for all kinds of 'ordering'",
                            "test_sortable_by_columns_subset (admin_views.tests.AdminViewBasicTest)",
                            "test_sortable_by_no_column (admin_views.tests.AdminViewBasicTest)",
                            "If you leave off the trailing slash, app should redirect and add it.",
                            "test_view_subtitle_per_object (admin_views.tests.AdminViewBasicTest)"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "sympy__sympy-24723.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "test_MatrixNormal"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "test_MatrixPSpace",
                            "test_MatrixGamma",
                            "test_Wishart",
                            "test_MatrixStudentT"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "sphinx-doc__sphinx-8058.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "tests/test_build_gettext.py::test_build_single_pot"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "tests/test_build_gettext.py::test_build_gettext",
                            "tests/test_build_gettext.py::test_gettext_index_entries",
                            "tests/test_build_gettext.py::test_gettext_disable_index_entries",
                            "tests/test_build_gettext.py::test_gettext_template",
                            "tests/test_build_gettext.py::test_gettext_template_msgid_order_in_sphinxpot"
                        ],
                        "failure": [
                            "tests/test_build_gettext.py::test_msgfmt"
                        ]
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "astropy__astropy-11693.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "astropy/wcs/wcsapi/tests/test_fitswcs.py::test_non_convergence_warning"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "astropy/wcs/wcsapi/tests/test_fitswcs.py::test_empty",
                            "astropy/wcs/wcsapi/tests/test_fitswcs.py::test_simple_celestial",
                            "astropy/wcs/wcsapi/tests/test_fitswcs.py::test_time_1d_values[tai]",
                            "astropy/wcs/wcsapi/tests/test_fitswcs.py::test_time_1d_values[tcb]",
                            "astropy/wcs/wcsapi/tests/test_fitswcs.py::test_time_1d_values[tcg]",
                            "astropy/wcs/wcsapi/tests/test_fitswcs.py::test_time_1d_values[tdb]",
                            "astropy/wcs/wcsapi/tests/test_fitswcs.py::test_time_1d_values[tt]",
                            "astropy/wcs/wcsapi/tests/test_fitswcs.py::test_time_1d_values[ut1]",
                            "astropy/wcs/wcsapi/tests/test_fitswcs.py::test_time_1d_values[utc]",
                            "astropy/wcs/wcsapi/tests/test_fitswcs.py::test_time_1d_values[local]",
                            "astropy/wcs/wcsapi/tests/test_fitswcs.py::test_time_1d_values_gps",
                            "astropy/wcs/wcsapi/tests/test_fitswcs.py::test_time_1d_values_deprecated",
                            "astropy/wcs/wcsapi/tests/test_fitswcs.py::test_time_1d_values_time",
                            "astropy/wcs/wcsapi/tests/test_fitswcs.py::test_time_1d_high_precision",
                            "astropy/wcs/wcsapi/tests/test_fitswcs.py::test_time_1d_location_geodetic",
                            "astropy/wcs/wcsapi/tests/test_fitswcs.py::test_time_1d_location_geocentric",
                            "astropy/wcs/wcsapi/tests/test_fitswcs.py::test_time_1d_location_geocenter",
                            "astropy/wcs/wcsapi/tests/test_fitswcs.py::test_time_1d_location_missing",
                            "astropy/wcs/wcsapi/tests/test_fitswcs.py::test_time_1d_location_incomplete",
                            "astropy/wcs/wcsapi/tests/test_fitswcs.py::test_time_1d_location_unsupported",
                            "astropy/wcs/wcsapi/tests/test_fitswcs.py::test_time_1d_unsupported_ctype",
                            "astropy/wcs/wcsapi/tests/test_fitswcs.py::test_unrecognized_unit",
                            "astropy/wcs/wcsapi/tests/test_fitswcs.py::test_distortion_correlations",
                            "astropy/wcs/wcsapi/tests/test_fitswcs.py::test_custom_ctype_to_ucd_mappings",
                            "astropy/wcs/wcsapi/tests/test_fitswcs.py::test_caching_components_and_classes",
                            "astropy/wcs/wcsapi/tests/test_fitswcs.py::test_sub_wcsapi_attributes",
                            "astropy/wcs/wcsapi/tests/test_fitswcs.py::test_phys_type_polarization"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "psf__requests-2931.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "test_requests.py::TestRequests::test_binary_put"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "test_requests.py::TestRequests::test_entry_points",
                            "test_requests.py::TestRequests::test_invalid_url",
                            "test_requests.py::TestRequests::test_basic_building",
                            "test_requests.py::TestRequests::test_path_is_not_double_encoded",
                            "test_requests.py::TestRequests::test_params_are_added_before_fragment",
                            "test_requests.py::TestRequests::test_params_original_order_is_preserved_by_default",
                            "test_requests.py::TestRequests::test_params_bytes_are_encoded",
                            "test_requests.py::TestRequests::test_connection_error_invalid_domain",
                            "test_requests.py::TestRequests::test_connection_error_invalid_port",
                            "test_requests.py::TestRequests::test_LocationParseError",
                            "test_requests.py::TestRequests::test_links",
                            "test_requests.py::TestRequests::test_cookie_parameters",
                            "test_requests.py::TestRequests::test_cookie_as_dict_keeps_len",
                            "test_requests.py::TestRequests::test_cookie_as_dict_keeps_items",
                            "test_requests.py::TestRequests::test_cookie_as_dict_keys",
                            "test_requests.py::TestRequests::test_cookie_as_dict_values",
                            "test_requests.py::TestRequests::test_cookie_as_dict_items",
                            "test_requests.py::TestRequests::test_response_is_iterable",
                            "test_requests.py::TestRequests::test_response_decode_unicode",
                            "test_requests.py::TestRequests::test_get_auth_from_url",
                            "test_requests.py::TestRequests::test_get_auth_from_url_encoded_spaces",
                            "test_requests.py::TestRequests::test_get_auth_from_url_not_encoded_spaces",
                            "test_requests.py::TestRequests::test_get_auth_from_url_percent_chars",
                            "test_requests.py::TestRequests::test_get_auth_from_url_encoded_hashes",
                            "test_requests.py::TestRequests::test_http_error",
                            "test_requests.py::TestRequests::test_transport_adapter_ordering",
                            "test_requests.py::TestRequests::test_long_authinfo_in_url",
                            "test_requests.py::TestRequests::test_nonhttp_schemes_dont_check_URLs",
                            "test_requests.py::TestRequests::test_basic_auth_str_is_always_native",
                            "test_requests.py::TestContentEncodingDetection::test_html4_pragma",
                            "test_requests.py::TestContentEncodingDetection::test_html_charset",
                            "test_requests.py::TestContentEncodingDetection::test_none",
                            "test_requests.py::TestContentEncodingDetection::test_precedence",
                            "test_requests.py::TestContentEncodingDetection::test_xhtml_pragma",
                            "test_requests.py::TestContentEncodingDetection::test_xml",
                            "test_requests.py::TestCaseInsensitiveDict::test_contains",
                            "test_requests.py::TestCaseInsensitiveDict::test_copy",
                            "test_requests.py::TestCaseInsensitiveDict::test_delitem",
                            "test_requests.py::TestCaseInsensitiveDict::test_docstring_example",
                            "test_requests.py::TestCaseInsensitiveDict::test_equality",
                            "test_requests.py::TestCaseInsensitiveDict::test_fixes_649",
                            "test_requests.py::TestCaseInsensitiveDict::test_get",
                            "test_requests.py::TestCaseInsensitiveDict::test_getitem",
                            "test_requests.py::TestCaseInsensitiveDict::test_iter",
                            "test_requests.py::TestCaseInsensitiveDict::test_iterable_init",
                            "test_requests.py::TestCaseInsensitiveDict::test_kwargs_init",
                            "test_requests.py::TestCaseInsensitiveDict::test_len",
                            "test_requests.py::TestCaseInsensitiveDict::test_lower_items",
                            "test_requests.py::TestCaseInsensitiveDict::test_mapping_init",
                            "test_requests.py::TestCaseInsensitiveDict::test_preserve_key_case",
                            "test_requests.py::TestCaseInsensitiveDict::test_preserve_last_key_case",
                            "test_requests.py::TestCaseInsensitiveDict::test_setdefault",
                            "test_requests.py::TestCaseInsensitiveDict::test_update",
                            "test_requests.py::TestCaseInsensitiveDict::test_update_retains_unchanged",
                            "test_requests.py::UtilsTestCase::test_address_in_network",
                            "test_requests.py::UtilsTestCase::test_dotted_netmask",
                            "test_requests.py::UtilsTestCase::test_get_auth_from_url",
                            "test_requests.py::UtilsTestCase::test_get_environ_proxies",
                            "test_requests.py::UtilsTestCase::test_get_environ_proxies_ip_ranges",
                            "test_requests.py::UtilsTestCase::test_guess_filename_when_filename_is_an_int",
                            "test_requests.py::UtilsTestCase::test_guess_filename_when_int",
                            "test_requests.py::UtilsTestCase::test_guess_filename_with_file_like_obj",
                            "test_requests.py::UtilsTestCase::test_guess_filename_with_unicode_name",
                            "test_requests.py::UtilsTestCase::test_is_ipv4_address",
                            "test_requests.py::UtilsTestCase::test_is_valid_cidr",
                            "test_requests.py::UtilsTestCase::test_requote_uri_properly_requotes",
                            "test_requests.py::UtilsTestCase::test_requote_uri_with_unquoted_percents",
                            "test_requests.py::UtilsTestCase::test_select_proxies",
                            "test_requests.py::UtilsTestCase::test_super_len_correctly_calculates_len_of_partially_read_file",
                            "test_requests.py::UtilsTestCase::test_super_len_io_streams",
                            "test_requests.py::TestMorselToCookieExpires::test_expires_invalid_int",
                            "test_requests.py::TestMorselToCookieExpires::test_expires_invalid_str",
                            "test_requests.py::TestMorselToCookieExpires::test_expires_none",
                            "test_requests.py::TestMorselToCookieExpires::test_expires_valid_str",
                            "test_requests.py::TestMorselToCookieMaxAge::test_max_age_invalid_str",
                            "test_requests.py::TestMorselToCookieMaxAge::test_max_age_valid_int",
                            "test_requests.py::TestTimeout::test_connect_timeout",
                            "test_requests.py::TestTimeout::test_total_timeout_connect",
                            "test_requests.py::test_data_argument_accepts_tuples",
                            "test_requests.py::test_prepared_request_empty_copy",
                            "test_requests.py::test_prepared_request_no_cookies_copy",
                            "test_requests.py::test_prepared_request_complete_copy",
                            "test_requests.py::test_prepare_unicode_url",
                            "test_requests.py::test_vendor_aliases"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "pylint-dev__pylint-8124.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "tests/checkers/unittest_imports.py::TestImportsChecker::test_allow_reexport_package"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "tests/checkers/unittest_imports.py::TestImportsChecker::test_relative_beyond_top_level",
                            "tests/checkers/unittest_imports.py::TestImportsChecker::test_relative_beyond_top_level_two",
                            "tests/checkers/unittest_imports.py::TestImportsChecker::test_relative_beyond_top_level_three",
                            "tests/checkers/unittest_imports.py::TestImportsChecker::test_relative_beyond_top_level_four",
                            "tests/checkers/unittest_imports.py::TestImportsChecker::test_wildcard_import_init",
                            "tests/checkers/unittest_imports.py::TestImportsChecker::test_wildcard_import_non_init",
                            "tests/checkers/unittest_imports.py::TestImportsChecker::test_preferred_module"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "pytest-dev__pytest-6214.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "testing/python/setup_plan.py::test_show_multi_test_fixture_setup_and_teardown_correctly_simple",
                            "testing/python/setup_plan.py::test_show_multi_test_fixture_setup_and_teardown_same_as_setup_show"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "testing/python/setup_plan.py::test_show_fixtures_and_test"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "django__django-5158.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "alternate: django-admin can't execute user commands unless settings are provided",
                            "default: django-admin can't execute user commands if it isn't provided settings",
                            "fulldefault: django-admin can't execute user commands unless settings are provided",
                            "minimal: django-admin can't execute user commands unless settings are provided",
                            "directory: django-admin can't execute user commands unless settings are provided"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "test_custom_project_destination_missing (admin_scripts.tests.StartProject)",
                            "Make sure the startproject management command is able to use a different project template",
                            "Make sure template context variables are rendered with proper values",
                            "Make sure the startproject management command is able to use a different project template from a tarball",
                            "Make sure the startproject management command is able to use a different project template from a tarball via a url",
                            "Startproject can use a project template from a tarball and create it in a specified location",
                            "Ticket 18091: Make sure the startproject management command is able to render templates with non-ASCII content",
                            "Make sure the startproject management command is able to render custom files",
                            "Make sure the startproject management command validates a project name",
                            "Make sure template context variables are not html escaped",
                            "Startproject management command handles project template tar/zip balls from non-canonical urls",
                            "Make sure the startproject management command creates a project",
                            "Make sure the startproject management command creates a project in a specific directory",
                            "Ticket 17475: Template dir passed has a trailing path separator",
                            "Make sure passing the wrong kinds of arguments outputs an error and prints usage",
                            "Options passed before settings are correctly handled.",
                            "Options are correctly handled when they are passed before and after",
                            "Options passed after settings are correctly handled.",
                            "Short options passed after settings are correctly handled.",
                            "Short options passed before settings are correctly handled.",
                            "User AppCommands can execute when a single app name is provided",
                            "User AppCommands raise an error when multiple app names are provided",
                            "User AppCommands raise an error when no app name is provided",
                            "User AppCommands can execute when some of the provided app names are invalid",
                            "User BaseCommands can execute when a label is provided",
                            "User BaseCommands can execute when no labels are provided",
                            "User BaseCommands can execute with options when a label is provided",
                            "User BaseCommands can execute with multiple options when a label is provided",
                            "User BaseCommands outputs command usage when wrong option is specified",
                            "test_base_run_from_argv (admin_scripts.tests.CommandTypes)",
                            "test_color_style (admin_scripts.tests.CommandTypes)",
                            "test_command_color (admin_scripts.tests.CommandTypes)",
                            "--no-color prevent colorization of the output",
                            "test_custom_stderr (admin_scripts.tests.CommandTypes)",
                            "test_custom_stdout (admin_scripts.tests.CommandTypes)",
                            "help is handled as a special case",
                            "--help is equivalent to help",
                            "help --commands shows the list of all available commands",
                            "-h is handled as a short form of --help",
                            "User LabelCommands can execute when a label is provided",
                            "User LabelCommands are executed multiple times if multiple labels are provided",
                            "User LabelCommands raise an error if no label is provided",
                            "NoArg Commands can be executed",
                            "NoArg Commands raise an error if an argument is provided",
                            "test_run_from_argv_closes_connections (admin_scripts.tests.CommandTypes)",
                            "test_run_from_argv_non_ascii_error (admin_scripts.tests.CommandTypes)",
                            "--help can be used on a specific command",
                            "version is handled as a special case",
                            "--version is equivalent to version",
                            "The all option also shows settings with the default value.",
                            "Runs without error and emits settings diff.",
                            "alternate: django-admin builtin commands fail with an error when no settings provided",
                            "alternate: django-admin builtin commands fail if settings file (from environment) doesn't exist",
                            "alternate: django-admin builtin commands fail if settings file (from argument) doesn't exist",
                            "alternate: django-admin builtin commands succeed if settings are provided in the environment",
                            "alternate: django-admin builtin commands succeed if settings are provided as argument",
                            "alternate: django-admin can execute user commands if settings are provided in environment",
                            "alternate: django-admin can execute user commands if settings are provided as argument",
                            "default: django-admin builtin commands fail with an error when no settings provided",
                            "default: django-admin builtin commands fail if settings file (from environment) doesn't exist",
                            "default: django-admin builtin commands fail if settings file (from argument) doesn't exist",
                            "default: django-admin builtin commands succeed if settings are provided in the environment",
                            "default: django-admin builtin commands succeed if settings are provided as argument",
                            "default: django-admin can execute user commands if settings are provided in environment",
                            "default: django-admin can execute user commands if settings are provided as argument",
                            "fulldefault: django-admin builtin commands fail with an error when no settings provided",
                            "fulldefault: django-admin builtin commands fail if settings file (from environment) doesn't exist",
                            "fulldefault: django-admin builtin commands fail if settings file (from argument) doesn't exist",
                            "fulldefault: django-admin builtin commands succeed if the environment contains settings",
                            "fulldefault: django-admin builtin commands succeed if a settings file is provided",
                            "fulldefault: django-admin can execute user commands if settings are provided in environment",
                            "fulldefault: django-admin can execute user commands if settings are provided as argument",
                            "minimal: django-admin builtin commands fail with an error when no settings provided",
                            "minimal: django-admin builtin commands fail if settings file (from environment) doesn't exist",
                            "minimal: django-admin builtin commands fail if settings file (from argument) doesn't exist",
                            "minimal: django-admin builtin commands fail if settings are provided in the environment",
                            "minimal: django-admin builtin commands fail if settings are provided as argument",
                            "minimal: django-admin can't execute user commands, even if settings are provided in environment",
                            "minimal: django-admin can't execute user commands, even if settings are provided as argument",
                            "no settings: django-admin builtin commands fail with an error when no settings provided",
                            "no settings: django-admin builtin commands fail if settings file (from environment) doesn't exist",
                            "no settings: django-admin builtin commands fail if settings file (from argument) doesn't exist",
                            "directory: django-admin builtin commands fail with an error when no settings provided",
                            "directory: django-admin builtin commands fail if settings file (from environment) doesn't exist",
                            "directory: django-admin builtin commands fail if settings file (from argument) doesn't exist",
                            "directory: django-admin builtin commands succeed if settings are provided in the environment",
                            "directory: django-admin builtin commands succeed if settings are provided as argument",
                            "directory: startapp creates the correct directory",
                            "directory: startapp creates the correct directory with a custom template",
                            "Regression for #20509",
                            "alternate: manage.py builtin commands fail with an error when no default settings provided",
                            "alternate: manage.py builtin commands fail if settings file (from environment) doesn't exist",
                            "alternate: manage.py builtin commands fail if settings file (from argument) doesn't exist",
                            "alternate: manage.py builtin commands work if settings are provided in the environment",
                            "alternate: manage.py builtin commands work with settings provided as argument",
                            "alternate: manage.py can't execute user commands without settings",
                            "alternate: manage.py output syntax color can be deactivated with the `--no-color` option",
                            "alternate: manage.py can execute user commands if settings are provided in environment",
                            "alternate: manage.py can execute user commands if settings are provided as argument",
                            "manage.py check does not raise errors when an app imports a base",
                            "manage.py check reports an ImportError if an app's models.py",
                            "manage.py check does not raise an ImportError validating a",
                            "manage.py check reports an error on a non-existent app in",
                            "All errors/warnings should be sorted by level and by message.",
                            "test_warning_does_not_halt (admin_scripts.tests.ManageCheck)",
                            "default: manage.py builtin commands succeed when default settings are appropriate",
                            "default: manage.py builtin commands fail if settings file (from environment) doesn't exist",
                            "default: manage.py builtin commands succeed if settings file (from argument) doesn't exist",
                            "default: manage.py builtin commands succeed if settings are provided in the environment",
                            "default: manage.py builtin commands succeed if settings are provided as argument",
                            "default: manage.py can execute user commands when default settings are appropriate",
                            "default: manage.py can execute user commands when settings are provided in environment",
                            "default: manage.py can execute user commands when settings are provided as argument",
                            "fulldefault: manage.py builtin commands succeed when default settings are appropriate",
                            "fulldefault: manage.py builtin commands fail if settings file (from environment) doesn't exist",
                            "fulldefault: manage.py builtin commands succeed if settings file (from argument) doesn't exist",
                            "fulldefault: manage.py builtin commands succeed if settings are provided in the environment",
                            "fulldefault: manage.py builtin commands succeed if settings are provided as argument",
                            "fulldefault: manage.py can execute user commands when default settings are appropriate",
                            "fulldefault: manage.py can execute user commands when settings are provided in environment",
                            "fulldefault: manage.py can execute user commands when settings are provided as argument",
                            "minimal: manage.py builtin commands fail with an error when no settings provided",
                            "minimal: manage.py builtin commands fail if settings file (from environment) doesn't exist",
                            "minimal: manage.py builtin commands fail if settings file (from argument) doesn't exist",
                            "minimal: manage.py builtin commands fail if settings are provided in the environment",
                            "minimal: manage.py builtin commands fail if settings are provided as argument",
                            "minimal: manage.py can't execute user commands without appropriate settings",
                            "minimal: manage.py can't execute user commands, even if settings are provided in environment",
                            "minimal: manage.py can't execute user commands, even if settings are provided as argument",
                            "multiple: manage.py builtin commands fail with an error when no settings provided",
                            "multiple: manage.py builtin commands fail if settings file (from environment) doesn't exist",
                            "multiple: manage.py builtin commands fail if settings file (from argument) doesn't exist",
                            "multiple: manage.py can execute builtin commands if settings are provided in the environment",
                            "multiple: manage.py builtin commands succeed if settings are provided as argument",
                            "multiple: manage.py can't execute user commands using default settings",
                            "multiple: manage.py can execute user commands if settings are provided in environment",
                            "multiple: manage.py can execute user commands if settings are provided as argument",
                            "no settings: manage.py builtin commands fail with an error when no settings provided",
                            "no settings: manage.py builtin commands fail if settings file (from environment) doesn't exist",
                            "no settings: manage.py builtin commands fail if settings file (from argument) doesn't exist",
                            "test_no_database (admin_scripts.tests.ManageRunserver)",
                            "test_readonly_database (admin_scripts.tests.ManageRunserver)",
                            "test_runner_addrport_ipv6 (admin_scripts.tests.ManageRunserver)",
                            "test_runner_ambiguous (admin_scripts.tests.ManageRunserver)",
                            "test_runner_hostname (admin_scripts.tests.ManageRunserver)",
                            "test_runner_hostname_ipv6 (admin_scripts.tests.ManageRunserver)",
                            "test_runserver_addrport (admin_scripts.tests.ManageRunserver)",
                            "test_empty_allowed_hosts_error (admin_scripts.tests.ManageRunserverEmptyAllowedHosts)",
                            "test_attribute_error (admin_scripts.tests.ManageSettingsWithSettingsErrors)",
                            "test_help (admin_scripts.tests.ManageSettingsWithSettingsErrors)",
                            "test_import_error (admin_scripts.tests.ManageSettingsWithSettingsErrors)",
                            "test_key_error (admin_scripts.tests.ManageSettingsWithSettingsErrors)",
                            "test_liveserver (admin_scripts.tests.ManageTestCommand)",
                            "test_testserver_handle_params (admin_scripts.tests.ManageTestserver)"
                        ],
                        "failure": [
                            "test_precedence (admin_scripts.tests.Discovery)"
                        ]
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "matplotlib__matplotlib-23742.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "lib/matplotlib/tests/test_backend_webagg.py::test_webagg_core_no_toolbar"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "lib/matplotlib/tests/test_backend_webagg.py::test_webagg_fallback[webagg]",
                            "lib/matplotlib/tests/test_backend_webagg.py::test_webagg_fallback[nbagg]"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "pytest-dev__pytest-7468.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "testing/logging/test_reporting.py::test_log_file_cli_subdirectories_are_successfully_created"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "[100%]",
                            "[",
                            "[100%]------------------------------",
                            "testing/logging/test_reporting.py::test_live_logging_suspends_capture[True]",
                            "testing/logging/test_reporting.py::test_live_logging_suspends_capture[False]",
                            "testing/logging/test_reporting.py::test_nothing_logged",
                            "testing/logging/test_reporting.py::test_messages_logged",
                            "testing/logging/test_reporting.py::test_root_logger_affected",
                            "testing/logging/test_reporting.py::test_log_cli_level_log_level_interaction",
                            "testing/logging/test_reporting.py::test_setup_logging",
                            "testing/logging/test_reporting.py::test_teardown_logging",
                            "testing/logging/test_reporting.py::test_log_cli_enabled_disabled[True]",
                            "testing/logging/test_reporting.py::test_log_cli_enabled_disabled[False]",
                            "testing/logging/test_reporting.py::test_log_cli_default_level",
                            "testing/logging/test_reporting.py::test_log_cli_default_level_multiple_tests",
                            "testing/logging/test_reporting.py::test_log_cli_default_level_sections",
                            "testing/logging/test_reporting.py::test_live_logs_unknown_sections",
                            "testing/logging/test_reporting.py::test_sections_single_new_line_after_test_outcome",
                            "testing/logging/test_reporting.py::test_log_cli_level",
                            "testing/logging/test_reporting.py::test_log_cli_ini_level",
                            "testing/logging/test_reporting.py::test_log_cli_auto_enable[]",
                            "testing/logging/test_reporting.py::test_log_cli_auto_enable[--log-level=WARNING]",
                            "testing/logging/test_reporting.py::test_log_cli_auto_enable[--log-file-level=WARNING]",
                            "testing/logging/test_reporting.py::test_log_cli_auto_enable[--log-cli-level=WARNING]",
                            "testing/logging/test_reporting.py::test_log_file_cli",
                            "testing/logging/test_reporting.py::test_log_file_cli_level",
                            "testing/logging/test_reporting.py::test_log_level_not_changed_by_default",
                            "testing/logging/test_reporting.py::test_log_file_ini",
                            "testing/logging/test_reporting.py::test_log_file_ini_level",
                            "testing/logging/test_reporting.py::test_log_file_unicode",
                            "testing/logging/test_reporting.py::test_collection_live_logging",
                            "testing/logging/test_reporting.py::test_collection_collect_only_live_logging[]",
                            "testing/logging/test_reporting.py::test_collection_collect_only_live_logging[-q]",
                            "testing/logging/test_reporting.py::test_collection_collect_only_live_logging[-qq]",
                            "testing/logging/test_reporting.py::test_collection_logging_to_file",
                            "testing/logging/test_reporting.py::test_log_in_hooks",
                            "testing/logging/test_reporting.py::test_log_in_runtest_logreport",
                            "testing/logging/test_reporting.py::test_log_set_path",
                            "testing/logging/test_reporting.py::test_colored_captured_log",
                            "testing/logging/test_reporting.py::test_colored_ansi_esc_caplogtext",
                            "testing/logging/test_reporting.py::test_logging_emit_error",
                            "testing/logging/test_reporting.py::test_logging_emit_error_supressed"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "scikit-learn__scikit-learn-13915.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_upcast[dense-dense-None]",
                            "sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_upcast[dense-dense-5]",
                            "sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_upcast[dense-dense-7]",
                            "sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_upcast[dense-dense-101]",
                            "sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_upcast[dense-sparse-None]",
                            "sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_upcast[dense-sparse-5]",
                            "sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_upcast[dense-sparse-7]",
                            "sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_upcast[dense-sparse-101]",
                            "sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_upcast[sparse-dense-None]",
                            "sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_upcast[sparse-dense-5]",
                            "sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_upcast[sparse-dense-7]",
                            "sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_upcast[sparse-dense-101]",
                            "sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_upcast[sparse-sparse-None]",
                            "sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_upcast[sparse-sparse-5]",
                            "sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_upcast[sparse-sparse-7]",
                            "sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_upcast[sparse-sparse-101]",
                            "sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_upcast_sym[dense-None]",
                            "sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_upcast_sym[dense-5]",
                            "sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_upcast_sym[dense-7]",
                            "sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_upcast_sym[dense-101]",
                            "sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_upcast_sym[sparse-None]",
                            "sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_upcast_sym[sparse-5]",
                            "sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_upcast_sym[sparse-7]",
                            "sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_upcast_sym[sparse-101]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_feature_names_drop[first]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_feature_names_drop[manual]"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "sklearn/cross_decomposition/tests/test_pls.py::test_pls",
                            "sklearn/cross_decomposition/tests/test_pls.py::test_convergence_fail",
                            "sklearn/cross_decomposition/tests/test_pls.py::test_PLSSVD",
                            "sklearn/cross_decomposition/tests/test_pls.py::test_univariate_pls_regression",
                            "sklearn/cross_decomposition/tests/test_pls.py::test_predict_transform_copy",
                            "sklearn/cross_decomposition/tests/test_pls.py::test_scale_and_stability",
                            "sklearn/cross_decomposition/tests/test_pls.py::test_pls_errors",
                            "sklearn/cross_decomposition/tests/test_pls.py::test_pls_scaling",
                            "sklearn/decomposition/tests/test_fastica.py::test_gs",
                            "sklearn/decomposition/tests/test_fastica.py::test_fastica_simple[0-True]",
                            "sklearn/decomposition/tests/test_fastica.py::test_fastica_simple[0-False]",
                            "sklearn/decomposition/tests/test_fastica.py::test_fastica_nowhiten",
                            "sklearn/decomposition/tests/test_fastica.py::test_fastica_convergence_fail",
                            "sklearn/decomposition/tests/test_fastica.py::test_non_square_fastica",
                            "sklearn/decomposition/tests/test_fastica.py::test_fit_transform",
                            "sklearn/decomposition/tests/test_fastica.py::test_inverse_transform",
                            "sklearn/decomposition/tests/test_fastica.py::test_fastica_errors",
                            "sklearn/linear_model/tests/test_least_angle.py::test_simple",
                            "sklearn/linear_model/tests/test_least_angle.py::test_simple_precomputed",
                            "sklearn/linear_model/tests/test_least_angle.py::test_lars_path_gram_equivalent[True-lar]",
                            "sklearn/linear_model/tests/test_least_angle.py::test_lars_path_gram_equivalent[True-lasso]",
                            "sklearn/linear_model/tests/test_least_angle.py::test_lars_path_gram_equivalent[False-lar]",
                            "sklearn/linear_model/tests/test_least_angle.py::test_lars_path_gram_equivalent[False-lasso]",
                            "sklearn/linear_model/tests/test_least_angle.py::test_x_none_gram_none_raises_value_error",
                            "sklearn/linear_model/tests/test_least_angle.py::test_all_precomputed",
                            "sklearn/linear_model/tests/test_least_angle.py::test_lars_lstsq",
                            "sklearn/linear_model/tests/test_least_angle.py::test_lasso_gives_lstsq_solution",
                            "sklearn/linear_model/tests/test_least_angle.py::test_collinearity",
                            "sklearn/linear_model/tests/test_least_angle.py::test_no_path",
                            "sklearn/linear_model/tests/test_least_angle.py::test_no_path_precomputed",
                            "sklearn/linear_model/tests/test_least_angle.py::test_no_path_all_precomputed",
                            "sklearn/linear_model/tests/test_least_angle.py::test_lars_precompute[Lars]",
                            "sklearn/linear_model/tests/test_least_angle.py::test_lars_precompute[LarsCV]",
                            "sklearn/linear_model/tests/test_least_angle.py::test_lars_precompute[LassoLarsIC]",
                            "sklearn/linear_model/tests/test_least_angle.py::test_singular_matrix",
                            "sklearn/linear_model/tests/test_least_angle.py::test_rank_deficient_design",
                            "sklearn/linear_model/tests/test_least_angle.py::test_lasso_lars_vs_lasso_cd",
                            "sklearn/linear_model/tests/test_least_angle.py::test_lasso_lars_vs_lasso_cd_early_stopping",
                            "sklearn/linear_model/tests/test_least_angle.py::test_lasso_lars_path_length",
                            "sklearn/linear_model/tests/test_least_angle.py::test_lasso_lars_vs_lasso_cd_ill_conditioned",
                            "sklearn/linear_model/tests/test_least_angle.py::test_lasso_lars_vs_lasso_cd_ill_conditioned2",
                            "sklearn/linear_model/tests/test_least_angle.py::test_lars_add_features",
                            "sklearn/linear_model/tests/test_least_angle.py::test_lars_n_nonzero_coefs",
                            "sklearn/linear_model/tests/test_least_angle.py::test_multitarget",
                            "sklearn/linear_model/tests/test_least_angle.py::test_lars_cv",
                            "sklearn/linear_model/tests/test_least_angle.py::test_lars_cv_max_iter",
                            "sklearn/linear_model/tests/test_least_angle.py::test_lasso_lars_ic",
                            "sklearn/linear_model/tests/test_least_angle.py::test_lars_path_readonly_data",
                            "sklearn/linear_model/tests/test_least_angle.py::test_lars_path_positive_constraint",
                            "sklearn/linear_model/tests/test_least_angle.py::test_estimatorclasses_positive_constraint",
                            "sklearn/linear_model/tests/test_least_angle.py::test_lasso_lars_vs_lasso_cd_positive",
                            "sklearn/linear_model/tests/test_least_angle.py::test_lasso_lars_vs_R_implementation",
                            "sklearn/linear_model/tests/test_least_angle.py::test_lasso_lars_copyX_behaviour[True]",
                            "sklearn/linear_model/tests/test_least_angle.py::test_lasso_lars_copyX_behaviour[False]",
                            "sklearn/linear_model/tests/test_least_angle.py::test_lasso_lars_fit_copyX_behaviour[True]",
                            "sklearn/linear_model/tests/test_least_angle.py::test_lasso_lars_fit_copyX_behaviour[False]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_boolean_distance[dice]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_boolean_distance[jaccard]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_boolean_distance[kulsinski]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_boolean_distance[matching]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_boolean_distance[rogerstanimoto]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_boolean_distance[russellrao]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_boolean_distance[sokalmichener]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_boolean_distance[sokalsneath]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_boolean_distance[yule]",
                            "sklearn/metrics/tests/test_pairwise.py::test_no_data_conversion_warning",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_precomputed[pairwise_distances]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_precomputed[pairwise_kernels]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_precomputed_non_negative",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_parallel[float64-csr_matrix-pairwise_distances-euclidean-kwds0]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_parallel[float64-csr_matrix-pairwise_distances-wminkowski-kwds1]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_parallel[float64-csr_matrix-pairwise_distances-wminkowski-kwds2]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_parallel[float64-csr_matrix-pairwise_kernels-polynomial-kwds3]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_parallel[float64-csr_matrix-pairwise_kernels-callable_rbf_kernel-kwds4]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_parallel[int-csr_matrix-pairwise_distances-euclidean-kwds0]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_parallel[int-csr_matrix-pairwise_distances-wminkowski-kwds1]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_parallel[int-csr_matrix-pairwise_distances-wminkowski-kwds2]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_parallel[int-csr_matrix-pairwise_kernels-polynomial-kwds3]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_parallel[int-csr_matrix-pairwise_kernels-callable_rbf_kernel-kwds4]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_callable_nonstrict_metric",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_kernels[rbf]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_kernels[laplacian]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_kernels[sigmoid]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_kernels[polynomial]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_kernels[linear]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_kernels[chi2]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_kernels[additive_chi2]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_kernels_callable",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_kernels_filter_param",
                            "sklearn/metrics/tests/test_pairwise.py::test_paired_distances[cosine-paired_cosine_distances]",
                            "sklearn/metrics/tests/test_pairwise.py::test_paired_distances[euclidean-paired_euclidean_distances]",
                            "sklearn/metrics/tests/test_pairwise.py::test_paired_distances[l2-paired_euclidean_distances]",
                            "sklearn/metrics/tests/test_pairwise.py::test_paired_distances[l1-paired_manhattan_distances]",
                            "sklearn/metrics/tests/test_pairwise.py::test_paired_distances[manhattan-paired_manhattan_distances]",
                            "sklearn/metrics/tests/test_pairwise.py::test_paired_distances[cityblock-paired_manhattan_distances]",
                            "sklearn/metrics/tests/test_pairwise.py::test_paired_distances_callable",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_argmin_min",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_chunked_reduce",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_chunked_reduce_valid[<lambda>0]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_chunked_reduce_valid[<lambda>1]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_chunked_reduce_valid[<lambda>2]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_chunked_reduce_valid[<lambda>3]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_chunked_reduce_valid[<lambda>4]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_chunked_reduce_invalid[<lambda>-ValueError-length",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_chunked_reduce_invalid[<lambda>-TypeError-returned",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_chunked_reduce_invalid[<lambda>-TypeError-,",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_chunked_diagonal[euclidean]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_chunked_diagonal[l2]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_chunked_diagonal[sqeuclidean]",
                            "sklearn/metrics/tests/test_pairwise.py::test_parallel_pairwise_distances_diagonal[euclidean]",
                            "sklearn/metrics/tests/test_pairwise.py::test_parallel_pairwise_distances_diagonal[l2]",
                            "sklearn/metrics/tests/test_pairwise.py::test_parallel_pairwise_distances_diagonal[sqeuclidean]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_chunked",
                            "sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_known_result[dense-dense]",
                            "sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_known_result[dense-sparse]",
                            "sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_known_result[sparse-dense]",
                            "sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_known_result[sparse-sparse]",
                            "sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_with_norms[dense-float32]",
                            "sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_with_norms[dense-float64]",
                            "sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_with_norms[sparse-float32]",
                            "sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_with_norms[sparse-float64]",
                            "sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances[dense-dense-float32]",
                            "sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances[dense-dense-float64]",
                            "sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances[dense-sparse-float32]",
                            "sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances[dense-sparse-float64]",
                            "sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances[sparse-dense-float32]",
                            "sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances[sparse-dense-float64]",
                            "sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances[sparse-sparse-float32]",
                            "sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances[sparse-sparse-float64]",
                            "sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_sym[dense-float32]",
                            "sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_sym[dense-float64]",
                            "sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_sym[sparse-float32]",
                            "sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_sym[sparse-float64]",
                            "sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_extreme_values[1-float32-0.0001-1e-05]",
                            "sklearn/metrics/tests/test_pairwise.py::test_euclidean_distances_extreme_values[1000000-float32-0.0001-1e-05]",
                            "sklearn/metrics/tests/test_pairwise.py::test_cosine_distances",
                            "sklearn/metrics/tests/test_pairwise.py::test_haversine_distances",
                            "sklearn/metrics/tests/test_pairwise.py::test_paired_euclidean_distances",
                            "sklearn/metrics/tests/test_pairwise.py::test_paired_manhattan_distances",
                            "sklearn/metrics/tests/test_pairwise.py::test_chi_square_kernel",
                            "sklearn/metrics/tests/test_pairwise.py::test_kernel_symmetry[linear_kernel]",
                            "sklearn/metrics/tests/test_pairwise.py::test_kernel_symmetry[polynomial_kernel]",
                            "sklearn/metrics/tests/test_pairwise.py::test_kernel_symmetry[rbf_kernel]",
                            "sklearn/metrics/tests/test_pairwise.py::test_kernel_symmetry[laplacian_kernel]",
                            "sklearn/metrics/tests/test_pairwise.py::test_kernel_symmetry[sigmoid_kernel]",
                            "sklearn/metrics/tests/test_pairwise.py::test_kernel_symmetry[cosine_similarity]",
                            "sklearn/metrics/tests/test_pairwise.py::test_kernel_sparse[linear_kernel]",
                            "sklearn/metrics/tests/test_pairwise.py::test_kernel_sparse[polynomial_kernel]",
                            "sklearn/metrics/tests/test_pairwise.py::test_kernel_sparse[rbf_kernel]",
                            "sklearn/metrics/tests/test_pairwise.py::test_kernel_sparse[laplacian_kernel]",
                            "sklearn/metrics/tests/test_pairwise.py::test_kernel_sparse[sigmoid_kernel]",
                            "sklearn/metrics/tests/test_pairwise.py::test_kernel_sparse[cosine_similarity]",
                            "sklearn/metrics/tests/test_pairwise.py::test_linear_kernel",
                            "sklearn/metrics/tests/test_pairwise.py::test_rbf_kernel",
                            "sklearn/metrics/tests/test_pairwise.py::test_laplacian_kernel",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_similarity_sparse_output[linear-linear_kernel]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_similarity_sparse_output[cosine-cosine_similarity]",
                            "sklearn/metrics/tests/test_pairwise.py::test_cosine_similarity",
                            "sklearn/metrics/tests/test_pairwise.py::test_check_dense_matrices",
                            "sklearn/metrics/tests/test_pairwise.py::test_check_XB_returned",
                            "sklearn/metrics/tests/test_pairwise.py::test_check_different_dimensions",
                            "sklearn/metrics/tests/test_pairwise.py::test_check_invalid_dimensions",
                            "sklearn/metrics/tests/test_pairwise.py::test_check_sparse_arrays",
                            "sklearn/metrics/tests/test_pairwise.py::test_check_tuple_input",
                            "sklearn/metrics/tests/test_pairwise.py::test_check_preserve_type",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_distances_data_derived_params[Y",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_sparse",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_dense",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_deprecationwarnings",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_force_new_behaviour",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_categorical_features",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_categorical_features_ignore_unknown",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_handle_unknown",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_not_fitted",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_no_categorical_features",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_handle_unknown_strings",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_dtype[int32-int32]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_dtype[int32-float32]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_dtype[int32-float64]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_dtype[float32-int32]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_dtype[float32-float32]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_dtype[float32-float64]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_dtype[float64-int32]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_dtype[float64-float32]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_dtype[float64-float64]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_dtype_pandas[int32]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_dtype_pandas[float32]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_dtype_pandas[float64]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_set_params",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder[mixed]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder[numeric]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder[object]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_inverse[None-False]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_inverse[None-True]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_inverse[first-False]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_inverse[first-True]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_X_is_not_1D[X0-fit]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_X_is_not_1D[X0-fit_transform]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_X_is_not_1D[X1-fit]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_X_is_not_1D[X1-fit_transform]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_X_is_not_1D_pandas[fit]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_X_is_not_1D_pandas[fit_transform]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_categories[mixed]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_categories[numeric]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_categories[object]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_categories[string]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_specified_categories[object]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_specified_categories[numeric]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_specified_categories[object-string-cat]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_unsorted_categories",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_specified_categories_mixed_columns",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_pandas",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_feature_names",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_feature_names_unicode",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_raise_missing[error-array-numeric]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_raise_missing[error-array-object]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_raise_missing[error-dataframe-numeric]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_raise_missing[error-dataframe-object]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_raise_missing[ignore-array-numeric]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_raise_missing[ignore-array-object]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_raise_missing[ignore-dataframe-numeric]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_raise_missing[ignore-dataframe-object]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_ordinal_encoder[mixed]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_ordinal_encoder[numeric]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_ordinal_encoder[object]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_ordinal_encoder_specified_categories[object]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_ordinal_encoder_specified_categories[numeric]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_ordinal_encoder_specified_categories[object-string-cat]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_ordinal_encoder_inverse",
                            "sklearn/preprocessing/tests/test_encoders.py::test_ordinal_encoder_raise_missing[numeric]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_ordinal_encoder_raise_missing[object]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_ordinal_encoder_raise_categories_shape",
                            "sklearn/preprocessing/tests/test_encoders.py::test_encoder_dtypes",
                            "sklearn/preprocessing/tests/test_encoders.py::test_encoder_dtypes_pandas",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_warning",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_drop_manual",
                            "sklearn/preprocessing/tests/test_encoders.py::test_one_hot_encoder_invalid_params",
                            "sklearn/preprocessing/tests/test_encoders.py::test_invalid_drop_length[drop0]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_invalid_drop_length[drop1]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_categories[first-sparse]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_categories[first-dense]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_categories[manual-sparse]",
                            "sklearn/preprocessing/tests/test_encoders.py::test_categories[manual-dense]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_mean_variance_axis0",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_mean_variance_axis1",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_incr_mean_variance_axis",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_incr_mean_variance_axis_ignore_nan[csc_matrix-0]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_incr_mean_variance_axis_ignore_nan[csc_matrix-1]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_incr_mean_variance_axis_ignore_nan[csr_matrix-0]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_incr_mean_variance_axis_ignore_nan[csr_matrix-1]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_mean_variance_illegal_axis",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_densify_rows",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_inplace_column_scale",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_inplace_row_scale",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_inplace_swap_row",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_inplace_swap_column",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max[True-0-amin-amax-False-csr_matrix-0-float32]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max[True-0-amin-amax-False-csr_matrix-0-float64]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max[True-0-amin-amax-False-csr_matrix-1-float32]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max[True-0-amin-amax-False-csr_matrix-1-float64]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max[True-0-amin-amax-False-csr_matrix-None-float32]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max[True-0-amin-amax-False-csr_matrix-None-float64]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max[True-0-amin-amax-False-csc_matrix-0-float32]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max[True-0-amin-amax-False-csc_matrix-0-float64]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max[True-0-amin-amax-False-csc_matrix-1-float32]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max[True-0-amin-amax-False-csc_matrix-1-float64]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max[True-0-amin-amax-False-csc_matrix-None-float32]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max[True-0-amin-amax-False-csc_matrix-None-float64]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max[True-nan-nanmin-nanmax-True-csr_matrix-0-float32]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max[True-nan-nanmin-nanmax-True-csr_matrix-0-float64]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max[True-nan-nanmin-nanmax-True-csr_matrix-1-float32]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max[True-nan-nanmin-nanmax-True-csr_matrix-1-float64]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max[True-nan-nanmin-nanmax-True-csr_matrix-None-float32]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max[True-nan-nanmin-nanmax-True-csr_matrix-None-float64]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max[True-nan-nanmin-nanmax-True-csc_matrix-0-float32]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max[True-nan-nanmin-nanmax-True-csc_matrix-0-float64]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max[True-nan-nanmin-nanmax-True-csc_matrix-1-float32]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max[True-nan-nanmin-nanmax-True-csc_matrix-1-float64]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max[True-nan-nanmin-nanmax-True-csc_matrix-None-float32]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max[True-nan-nanmin-nanmax-True-csc_matrix-None-float64]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max[False-0-amin-amax-False-csr_matrix-0-float32]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max[False-0-amin-amax-False-csr_matrix-0-float64]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max[False-0-amin-amax-False-csr_matrix-1-float32]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max[False-0-amin-amax-False-csr_matrix-1-float64]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max[False-0-amin-amax-False-csr_matrix-None-float32]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max[False-0-amin-amax-False-csr_matrix-None-float64]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max[False-0-amin-amax-False-csc_matrix-0-float32]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max[False-0-amin-amax-False-csc_matrix-0-float64]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max[False-0-amin-amax-False-csc_matrix-1-float32]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max[False-0-amin-amax-False-csc_matrix-1-float64]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max[False-0-amin-amax-False-csc_matrix-None-float32]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max[False-0-amin-amax-False-csc_matrix-None-float64]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max[False-nan-nanmin-nanmax-True-csr_matrix-0-float32]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max[False-nan-nanmin-nanmax-True-csr_matrix-0-float64]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max[False-nan-nanmin-nanmax-True-csr_matrix-1-float32]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max[False-nan-nanmin-nanmax-True-csr_matrix-1-float64]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max[False-nan-nanmin-nanmax-True-csr_matrix-None-float32]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max[False-nan-nanmin-nanmax-True-csr_matrix-None-float64]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max[False-nan-nanmin-nanmax-True-csc_matrix-0-float32]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max[False-nan-nanmin-nanmax-True-csc_matrix-0-float64]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max[False-nan-nanmin-nanmax-True-csc_matrix-1-float32]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max[False-nan-nanmin-nanmax-True-csc_matrix-1-float64]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max[False-nan-nanmin-nanmax-True-csc_matrix-None-float32]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max[False-nan-nanmin-nanmax-True-csc_matrix-None-float64]",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_min_max_axis_errors",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_count_nonzero",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_csc_row_median",
                            "sklearn/utils/tests/test_sparsefuncs.py::test_inplace_normalize"
                        ],
                        "failure": [
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_parallel[float64-array-pairwise_distances-euclidean-kwds0]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_parallel[float64-array-pairwise_distances-wminkowski-kwds1]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_parallel[float64-array-pairwise_distances-wminkowski-kwds2]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_parallel[float64-array-pairwise_kernels-polynomial-kwds3]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_parallel[float64-array-pairwise_kernels-callable_rbf_kernel-kwds4]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_parallel[int-array-pairwise_distances-euclidean-kwds0]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_parallel[int-array-pairwise_distances-wminkowski-kwds1]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_parallel[int-array-pairwise_distances-wminkowski-kwds2]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_parallel[int-array-pairwise_kernels-polynomial-kwds3]",
                            "sklearn/metrics/tests/test_pairwise.py::test_pairwise_parallel[int-array-pairwise_kernels-callable_rbf_kernel-kwds4]"
                        ]
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "pytest-dev__pytest-10758.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "testing/test_assertrewrite.py::TestIssue10743::test_assertion_walrus_operator",
                            "testing/test_assertrewrite.py::TestIssue10743::test_assertion_inline_walrus_operator",
                            "testing/test_assertrewrite.py::TestIssue10743::test_assertion_walrus_operator_true_assertion_and_changes_variable_value",
                            "testing/test_assertrewrite.py::TestIssue10743::test_assertion_walrus_operator_fail_assertion",
                            "testing/test_assertrewrite.py::TestIssue10743::test_assertion_walrus_operator_compare_boolean_fails",
                            "testing/test_assertrewrite.py::TestIssue10743::test_assertion_walrus_operator_boolean_none_fails"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "testing/test_assertrewrite.py::TestAssertionRewrite::test_place_initial_imports",
                            "testing/test_assertrewrite.py::TestAssertionRewrite::test_location_is_set",
                            "testing/test_assertrewrite.py::TestAssertionRewrite::test_dont_rewrite",
                            "testing/test_assertrewrite.py::TestAssertionRewrite::test_name",
                            "testing/test_assertrewrite.py::TestAssertionRewrite::test_assertrepr_compare_same_width",
                            "testing/test_assertrewrite.py::TestAssertionRewrite::test_dont_rewrite_if_hasattr_fails",
                            "testing/test_assertrewrite.py::TestAssertionRewrite::test_assert_already_has_message",
                            "testing/test_assertrewrite.py::TestAssertionRewrite::test_boolop",
                            "testing/test_assertrewrite.py::TestAssertionRewrite::test_short_circuit_evaluation",
                            "testing/test_assertrewrite.py::TestAssertionRewrite::test_unary_op",
                            "testing/test_assertrewrite.py::TestAssertionRewrite::test_binary_op",
                            "testing/test_assertrewrite.py::TestAssertionRewrite::test_boolop_percent",
                            "testing/test_assertrewrite.py::TestAssertionRewrite::test_call",
                            "testing/test_assertrewrite.py::TestAssertionRewrite::test_attribute",
                            "testing/test_assertrewrite.py::TestAssertionRewrite::test_comparisons",
                            "testing/test_assertrewrite.py::TestAssertionRewrite::test_len",
                            "testing/test_assertrewrite.py::TestAssertionRewrite::test_custom_reprcompare",
                            "testing/test_assertrewrite.py::TestAssertionRewrite::test_assert_raising__bool__in_comparison",
                            "testing/test_assertrewrite.py::TestAssertionRewrite::test_formatchar",
                            "testing/test_assertrewrite.py::TestAssertionRewrite::test_custom_repr",
                            "testing/test_assertrewrite.py::TestAssertionRewrite::test_custom_repr_non_ascii",
                            "testing/test_assertrewrite.py::TestAssertionRewriteHookDetails::test_read_pyc",
                            "testing/test_assertrewrite.py::TestAssertionRewriteHookDetails::test_read_pyc_more_invalid",
                            "testing/test_assertrewrite.py::test_get_assertion_exprs[trivial]",
                            "testing/test_assertrewrite.py::test_get_assertion_exprs[assert",
                            "testing/test_assertrewrite.py::test_get_assertion_exprs[multiple",
                            "testing/test_assertrewrite.py::test_get_assertion_exprs[latin1",
                            "testing/test_assertrewrite.py::test_get_assertion_exprs[utf-8",
                            "testing/test_assertrewrite.py::test_get_assertion_exprs[multi-line",
                            "testing/test_assertrewrite.py::test_get_assertion_exprs[multi",
                            "testing/test_assertrewrite.py::test_get_assertion_exprs[backslash",
                            "testing/test_assertrewrite.py::test_get_assertion_exprs[assertion",
                            "testing/test_assertrewrite.py::test_get_assertion_exprs[escaped",
                            "testing/test_assertrewrite.py::test_get_assertion_exprs[no",
                            "testing/test_assertrewrite.py::test_try_makedirs",
                            "testing/test_assertrewrite.py::TestPyCacheDir::test_get_cache_dir[c:/tmp/pycs-d:/projects/src/foo.py-c:/tmp/pycs/projects/src]",
                            "testing/test_assertrewrite.py::TestPyCacheDir::test_get_cache_dir[None-d:/projects/src/foo.py-d:/projects/src/__pycache__]",
                            "testing/test_assertrewrite.py::TestPyCacheDir::test_get_cache_dir[/tmp/pycs-/home/projects/src/foo.py-/tmp/pycs/home/projects/src]",
                            "testing/test_assertrewrite.py::TestPyCacheDir::test_get_cache_dir[None-/home/projects/src/foo.py-/home/projects/src/__pycache__]",
                            "testing/test_assertrewrite.py::TestReprSizeVerbosity::test_get_maxsize_for_saferepr[0-240]",
                            "testing/test_assertrewrite.py::TestReprSizeVerbosity::test_get_maxsize_for_saferepr[1-2400]",
                            "testing/test_assertrewrite.py::TestReprSizeVerbosity::test_get_maxsize_for_saferepr[2-None]",
                            "testing/test_assertrewrite.py::TestReprSizeVerbosity::test_get_maxsize_for_saferepr[3-None]",
                            "testing/test_assertrewrite.py::TestAssertionRewrite::test_rewrites_plugin_as_a_package",
                            "testing/test_assertrewrite.py::TestAssertionRewrite::test_honors_pep_235",
                            "testing/test_assertrewrite.py::TestAssertionRewrite::test_assertion_message",
                            "testing/test_assertrewrite.py::TestAssertionRewrite::test_assertion_message_multiline",
                            "testing/test_assertrewrite.py::TestAssertionRewrite::test_assertion_message_tuple",
                            "testing/test_assertrewrite.py::TestAssertionRewrite::test_assertion_message_expr",
                            "testing/test_assertrewrite.py::TestAssertionRewrite::test_assertion_message_escape",
                            "testing/test_assertrewrite.py::TestAssertionRewrite::test_assertion_messages_bytes",
                            "testing/test_assertrewrite.py::TestAssertionRewrite::test_at_operator_issue1290",
                            "testing/test_assertrewrite.py::TestAssertionRewrite::test_starred_with_side_effect",
                            "testing/test_assertrewrite.py::TestRewriteOnImport::test_pycache_is_a_file",
                            "testing/test_assertrewrite.py::TestRewriteOnImport::test_pycache_is_readonly",
                            "testing/test_assertrewrite.py::TestRewriteOnImport::test_zipfile",
                            "testing/test_assertrewrite.py::TestRewriteOnImport::test_load_resource_via_files_with_rewrite",
                            "testing/test_assertrewrite.py::TestRewriteOnImport::test_readonly",
                            "testing/test_assertrewrite.py::TestRewriteOnImport::test_orphaned_pyc_file",
                            "testing/test_assertrewrite.py::TestRewriteOnImport::test_package",
                            "testing/test_assertrewrite.py::TestRewriteOnImport::test_translate_newlines",
                            "testing/test_assertrewrite.py::TestRewriteOnImport::test_package_without__init__py",
                            "testing/test_assertrewrite.py::TestRewriteOnImport::test_remember_rewritten_modules",
                            "testing/test_assertrewrite.py::TestAssertionRewriteHookDetails::test_sys_meta_path_munged",
                            "testing/test_assertrewrite.py::TestAssertionRewriteHookDetails::test_write_pyc",
                            "testing/test_assertrewrite.py::TestAssertionRewriteHookDetails::test_read_pyc_success",
                            "testing/test_assertrewrite.py::TestAssertionRewriteHookDetails::test_reload_is_same_and_reloads",
                            "testing/test_assertrewrite.py::TestAssertionRewriteHookDetails::test_get_data_support",
                            "testing/test_assertrewrite.py::test_issue731",
                            "testing/test_assertrewrite.py::TestIssue925::test_simple_case",
                            "testing/test_assertrewrite.py::TestIssue925::test_long_case",
                            "testing/test_assertrewrite.py::TestIssue925::test_many_brackets",
                            "testing/test_assertrewrite.py::TestIssue2121::test_rewrite_python_files_contain_subdirs",
                            "testing/test_assertrewrite.py::TestIssue10743::test_assertion_walrus_operator_dont_rewrite",
                            "testing/test_assertrewrite.py::TestIssue10743::test_assertion_inline_walrus_operator_reverse",
                            "testing/test_assertrewrite.py::TestIssue10743::test_assertion_walrus_no_variable_name_conflict",
                            "testing/test_assertrewrite.py::TestIssue10743::test_assertion_walrus_operator_boolean_composite",
                            "testing/test_assertrewrite.py::TestIssue10743::test_assertion_walrus_operator_value_changes_cleared_after_each_test",
                            "testing/test_assertrewrite.py::test_source_mtime_long_long[-1]",
                            "testing/test_assertrewrite.py::test_source_mtime_long_long[1]",
                            "testing/test_assertrewrite.py::test_rewrite_infinite_recursion",
                            "testing/test_assertrewrite.py::TestEarlyRewriteBailout::test_basic",
                            "testing/test_assertrewrite.py::TestEarlyRewriteBailout::test_pattern_contains_subdirectories",
                            "testing/test_assertrewrite.py::TestEarlyRewriteBailout::test_cwd_changed",
                            "testing/test_assertrewrite.py::TestAssertionPass::test_option_default",
                            "testing/test_assertrewrite.py::TestAssertionPass::test_hook_call",
                            "testing/test_assertrewrite.py::TestAssertionPass::test_hook_call_with_parens",
                            "testing/test_assertrewrite.py::TestAssertionPass::test_hook_not_called_without_hookimpl",
                            "testing/test_assertrewrite.py::TestAssertionPass::test_hook_not_called_without_cmd_option",
                            "testing/test_assertrewrite.py::TestPyCacheDir::test_sys_pycache_prefix_integration",
                            "testing/test_assertrewrite.py::TestReprSizeVerbosity::test_default_verbosity",
                            "testing/test_assertrewrite.py::TestReprSizeVerbosity::test_increased_verbosity",
                            "testing/test_assertrewrite.py::TestReprSizeVerbosity::test_max_increased_verbosity",
                            "testing/test_assertrewrite.py::TestAssertionRewrite::test_dont_rewrite_plugin",
                            "testing/test_assertrewrite.py::TestRewriteOnImport::test_dont_write_bytecode",
                            "testing/test_assertrewrite.py::TestRewriteOnImport::test_cached_pyc_includes_pytest_version",
                            "testing/test_assertrewrite.py::TestRewriteOnImport::test_pyc_vs_pyo",
                            "testing/test_assertrewrite.py::TestRewriteOnImport::test_rewrite_warning",
                            "testing/test_assertrewrite.py::TestRewriteOnImport::test_rewrite_module_imported_from_conftest",
                            "testing/test_assertrewrite.py::TestRewriteOnImport::test_rewrite_warning_using_pytest_plugins",
                            "testing/test_assertrewrite.py::TestRewriteOnImport::test_rewrite_warning_using_pytest_plugins_env_var",
                            "testing/test_assertrewrite.py::TestAssertionRewriteHookDetails::test_resources_provider_for_loader"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "pylint-dev__pylint-7993.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "tests/reporters/unittest_reporting.py::test_template_option_with_header"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "tests/reporters/unittest_reporting.py::test_template_option",
                            "tests/reporters/unittest_reporting.py::test_template_option_default",
                            "tests/reporters/unittest_reporting.py::test_template_option_end_line",
                            "tests/reporters/unittest_reporting.py::test_template_option_non_existing",
                            "tests/reporters/unittest_reporting.py::test_deprecation_set_output",
                            "tests/reporters/unittest_reporting.py::test_parseable_output_deprecated",
                            "tests/reporters/unittest_reporting.py::test_parseable_output_regression",
                            "tests/reporters/unittest_reporting.py::test_multi_format_output",
                            "tests/reporters/unittest_reporting.py::test_multi_reporter_independant_messages",
                            "tests/reporters/unittest_reporting.py::test_display_results_is_renamed"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "pytest-dev__pytest-11217.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "testing/test_skipping.py::test_skipped_reasons_functional"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "testing/test_skipping.py::test_importorskip",
                            "testing/test_skipping.py::TestEvaluation::test_no_marker",
                            "testing/test_skipping.py::TestEvaluation::test_marked_xfail_no_args",
                            "testing/test_skipping.py::TestEvaluation::test_marked_skipif_no_args",
                            "testing/test_skipping.py::TestEvaluation::test_marked_one_arg",
                            "testing/test_skipping.py::TestEvaluation::test_marked_one_arg_with_reason",
                            "testing/test_skipping.py::TestEvaluation::test_marked_one_arg_twice",
                            "testing/test_skipping.py::TestEvaluation::test_marked_one_arg_twice2",
                            "testing/test_skipping.py::TestEvaluation::test_marked_skipif_with_boolean_without_reason",
                            "testing/test_skipping.py::TestEvaluation::test_marked_skipif_with_invalid_boolean",
                            "testing/test_skipping.py::TestEvaluation::test_skipif_class",
                            "testing/test_skipping.py::TestEvaluation::test_skipif_markeval_namespace",
                            "testing/test_skipping.py::TestEvaluation::test_skipif_markeval_namespace_multiple",
                            "testing/test_skipping.py::TestEvaluation::test_skipif_markeval_namespace_ValueError",
                            "testing/test_skipping.py::TestXFail::test_xfail_simple[True]",
                            "testing/test_skipping.py::TestXFail::test_xfail_simple[False]",
                            "testing/test_skipping.py::TestXFail::test_xfail_xpassed",
                            "testing/test_skipping.py::TestXFail::test_xfail_using_platform",
                            "testing/test_skipping.py::TestXFail::test_xfail_xpassed_strict",
                            "testing/test_skipping.py::TestXFail::test_xfail_run_anyway",
                            "testing/test_skipping.py::TestXFail::test_xfail_run_with_skip_mark[test_input0-expected0]",
                            "testing/test_skipping.py::TestXFail::test_xfail_run_with_skip_mark[test_input1-expected1]",
                            "testing/test_skipping.py::TestXFail::test_xfail_evalfalse_but_fails",
                            "testing/test_skipping.py::TestXFail::test_xfail_not_report_default",
                            "testing/test_skipping.py::TestXFail::test_xfail_not_run_xfail_reporting",
                            "testing/test_skipping.py::TestXFail::test_xfail_not_run_no_setup_run",
                            "testing/test_skipping.py::TestXFail::test_xfail_xpass",
                            "testing/test_skipping.py::TestXFail::test_xfail_imperative",
                            "testing/test_skipping.py::TestXFail::test_xfail_imperative_in_setup_function",
                            "testing/test_skipping.py::TestXFail::test_dynamic_xfail_no_run",
                            "testing/test_skipping.py::TestXFail::test_dynamic_xfail_set_during_funcarg_setup",
                            "testing/test_skipping.py::TestXFail::test_dynamic_xfail_set_during_runtest_failed",
                            "testing/test_skipping.py::TestXFail::test_dynamic_xfail_set_during_runtest_passed_strict",
                            "testing/test_skipping.py::TestXFail::test_xfail_raises[TypeError-TypeError-*1",
                            "testing/test_skipping.py::TestXFail::test_xfail_raises[(AttributeError,",
                            "testing/test_skipping.py::TestXFail::test_xfail_raises[TypeError-IndexError-*1",
                            "testing/test_skipping.py::TestXFail::test_strict_sanity",
                            "testing/test_skipping.py::TestXFail::test_strict_xfail[True]",
                            "testing/test_skipping.py::TestXFail::test_strict_xfail[False]",
                            "testing/test_skipping.py::TestXFail::test_strict_xfail_condition[True]",
                            "testing/test_skipping.py::TestXFail::test_strict_xfail_condition[False]",
                            "testing/test_skipping.py::TestXFail::test_xfail_condition_keyword[True]",
                            "testing/test_skipping.py::TestXFail::test_xfail_condition_keyword[False]",
                            "testing/test_skipping.py::TestXFail::test_strict_xfail_default_from_file[true]",
                            "testing/test_skipping.py::TestXFail::test_strict_xfail_default_from_file[false]",
                            "testing/test_skipping.py::TestXFail::test_xfail_markeval_namespace",
                            "testing/test_skipping.py::TestXFailwithSetupTeardown::test_failing_setup_issue9",
                            "testing/test_skipping.py::TestXFailwithSetupTeardown::test_failing_teardown_issue9",
                            "testing/test_skipping.py::TestSkip::test_skip_class",
                            "testing/test_skipping.py::TestSkip::test_skips_on_false_string",
                            "testing/test_skipping.py::TestSkip::test_arg_as_reason",
                            "testing/test_skipping.py::TestSkip::test_skip_no_reason",
                            "testing/test_skipping.py::TestSkip::test_skip_with_reason",
                            "testing/test_skipping.py::TestSkip::test_only_skips_marked_test",
                            "testing/test_skipping.py::TestSkip::test_strict_and_skip",
                            "testing/test_skipping.py::TestSkip::test_wrong_skip_usage",
                            "testing/test_skipping.py::TestSkipif::test_skipif_conditional",
                            "testing/test_skipping.py::TestSkipif::test_skipif_reporting[\"hasattr(sys,",
                            "testing/test_skipping.py::TestSkipif::test_skipif_reporting[True,",
                            "testing/test_skipping.py::TestSkipif::test_skipif_using_platform",
                            "testing/test_skipping.py::TestSkipif::test_skipif_reporting_multiple[skipif-SKIP-skipped]",
                            "testing/test_skipping.py::TestSkipif::test_skipif_reporting_multiple[xfail-XPASS-xpassed]",
                            "testing/test_skipping.py::test_skip_not_report_default",
                            "testing/test_skipping.py::test_skipif_class",
                            "testing/test_skipping.py::test_skipped_folding",
                            "testing/test_skipping.py::test_reportchars",
                            "testing/test_skipping.py::test_reportchars_error",
                            "testing/test_skipping.py::test_reportchars_all",
                            "testing/test_skipping.py::test_reportchars_all_error",
                            "testing/test_skipping.py::test_errors_in_xfail_skip_expressions",
                            "testing/test_skipping.py::test_xfail_skipif_with_globals",
                            "testing/test_skipping.py::test_default_markers",
                            "testing/test_skipping.py::test_xfail_test_setup_exception",
                            "testing/test_skipping.py::test_imperativeskip_on_xfail_test",
                            "testing/test_skipping.py::TestBooleanCondition::test_skipif",
                            "testing/test_skipping.py::TestBooleanCondition::test_skipif_noreason",
                            "testing/test_skipping.py::TestBooleanCondition::test_xfail",
                            "testing/test_skipping.py::test_xfail_item",
                            "testing/test_skipping.py::test_module_level_skip_error",
                            "testing/test_skipping.py::test_module_level_skip_with_allow_module_level",
                            "testing/test_skipping.py::test_invalid_skip_keyword_parameter",
                            "testing/test_skipping.py::test_mark_xfail_item",
                            "testing/test_skipping.py::test_summary_list_after_errors",
                            "testing/test_skipping.py::test_relpath_rootdir",
                            "testing/test_skipping.py::test_skip_from_fixture",
                            "testing/test_skipping.py::test_skip_using_reason_works_ok",
                            "testing/test_skipping.py::test_fail_using_reason_works_ok",
                            "testing/test_skipping.py::test_fail_fails_with_msg_and_reason",
                            "testing/test_skipping.py::test_skip_fails_with_msg_and_reason",
                            "testing/test_skipping.py::test_exit_with_msg_and_reason_fails",
                            "testing/test_skipping.py::test_exit_with_reason_works_ok"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "sphinx-doc__sphinx-7859.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "tests/test_ext_autodoc_configs.py::test_autodoc_typehints_description_for_invalid_node"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "tests/test_ext_autodoc_configs.py::test_autoclass_content_class",
                            "tests/test_ext_autodoc_configs.py::test_autoclass_content_init",
                            "tests/test_ext_autodoc_configs.py::test_autoclass_content_both",
                            "tests/test_ext_autodoc_configs.py::test_autodoc_inherit_docstrings",
                            "tests/test_ext_autodoc_configs.py::test_autodoc_docstring_signature",
                            "tests/test_ext_autodoc_configs.py::test_autoclass_content_and_docstring_signature_class",
                            "tests/test_ext_autodoc_configs.py::test_autoclass_content_and_docstring_signature_init",
                            "tests/test_ext_autodoc_configs.py::test_autoclass_content_and_docstring_signature_both",
                            "tests/test_ext_autodoc_configs.py::test_mocked_module_imports",
                            "tests/test_ext_autodoc_configs.py::test_autodoc_typehints_signature",
                            "tests/test_ext_autodoc_configs.py::test_autodoc_typehints_none",
                            "tests/test_ext_autodoc_configs.py::test_autodoc_typehints_description",
                            "tests/test_ext_autodoc_configs.py::test_autodoc_default_options",
                            "tests/test_ext_autodoc_configs.py::test_autodoc_default_options_with_values"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "sympy__sympy-21260.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "test_core_basic",
                            "test_core_Str",
                            "test_core_symbol",
                            "test_core_numbers",
                            "test_core_float_copy",
                            "test_core_relational",
                            "test_core_add",
                            "test_core_mul",
                            "test_core_power",
                            "test_core_function",
                            "test_core_interval",
                            "test_functions",
                            "test_geometry",
                            "test_integrals",
                            "test_physics",
                            "test_pickling_polys_polytools",
                            "test_pickling_polys_numberfields",
                            "test_pickling_polys_rootoftools",
                            "test_series",
                            "test_concrete"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "test_Singleton",
                            "test_singleton_redefinition",
                            "test_core_undefinedfunctions",
                            "test_core_multidimensional",
                            "test_Singletons",
                            "test_logic",
                            "test_matrices",
                            "test_ntheory",
                            "test_pickling_polys_polyclasses",
                            "test_pickling_polys_fields",
                            "test_pickling_polys_elements",
                            "test_pickling_polys_domains",
                            "test_pickling_polys_orderings",
                            "test_pickling_polys_monomials",
                            "test_pickling_polys_errors",
                            "test_printing",
                            "test_deprecation_warning"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "sphinx-doc__sphinx-9467.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "tests/test_build_linkcheck.py::test_connect_to_selfsigned_with_tls_verify_false",
                            "tests/test_build_linkcheck.py::test_TooManyRedirects_on_HEAD",
                            "tests/test_build_linkcheck.py::test_too_many_requests_retry_after_int_delay",
                            "tests/test_build_linkcheck.py::test_get_after_head_raises_connection_error"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "tests/test_build_linkcheck.py::test_defaults_json",
                            "tests/test_build_linkcheck.py::test_raises_for_invalid_status",
                            "tests/test_build_linkcheck.py::test_auth_header_uses_first_match",
                            "tests/test_build_linkcheck.py::test_auth_header_no_match",
                            "tests/test_build_linkcheck.py::test_linkcheck_request_headers",
                            "tests/test_build_linkcheck.py::test_linkcheck_request_headers_no_slash",
                            "tests/test_build_linkcheck.py::test_linkcheck_request_headers_default",
                            "tests/test_build_linkcheck.py::test_follows_redirects_on_HEAD",
                            "tests/test_build_linkcheck.py::test_follows_redirects_on_GET",
                            "tests/test_build_linkcheck.py::test_linkcheck_allowed_redirects",
                            "tests/test_build_linkcheck.py::test_invalid_ssl",
                            "tests/test_build_linkcheck.py::test_connect_to_selfsigned_fails",
                            "tests/test_build_linkcheck.py::test_connect_to_selfsigned_with_tls_cacerts",
                            "tests/test_build_linkcheck.py::test_connect_to_selfsigned_with_requests_env_var",
                            "tests/test_build_linkcheck.py::test_connect_to_selfsigned_nonexistent_cert_file",
                            "tests/test_build_linkcheck.py::test_too_many_requests_retry_after_HTTP_date",
                            "tests/test_build_linkcheck.py::test_too_many_requests_retry_after_without_header",
                            "tests/test_build_linkcheck.py::test_too_many_requests_user_timeout",
                            "tests/test_build_linkcheck.py::test_limit_rate_default_sleep",
                            "tests/test_build_linkcheck.py::test_limit_rate_user_max_delay",
                            "tests/test_build_linkcheck.py::test_limit_rate_doubles_previous_wait_time",
                            "tests/test_build_linkcheck.py::test_limit_rate_clips_wait_time_to_max_time",
                            "tests/test_build_linkcheck.py::test_limit_rate_bails_out_after_waiting_max_time"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "scikit-learn__scikit-learn-15625.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "sklearn/metrics/tests/test_classification.py::test_confusion_matrix_normalize[true-f-0.333333333]",
                            "sklearn/metrics/tests/test_classification.py::test_confusion_matrix_normalize[pred-f-0.333333333]",
                            "sklearn/metrics/tests/test_classification.py::test_confusion_matrix_normalize[all-f-0.1111111111]",
                            "sklearn/metrics/tests/test_classification.py::test_confusion_matrix_normalize[None-i-2]",
                            "sklearn/metrics/tests/test_classification.py::test_confusion_matrix_normalize_single_class"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "sklearn/metrics/tests/test_classification.py::test_classification_report_dictionary_output",
                            "sklearn/metrics/tests/test_classification.py::test_multilabel_accuracy_score_subset_accuracy",
                            "sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_score_binary",
                            "sklearn/metrics/tests/test_classification.py::test_precision_recall_f_binary_single_class",
                            "sklearn/metrics/tests/test_classification.py::test_precision_recall_f_extra_labels",
                            "sklearn/metrics/tests/test_classification.py::test_precision_recall_f_ignored_labels",
                            "sklearn/metrics/tests/test_classification.py::test_average_precision_score_score_non_binary_class",
                            "sklearn/metrics/tests/test_classification.py::test_average_precision_score_duplicate_values",
                            "sklearn/metrics/tests/test_classification.py::test_average_precision_score_tied_values",
                            "sklearn/metrics/tests/test_classification.py::test_precision_recall_fscore_support_errors",
                            "sklearn/metrics/tests/test_classification.py::test_precision_recall_f_unused_pos_label",
                            "sklearn/metrics/tests/test_classification.py::test_confusion_matrix_binary",
                            "sklearn/metrics/tests/test_classification.py::test_multilabel_confusion_matrix_binary",
                            "sklearn/metrics/tests/test_classification.py::test_multilabel_confusion_matrix_multiclass",
                            "sklearn/metrics/tests/test_classification.py::test_multilabel_confusion_matrix_multilabel",
                            "sklearn/metrics/tests/test_classification.py::test_multilabel_confusion_matrix_errors",
                            "sklearn/metrics/tests/test_classification.py::test_cohen_kappa",
                            "sklearn/metrics/tests/test_classification.py::test_matthews_corrcoef_nan",
                            "sklearn/metrics/tests/test_classification.py::test_matthews_corrcoef_against_numpy_corrcoef",
                            "sklearn/metrics/tests/test_classification.py::test_matthews_corrcoef_against_jurman",
                            "sklearn/metrics/tests/test_classification.py::test_matthews_corrcoef",
                            "sklearn/metrics/tests/test_classification.py::test_matthews_corrcoef_multiclass",
                            "sklearn/metrics/tests/test_classification.py::test_matthews_corrcoef_overflow[100]",
                            "sklearn/metrics/tests/test_classification.py::test_matthews_corrcoef_overflow[10000]",
                            "sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_score_multiclass",
                            "sklearn/metrics/tests/test_classification.py::test_precision_refcall_f1_score_multilabel_unordered_labels[samples]",
                            "sklearn/metrics/tests/test_classification.py::test_precision_refcall_f1_score_multilabel_unordered_labels[micro]",
                            "sklearn/metrics/tests/test_classification.py::test_precision_refcall_f1_score_multilabel_unordered_labels[macro]",
                            "sklearn/metrics/tests/test_classification.py::test_precision_refcall_f1_score_multilabel_unordered_labels[weighted]",
                            "sklearn/metrics/tests/test_classification.py::test_precision_refcall_f1_score_multilabel_unordered_labels[None]",
                            "sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_score_binary_averaged",
                            "sklearn/metrics/tests/test_classification.py::test_zero_precision_recall",
                            "sklearn/metrics/tests/test_classification.py::test_confusion_matrix_multiclass_subset_labels",
                            "sklearn/metrics/tests/test_classification.py::test_confusion_matrix_dtype",
                            "sklearn/metrics/tests/test_classification.py::test_classification_report_multiclass",
                            "sklearn/metrics/tests/test_classification.py::test_classification_report_multiclass_balanced",
                            "sklearn/metrics/tests/test_classification.py::test_classification_report_multiclass_with_label_detection",
                            "sklearn/metrics/tests/test_classification.py::test_classification_report_multiclass_with_digits",
                            "sklearn/metrics/tests/test_classification.py::test_classification_report_multiclass_with_string_label",
                            "sklearn/metrics/tests/test_classification.py::test_classification_report_multiclass_with_unicode_label",
                            "sklearn/metrics/tests/test_classification.py::test_classification_report_multiclass_with_long_string_label",
                            "sklearn/metrics/tests/test_classification.py::test_classification_report_labels_target_names_unequal_length",
                            "sklearn/metrics/tests/test_classification.py::test_classification_report_no_labels_target_names_unequal_length",
                            "sklearn/metrics/tests/test_classification.py::test_multilabel_classification_report",
                            "sklearn/metrics/tests/test_classification.py::test_multilabel_zero_one_loss_subset",
                            "sklearn/metrics/tests/test_classification.py::test_multilabel_hamming_loss",
                            "sklearn/metrics/tests/test_classification.py::test_jaccard_score_validation",
                            "sklearn/metrics/tests/test_classification.py::test_multilabel_jaccard_score",
                            "sklearn/metrics/tests/test_classification.py::test_multiclass_jaccard_score",
                            "sklearn/metrics/tests/test_classification.py::test_average_binary_jaccard_score",
                            "sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_score_multilabel_1",
                            "sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_score_multilabel_2",
                            "sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_score_with_an_empty_prediction[warn]",
                            "sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_score_with_an_empty_prediction[0]",
                            "sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_score_with_an_empty_prediction[1]",
                            "sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_no_labels[0-macro-1]",
                            "sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_no_labels[0-micro-1]",
                            "sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_no_labels[0-weighted-1]",
                            "sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_no_labels[0-samples-1]",
                            "sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_no_labels[1-macro-1]",
                            "sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_no_labels[1-micro-1]",
                            "sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_no_labels[1-weighted-1]",
                            "sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_no_labels[1-samples-1]",
                            "sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_no_labels_check_warnings[macro]",
                            "sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_no_labels_check_warnings[micro]",
                            "sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_no_labels_check_warnings[weighted]",
                            "sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_no_labels_check_warnings[samples]",
                            "sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_no_labels_average_none[0]",
                            "sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_no_labels_average_none[1]",
                            "sklearn/metrics/tests/test_classification.py::test_precision_recall_f1_no_labels_average_none_warn",
                            "sklearn/metrics/tests/test_classification.py::test_prf_warnings",
                            "sklearn/metrics/tests/test_classification.py::test_prf_no_warnings_if_zero_division_set[0]",
                            "sklearn/metrics/tests/test_classification.py::test_prf_no_warnings_if_zero_division_set[1]",
                            "sklearn/metrics/tests/test_classification.py::test_recall_warnings[warn]",
                            "sklearn/metrics/tests/test_classification.py::test_recall_warnings[0]",
                            "sklearn/metrics/tests/test_classification.py::test_recall_warnings[1]",
                            "sklearn/metrics/tests/test_classification.py::test_precision_warnings[warn]",
                            "sklearn/metrics/tests/test_classification.py::test_precision_warnings[0]",
                            "sklearn/metrics/tests/test_classification.py::test_precision_warnings[1]",
                            "sklearn/metrics/tests/test_classification.py::test_fscore_warnings[warn]",
                            "sklearn/metrics/tests/test_classification.py::test_fscore_warnings[0]",
                            "sklearn/metrics/tests/test_classification.py::test_fscore_warnings[1]",
                            "sklearn/metrics/tests/test_classification.py::test_prf_average_binary_data_non_binary",
                            "sklearn/metrics/tests/test_classification.py::test__check_targets",
                            "sklearn/metrics/tests/test_classification.py::test__check_targets_multiclass_with_both_y_true_and_y_pred_binary",
                            "sklearn/metrics/tests/test_classification.py::test_hinge_loss_binary",
                            "sklearn/metrics/tests/test_classification.py::test_hinge_loss_multiclass",
                            "sklearn/metrics/tests/test_classification.py::test_hinge_loss_multiclass_missing_labels_with_labels_none",
                            "sklearn/metrics/tests/test_classification.py::test_hinge_loss_multiclass_with_missing_labels",
                            "sklearn/metrics/tests/test_classification.py::test_hinge_loss_multiclass_invariance_lists",
                            "sklearn/metrics/tests/test_classification.py::test_log_loss",
                            "sklearn/metrics/tests/test_classification.py::test_log_loss_pandas_input",
                            "sklearn/metrics/tests/test_classification.py::test_brier_score_loss",
                            "sklearn/metrics/tests/test_classification.py::test_balanced_accuracy_score_unseen",
                            "sklearn/metrics/tests/test_classification.py::test_balanced_accuracy_score[y_true0-y_pred0]",
                            "sklearn/metrics/tests/test_classification.py::test_balanced_accuracy_score[y_true1-y_pred1]",
                            "sklearn/metrics/tests/test_classification.py::test_balanced_accuracy_score[y_true2-y_pred2]",
                            "sklearn/metrics/tests/test_classification.py::test_multilabel_jaccard_similarity_score_deprecation"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "django__django-5470.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "test_script_prefix_set_in_commands (user_commands.tests.CommandRunTests)"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "test_no_existent_external_program (user_commands.tests.UtilsTests)",
                            "test_call_command_no_checks (user_commands.tests.CommandTests)",
                            "test_call_command_option_parsing (user_commands.tests.CommandTests)",
                            "test_call_command_option_parsing_non_string_arg (user_commands.tests.CommandTests)",
                            "test_calling_a_command_with_no_app_labels_and_parameters_should_raise_a_command_error (user_commands.tests.CommandTests)",
                            "test_calling_a_command_with_only_empty_parameter_should_ends_gracefully (user_commands.tests.CommandTests)",
                            "test_calling_command_with_app_labels_and_parameters_should_be_ok (user_commands.tests.CommandTests)",
                            "test_calling_command_with_parameters_and_app_labels_at_the_end_should_be_ok (user_commands.tests.CommandTests)",
                            "test_command (user_commands.tests.CommandTests)",
                            "test_command_style (user_commands.tests.CommandTests)",
                            "test_configured_locale_preserved (user_commands.tests.CommandTests)",
                            "test_deactivate_locale_set (user_commands.tests.CommandTests)",
                            "test_discover_commands_in_eggs (user_commands.tests.CommandTests)",
                            "Test that an unknown command raises CommandError",
                            "test_find_command_without_PATH (user_commands.tests.CommandTests)",
                            "test_language_preserved (user_commands.tests.CommandTests)",
                            "test_output_transaction (user_commands.tests.CommandTests)",
                            "Exception raised in a command should raise CommandError with"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "django__django-15695.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "test_rename_index_unnamed_index (migrations.test_operations.OperationTests)"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "test_reference_field_by_through_fields (migrations.test_operations.FieldOperationTests)",
                            "test_references_field_by_from_fields (migrations.test_operations.FieldOperationTests)",
                            "test_references_field_by_name (migrations.test_operations.FieldOperationTests)",
                            "test_references_field_by_remote_field_model (migrations.test_operations.FieldOperationTests)",
                            "test_references_field_by_through (migrations.test_operations.FieldOperationTests)",
                            "test_references_field_by_to_fields (migrations.test_operations.FieldOperationTests)",
                            "test_references_model (migrations.test_operations.FieldOperationTests)",
                            "test_references_model_mixin (migrations.test_operations.TestCreateModel)",
                            "Tests the AddField operation.",
                            "The CreateTable operation ignores swapped models.",
                            "Tests the DeleteModel operation ignores swapped models.",
                            "Add/RemoveIndex operations ignore swapped models.",
                            "Tests the AddField operation on TextField/BinaryField.",
                            "Tests the AddField operation on TextField.",
                            "test_add_constraint (migrations.test_operations.OperationTests)",
                            "test_add_constraint_combinable (migrations.test_operations.OperationTests)",
                            "test_add_constraint_percent_escaping (migrations.test_operations.OperationTests)",
                            "test_add_covering_unique_constraint (migrations.test_operations.OperationTests)",
                            "test_add_deferred_unique_constraint (migrations.test_operations.OperationTests)",
                            "Tests the AddField operation with a ManyToManyField.",
                            "Tests the AddField operation's state alteration",
                            "test_add_func_index (migrations.test_operations.OperationTests)",
                            "test_add_func_unique_constraint (migrations.test_operations.OperationTests)",
                            "Test the AddIndex operation.",
                            "test_add_index_state_forwards (migrations.test_operations.OperationTests)",
                            "test_add_or_constraint (migrations.test_operations.OperationTests)",
                            "test_add_partial_unique_constraint (migrations.test_operations.OperationTests)",
                            "Tests the AlterField operation.",
                            "AlterField operation is a noop when adding only a db_column and the",
                            "test_alter_field_m2m (migrations.test_operations.OperationTests)",
                            "The AlterField operation on primary keys (things like PostgreSQL's",
                            "Tests the AlterField operation on primary keys changes any FKs pointing to it.",
                            "AlterField operation of db_collation on primary keys changes any FKs",
                            "test_alter_field_pk_mti_and_fk_to_base (migrations.test_operations.OperationTests)",
                            "test_alter_field_pk_mti_fk (migrations.test_operations.OperationTests)",
                            "test_alter_field_reloads_state_fk_with_to_field_related_name_target_type_change (migrations.test_operations.OperationTests)",
                            "If AlterField doesn't reload state appropriately, the second AlterField",
                            "test_alter_field_reloads_state_on_fk_with_to_field_target_type_change (migrations.test_operations.OperationTests)",
                            "test_alter_field_with_func_index (migrations.test_operations.OperationTests)",
                            "test_alter_field_with_func_unique_constraint (migrations.test_operations.OperationTests)",
                            "Test AlterField operation with an index to ensure indexes created via",
                            "Creating and then altering an FK works correctly",
                            "Altering an FK to a non-FK works (#23244)",
                            "Tests the AlterIndexTogether operation.",
                            "test_alter_index_together_remove (migrations.test_operations.OperationTests)",
                            "test_alter_index_together_remove_with_unique_together (migrations.test_operations.OperationTests)",
                            "The managers on a model are set.",
                            "Tests the AlterModelOptions operation.",
                            "The AlterModelOptions operation removes keys from the dict (#23121)",
                            "Tests the AlterModelTable operation.",
                            "AlterModelTable should rename auto-generated M2M tables.",
                            "Tests the AlterModelTable operation if the table name is set to None.",
                            "Tests the AlterModelTable operation if the table name is not changed.",
                            "Tests the AlterOrderWithRespectTo operation.",
                            "Tests the AlterUniqueTogether operation.",
                            "test_alter_unique_together_remove (migrations.test_operations.OperationTests)",
                            "A field may be migrated from AutoField to BigAutoField.",
                            "Column names that are SQL keywords shouldn't cause problems when used",
                            "Creation of models with a FK to a PK with db_collation.",
                            "Tests the CreateModel operation.",
                            "Tests the CreateModel operation on a multi-table inheritance setup.",
                            "Test the creation of a model with a ManyToMany field and the",
                            "test_create_model_with_boolean_expression_in_check_constraint (migrations.test_operations.OperationTests)",
                            "test_create_model_with_constraint (migrations.test_operations.OperationTests)",
                            "test_create_model_with_deferred_unique_constraint (migrations.test_operations.OperationTests)",
                            "test_create_model_with_duplicate_base (migrations.test_operations.OperationTests)",
                            "test_create_model_with_duplicate_field_name (migrations.test_operations.OperationTests)",
                            "test_create_model_with_duplicate_manager_name (migrations.test_operations.OperationTests)",
                            "test_create_model_with_partial_unique_constraint (migrations.test_operations.OperationTests)",
                            "Tests the CreateModel operation directly followed by an",
                            "CreateModel ignores proxy models.",
                            "CreateModel ignores unmanaged models.",
                            "Tests the DeleteModel operation.",
                            "test_delete_mti_model (migrations.test_operations.OperationTests)",
                            "Tests the DeleteModel operation ignores proxy models.",
                            "A model with BigAutoField can be created.",
                            "test_remove_constraint (migrations.test_operations.OperationTests)",
                            "test_remove_covering_unique_constraint (migrations.test_operations.OperationTests)",
                            "test_remove_deferred_unique_constraint (migrations.test_operations.OperationTests)",
                            "Tests the RemoveField operation.",
                            "test_remove_field_m2m (migrations.test_operations.OperationTests)",
                            "test_remove_field_m2m_with_through (migrations.test_operations.OperationTests)",
                            "Tests the RemoveField operation on a foreign key.",
                            "test_remove_func_index (migrations.test_operations.OperationTests)",
                            "test_remove_func_unique_constraint (migrations.test_operations.OperationTests)",
                            "Test the RemoveIndex operation.",
                            "test_remove_index_state_forwards (migrations.test_operations.OperationTests)",
                            "test_remove_partial_unique_constraint (migrations.test_operations.OperationTests)",
                            "Tests the RenameField operation.",
                            "test_rename_field_case (migrations.test_operations.OperationTests)",
                            "If RenameField doesn't reload state appropriately, the AlterField",
                            "test_rename_field_with_db_column (migrations.test_operations.OperationTests)",
                            "test_rename_index (migrations.test_operations.OperationTests)",
                            "test_rename_index_arguments (migrations.test_operations.OperationTests)",
                            "test_rename_index_state_forwards (migrations.test_operations.OperationTests)",
                            "test_rename_index_state_forwards_unnamed_index (migrations.test_operations.OperationTests)",
                            "test_rename_index_unknown_unnamed_index (migrations.test_operations.OperationTests)",
                            "RenameModel renames a many-to-many column after a RenameField.",
                            "test_rename_m2m_target_model (migrations.test_operations.OperationTests)",
                            "test_rename_m2m_through_model (migrations.test_operations.OperationTests)",
                            "test_rename_missing_field (migrations.test_operations.OperationTests)",
                            "Tests the RenameModel operation.",
                            "RenameModel operations shouldn't trigger the caching of rendered apps",
                            "test_rename_model_with_db_table_noop (migrations.test_operations.OperationTests)",
                            "test_rename_model_with_m2m (migrations.test_operations.OperationTests)",
                            "Tests the RenameModel operation on model with self referential FK.",
                            "test_rename_model_with_self_referential_m2m (migrations.test_operations.OperationTests)",
                            "Tests the RenameModel operation on a model which has a superclass that",
                            "test_rename_referenced_field_state_forward (migrations.test_operations.OperationTests)",
                            "test_repoint_field_m2m (migrations.test_operations.OperationTests)",
                            "Tests the RunPython operation",
                            "Tests the RunPython operation correctly handles the \"atomic\" keyword",
                            "#24098 - Tests no-op RunPython operations.",
                            "#24282 - Model changes to a FK reverse side update the model",
                            "Tests the RunSQL operation.",
                            "test_run_sql_add_missing_semicolon_on_collect_sql (migrations.test_operations.OperationTests)",
                            "#24098 - Tests no-op RunSQL operations.",
                            "#23426 - RunSQL should accept parameters.",
                            "#23426 - RunSQL should fail when a list of statements with an incorrect",
                            "Tests the SeparateDatabaseAndState operation.",
                            "A complex SeparateDatabaseAndState operation: Multiple operations both",
                            "A field may be migrated from SmallAutoField to AutoField.",
                            "A field may be migrated from SmallAutoField to BigAutoField."
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "django__django-13199.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "test_delete_cookie_samesite (responses.test_cookie.DeleteCookieTests)",
                            "test_session_delete_on_end (sessions_tests.tests.SessionMiddlewareTests)",
                            "test_session_delete_on_end_with_custom_domain_and_path (sessions_tests.tests.SessionMiddlewareTests)",
                            "test_cookie_setings (messages_tests.test_cookie.CookieTests)"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "test_default (responses.test_cookie.DeleteCookieTests)",
                            "test_delete_cookie_secure_prefix (responses.test_cookie.DeleteCookieTests)",
                            "set_cookie() accepts an aware datetime as expiration time.",
                            "Setting a cookie after deletion clears the expiry date.",
                            "Cookie will expire when a distant expiration time is provided.",
                            "test_httponly_cookie (responses.test_cookie.SetCookieTests)",
                            "test_invalid_samesite (responses.test_cookie.SetCookieTests)",
                            "Cookie will expire if max_age is provided.",
                            "Cookie will expire when a near expiration time is provided.",
                            "test_samesite (responses.test_cookie.SetCookieTests)",
                            "HttpResponse.set_cookie() works with unicode data.",
                            "test_clear (sessions_tests.tests.CookieSessionTests)",
                            "test_custom_expiry_datetime (sessions_tests.tests.CookieSessionTests)",
                            "test_custom_expiry_reset (sessions_tests.tests.CookieSessionTests)",
                            "test_custom_expiry_seconds (sessions_tests.tests.CookieSessionTests)",
                            "test_custom_expiry_timedelta (sessions_tests.tests.CookieSessionTests)",
                            "test_cycle (sessions_tests.tests.CookieSessionTests)",
                            "test_cycle_with_no_session_cache (sessions_tests.tests.CookieSessionTests)",
                            "test_decode (sessions_tests.tests.CookieSessionTests)",
                            "test_decode_failure_logged_to_security (sessions_tests.tests.CookieSessionTests)",
                            "test_default_expiry (sessions_tests.tests.CookieSessionTests)",
                            "test_delete (sessions_tests.tests.CookieSessionTests)",
                            "test_flush (sessions_tests.tests.CookieSessionTests)",
                            "test_get_empty (sessions_tests.tests.CookieSessionTests)",
                            "test_get_expire_at_browser_close (sessions_tests.tests.CookieSessionTests)",
                            "test_has_key (sessions_tests.tests.CookieSessionTests)",
                            "test_invalid_key (sessions_tests.tests.CookieSessionTests)",
                            "test_items (sessions_tests.tests.CookieSessionTests)",
                            "test_keys (sessions_tests.tests.CookieSessionTests)",
                            "test_new_session (sessions_tests.tests.CookieSessionTests)",
                            "test_pop (sessions_tests.tests.CookieSessionTests)",
                            "test_pop_default (sessions_tests.tests.CookieSessionTests)",
                            "test_pop_default_named_argument (sessions_tests.tests.CookieSessionTests)",
                            "test_pop_no_default_keyerror_raised (sessions_tests.tests.CookieSessionTests)",
                            "test_save (sessions_tests.tests.CookieSessionTests)",
                            "test_save_doesnt_clear_data (sessions_tests.tests.CookieSessionTests)",
                            "Falsey values (Such as an empty string) are rejected.",
                            "test_session_key_is_read_only (sessions_tests.tests.CookieSessionTests)",
                            "Strings shorter than 8 characters are rejected.",
                            "Strings of length 8 and up are accepted and stored.",
                            "test_setdefault (sessions_tests.tests.CookieSessionTests)",
                            "test_store (sessions_tests.tests.CookieSessionTests)",
                            "test_unpickling_exception (sessions_tests.tests.CookieSessionTests)",
                            "test_update (sessions_tests.tests.CookieSessionTests)",
                            "test_values (sessions_tests.tests.CookieSessionTests)",
                            "test_empty_session_saved (sessions_tests.tests.SessionMiddlewareTests)",
                            "test_flush_empty_without_session_cookie_doesnt_set_cookie (sessions_tests.tests.SessionMiddlewareTests)",
                            "test_httponly_session_cookie (sessions_tests.tests.SessionMiddlewareTests)",
                            "test_no_httponly_session_cookie (sessions_tests.tests.SessionMiddlewareTests)",
                            "test_samesite_session_cookie (sessions_tests.tests.SessionMiddlewareTests)",
                            "test_secure_session_cookie (sessions_tests.tests.SessionMiddlewareTests)",
                            "test_session_save_on_500 (sessions_tests.tests.SessionMiddlewareTests)",
                            "test_session_update_error_redirect (sessions_tests.tests.SessionMiddlewareTests)",
                            "test_actual_expiry (sessions_tests.tests.CacheSessionTests)",
                            "test_clear (sessions_tests.tests.CacheSessionTests)",
                            "test_create_and_save (sessions_tests.tests.CacheSessionTests)",
                            "test_custom_expiry_datetime (sessions_tests.tests.CacheSessionTests)",
                            "test_custom_expiry_reset (sessions_tests.tests.CacheSessionTests)",
                            "test_custom_expiry_seconds (sessions_tests.tests.CacheSessionTests)",
                            "test_custom_expiry_timedelta (sessions_tests.tests.CacheSessionTests)",
                            "test_cycle (sessions_tests.tests.CacheSessionTests)",
                            "test_cycle_with_no_session_cache (sessions_tests.tests.CacheSessionTests)",
                            "test_decode (sessions_tests.tests.CacheSessionTests)",
                            "test_decode_failure_logged_to_security (sessions_tests.tests.CacheSessionTests)",
                            "test_default_cache (sessions_tests.tests.CacheSessionTests)",
                            "test_default_expiry (sessions_tests.tests.CacheSessionTests)",
                            "test_delete (sessions_tests.tests.CacheSessionTests)",
                            "test_flush (sessions_tests.tests.CacheSessionTests)",
                            "test_get_empty (sessions_tests.tests.CacheSessionTests)",
                            "test_get_expire_at_browser_close (sessions_tests.tests.CacheSessionTests)",
                            "test_has_key (sessions_tests.tests.CacheSessionTests)",
                            "test_invalid_key (sessions_tests.tests.CacheSessionTests)",
                            "test_items (sessions_tests.tests.CacheSessionTests)",
                            "test_keys (sessions_tests.tests.CacheSessionTests)",
                            "test_load_overlong_key (sessions_tests.tests.CacheSessionTests)",
                            "test_new_session (sessions_tests.tests.CacheSessionTests)",
                            "test_non_default_cache (sessions_tests.tests.CacheSessionTests)",
                            "test_pop (sessions_tests.tests.CacheSessionTests)",
                            "test_pop_default (sessions_tests.tests.CacheSessionTests)",
                            "test_pop_default_named_argument (sessions_tests.tests.CacheSessionTests)",
                            "test_pop_no_default_keyerror_raised (sessions_tests.tests.CacheSessionTests)",
                            "test_save (sessions_tests.tests.CacheSessionTests)",
                            "test_save_doesnt_clear_data (sessions_tests.tests.CacheSessionTests)",
                            "test_session_key_is_read_only (sessions_tests.tests.CacheSessionTests)",
                            "test_session_load_does_not_create_record (sessions_tests.tests.CacheSessionTests)",
                            "test_session_save_does_not_resurrect_session_logged_out_in_other_context (sessions_tests.tests.CacheSessionTests)",
                            "test_setdefault (sessions_tests.tests.CacheSessionTests)",
                            "test_store (sessions_tests.tests.CacheSessionTests)",
                            "test_update (sessions_tests.tests.CacheSessionTests)",
                            "test_values (sessions_tests.tests.CacheSessionTests)",
                            "test_actual_expiry (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)",
                            "test_clear (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)",
                            "test_custom_expiry_datetime (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)",
                            "test_custom_expiry_reset (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)",
                            "test_custom_expiry_seconds (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)",
                            "test_custom_expiry_timedelta (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)",
                            "test_cycle (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)",
                            "test_cycle_with_no_session_cache (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)",
                            "test_decode (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)",
                            "test_decode_failure_logged_to_security (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)",
                            "test_default_expiry (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)",
                            "test_delete (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)",
                            "test_exists_searches_cache_first (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)",
                            "test_flush (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)",
                            "test_get_empty (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)",
                            "test_get_expire_at_browser_close (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)",
                            "test_has_key (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)",
                            "test_invalid_key (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)",
                            "test_items (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)",
                            "test_keys (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)",
                            "test_load_overlong_key (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)",
                            "test_new_session (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)",
                            "test_non_default_cache (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)",
                            "test_pop (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)",
                            "test_pop_default (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)",
                            "test_pop_default_named_argument (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)",
                            "test_pop_no_default_keyerror_raised (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)",
                            "test_save (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)",
                            "test_save_doesnt_clear_data (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)",
                            "test_session_key_is_read_only (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)",
                            "test_session_load_does_not_create_record (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)",
                            "test_session_save_does_not_resurrect_session_logged_out_in_other_context (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)",
                            "test_setdefault (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)",
                            "test_store (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)",
                            "test_update (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)",
                            "test_values (sessions_tests.tests.CacheDBSessionWithTimeZoneTests)",
                            "test_actual_expiry (sessions_tests.tests.CacheDBSessionTests)",
                            "test_clear (sessions_tests.tests.CacheDBSessionTests)",
                            "test_custom_expiry_datetime (sessions_tests.tests.CacheDBSessionTests)",
                            "test_custom_expiry_reset (sessions_tests.tests.CacheDBSessionTests)",
                            "test_custom_expiry_seconds (sessions_tests.tests.CacheDBSessionTests)",
                            "test_custom_expiry_timedelta (sessions_tests.tests.CacheDBSessionTests)",
                            "test_cycle (sessions_tests.tests.CacheDBSessionTests)",
                            "test_cycle_with_no_session_cache (sessions_tests.tests.CacheDBSessionTests)",
                            "test_decode (sessions_tests.tests.CacheDBSessionTests)",
                            "test_decode_failure_logged_to_security (sessions_tests.tests.CacheDBSessionTests)",
                            "test_default_expiry (sessions_tests.tests.CacheDBSessionTests)",
                            "test_delete (sessions_tests.tests.CacheDBSessionTests)",
                            "test_exists_searches_cache_first (sessions_tests.tests.CacheDBSessionTests)",
                            "test_flush (sessions_tests.tests.CacheDBSessionTests)",
                            "test_get_empty (sessions_tests.tests.CacheDBSessionTests)",
                            "test_get_expire_at_browser_close (sessions_tests.tests.CacheDBSessionTests)",
                            "test_has_key (sessions_tests.tests.CacheDBSessionTests)",
                            "test_invalid_key (sessions_tests.tests.CacheDBSessionTests)",
                            "test_items (sessions_tests.tests.CacheDBSessionTests)",
                            "test_keys (sessions_tests.tests.CacheDBSessionTests)",
                            "test_load_overlong_key (sessions_tests.tests.CacheDBSessionTests)",
                            "test_new_session (sessions_tests.tests.CacheDBSessionTests)",
                            "test_non_default_cache (sessions_tests.tests.CacheDBSessionTests)",
                            "test_pop (sessions_tests.tests.CacheDBSessionTests)",
                            "test_pop_default (sessions_tests.tests.CacheDBSessionTests)",
                            "test_pop_default_named_argument (sessions_tests.tests.CacheDBSessionTests)",
                            "test_pop_no_default_keyerror_raised (sessions_tests.tests.CacheDBSessionTests)",
                            "test_save (sessions_tests.tests.CacheDBSessionTests)",
                            "test_save_doesnt_clear_data (sessions_tests.tests.CacheDBSessionTests)",
                            "test_session_key_is_read_only (sessions_tests.tests.CacheDBSessionTests)",
                            "test_session_load_does_not_create_record (sessions_tests.tests.CacheDBSessionTests)",
                            "test_session_save_does_not_resurrect_session_logged_out_in_other_context (sessions_tests.tests.CacheDBSessionTests)",
                            "test_setdefault (sessions_tests.tests.CacheDBSessionTests)",
                            "test_store (sessions_tests.tests.CacheDBSessionTests)",
                            "test_update (sessions_tests.tests.CacheDBSessionTests)",
                            "test_values (sessions_tests.tests.CacheDBSessionTests)",
                            "test_actual_expiry (sessions_tests.tests.FileSessionTests)",
                            "test_clear (sessions_tests.tests.FileSessionTests)",
                            "test_clearsessions_command (sessions_tests.tests.FileSessionTests)",
                            "test_configuration_check (sessions_tests.tests.FileSessionTests)",
                            "test_custom_expiry_datetime (sessions_tests.tests.FileSessionTests)",
                            "test_custom_expiry_reset (sessions_tests.tests.FileSessionTests)",
                            "test_custom_expiry_seconds (sessions_tests.tests.FileSessionTests)",
                            "test_custom_expiry_timedelta (sessions_tests.tests.FileSessionTests)",
                            "test_cycle (sessions_tests.tests.FileSessionTests)",
                            "test_cycle_with_no_session_cache (sessions_tests.tests.FileSessionTests)",
                            "test_decode (sessions_tests.tests.FileSessionTests)",
                            "test_decode_failure_logged_to_security (sessions_tests.tests.FileSessionTests)",
                            "test_default_expiry (sessions_tests.tests.FileSessionTests)",
                            "test_delete (sessions_tests.tests.FileSessionTests)",
                            "test_flush (sessions_tests.tests.FileSessionTests)",
                            "test_get_empty (sessions_tests.tests.FileSessionTests)",
                            "test_get_expire_at_browser_close (sessions_tests.tests.FileSessionTests)",
                            "test_has_key (sessions_tests.tests.FileSessionTests)",
                            "test_invalid_key (sessions_tests.tests.FileSessionTests)",
                            "test_invalid_key_backslash (sessions_tests.tests.FileSessionTests)",
                            "test_invalid_key_forwardslash (sessions_tests.tests.FileSessionTests)",
                            "test_items (sessions_tests.tests.FileSessionTests)",
                            "test_keys (sessions_tests.tests.FileSessionTests)",
                            "test_new_session (sessions_tests.tests.FileSessionTests)",
                            "test_pop (sessions_tests.tests.FileSessionTests)",
                            "test_pop_default (sessions_tests.tests.FileSessionTests)",
                            "test_pop_default_named_argument (sessions_tests.tests.FileSessionTests)",
                            "test_pop_no_default_keyerror_raised (sessions_tests.tests.FileSessionTests)",
                            "test_save (sessions_tests.tests.FileSessionTests)",
                            "test_save_doesnt_clear_data (sessions_tests.tests.FileSessionTests)",
                            "test_session_key_is_read_only (sessions_tests.tests.FileSessionTests)",
                            "test_session_load_does_not_create_record (sessions_tests.tests.FileSessionTests)",
                            "test_session_save_does_not_resurrect_session_logged_out_in_other_context (sessions_tests.tests.FileSessionTests)",
                            "test_setdefault (sessions_tests.tests.FileSessionTests)",
                            "test_store (sessions_tests.tests.FileSessionTests)",
                            "test_update (sessions_tests.tests.FileSessionTests)",
                            "test_values (sessions_tests.tests.FileSessionTests)",
                            "test_actual_expiry (sessions_tests.tests.DatabaseSessionTests)",
                            "test_clear (sessions_tests.tests.DatabaseSessionTests)",
                            "test_clearsessions_command (sessions_tests.tests.DatabaseSessionTests)",
                            "test_custom_expiry_datetime (sessions_tests.tests.DatabaseSessionTests)",
                            "test_custom_expiry_reset (sessions_tests.tests.DatabaseSessionTests)",
                            "test_custom_expiry_seconds (sessions_tests.tests.DatabaseSessionTests)",
                            "test_custom_expiry_timedelta (sessions_tests.tests.DatabaseSessionTests)",
                            "test_cycle (sessions_tests.tests.DatabaseSessionTests)",
                            "test_cycle_with_no_session_cache (sessions_tests.tests.DatabaseSessionTests)",
                            "test_decode (sessions_tests.tests.DatabaseSessionTests)",
                            "test_decode_failure_logged_to_security (sessions_tests.tests.DatabaseSessionTests)",
                            "test_default_expiry (sessions_tests.tests.DatabaseSessionTests)",
                            "test_delete (sessions_tests.tests.DatabaseSessionTests)",
                            "test_flush (sessions_tests.tests.DatabaseSessionTests)",
                            "test_get_empty (sessions_tests.tests.DatabaseSessionTests)",
                            "test_get_expire_at_browser_close (sessions_tests.tests.DatabaseSessionTests)",
                            "test_has_key (sessions_tests.tests.DatabaseSessionTests)",
                            "test_invalid_key (sessions_tests.tests.DatabaseSessionTests)",
                            "test_items (sessions_tests.tests.DatabaseSessionTests)",
                            "test_keys (sessions_tests.tests.DatabaseSessionTests)",
                            "test_new_session (sessions_tests.tests.DatabaseSessionTests)",
                            "test_pop (sessions_tests.tests.DatabaseSessionTests)",
                            "test_pop_default (sessions_tests.tests.DatabaseSessionTests)",
                            "test_pop_default_named_argument (sessions_tests.tests.DatabaseSessionTests)",
                            "test_pop_no_default_keyerror_raised (sessions_tests.tests.DatabaseSessionTests)",
                            "test_save (sessions_tests.tests.DatabaseSessionTests)",
                            "test_save_doesnt_clear_data (sessions_tests.tests.DatabaseSessionTests)",
                            "test_session_get_decoded (sessions_tests.tests.DatabaseSessionTests)",
                            "test_session_key_is_read_only (sessions_tests.tests.DatabaseSessionTests)",
                            "test_session_load_does_not_create_record (sessions_tests.tests.DatabaseSessionTests)",
                            "test_session_save_does_not_resurrect_session_logged_out_in_other_context (sessions_tests.tests.DatabaseSessionTests)",
                            "Session repr should be the session key.",
                            "test_sessionmanager_save (sessions_tests.tests.DatabaseSessionTests)",
                            "test_setdefault (sessions_tests.tests.DatabaseSessionTests)",
                            "test_store (sessions_tests.tests.DatabaseSessionTests)",
                            "test_update (sessions_tests.tests.DatabaseSessionTests)",
                            "test_values (sessions_tests.tests.DatabaseSessionTests)",
                            "test_actual_expiry (sessions_tests.tests.CustomDatabaseSessionTests)",
                            "test_clear (sessions_tests.tests.CustomDatabaseSessionTests)",
                            "test_clearsessions_command (sessions_tests.tests.CustomDatabaseSessionTests)",
                            "test_custom_expiry_datetime (sessions_tests.tests.CustomDatabaseSessionTests)",
                            "test_custom_expiry_reset (sessions_tests.tests.CustomDatabaseSessionTests)",
                            "test_custom_expiry_seconds (sessions_tests.tests.CustomDatabaseSessionTests)",
                            "test_custom_expiry_timedelta (sessions_tests.tests.CustomDatabaseSessionTests)",
                            "test_cycle (sessions_tests.tests.CustomDatabaseSessionTests)",
                            "test_cycle_with_no_session_cache (sessions_tests.tests.CustomDatabaseSessionTests)",
                            "test_decode (sessions_tests.tests.CustomDatabaseSessionTests)",
                            "test_decode_failure_logged_to_security (sessions_tests.tests.CustomDatabaseSessionTests)",
                            "test_default_expiry (sessions_tests.tests.CustomDatabaseSessionTests)",
                            "test_delete (sessions_tests.tests.CustomDatabaseSessionTests)",
                            "test_extra_session_field (sessions_tests.tests.CustomDatabaseSessionTests)",
                            "test_flush (sessions_tests.tests.CustomDatabaseSessionTests)",
                            "test_get_empty (sessions_tests.tests.CustomDatabaseSessionTests)",
                            "test_get_expire_at_browser_close (sessions_tests.tests.CustomDatabaseSessionTests)",
                            "test_has_key (sessions_tests.tests.CustomDatabaseSessionTests)",
                            "test_invalid_key (sessions_tests.tests.CustomDatabaseSessionTests)",
                            "test_items (sessions_tests.tests.CustomDatabaseSessionTests)",
                            "test_keys (sessions_tests.tests.CustomDatabaseSessionTests)",
                            "test_new_session (sessions_tests.tests.CustomDatabaseSessionTests)",
                            "test_pop (sessions_tests.tests.CustomDatabaseSessionTests)",
                            "test_pop_default (sessions_tests.tests.CustomDatabaseSessionTests)",
                            "test_pop_default_named_argument (sessions_tests.tests.CustomDatabaseSessionTests)",
                            "test_pop_no_default_keyerror_raised (sessions_tests.tests.CustomDatabaseSessionTests)",
                            "test_save (sessions_tests.tests.CustomDatabaseSessionTests)",
                            "test_save_doesnt_clear_data (sessions_tests.tests.CustomDatabaseSessionTests)",
                            "test_session_get_decoded (sessions_tests.tests.CustomDatabaseSessionTests)",
                            "test_session_key_is_read_only (sessions_tests.tests.CustomDatabaseSessionTests)",
                            "test_session_load_does_not_create_record (sessions_tests.tests.CustomDatabaseSessionTests)",
                            "test_session_save_does_not_resurrect_session_logged_out_in_other_context (sessions_tests.tests.CustomDatabaseSessionTests)",
                            "test_sessionmanager_save (sessions_tests.tests.CustomDatabaseSessionTests)",
                            "test_setdefault (sessions_tests.tests.CustomDatabaseSessionTests)",
                            "test_store (sessions_tests.tests.CustomDatabaseSessionTests)",
                            "test_update (sessions_tests.tests.CustomDatabaseSessionTests)",
                            "test_values (sessions_tests.tests.CustomDatabaseSessionTests)",
                            "test_actual_expiry (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)",
                            "test_clear (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)",
                            "test_clearsessions_command (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)",
                            "test_custom_expiry_datetime (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)",
                            "test_custom_expiry_reset (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)",
                            "test_custom_expiry_seconds (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)",
                            "test_custom_expiry_timedelta (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)",
                            "test_cycle (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)",
                            "test_cycle_with_no_session_cache (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)",
                            "test_decode (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)",
                            "test_decode_failure_logged_to_security (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)",
                            "test_default_expiry (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)",
                            "test_delete (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)",
                            "test_flush (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)",
                            "test_get_empty (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)",
                            "test_get_expire_at_browser_close (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)",
                            "test_has_key (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)",
                            "test_invalid_key (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)",
                            "test_items (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)",
                            "test_keys (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)",
                            "test_new_session (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)",
                            "test_pop (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)",
                            "test_pop_default (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)",
                            "test_pop_default_named_argument (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)",
                            "test_pop_no_default_keyerror_raised (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)",
                            "test_save (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)",
                            "test_save_doesnt_clear_data (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)",
                            "test_session_get_decoded (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)",
                            "test_session_key_is_read_only (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)",
                            "test_session_load_does_not_create_record (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)",
                            "test_session_save_does_not_resurrect_session_logged_out_in_other_context (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)",
                            "test_sessionmanager_save (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)",
                            "test_setdefault (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)",
                            "test_store (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)",
                            "test_update (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)",
                            "test_values (sessions_tests.tests.DatabaseSessionWithTimeZoneTests)",
                            "test_add (messages_tests.test_cookie.CookieTests)",
                            "test_add_lazy_translation (messages_tests.test_cookie.CookieTests)",
                            "test_add_update (messages_tests.test_cookie.CookieTests)",
                            "test_context_processor_message_levels (messages_tests.test_cookie.CookieTests)",
                            "test_custom_tags (messages_tests.test_cookie.CookieTests)",
                            "test_default_level (messages_tests.test_cookie.CookieTests)",
                            "test_existing_add (messages_tests.test_cookie.CookieTests)",
                            "test_existing_add_read_update (messages_tests.test_cookie.CookieTests)",
                            "test_existing_read (messages_tests.test_cookie.CookieTests)",
                            "test_existing_read_add_update (messages_tests.test_cookie.CookieTests)",
                            "test_full_request_response_cycle (messages_tests.test_cookie.CookieTests)",
                            "test_get (messages_tests.test_cookie.CookieTests)",
                            "test_get_bad_cookie (messages_tests.test_cookie.CookieTests)",
                            "test_high_level (messages_tests.test_cookie.CookieTests)",
                            "test_json_encoder_decoder (messages_tests.test_cookie.CookieTests)",
                            "test_level_tag (messages_tests.test_cookie.CookieTests)",
                            "test_low_level (messages_tests.test_cookie.CookieTests)",
                            "test_max_cookie_length (messages_tests.test_cookie.CookieTests)",
                            "test_middleware_disabled (messages_tests.test_cookie.CookieTests)",
                            "test_middleware_disabled_fail_silently (messages_tests.test_cookie.CookieTests)",
                            "test_multiple_posts (messages_tests.test_cookie.CookieTests)",
                            "test_no_update (messages_tests.test_cookie.CookieTests)",
                            "test_pre_1_5_message_format (messages_tests.test_cookie.CookieTests)",
                            "test_safedata (messages_tests.test_cookie.CookieTests)",
                            "test_settings_level (messages_tests.test_cookie.CookieTests)",
                            "test_tags (messages_tests.test_cookie.CookieTests)",
                            "test_with_template_response (messages_tests.test_cookie.CookieTests)"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "matplotlib__matplotlib-14623.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "lib/matplotlib/tests/test_axes.py::test_inverted_limits"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "lib/matplotlib/tests/test_axes.py::test_get_labels",
                            "lib/matplotlib/tests/test_axes.py::test_spy_invalid_kwargs",
                            "lib/matplotlib/tests/test_axes.py::test_twinx_cla",
                            "lib/matplotlib/tests/test_axes.py::test_twin_inherit_autoscale_setting",
                            "lib/matplotlib/tests/test_axes.py::test_inverted_cla",
                            "lib/matplotlib/tests/test_axes.py::test_autoscale_tight",
                            "lib/matplotlib/tests/test_axes.py::test_autoscale_log_shared",
                            "lib/matplotlib/tests/test_axes.py::test_use_sticky_edges",
                            "lib/matplotlib/tests/test_axes.py::test_arrow_empty",
                            "lib/matplotlib/tests/test_axes.py::test_annotate_default_arrow",
                            "lib/matplotlib/tests/test_axes.py::test_structured_data",
                            "lib/matplotlib/tests/test_axes.py::test_hexbin_pickable",
                            "lib/matplotlib/tests/test_axes.py::test_fill_between_input[2d_x_input]",
                            "lib/matplotlib/tests/test_axes.py::test_fill_between_input[2d_y1_input]",
                            "lib/matplotlib/tests/test_axes.py::test_fill_between_input[2d_y2_input]",
                            "lib/matplotlib/tests/test_axes.py::test_fill_betweenx_input[2d_y_input]",
                            "lib/matplotlib/tests/test_axes.py::test_fill_betweenx_input[2d_x1_input]",
                            "lib/matplotlib/tests/test_axes.py::test_fill_betweenx_input[2d_x2_input]",
                            "lib/matplotlib/tests/test_axes.py::test_pcolorargs_5205",
                            "lib/matplotlib/tests/test_axes.py::test_pcolorargs",
                            "lib/matplotlib/tests/test_axes.py::test_bar_ticklabel_fail",
                            "lib/matplotlib/tests/test_axes.py::test_bar_color_none_alpha",
                            "lib/matplotlib/tests/test_axes.py::test_bar_edgecolor_none_alpha",
                            "lib/matplotlib/tests/test_axes.py::test_bar_timedelta",
                            "lib/matplotlib/tests/test_axes.py::test_hist_unequal_bins_density",
                            "lib/matplotlib/tests/test_axes.py::test_hist_datetime_datasets",
                            "lib/matplotlib/tests/test_axes.py::test_hist_with_empty_input[data0-1]",
                            "lib/matplotlib/tests/test_axes.py::test_hist_with_empty_input[data1-1]",
                            "lib/matplotlib/tests/test_axes.py::test_hist_with_empty_input[data2-2]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[0.5-None]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[rgby-None]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[rgb-shape]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[rgbrgb-shape]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case4-conversion]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[red-None]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[none-None]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[None-None]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case8-None]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[jaune-conversion]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case10-conversion]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case11-conversion]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case12-None]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case13-None]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case14-shape]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case15-None]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case16-None]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case17-conversion]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case18-None]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case19-shape]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case20-None]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case21-shape]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case22-None]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case23-shape]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case24-None]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case25-shape]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case26-None]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case27-shape]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case28-None]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case29-shape]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case30-conversion]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case31-conversion]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case32-conversion]",
                            "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params0-expected_result0]",
                            "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params1-expected_result1]",
                            "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params2-expected_result2]",
                            "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params3-expected_result3]",
                            "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params4-expected_result4]",
                            "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs0-None]",
                            "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs1-None]",
                            "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs2-r]",
                            "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs3-expected_edgecolors3]",
                            "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs4-r]",
                            "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs5-face]",
                            "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs6-none]",
                            "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs7-r]",
                            "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs8-r]",
                            "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs9-r]",
                            "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs10-g]",
                            "lib/matplotlib/tests/test_axes.py::test_pyplot_axes",
                            "lib/matplotlib/tests/test_axes.py::test_bxp_bad_widths",
                            "lib/matplotlib/tests/test_axes.py::test_bxp_bad_positions",
                            "lib/matplotlib/tests/test_axes.py::test_boxplot_bad_medians_1",
                            "lib/matplotlib/tests/test_axes.py::test_boxplot_bad_medians_2",
                            "lib/matplotlib/tests/test_axes.py::test_boxplot_bad_ci_1",
                            "lib/matplotlib/tests/test_axes.py::test_boxplot_zorder",
                            "lib/matplotlib/tests/test_axes.py::test_boxplot_bad_ci_2",
                            "lib/matplotlib/tests/test_axes.py::test_violinplot_bad_positions",
                            "lib/matplotlib/tests/test_axes.py::test_violinplot_bad_widths",
                            "lib/matplotlib/tests/test_axes.py::test_manage_xticks",
                            "lib/matplotlib/tests/test_axes.py::test_boxplot_not_single",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_colorcycle",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_shape",
                            "lib/matplotlib/tests/test_axes.py::test_errobar_nonefmt",
                            "lib/matplotlib/tests/test_axes.py::test_stem_args",
                            "lib/matplotlib/tests/test_axes.py::test_stem_dates",
                            "lib/matplotlib/tests/test_axes.py::test_hist_normed_density[False-False]",
                            "lib/matplotlib/tests/test_axes.py::test_hist_normed_density[False-True]",
                            "lib/matplotlib/tests/test_axes.py::test_hist_normed_density[True-False]",
                            "lib/matplotlib/tests/test_axes.py::test_hist_normed_density[True-True]",
                            "lib/matplotlib/tests/test_axes.py::test_hist_labels",
                            "lib/matplotlib/tests/test_axes.py::test_mollweide_forward_inverse_closure",
                            "lib/matplotlib/tests/test_axes.py::test_mollweide_inverse_forward_closure",
                            "lib/matplotlib/tests/test_axes.py::test_eventplot_colors[colors0]",
                            "lib/matplotlib/tests/test_axes.py::test_eventplot_colors[colors1]",
                            "lib/matplotlib/tests/test_axes.py::test_eventplot_colors[colors2]",
                            "lib/matplotlib/tests/test_axes.py::test_eventplot_colors[colors3]",
                            "lib/matplotlib/tests/test_axes.py::test_empty_eventplot",
                            "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data0-_empty]",
                            "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data1-vertical]",
                            "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data2-horizontal]",
                            "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data3-None]",
                            "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data4-none]",
                            "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data5-_empty]",
                            "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data6-vertical]",
                            "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data7-horizontal]",
                            "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data8-None]",
                            "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data9-none]",
                            "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data10-_empty]",
                            "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data11-vertical]",
                            "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data12-horizontal]",
                            "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data13-None]",
                            "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[data14-none]",
                            "lib/matplotlib/tests/test_axes.py::test_subplot_key_hash",
                            "lib/matplotlib/tests/test_axes.py::test_rcparam_grid_minor",
                            "lib/matplotlib/tests/test_axes.py::test_vline_limit",
                            "lib/matplotlib/tests/test_axes.py::test_empty_shared_subplots",
                            "lib/matplotlib/tests/test_axes.py::test_shared_with_aspect_1",
                            "lib/matplotlib/tests/test_axes.py::test_shared_with_aspect_2",
                            "lib/matplotlib/tests/test_axes.py::test_shared_with_aspect_3",
                            "lib/matplotlib/tests/test_axes.py::test_twin_with_aspect[x]",
                            "lib/matplotlib/tests/test_axes.py::test_twin_with_aspect[y]",
                            "lib/matplotlib/tests/test_axes.py::test_relim_visible_only",
                            "lib/matplotlib/tests/test_axes.py::test_text_labelsize",
                            "lib/matplotlib/tests/test_axes.py::test_pie_textprops",
                            "lib/matplotlib/tests/test_axes.py::test_tick_label_update",
                            "lib/matplotlib/tests/test_axes.py::test_margins",
                            "lib/matplotlib/tests/test_axes.py::test_length_one_hist",
                            "lib/matplotlib/tests/test_axes.py::test_color_None",
                            "lib/matplotlib/tests/test_axes.py::test_color_alias",
                            "lib/matplotlib/tests/test_axes.py::test_numerical_hist_label",
                            "lib/matplotlib/tests/test_axes.py::test_unicode_hist_label",
                            "lib/matplotlib/tests/test_axes.py::test_move_offsetlabel",
                            "lib/matplotlib/tests/test_axes.py::test_rc_tick",
                            "lib/matplotlib/tests/test_axes.py::test_rc_major_minor_tick",
                            "lib/matplotlib/tests/test_axes.py::test_no_None",
                            "lib/matplotlib/tests/test_axes.py::test_pcolorfast_colormapped[xy0-AxesImage]",
                            "lib/matplotlib/tests/test_axes.py::test_pcolorfast_colormapped[xy1-AxesImage]",
                            "lib/matplotlib/tests/test_axes.py::test_pcolorfast_colormapped[xy2-AxesImage]",
                            "lib/matplotlib/tests/test_axes.py::test_pcolorfast_colormapped[xy3-PcolorImage]",
                            "lib/matplotlib/tests/test_axes.py::test_pcolorfast_colormapped[xy4-QuadMesh]",
                            "lib/matplotlib/tests/test_axes.py::test_shared_scale",
                            "lib/matplotlib/tests/test_axes.py::test_violin_point_mass",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs0]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs1]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs2]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs3]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs4]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs5]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs6]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs7]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs8]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs9]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs10]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs11]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs12]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs13]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs14]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs15]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs16]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs17]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs18]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs19]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs20]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs21]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs22]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs23]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs24]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs25]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs26]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs27]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs28]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs29]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs30]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs31]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs32]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs33]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs34]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs35]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs36]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs37]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs38]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs39]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs40]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs41]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs42]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs43]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs44]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs45]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs46]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs47]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs48]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs49]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs50]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs51]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs52]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs53]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs54]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs55]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs56]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs57]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs58]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs59]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs60]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs61]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs62]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs63]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs64]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs65]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs66]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs67]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs68]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs69]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs70]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs71]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs72]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs73]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs74]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs75]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs76]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs77]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs78]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs79]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs80]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs81]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs82]",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs83]",
                            "lib/matplotlib/tests/test_axes.py::test_title_pad",
                            "lib/matplotlib/tests/test_axes.py::test_title_location_roundtrip",
                            "lib/matplotlib/tests/test_axes.py::test_axes_margins",
                            "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[gca-x]",
                            "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[gca-y]",
                            "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots-x]",
                            "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots-y]",
                            "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots_shared-x]",
                            "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots_shared-y]",
                            "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[add_axes-x]",
                            "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[add_axes-y]",
                            "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes_relim",
                            "lib/matplotlib/tests/test_axes.py::test_shared_axes_autoscale",
                            "lib/matplotlib/tests/test_axes.py::test_adjust_numtick_aspect",
                            "lib/matplotlib/tests/test_axes.py::test_broken_barh_empty",
                            "lib/matplotlib/tests/test_axes.py::test_broken_barh_timedelta",
                            "lib/matplotlib/tests/test_axes.py::test_axis_set_tick_params_labelsize_labelcolor",
                            "lib/matplotlib/tests/test_axes.py::test_axes_tick_params_gridlines",
                            "lib/matplotlib/tests/test_axes.py::test_axes_tick_params_ylabelside",
                            "lib/matplotlib/tests/test_axes.py::test_axes_tick_params_xlabelside",
                            "lib/matplotlib/tests/test_axes.py::test_none_kwargs",
                            "lib/matplotlib/tests/test_axes.py::test_ls_ds_conflict",
                            "lib/matplotlib/tests/test_axes.py::test_bar_uint8",
                            "lib/matplotlib/tests/test_axes.py::test_titlesetpos",
                            "lib/matplotlib/tests/test_axes.py::test_title_xticks_top",
                            "lib/matplotlib/tests/test_axes.py::test_title_xticks_top_both",
                            "lib/matplotlib/tests/test_axes.py::test_offset_label_color",
                            "lib/matplotlib/tests/test_axes.py::test_large_offset",
                            "lib/matplotlib/tests/test_axes.py::test_barb_units",
                            "lib/matplotlib/tests/test_axes.py::test_quiver_units",
                            "lib/matplotlib/tests/test_axes.py::test_bar_color_cycle",
                            "lib/matplotlib/tests/test_axes.py::test_tick_param_label_rotation",
                            "lib/matplotlib/tests/test_axes.py::test_fillbetween_cycle",
                            "lib/matplotlib/tests/test_axes.py::test_log_margins",
                            "lib/matplotlib/tests/test_axes.py::test_color_length_mismatch",
                            "lib/matplotlib/tests/test_axes.py::test_eventplot_legend",
                            "lib/matplotlib/tests/test_axes.py::test_bar_broadcast_args",
                            "lib/matplotlib/tests/test_axes.py::test_invalid_axis_limits",
                            "lib/matplotlib/tests/test_axes.py::test_minorticks_on[symlog-symlog]",
                            "lib/matplotlib/tests/test_axes.py::test_minorticks_on[symlog-log]",
                            "lib/matplotlib/tests/test_axes.py::test_minorticks_on[log-symlog]",
                            "lib/matplotlib/tests/test_axes.py::test_minorticks_on[log-log]",
                            "lib/matplotlib/tests/test_axes.py::test_twinx_knows_limits",
                            "lib/matplotlib/tests/test_axes.py::test_zero_linewidth",
                            "lib/matplotlib/tests/test_axes.py::test_empty_errorbar_legend",
                            "lib/matplotlib/tests/test_axes.py::test_plot_columns_cycle_deprecation",
                            "lib/matplotlib/tests/test_axes.py::test_tick_padding_tightbbox",
                            "lib/matplotlib/tests/test_axes.py::test_zoom_inset",
                            "lib/matplotlib/tests/test_axes.py::test_set_position",
                            "lib/matplotlib/tests/test_axes.py::test_spines_properbbox_after_zoom",
                            "lib/matplotlib/tests/test_axes.py::test_cartopy_backcompat",
                            "lib/matplotlib/tests/test_axes.py::test_gettightbbox_ignoreNaN",
                            "lib/matplotlib/tests/test_axes.py::test_scatter_empty_data",
                            "lib/matplotlib/tests/test_axes.py::test_deprecated_uppercase_colors",
                            "lib/matplotlib/tests/test_axes.py::test_secondary_fail",
                            "lib/matplotlib/tests/test_axes.py::test_secondary_resize",
                            "lib/matplotlib/tests/test_axes.py::test_nodecorator",
                            "lib/matplotlib/tests/test_axes.py::test_displaced_spine",
                            "lib/matplotlib/tests/test_axes.py::test_tickdirs",
                            "lib/matplotlib/tests/test_axes.py::test_minor_accountedfor",
                            "lib/matplotlib/tests/test_axes.py::test_axis_extent_arg",
                            "lib/matplotlib/tests/test_axes.py::test_datetime_masked",
                            "lib/matplotlib/tests/test_axes.py::test_hist_nan_data",
                            "lib/matplotlib/tests/test_axes.py::test_hist_range_and_density",
                            "lib/matplotlib/tests/test_axes.py::test_bar_errbar_zorder"
                        ],
                        "failure": [
                            "lib/matplotlib/tests/test_axes.py::test_twinx_axis_scales[png]",
                            "lib/matplotlib/tests/test_axes.py::test_minorticks_on_rcParams_both[png]",
                            "lib/matplotlib/tests/test_axes.py::test_autoscale_tiny_range[png]",
                            "lib/matplotlib/tests/test_axes.py::test_arrow_simple[png]",
                            "lib/matplotlib/tests/test_axes.py::test_hexbin_extent[png]",
                            "lib/matplotlib/tests/test_axes.py::test_hexbin_empty[png]",
                            "lib/matplotlib/tests/test_axes.py::test_imshow[png]",
                            "lib/matplotlib/tests/test_axes.py::test_polycollection_joinstyle[png]",
                            "lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate[png]",
                            "lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate_decreasing[png]",
                            "lib/matplotlib/tests/test_axes.py::test_pcolormesh[png]",
                            "lib/matplotlib/tests/test_axes.py::test_arc_angles[png]",
                            "lib/matplotlib/tests/test_axes.py::test_arc_ellipse[png]",
                            "lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales[png]",
                            "lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales_zoomed[png]",
                            "lib/matplotlib/tests/test_axes.py::test_markevery_log_scales[png]",
                            "lib/matplotlib/tests/test_axes.py::test_marker_edges[png]",
                            "lib/matplotlib/tests/test_axes.py::test_hist_log[png]",
                            "lib/matplotlib/tests/test_axes.py::test_hist_bar_empty[png]",
                            "lib/matplotlib/tests/test_axes.py::test_hist_step_empty[png]",
                            "lib/matplotlib/tests/test_axes.py::test_hist_step_filled[png]",
                            "lib/matplotlib/tests/test_axes.py::test_hist_step_log_bottom[png]",
                            "lib/matplotlib/tests/test_axes.py::test_contour_hatching[png]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_plot[png]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_2D[png]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_invalid_color[png]",
                            "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_no_invalid_color[png]",
                            "lib/matplotlib/tests/test_axes.py::test_stackplot_baseline[png]",
                            "lib/matplotlib/tests/test_axes.py::test_bxp_horizontal[png]",
                            "lib/matplotlib/tests/test_axes.py::test_bxp_patchartist[png]",
                            "lib/matplotlib/tests/test_axes.py::test_bxp_custompatchartist[png]",
                            "lib/matplotlib/tests/test_axes.py::test_bxp_customoutlier[png]",
                            "lib/matplotlib/tests/test_axes.py::test_bxp_showcustommean[png]",
                            "lib/matplotlib/tests/test_axes.py::test_bxp_custombox[png]",
                            "lib/matplotlib/tests/test_axes.py::test_bxp_custommedian[png]",
                            "lib/matplotlib/tests/test_axes.py::test_bxp_customcap[png]",
                            "lib/matplotlib/tests/test_axes.py::test_bxp_customwhisker[png]",
                            "lib/matplotlib/tests/test_axes.py::test_bxp_shownotches[png]",
                            "lib/matplotlib/tests/test_axes.py::test_bxp_nocaps[png]",
                            "lib/matplotlib/tests/test_axes.py::test_bxp_nobox[png]",
                            "lib/matplotlib/tests/test_axes.py::test_bxp_no_flier_stats[png]",
                            "lib/matplotlib/tests/test_axes.py::test_bxp_showmean[png]",
                            "lib/matplotlib/tests/test_axes.py::test_bxp_showmeanasline[png]",
                            "lib/matplotlib/tests/test_axes.py::test_bxp_scalarwidth[png]",
                            "lib/matplotlib/tests/test_axes.py::test_bxp_customwidths[png]",
                            "lib/matplotlib/tests/test_axes.py::test_bxp_custompositions[png]",
                            "lib/matplotlib/tests/test_axes.py::test_boxplot_sym2[png]",
                            "lib/matplotlib/tests/test_axes.py::test_boxplot_sym[png]",
                            "lib/matplotlib/tests/test_axes.py::test_boxplot_rc_parameters[png]",
                            "lib/matplotlib/tests/test_axes.py::test_boxplot_with_CIarray[png]",
                            "lib/matplotlib/tests/test_axes.py::test_boxplot_no_weird_whisker[png]",
                            "lib/matplotlib/tests/test_axes.py::test_boxplot_mod_artist_after_plotting[png]",
                            "lib/matplotlib/tests/test_axes.py::test_tick_space_size_0",
                            "lib/matplotlib/tests/test_axes.py::test_errorbar_with_prop_cycle[png]",
                            "lib/matplotlib/tests/test_axes.py::test_hist_step[png]",
                            "lib/matplotlib/tests/test_axes.py::test_stem[png-w/",
                            "lib/matplotlib/tests/test_axes.py::test_stem[png-w/o",
                            "lib/matplotlib/tests/test_axes.py::test_stem_params[png]",
                            "lib/matplotlib/tests/test_axes.py::test_hist_step_bottom[png]",
                            "lib/matplotlib/tests/test_axes.py::test_transparent_markers[png]",
                            "lib/matplotlib/tests/test_axes.py::test_rgba_markers[png]",
                            "lib/matplotlib/tests/test_axes.py::test_mollweide_grid[png]",
                            "lib/matplotlib/tests/test_axes.py::test_alpha[png]",
                            "lib/matplotlib/tests/test_axes.py::test_eventplot[png]",
                            "lib/matplotlib/tests/test_axes.py::test_eventplot_defaults[png]",
                            "lib/matplotlib/tests/test_axes.py::test_eventplot_problem_kwargs[png]",
                            "lib/matplotlib/tests/test_axes.py::test_marker_styles[png]",
                            "lib/matplotlib/tests/test_axes.py::test_vertex_markers[png]",
                            "lib/matplotlib/tests/test_axes.py::test_step_linestyle[png]",
                            "lib/matplotlib/tests/test_axes.py::test_mixed_collection[png]",
                            "lib/matplotlib/tests/test_axes.py::test_specgram_freqs[png]",
                            "lib/matplotlib/tests/test_axes.py::test_specgram_noise[png]",
                            "lib/matplotlib/tests/test_axes.py::test_specgram_magnitude_freqs[png]",
                            "lib/matplotlib/tests/test_axes.py::test_specgram_magnitude_noise[png]",
                            "lib/matplotlib/tests/test_axes.py::test_specgram_angle_freqs[png]",
                            "lib/matplotlib/tests/test_axes.py::test_specgram_noise_angle[png]",
                            "lib/matplotlib/tests/test_axes.py::test_specgram_freqs_phase[png]",
                            "lib/matplotlib/tests/test_axes.py::test_specgram_noise_phase[png]",
                            "lib/matplotlib/tests/test_axes.py::test_psd_freqs[png]",
                            "lib/matplotlib/tests/test_axes.py::test_psd_noise[png]",
                            "lib/matplotlib/tests/test_axes.py::test_csd_freqs[png]",
                            "lib/matplotlib/tests/test_axes.py::test_csd_noise[png]",
                            "lib/matplotlib/tests/test_axes.py::test_magnitude_spectrum_freqs[png]",
                            "lib/matplotlib/tests/test_axes.py::test_magnitude_spectrum_noise[png]",
                            "lib/matplotlib/tests/test_axes.py::test_angle_spectrum_freqs[png]",
                            "lib/matplotlib/tests/test_axes.py::test_angle_spectrum_noise[png]",
                            "lib/matplotlib/tests/test_axes.py::test_phase_spectrum_freqs[png]",
                            "lib/matplotlib/tests/test_axes.py::test_phase_spectrum_noise[png]",
                            "lib/matplotlib/tests/test_axes.py::test_twin_spines[png]",
                            "lib/matplotlib/tests/test_axes.py::test_twin_spines_on_top[png]",
                            "lib/matplotlib/tests/test_axes.py::test_pathological_hexbin",
                            "lib/matplotlib/tests/test_axes.py::test_dash_offset[png]",
                            "lib/matplotlib/tests/test_axes.py::test_loglog[png]",
                            "lib/matplotlib/tests/test_axes.py::test_loglog_nonpos[png]",
                            "lib/matplotlib/tests/test_axes.py::test_axisbelow[png]",
                            "lib/matplotlib/tests/test_axes.py::test_markerfacecolor_none_alpha[png]",
                            "lib/matplotlib/tests/test_axes.py::test_annotate_across_transforms[png]",
                            "lib/matplotlib/tests/test_axes.py::test_axis_bool_arguments[png]"
                        ]
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "pylint-dev__pylint-4516.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "tests/lint/unittest_expand_modules.py::test__is_in_ignore_list_re_match",
                            "tests/lint/unittest_expand_modules.py::test__is_in_ignore_list_re_nomatch",
                            "tests/lint/unittest_expand_modules.py::test_expand_modules[files_or_modules0-expected0]",
                            "tests/lint/unittest_expand_modules.py::test_expand_modules[files_or_modules1-expected1]"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "psf__requests-2466.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "test_requests.py::RequestsTestCase::test_DIGEST_AUTH_RETURNS_COOKIE",
                            "test_requests.py::RequestsTestCase::test_auth_is_retained_for_redirect_on_host",
                            "test_requests.py::RequestsTestCase::test_auth_is_stripped_on_redirect_off_host",
                            "test_requests.py::RequestsTestCase::test_cookie_quote_wrapped",
                            "test_requests.py::RequestsTestCase::test_json_param_post_content_type_works",
                            "test_requests.py::RequestsTestCase::test_user_agent_transfers",
                            "test_requests.py::test_vendor_aliases"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "test_requests.py::RequestsTestCase::test_BASICAUTH_TUPLE_HTTP_200_OK_GET",
                            "test_requests.py::RequestsTestCase::test_DIGESTAUTH_QUOTES_QOP_VALUE",
                            "test_requests.py::RequestsTestCase::test_DIGESTAUTH_WRONG_HTTP_401_GET",
                            "test_requests.py::RequestsTestCase::test_DIGEST_AUTH_SETS_SESSION_COOKIES",
                            "test_requests.py::RequestsTestCase::test_DIGEST_HTTP_200_OK_GET",
                            "test_requests.py::RequestsTestCase::test_DIGEST_STREAM",
                            "test_requests.py::RequestsTestCase::test_HTTP_200_OK_GET_ALTERNATIVE",
                            "test_requests.py::RequestsTestCase::test_HTTP_200_OK_GET_WITH_MIXED_PARAMS",
                            "test_requests.py::RequestsTestCase::test_HTTP_200_OK_GET_WITH_PARAMS",
                            "test_requests.py::RequestsTestCase::test_HTTP_200_OK_HEAD",
                            "test_requests.py::RequestsTestCase::test_HTTP_200_OK_PUT",
                            "test_requests.py::RequestsTestCase::test_HTTP_302_ALLOW_REDIRECT_GET",
                            "test_requests.py::RequestsTestCase::test_LocationParseError",
                            "test_requests.py::RequestsTestCase::test_POSTBIN_GET_POST_FILES",
                            "test_requests.py::RequestsTestCase::test_POSTBIN_GET_POST_FILES_WITH_DATA",
                            "test_requests.py::RequestsTestCase::test_autoset_header_values_are_native",
                            "test_requests.py::RequestsTestCase::test_basic_auth_str_is_always_native",
                            "test_requests.py::RequestsTestCase::test_basic_building",
                            "test_requests.py::RequestsTestCase::test_can_send_file_object_with_non_string_filename",
                            "test_requests.py::RequestsTestCase::test_can_send_nonstring_objects_with_files",
                            "test_requests.py::RequestsTestCase::test_cannot_send_unprepared_requests",
                            "test_requests.py::RequestsTestCase::test_connection_error_invalid_domain",
                            "test_requests.py::RequestsTestCase::test_connection_error_invalid_port",
                            "test_requests.py::RequestsTestCase::test_cookie_as_dict_items",
                            "test_requests.py::RequestsTestCase::test_cookie_as_dict_keeps_items",
                            "test_requests.py::RequestsTestCase::test_cookie_as_dict_keeps_len",
                            "test_requests.py::RequestsTestCase::test_cookie_as_dict_keys",
                            "test_requests.py::RequestsTestCase::test_cookie_as_dict_values",
                            "test_requests.py::RequestsTestCase::test_cookie_parameters",
                            "test_requests.py::RequestsTestCase::test_cookie_persists_via_api",
                            "test_requests.py::RequestsTestCase::test_cookie_removed_on_expire",
                            "test_requests.py::RequestsTestCase::test_cookie_sent_on_redirect",
                            "test_requests.py::RequestsTestCase::test_custom_content_type",
                            "test_requests.py::RequestsTestCase::test_decompress_gzip",
                            "test_requests.py::RequestsTestCase::test_different_encodings_dont_break_post",
                            "test_requests.py::RequestsTestCase::test_entry_points",
                            "test_requests.py::RequestsTestCase::test_fixes_1329",
                            "test_requests.py::RequestsTestCase::test_generic_cookiejar_works",
                            "test_requests.py::RequestsTestCase::test_get_auth_from_url",
                            "test_requests.py::RequestsTestCase::test_get_auth_from_url_encoded_hashes",
                            "test_requests.py::RequestsTestCase::test_get_auth_from_url_encoded_spaces",
                            "test_requests.py::RequestsTestCase::test_get_auth_from_url_not_encoded_spaces",
                            "test_requests.py::RequestsTestCase::test_get_auth_from_url_percent_chars",
                            "test_requests.py::RequestsTestCase::test_header_keys_are_native",
                            "test_requests.py::RequestsTestCase::test_header_remove_is_case_insensitive",
                            "test_requests.py::RequestsTestCase::test_headers_on_session_with_None_are_not_sent",
                            "test_requests.py::RequestsTestCase::test_history_is_always_a_list",
                            "test_requests.py::RequestsTestCase::test_hook_receives_request_arguments",
                            "test_requests.py::RequestsTestCase::test_http_error",
                            "test_requests.py::RequestsTestCase::test_invalid_url",
                            "test_requests.py::RequestsTestCase::test_links",
                            "test_requests.py::RequestsTestCase::test_long_authinfo_in_url",
                            "test_requests.py::RequestsTestCase::test_manual_redirect_with_partial_body_read",
                            "test_requests.py::RequestsTestCase::test_mixed_case_scheme_acceptable",
                            "test_requests.py::RequestsTestCase::test_no_content_length",
                            "test_requests.py::RequestsTestCase::test_nonhttp_schemes_dont_check_URLs",
                            "test_requests.py::RequestsTestCase::test_override_content_length",
                            "test_requests.py::RequestsTestCase::test_param_cookiejar_works",
                            "test_requests.py::RequestsTestCase::test_params_are_added_before_fragment",
                            "test_requests.py::RequestsTestCase::test_params_are_merged_case_sensitive",
                            "test_requests.py::RequestsTestCase::test_path_is_not_double_encoded",
                            "test_requests.py::RequestsTestCase::test_prepare_request_with_bytestring_url",
                            "test_requests.py::RequestsTestCase::test_prepared_from_session",
                            "test_requests.py::RequestsTestCase::test_prepared_request_hook",
                            "test_requests.py::RequestsTestCase::test_pyopenssl_redirect",
                            "test_requests.py::RequestsTestCase::test_redirect_with_wrong_gzipped_header",
                            "test_requests.py::RequestsTestCase::test_request_and_response_are_pickleable",
                            "test_requests.py::RequestsTestCase::test_request_cookie_overrides_session_cookie",
                            "test_requests.py::RequestsTestCase::test_request_cookies_not_persisted",
                            "test_requests.py::RequestsTestCase::test_request_ok_set",
                            "test_requests.py::RequestsTestCase::test_requests_history_is_saved",
                            "test_requests.py::RequestsTestCase::test_requests_in_history_are_not_overridden",
                            "test_requests.py::RequestsTestCase::test_response_decode_unicode",
                            "test_requests.py::RequestsTestCase::test_response_is_iterable",
                            "test_requests.py::RequestsTestCase::test_session_hooks_are_overriden_by_request_hooks",
                            "test_requests.py::RequestsTestCase::test_session_hooks_are_used_with_no_request_hooks",
                            "test_requests.py::RequestsTestCase::test_session_pickling",
                            "test_requests.py::RequestsTestCase::test_set_cookie_on_301",
                            "test_requests.py::RequestsTestCase::test_status_raising",
                            "test_requests.py::RequestsTestCase::test_time_elapsed_blank",
                            "test_requests.py::RequestsTestCase::test_transport_adapter_ordering",
                            "test_requests.py::RequestsTestCase::test_unicode_get",
                            "test_requests.py::RequestsTestCase::test_unicode_header_name",
                            "test_requests.py::RequestsTestCase::test_unicode_method_name",
                            "test_requests.py::RequestsTestCase::test_unicode_multipart_post_fieldnames",
                            "test_requests.py::RequestsTestCase::test_uppercase_scheme_redirect",
                            "test_requests.py::RequestsTestCase::test_urlencoded_get_query_multivalued_param",
                            "test_requests.py::TestContentEncodingDetection::test_html4_pragma",
                            "test_requests.py::TestContentEncodingDetection::test_html_charset",
                            "test_requests.py::TestContentEncodingDetection::test_none",
                            "test_requests.py::TestContentEncodingDetection::test_precedence",
                            "test_requests.py::TestContentEncodingDetection::test_xhtml_pragma",
                            "test_requests.py::TestContentEncodingDetection::test_xml",
                            "test_requests.py::TestCaseInsensitiveDict::test_contains",
                            "test_requests.py::TestCaseInsensitiveDict::test_delitem",
                            "test_requests.py::TestCaseInsensitiveDict::test_docstring_example",
                            "test_requests.py::TestCaseInsensitiveDict::test_equality",
                            "test_requests.py::TestCaseInsensitiveDict::test_fixes_649",
                            "test_requests.py::TestCaseInsensitiveDict::test_get",
                            "test_requests.py::TestCaseInsensitiveDict::test_getitem",
                            "test_requests.py::TestCaseInsensitiveDict::test_iter",
                            "test_requests.py::TestCaseInsensitiveDict::test_iterable_init",
                            "test_requests.py::TestCaseInsensitiveDict::test_kwargs_init",
                            "test_requests.py::TestCaseInsensitiveDict::test_len",
                            "test_requests.py::TestCaseInsensitiveDict::test_lower_items",
                            "test_requests.py::TestCaseInsensitiveDict::test_mapping_init",
                            "test_requests.py::TestCaseInsensitiveDict::test_preserve_key_case",
                            "test_requests.py::TestCaseInsensitiveDict::test_preserve_last_key_case",
                            "test_requests.py::TestCaseInsensitiveDict::test_setdefault",
                            "test_requests.py::TestCaseInsensitiveDict::test_update",
                            "test_requests.py::TestCaseInsensitiveDict::test_update_retains_unchanged",
                            "test_requests.py::UtilsTestCase::test_address_in_network",
                            "test_requests.py::UtilsTestCase::test_dotted_netmask",
                            "test_requests.py::UtilsTestCase::test_get_auth_from_url",
                            "test_requests.py::UtilsTestCase::test_get_environ_proxies",
                            "test_requests.py::UtilsTestCase::test_get_environ_proxies_ip_ranges",
                            "test_requests.py::UtilsTestCase::test_guess_filename_when_filename_is_an_int",
                            "test_requests.py::UtilsTestCase::test_guess_filename_when_int",
                            "test_requests.py::UtilsTestCase::test_guess_filename_with_file_like_obj",
                            "test_requests.py::UtilsTestCase::test_guess_filename_with_unicode_name",
                            "test_requests.py::UtilsTestCase::test_is_ipv4_address",
                            "test_requests.py::UtilsTestCase::test_is_valid_cidr",
                            "test_requests.py::UtilsTestCase::test_requote_uri_properly_requotes",
                            "test_requests.py::UtilsTestCase::test_requote_uri_with_unquoted_percents",
                            "test_requests.py::UtilsTestCase::test_super_len_io_streams",
                            "test_requests.py::TestMorselToCookieExpires::test_expires_invalid_int",
                            "test_requests.py::TestMorselToCookieExpires::test_expires_invalid_str",
                            "test_requests.py::TestMorselToCookieExpires::test_expires_none",
                            "test_requests.py::TestMorselToCookieExpires::test_expires_valid_str",
                            "test_requests.py::TestMorselToCookieMaxAge::test_max_age_invalid_str",
                            "test_requests.py::TestMorselToCookieMaxAge::test_max_age_valid_int",
                            "test_requests.py::TestTimeout::test_stream_timeout",
                            "test_requests.py::TestTimeout::test_invalid_timeout",
                            "test_requests.py::TestTimeout::test_read_timeout",
                            "test_requests.py::TestTimeout::test_connect_timeout",
                            "test_requests.py::TestTimeout::test_total_timeout_connect",
                            "test_requests.py::TestTimeout::test_encoded_methods",
                            "test_requests.py::TestRedirects::test_requests_are_updated_each_time",
                            "test_requests.py::test_data_argument_accepts_tuples",
                            "test_requests.py::test_prepared_request_empty_copy",
                            "test_requests.py::test_prepared_request_no_cookies_copy",
                            "test_requests.py::test_prepared_request_complete_copy",
                            "test_requests.py::test_prepare_unicode_url"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "pylint-dev__pylint-8929.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "tests/reporters/unittest_json_reporter.py::test_simple_json_output_no_score",
                            "tests/reporters/unittest_json_reporter.py::test_simple_json_output_no_score_with_end_line",
                            "tests/reporters/unittest_json_reporter.py::test_serialize_deserialize[everything-defined]",
                            "tests/reporters/unittest_json_reporter.py::test_simple_json2_output",
                            "tests/reporters/unittest_json_reporter.py::test_serialize_deserialize_for_v2[everything-defined]",
                            "tests/reporters/unittest_json_reporter.py::test_serialize_deserialize_for_v2[not-everything-defined]",
                            "tests/reporters/unittest_json_reporter.py::test_json2_result_with_broken_score",
                            "tests/reporters/unittest_reporting.py::test_template_option",
                            "tests/reporters/unittest_reporting.py::test_template_option_default",
                            "tests/reporters/unittest_reporting.py::test_template_option_end_line",
                            "tests/reporters/unittest_reporting.py::test_template_option_non_existing",
                            "tests/reporters/unittest_reporting.py::test_template_option_with_header",
                            "tests/reporters/unittest_reporting.py::test_parseable_output_deprecated",
                            "tests/reporters/unittest_reporting.py::test_parseable_output_regression",
                            "tests/reporters/unittest_reporting.py::test_multi_format_output",
                            "tests/reporters/unittest_reporting.py::test_multi_reporter_independant_messages",
                            "tests/reporters/unittest_reporting.py::test_display_results_is_renamed",
                            "tests/test_self.py::TestRunTC::test_pkginfo",
                            "tests/test_self.py::TestRunTC::test_all",
                            "tests/test_self.py::TestRunTC::test_no_ext_file",
                            "tests/test_self.py::TestRunTC::test_w0704_ignored",
                            "tests/test_self.py::TestRunTC::test_exit_zero",
                            "tests/test_self.py::TestRunTC::test_nonexistent_config_file",
                            "tests/test_self.py::TestRunTC::test_error_missing_arguments",
                            "tests/test_self.py::TestRunTC::test_disable_all",
                            "tests/test_self.py::TestRunTC::test_no_out_encoding",
                            "tests/test_self.py::TestRunTC::test_parallel_execution",
                            "tests/test_self.py::TestRunTC::test_parallel_execution_missing_arguments",
                            "tests/test_self.py::TestRunTC::test_enable_all_works",
                            "tests/test_self.py::TestRunTC::test_wrong_import_position_when_others_disabled",
                            "tests/test_self.py::TestRunTC::test_type_annotation_names",
                            "tests/test_self.py::TestRunTC::test_import_itself_not_accounted_for_relative_imports",
                            "tests/test_self.py::TestRunTC::test_reject_empty_indent_strings",
                            "tests/test_self.py::TestRunTC::test_json_report_when_file_has_syntax_error",
                            "tests/test_self.py::TestRunTC::test_json_report_when_file_is_missing",
                            "tests/test_self.py::TestRunTC::test_json_report_does_not_escape_quotes",
                            "tests/test_self.py::TestRunTC::test_information_category_disabled_by_default",
                            "tests/test_self.py::TestRunTC::test_error_mode_shows_no_score",
                            "tests/test_self.py::TestRunTC::test_evaluation_score_shown_by_default",
                            "tests/test_self.py::TestRunTC::test_confidence_levels",
                            "tests/test_self.py::TestRunTC::test_bom_marker",
                            "tests/test_self.py::TestRunTC::test_pylintrc_plugin_duplicate_options",
                            "tests/test_self.py::TestRunTC::test_pylintrc_comments_in_values",
                            "tests/test_self.py::TestRunTC::test_no_crash_with_formatting_regex_defaults",
                            "tests/test_self.py::TestRunTC::test_getdefaultencoding_crashes_with_lc_ctype_utf8",
                            "tests/test_self.py::TestRunTC::test_parseable_file_path",
                            "tests/test_self.py::TestRunTC::test_stdin[/mymodule.py]",
                            "tests/test_self.py::TestRunTC::test_stdin[mymodule.py-mymodule-mymodule.py]",
                            "tests/test_self.py::TestRunTC::test_stdin_missing_modulename",
                            "tests/test_self.py::TestRunTC::test_relative_imports[False]",
                            "tests/test_self.py::TestRunTC::test_relative_imports[True]",
                            "tests/test_self.py::TestRunTC::test_stdin_syntax_error",
                            "tests/test_self.py::TestRunTC::test_version",
                            "tests/test_self.py::TestRunTC::test_fail_under",
                            "tests/test_self.py::TestRunTC::test_fail_on[-10-missing-function-docstring-fail_under_plus7_5.py-16]",
                            "tests/test_self.py::TestRunTC::test_fail_on[6-missing-function-docstring-fail_under_plus7_5.py-16]",
                            "tests/test_self.py::TestRunTC::test_fail_on[7.5-missing-function-docstring-fail_under_plus7_5.py-16]",
                            "tests/test_self.py::TestRunTC::test_fail_on[7.6-missing-function-docstring-fail_under_plus7_5.py-16]",
                            "tests/test_self.py::TestRunTC::test_fail_on[-11-missing-function-docstring-fail_under_minus10.py-22]",
                            "tests/test_self.py::TestRunTC::test_fail_on[-10-missing-function-docstring-fail_under_minus10.py-22]",
                            "tests/test_self.py::TestRunTC::test_fail_on[-9-missing-function-docstring-fail_under_minus10.py-22]",
                            "tests/test_self.py::TestRunTC::test_fail_on[-5-missing-function-docstring-fail_under_minus10.py-22]",
                            "tests/test_self.py::TestRunTC::test_fail_on[-10-broad-exception-caught-fail_under_plus7_5.py-0]",
                            "tests/test_self.py::TestRunTC::test_fail_on[6-broad-exception-caught-fail_under_plus7_5.py-0]",
                            "tests/test_self.py::TestRunTC::test_fail_on[7.5-broad-exception-caught-fail_under_plus7_5.py-0]",
                            "tests/test_self.py::TestRunTC::test_fail_on[7.6-broad-exception-caught-fail_under_plus7_5.py-16]",
                            "tests/test_self.py::TestRunTC::test_fail_on[-11-broad-exception-caught-fail_under_minus10.py-0]",
                            "tests/test_self.py::TestRunTC::test_fail_on[-10-broad-exception-caught-fail_under_minus10.py-0]",
                            "tests/test_self.py::TestRunTC::test_fail_on[-9-broad-exception-caught-fail_under_minus10.py-22]",
                            "tests/test_self.py::TestRunTC::test_fail_on[-5-broad-exception-caught-fail_under_minus10.py-22]",
                            "tests/test_self.py::TestRunTC::test_fail_on[-10-C0116-fail_under_plus7_5.py-16]",
                            "tests/test_self.py::TestRunTC::test_fail_on[-10-C-fail_under_plus7_5.py-16]",
                            "tests/test_self.py::TestRunTC::test_fail_on[-10-fake1,C,fake2-fail_under_plus7_5.py-16]",
                            "tests/test_self.py::TestRunTC::test_fail_on[-10-C0115-fail_under_plus7_5.py-0]",
                            "tests/test_self.py::TestRunTC::test_fail_on_edge_case[opts0-0]",
                            "tests/test_self.py::TestRunTC::test_fail_on_edge_case[opts1-0]",
                            "tests/test_self.py::TestRunTC::test_fail_on_edge_case[opts2-16]",
                            "tests/test_self.py::TestRunTC::test_fail_on_edge_case[opts3-16]",
                            "tests/test_self.py::TestRunTC::test_modify_sys_path",
                            "tests/test_self.py::TestRunTC::test_plugin_that_imports_from_open",
                            "tests/test_self.py::TestRunTC::test_do_not_import_files_from_local_directory[args0]",
                            "tests/test_self.py::TestRunTC::test_do_not_import_files_from_local_directory[args1]",
                            "tests/test_self.py::TestRunTC::test_import_plugin_from_local_directory_if_pythonpath_cwd",
                            "tests/test_self.py::TestRunTC::test_allow_import_of_files_found_in_modules_during_parallel_check",
                            "tests/test_self.py::TestRunTC::test_can_list_directories_without_dunder_init",
                            "tests/test_self.py::TestRunTC::test_jobs_score",
                            "tests/test_self.py::TestRunTC::test_regression_parallel_mode_without_filepath",
                            "tests/test_self.py::TestRunTC::test_output_file_valid_path",
                            "tests/test_self.py::TestRunTC::test_output_file_invalid_path_exits_with_code_32",
                            "tests/test_self.py::TestRunTC::test_fail_on_exit_code[args0-0]",
                            "tests/test_self.py::TestRunTC::test_fail_on_exit_code[args1-0]",
                            "tests/test_self.py::TestRunTC::test_fail_on_exit_code[args2-0]",
                            "tests/test_self.py::TestRunTC::test_fail_on_exit_code[args3-6]",
                            "tests/test_self.py::TestRunTC::test_fail_on_exit_code[args4-6]",
                            "tests/test_self.py::TestRunTC::test_fail_on_exit_code[args5-22]",
                            "tests/test_self.py::TestRunTC::test_fail_on_exit_code[args6-22]",
                            "tests/test_self.py::TestRunTC::test_fail_on_exit_code[args7-6]",
                            "tests/test_self.py::TestRunTC::test_fail_on_exit_code[args8-22]",
                            "tests/test_self.py::TestRunTC::test_one_module_fatal_error",
                            "tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args0-0]",
                            "tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args1-0]",
                            "tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args2-0]",
                            "tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args3-0]",
                            "tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args4-0]",
                            "tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args5-0]",
                            "tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args6-0]",
                            "tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args7-1]",
                            "tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args8-1]",
                            "tests/test_self.py::TestRunTC::test_output_file_can_be_combined_with_output_format_option[text-{path}:4:4:",
                            "tests/test_self.py::TestRunTC::test_output_file_can_be_combined_with_output_format_option[parseable-{path}:4:",
                            "tests/test_self.py::TestRunTC::test_output_file_can_be_combined_with_output_format_option[msvs-{path}(4):",
                            "tests/test_self.py::TestRunTC::test_output_file_can_be_combined_with_output_format_option[colorized-{path}:4:4:",
                            "tests/test_self.py::TestRunTC::test_output_file_can_be_combined_with_output_format_option[json-\"message\":",
                            "tests/test_self.py::TestRunTC::test_output_file_can_be_combined_with_output_format_option[json2-\"message\":",
                            "tests/test_self.py::TestRunTC::test_output_file_can_be_combined_with_custom_reporter",
                            "tests/test_self.py::TestRunTC::test_output_file_specified_in_rcfile",
                            "tests/test_self.py::TestRunTC::test_load_text_repoter_if_not_provided",
                            "tests/test_self.py::TestRunTC::test_regex_paths_csv_validator",
                            "tests/test_self.py::TestRunTC::test_max_inferred_for_complicated_class_hierarchy",
                            "tests/test_self.py::TestRunTC::test_recursive",
                            "tests/test_self.py::TestRunTC::test_recursive_globbing",
                            "tests/test_self.py::TestRunTC::test_ignore_recursive[ignored_subdirectory]",
                            "tests/test_self.py::TestRunTC::test_ignore_recursive[failing.py]",
                            "tests/test_self.py::TestRunTC::test_ignore_pattern_recursive[ignored_.*]",
                            "tests/test_self.py::TestRunTC::test_ignore_pattern_recursive[failing.*]",
                            "tests/test_self.py::TestRunTC::test_ignore_pattern_from_stdin",
                            "tests/test_self.py::TestRunTC::test_ignore_path_recursive[.*ignored.*]",
                            "tests/test_self.py::TestRunTC::test_ignore_path_recursive[.*failing.*]",
                            "tests/test_self.py::TestRunTC::test_recursive_current_dir",
                            "tests/test_self.py::TestRunTC::test_ignore_path_recursive_current_dir",
                            "tests/test_self.py::TestRunTC::test_syntax_error_invalid_encoding",
                            "tests/test_self.py::TestRunTC::test_encoding[good.py-]",
                            "tests/test_self.py::TestRunTC::test_encoding[bad_wrong_num.py-(syntax-error)]",
                            "tests/test_self.py::TestRunTC::test_encoding[bad_missing_num.py-(bad-file-encoding)]",
                            "tests/test_self.py::TestRunTC::test_line_too_long_useless_suppression",
                            "tests/test_self.py::TestRunTC::test_output_no_header",
                            "tests/test_self.py::TestRunTC::test_no_name_in_module",
                            "tests/test_self.py::TestCallbackOptions::test_output_of_callback_options[command0-Emittable",
                            "tests/test_self.py::TestCallbackOptions::test_output_of_callback_options[command1-Enabled",
                            "tests/test_self.py::TestCallbackOptions::test_output_of_callback_options[command2-nonascii-checker]",
                            "tests/test_self.py::TestCallbackOptions::test_output_of_callback_options[command3-Confidence(name='HIGH',",
                            "tests/test_self.py::TestCallbackOptions::test_output_of_callback_options[command4-pylint.extensions.empty_comment]",
                            "tests/test_self.py::TestCallbackOptions::test_output_of_callback_options[command5-Pylint",
                            "tests/test_self.py::TestCallbackOptions::test_output_of_callback_options[command6-Environment",
                            "tests/test_self.py::TestCallbackOptions::test_help_msg[args0-:unreachable",
                            "tests/test_self.py::TestCallbackOptions::test_help_msg[args1-No",
                            "tests/test_self.py::TestCallbackOptions::test_help_msg[args2---help-msg:",
                            "tests/test_self.py::TestCallbackOptions::test_help_msg[args3-:invalid-name",
                            "tests/test_self.py::TestCallbackOptions::test_generate_rcfile",
                            "tests/test_self.py::TestCallbackOptions::test_generate_config_disable_symbolic_names",
                            "tests/test_self.py::TestCallbackOptions::test_generate_toml_config",
                            "tests/test_self.py::TestCallbackOptions::test_generate_toml_config_disable_symbolic_names",
                            "tests/test_self.py::TestCallbackOptions::test_errors_only",
                            "tests/test_self.py::TestCallbackOptions::test_errors_only_functions_as_disable",
                            "tests/test_self.py::TestCallbackOptions::test_verbose",
                            "tests/test_self.py::TestCallbackOptions::test_enable_all_extensions"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "psf__requests-2873.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "test_requests.py::UtilsTestCase::test_super_len_correctly_calculates_len_of_partially_read_file"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "test_requests.py::TestRequests::test_entry_points",
                            "test_requests.py::TestRequests::test_invalid_url",
                            "test_requests.py::TestRequests::test_basic_building",
                            "test_requests.py::TestRequests::test_path_is_not_double_encoded",
                            "test_requests.py::TestRequests::test_params_are_added_before_fragment",
                            "test_requests.py::TestRequests::test_params_original_order_is_preserved_by_default",
                            "test_requests.py::TestRequests::test_params_bytes_are_encoded",
                            "test_requests.py::TestRequests::test_connection_error_invalid_domain",
                            "test_requests.py::TestRequests::test_connection_error_invalid_port",
                            "test_requests.py::TestRequests::test_LocationParseError",
                            "test_requests.py::TestRequests::test_links",
                            "test_requests.py::TestRequests::test_cookie_parameters",
                            "test_requests.py::TestRequests::test_cookie_as_dict_keeps_len",
                            "test_requests.py::TestRequests::test_cookie_as_dict_keeps_items",
                            "test_requests.py::TestRequests::test_cookie_as_dict_keys",
                            "test_requests.py::TestRequests::test_cookie_as_dict_values",
                            "test_requests.py::TestRequests::test_cookie_as_dict_items",
                            "test_requests.py::TestRequests::test_response_is_iterable",
                            "test_requests.py::TestRequests::test_response_decode_unicode",
                            "test_requests.py::TestRequests::test_get_auth_from_url",
                            "test_requests.py::TestRequests::test_get_auth_from_url_encoded_spaces",
                            "test_requests.py::TestRequests::test_get_auth_from_url_not_encoded_spaces",
                            "test_requests.py::TestRequests::test_get_auth_from_url_percent_chars",
                            "test_requests.py::TestRequests::test_get_auth_from_url_encoded_hashes",
                            "test_requests.py::TestRequests::test_http_error",
                            "test_requests.py::TestRequests::test_transport_adapter_ordering",
                            "test_requests.py::TestRequests::test_long_authinfo_in_url",
                            "test_requests.py::TestRequests::test_nonhttp_schemes_dont_check_URLs",
                            "test_requests.py::TestRequests::test_basic_auth_str_is_always_native",
                            "test_requests.py::TestContentEncodingDetection::test_html4_pragma",
                            "test_requests.py::TestContentEncodingDetection::test_html_charset",
                            "test_requests.py::TestContentEncodingDetection::test_none",
                            "test_requests.py::TestContentEncodingDetection::test_precedence",
                            "test_requests.py::TestContentEncodingDetection::test_xhtml_pragma",
                            "test_requests.py::TestContentEncodingDetection::test_xml",
                            "test_requests.py::TestCaseInsensitiveDict::test_contains",
                            "test_requests.py::TestCaseInsensitiveDict::test_copy",
                            "test_requests.py::TestCaseInsensitiveDict::test_delitem",
                            "test_requests.py::TestCaseInsensitiveDict::test_docstring_example",
                            "test_requests.py::TestCaseInsensitiveDict::test_equality",
                            "test_requests.py::TestCaseInsensitiveDict::test_fixes_649",
                            "test_requests.py::TestCaseInsensitiveDict::test_get",
                            "test_requests.py::TestCaseInsensitiveDict::test_getitem",
                            "test_requests.py::TestCaseInsensitiveDict::test_iter",
                            "test_requests.py::TestCaseInsensitiveDict::test_iterable_init",
                            "test_requests.py::TestCaseInsensitiveDict::test_kwargs_init",
                            "test_requests.py::TestCaseInsensitiveDict::test_len",
                            "test_requests.py::TestCaseInsensitiveDict::test_lower_items",
                            "test_requests.py::TestCaseInsensitiveDict::test_mapping_init",
                            "test_requests.py::TestCaseInsensitiveDict::test_preserve_key_case",
                            "test_requests.py::TestCaseInsensitiveDict::test_preserve_last_key_case",
                            "test_requests.py::TestCaseInsensitiveDict::test_setdefault",
                            "test_requests.py::TestCaseInsensitiveDict::test_update",
                            "test_requests.py::TestCaseInsensitiveDict::test_update_retains_unchanged",
                            "test_requests.py::UtilsTestCase::test_address_in_network",
                            "test_requests.py::UtilsTestCase::test_dotted_netmask",
                            "test_requests.py::UtilsTestCase::test_get_auth_from_url",
                            "test_requests.py::UtilsTestCase::test_get_environ_proxies",
                            "test_requests.py::UtilsTestCase::test_get_environ_proxies_ip_ranges",
                            "test_requests.py::UtilsTestCase::test_guess_filename_when_filename_is_an_int",
                            "test_requests.py::UtilsTestCase::test_guess_filename_when_int",
                            "test_requests.py::UtilsTestCase::test_guess_filename_with_file_like_obj",
                            "test_requests.py::UtilsTestCase::test_guess_filename_with_unicode_name",
                            "test_requests.py::UtilsTestCase::test_is_ipv4_address",
                            "test_requests.py::UtilsTestCase::test_is_valid_cidr",
                            "test_requests.py::UtilsTestCase::test_requote_uri_properly_requotes",
                            "test_requests.py::UtilsTestCase::test_requote_uri_with_unquoted_percents",
                            "test_requests.py::UtilsTestCase::test_select_proxies",
                            "test_requests.py::UtilsTestCase::test_super_len_io_streams",
                            "test_requests.py::TestMorselToCookieExpires::test_expires_invalid_int",
                            "test_requests.py::TestMorselToCookieExpires::test_expires_invalid_str",
                            "test_requests.py::TestMorselToCookieExpires::test_expires_none",
                            "test_requests.py::TestMorselToCookieExpires::test_expires_valid_str",
                            "test_requests.py::TestMorselToCookieMaxAge::test_max_age_invalid_str",
                            "test_requests.py::TestMorselToCookieMaxAge::test_max_age_valid_int",
                            "test_requests.py::TestTimeout::test_connect_timeout",
                            "test_requests.py::TestTimeout::test_total_timeout_connect",
                            "test_requests.py::test_data_argument_accepts_tuples",
                            "test_requests.py::test_prepared_request_empty_copy",
                            "test_requests.py::test_prepared_request_no_cookies_copy",
                            "test_requests.py::test_prepared_request_complete_copy",
                            "test_requests.py::test_prepare_unicode_url",
                            "test_requests.py::test_vendor_aliases"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "django__django-12869.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "test_collectstatis_check (staticfiles_tests.test_management.TestConfiguration)"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "test_no_files_created (staticfiles_tests.test_management.TestCollectionDryRun)",
                            "test_local_storage_detection_helper (staticfiles_tests.test_management.TestConfiguration)",
                            "test_location_empty (staticfiles_tests.test_management.TestConfiguration)",
                            "test_no_files_created (staticfiles_tests.test_management.TestCollectionDryRunManifestStaticFilesStorage)",
                            "test_no_warning (staticfiles_tests.test_management.TestCollectionOverwriteWarning)",
                            "test_warning (staticfiles_tests.test_management.TestCollectionOverwriteWarning)",
                            "test_skips_newer_files_in_remote_storage (staticfiles_tests.test_management.TestCollectionNeverCopyStorage)",
                            "test_no_files_created (staticfiles_tests.test_management.TestCollectionNonLocalStorage)",
                            "test_storage_properties (staticfiles_tests.test_management.TestCollectionNonLocalStorage)",
                            "test_custom_ignore_patterns (staticfiles_tests.test_management.TestCollectionCustomIgnorePatterns)",
                            "test_ordering_override (staticfiles_tests.test_management.TestCollectionFilesOverride)",
                            "test_cleared_not_found (staticfiles_tests.test_management.TestCollectionClear)",
                            "test_dir_not_exists (staticfiles_tests.test_management.TestCollectionClear)",
                            "test_handle_path_notimplemented (staticfiles_tests.test_management.TestCollectionClear)",
                            "test_404_response (staticfiles_tests.test_management.TestRunserver)",
                            "test_middleware_loaded_only_once (staticfiles_tests.test_management.TestRunserver)",
                            "test_app_files (staticfiles_tests.test_management.TestCollectionLinks)",
                            "test_broken_symlink (staticfiles_tests.test_management.TestCollectionLinks)",
                            "test_camelcase_filenames (staticfiles_tests.test_management.TestCollectionLinks)",
                            "test_clear_broken_symlink (staticfiles_tests.test_management.TestCollectionLinks)",
                            "test_filename_with_percent_sign (staticfiles_tests.test_management.TestCollectionLinks)",
                            "test_links_created (staticfiles_tests.test_management.TestCollectionLinks)",
                            "test_no_remote_link (staticfiles_tests.test_management.TestCollectionLinks)",
                            "test_nonascii_filenames (staticfiles_tests.test_management.TestCollectionLinks)",
                            "test_staticfiles_dirs (staticfiles_tests.test_management.TestCollectionLinks)",
                            "test_staticfiles_dirs_priority (staticfiles_tests.test_management.TestCollectionLinks)",
                            "test_staticfiles_dirs_subdir (staticfiles_tests.test_management.TestCollectionLinks)",
                            "test_symlinks_and_files_replaced (staticfiles_tests.test_management.TestCollectionLinks)",
                            "test_app_files (staticfiles_tests.test_management.TestCollectionExcludeNoDefaultIgnore)",
                            "test_camelcase_filenames (staticfiles_tests.test_management.TestCollectionExcludeNoDefaultIgnore)",
                            "test_filename_with_percent_sign (staticfiles_tests.test_management.TestCollectionExcludeNoDefaultIgnore)",
                            "test_no_common_ignore_patterns (staticfiles_tests.test_management.TestCollectionExcludeNoDefaultIgnore)",
                            "test_nonascii_filenames (staticfiles_tests.test_management.TestCollectionExcludeNoDefaultIgnore)",
                            "test_staticfiles_dirs (staticfiles_tests.test_management.TestCollectionExcludeNoDefaultIgnore)",
                            "test_staticfiles_dirs_priority (staticfiles_tests.test_management.TestCollectionExcludeNoDefaultIgnore)",
                            "test_staticfiles_dirs_subdir (staticfiles_tests.test_management.TestCollectionExcludeNoDefaultIgnore)",
                            "test_verbosity_0 (staticfiles_tests.test_management.TestCollectionVerbosity)",
                            "test_verbosity_1 (staticfiles_tests.test_management.TestCollectionVerbosity)",
                            "test_verbosity_1_with_post_process (staticfiles_tests.test_management.TestCollectionVerbosity)",
                            "test_verbosity_2 (staticfiles_tests.test_management.TestCollectionVerbosity)",
                            "test_verbosity_2_with_post_process (staticfiles_tests.test_management.TestCollectionVerbosity)",
                            "test_cancelled (staticfiles_tests.test_management.TestInteractiveMessages)",
                            "test_no_warning_for_empty_staticdir (staticfiles_tests.test_management.TestInteractiveMessages)",
                            "test_no_warning_when_staticdir_does_not_exist (staticfiles_tests.test_management.TestInteractiveMessages)",
                            "test_warning_when_clearing_staticdir (staticfiles_tests.test_management.TestInteractiveMessages)",
                            "test_warning_when_overwriting_files_in_staticdir (staticfiles_tests.test_management.TestInteractiveMessages)",
                            "test_all_files (staticfiles_tests.test_management.TestFindStatic)",
                            "test_all_files_less_verbose (staticfiles_tests.test_management.TestFindStatic)",
                            "test_all_files_more_verbose (staticfiles_tests.test_management.TestFindStatic)",
                            "test_app_files (staticfiles_tests.test_management.TestFindStatic)",
                            "test_camelcase_filenames (staticfiles_tests.test_management.TestFindStatic)",
                            "test_filename_with_percent_sign (staticfiles_tests.test_management.TestFindStatic)",
                            "test_nonascii_filenames (staticfiles_tests.test_management.TestFindStatic)",
                            "test_staticfiles_dirs (staticfiles_tests.test_management.TestFindStatic)",
                            "test_staticfiles_dirs_priority (staticfiles_tests.test_management.TestFindStatic)",
                            "test_staticfiles_dirs_subdir (staticfiles_tests.test_management.TestFindStatic)",
                            "test_app_files (staticfiles_tests.test_management.TestCollection)",
                            "test_camelcase_filenames (staticfiles_tests.test_management.TestCollection)",
                            "test_common_ignore_patterns (staticfiles_tests.test_management.TestCollection)",
                            "test_filename_with_percent_sign (staticfiles_tests.test_management.TestCollection)",
                            "test_ignore (staticfiles_tests.test_management.TestCollection)",
                            "test_nonascii_filenames (staticfiles_tests.test_management.TestCollection)",
                            "test_pathlib (staticfiles_tests.test_management.TestCollection)",
                            "test_staticfiles_dirs (staticfiles_tests.test_management.TestCollection)",
                            "test_staticfiles_dirs_priority (staticfiles_tests.test_management.TestCollection)",
                            "test_staticfiles_dirs_subdir (staticfiles_tests.test_management.TestCollection)",
                            "test_app_files (staticfiles_tests.test_management.TestCollectionPathLib)",
                            "test_camelcase_filenames (staticfiles_tests.test_management.TestCollectionPathLib)",
                            "test_common_ignore_patterns (staticfiles_tests.test_management.TestCollectionPathLib)",
                            "test_filename_with_percent_sign (staticfiles_tests.test_management.TestCollectionPathLib)",
                            "test_ignore (staticfiles_tests.test_management.TestCollectionPathLib)",
                            "test_nonascii_filenames (staticfiles_tests.test_management.TestCollectionPathLib)",
                            "test_pathlib (staticfiles_tests.test_management.TestCollectionPathLib)",
                            "test_staticfiles_dirs (staticfiles_tests.test_management.TestCollectionPathLib)",
                            "test_staticfiles_dirs_priority (staticfiles_tests.test_management.TestCollectionPathLib)",
                            "test_staticfiles_dirs_subdir (staticfiles_tests.test_management.TestCollectionPathLib)",
                            "test_missing_settings_dont_prevent_help (staticfiles_tests.test_management.TestCollectionHelpSubcommand)"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "pytest-dev__pytest-11125.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "testing/test_conftest.py::TestConftestValueAccessGlobal::test_value_access_not_existing[global]",
                            "testing/test_conftest.py::TestConftestValueAccessGlobal::test_value_access_by_path[global]",
                            "testing/test_conftest.py::TestConftestValueAccessGlobal::test_value_access_with_confmod[global]",
                            "testing/test_conftest.py::TestConftestValueAccessGlobal::test_value_access_not_existing[inpackage]",
                            "testing/test_conftest.py::TestConftestValueAccessGlobal::test_value_access_by_path[inpackage]",
                            "testing/test_conftest.py::TestConftestValueAccessGlobal::test_value_access_with_confmod[inpackage]",
                            "testing/test_conftest.py::test_conftest_in_nonpkg_with_init",
                            "testing/test_collection.py::test_initial_conftests_with_testpaths",
                            "testing/test_conftest.py::test_doubledash_considered",
                            "testing/test_conftest.py::test_issue151_load_all_conftests",
                            "testing/test_conftest.py::test_conftestcutdir",
                            "testing/test_conftest.py::test_conftestcutdir_inplace_considered",
                            "testing/test_conftest.py::test_setinitial_conftest_subdirs[test]",
                            "testing/test_conftest.py::test_setinitial_conftest_subdirs[tests]",
                            "testing/test_conftest.py::test_setinitial_conftest_subdirs[whatever]",
                            "testing/test_conftest.py::test_setinitial_conftest_subdirs[.dotdir]"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "testing/test_collection.py::TestCollector::test_collect_versus_item",
                            "testing/test_conftest.py::TestConftestValueAccessGlobal::test_basic_init[global]",
                            "testing/test_conftest.py::TestConftestValueAccessGlobal::test_immediate_initialiation_and_incremental_are_the_same[global]",
                            "testing/test_conftest.py::TestConftestValueAccessGlobal::test_basic_init[inpackage]",
                            "testing/test_conftest.py::TestConftestValueAccessGlobal::test_immediate_initialiation_and_incremental_are_the_same[inpackage]",
                            "testing/test_collection.py::TestCollector::test_check_equality",
                            "testing/test_collection.py::TestCollector::test_getparent_and_accessors",
                            "testing/test_collection.py::TestCollector::test_getcustomfile_roundtrip",
                            "testing/test_collection.py::TestCollector::test_can_skip_class_with_test_attr",
                            "testing/test_collection.py::TestCollectFS::test_ignored_certain_directories",
                            "testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs[activate]",
                            "testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs[activate.csh]",
                            "testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs[activate.fish]",
                            "testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs[Activate]",
                            "testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs[Activate.bat]",
                            "testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs[Activate.ps1]",
                            "testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs_norecursedirs_precedence[activate]",
                            "testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs_norecursedirs_precedence[activate.csh]",
                            "testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs_norecursedirs_precedence[activate.fish]",
                            "testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs_norecursedirs_precedence[Activate]",
                            "testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs_norecursedirs_precedence[Activate.bat]",
                            "testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs_norecursedirs_precedence[Activate.ps1]",
                            "testing/test_collection.py::TestCollectFS::test__in_venv[activate]",
                            "testing/test_collection.py::TestCollectFS::test__in_venv[activate.csh]",
                            "testing/test_collection.py::TestCollectFS::test__in_venv[activate.fish]",
                            "testing/test_collection.py::TestCollectFS::test__in_venv[Activate]",
                            "testing/test_collection.py::TestCollectFS::test__in_venv[Activate.bat]",
                            "testing/test_collection.py::TestCollectFS::test__in_venv[Activate.ps1]",
                            "testing/test_collection.py::TestCollectFS::test_custom_norecursedirs",
                            "testing/test_collection.py::TestCollectFS::test_testpaths_ini",
                            "testing/test_collection.py::TestCollectPluginHookRelay::test_pytest_collect_file",
                            "testing/test_collection.py::TestPrunetraceback::test_custom_repr_failure",
                            "testing/test_collection.py::TestCustomConftests::test_ignore_collect_path",
                            "testing/test_collection.py::TestCustomConftests::test_ignore_collect_not_called_on_argument",
                            "testing/test_collection.py::TestCustomConftests::test_collectignore_exclude_on_option",
                            "testing/test_collection.py::TestCustomConftests::test_collectignoreglob_exclude_on_option",
                            "testing/test_collection.py::TestCustomConftests::test_pytest_fs_collect_hooks_are_seen",
                            "testing/test_collection.py::TestCustomConftests::test_pytest_collect_file_from_sister_dir",
                            "testing/test_collection.py::TestSession::test_collect_topdir",
                            "testing/test_collection.py::TestSession::test_collect_protocol_single_function",
                            "testing/test_collection.py::TestSession::test_collect_protocol_method",
                            "testing/test_collection.py::TestSession::test_collect_custom_nodes_multi_id",
                            "testing/test_collection.py::TestSession::test_collect_subdir_event_ordering",
                            "testing/test_collection.py::TestSession::test_collect_two_commandline_args",
                            "testing/test_collection.py::TestSession::test_serialization_byid",
                            "testing/test_collection.py::TestSession::test_find_byid_without_instance_parents",
                            "testing/test_collection.py::Test_getinitialnodes::test_global_file",
                            "testing/test_collection.py::Test_getinitialnodes::test_pkgfile",
                            "testing/test_collection.py::Test_genitems::test_check_collect_hashes",
                            "testing/test_collection.py::Test_genitems::test_example_items1",
                            "testing/test_collection.py::Test_genitems::test_classmethod_is_discovered",
                            "testing/test_collection.py::Test_genitems::test_class_and_functions_discovery_using_glob",
                            "testing/test_collection.py::test_matchnodes_two_collections_same_file",
                            "testing/test_collection.py::TestNodeKeywords::test_no_under",
                            "testing/test_collection.py::TestNodeKeywords::test_issue345",
                            "testing/test_collection.py::TestNodeKeywords::test_keyword_matching_is_case_insensitive_by_default",
                            "testing/test_collection.py::TestNodeKeywords::test_duplicates_handled_correctly",
                            "testing/test_collection.py::TestNodeKeywords::test_unpacked_marks_added_to_keywords",
                            "testing/test_collection.py::test_exit_on_collection_error",
                            "testing/test_collection.py::test_exit_on_collection_with_maxfail_smaller_than_n_errors",
                            "testing/test_collection.py::test_exit_on_collection_with_maxfail_bigger_than_n_errors",
                            "testing/test_collection.py::test_continue_on_collection_errors",
                            "testing/test_collection.py::test_continue_on_collection_errors_maxfail",
                            "testing/test_collection.py::test_fixture_scope_sibling_conftests",
                            "testing/test_collection.py::test_collect_init_tests",
                            "testing/test_collection.py::test_collect_invalid_signature_message",
                            "testing/test_collection.py::test_collect_handles_raising_on_dunder_class",
                            "testing/test_collection.py::test_collect_with_chdir_during_import",
                            "testing/test_collection.py::test_large_option_breaks_initial_conftests",
                            "testing/test_collection.py::test_collect_symlink_file_arg",
                            "testing/test_collection.py::test_collect_symlink_out_of_tree",
                            "testing/test_collection.py::test_collectignore_via_conftest",
                            "testing/test_collection.py::test_collect_pkg_init_and_file_in_args",
                            "testing/test_collection.py::test_collect_pkg_init_only",
                            "testing/test_collection.py::test_collect_sub_with_symlinks[True]",
                            "testing/test_collection.py::test_collect_sub_with_symlinks[False]",
                            "testing/test_collection.py::test_collector_respects_tbstyle",
                            "testing/test_collection.py::test_does_not_eagerly_collect_packages",
                            "testing/test_collection.py::test_does_not_put_src_on_path",
                            "testing/test_collection.py::test_fscollector_from_parent",
                            "testing/test_collection.py::test_class_from_parent",
                            "testing/test_collection.py::TestImportModeImportlib::test_collect_duplicate_names",
                            "testing/test_collection.py::TestImportModeImportlib::test_conftest",
                            "testing/test_collection.py::TestImportModeImportlib::test_modules_importable_as_side_effect",
                            "testing/test_collection.py::TestImportModeImportlib::test_modules_not_importable_as_side_effect",
                            "testing/test_collection.py::TestImportModeImportlib::test_using_python_path",
                            "testing/test_collection.py::test_does_not_crash_on_error_from_decorated_function",
                            "testing/test_collection.py::test_does_not_crash_on_recursive_symlink",
                            "testing/test_conftest.py::test_conftest_global_import",
                            "testing/test_conftest.py::test_conftest_confcutdir",
                            "testing/test_conftest.py::test_installed_conftest_is_picked_up",
                            "testing/test_conftest.py::test_conftest_symlink",
                            "testing/test_conftest.py::test_conftest_symlink_files",
                            "testing/test_conftest.py::test_conftest_uppercase",
                            "testing/test_conftest.py::test_no_conftest",
                            "testing/test_conftest.py::test_conftest_existing_junitxml",
                            "testing/test_conftest.py::test_conftest_import_order",
                            "testing/test_conftest.py::test_fixture_dependency",
                            "testing/test_conftest.py::test_conftest_found_with_double_dash",
                            "testing/test_conftest.py::TestConftestVisibility::test_parsefactories_relative_node_ids[runner-..-3]",
                            "testing/test_conftest.py::TestConftestVisibility::test_parsefactories_relative_node_ids[package-..-3]",
                            "testing/test_conftest.py::TestConftestVisibility::test_parsefactories_relative_node_ids[swc-../..-3]",
                            "testing/test_conftest.py::TestConftestVisibility::test_parsefactories_relative_node_ids[snc-../..-3]",
                            "testing/test_conftest.py::TestConftestVisibility::test_parsefactories_relative_node_ids[runner-../package-3]",
                            "testing/test_conftest.py::TestConftestVisibility::test_parsefactories_relative_node_ids[package-.-3]",
                            "testing/test_conftest.py::TestConftestVisibility::test_parsefactories_relative_node_ids[swc-..-3]",
                            "testing/test_conftest.py::TestConftestVisibility::test_parsefactories_relative_node_ids[snc-..-3]",
                            "testing/test_conftest.py::TestConftestVisibility::test_parsefactories_relative_node_ids[runner-../package/swc-1]",
                            "testing/test_conftest.py::TestConftestVisibility::test_parsefactories_relative_node_ids[package-./swc-1]",
                            "testing/test_conftest.py::TestConftestVisibility::test_parsefactories_relative_node_ids[swc-.-1]",
                            "testing/test_conftest.py::TestConftestVisibility::test_parsefactories_relative_node_ids[snc-../swc-1]",
                            "testing/test_conftest.py::TestConftestVisibility::test_parsefactories_relative_node_ids[runner-../package/snc-1]",
                            "testing/test_conftest.py::TestConftestVisibility::test_parsefactories_relative_node_ids[package-./snc-1]",
                            "testing/test_conftest.py::TestConftestVisibility::test_parsefactories_relative_node_ids[swc-../snc-1]",
                            "testing/test_conftest.py::TestConftestVisibility::test_parsefactories_relative_node_ids[snc-.-1]",
                            "testing/test_conftest.py::test_search_conftest_up_to_inifile[.-2-0]",
                            "testing/test_conftest.py::test_search_conftest_up_to_inifile[src-1-1]",
                            "testing/test_conftest.py::test_search_conftest_up_to_inifile[None-1-1]",
                            "testing/test_conftest.py::test_issue1073_conftest_special_objects",
                            "testing/test_conftest.py::test_conftest_exception_handling",
                            "testing/test_conftest.py::test_hook_proxy",
                            "testing/test_conftest.py::test_required_option_help",
                            "testing/test_collection.py::test_collect_pyargs_with_testpaths"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "psf__requests-5414.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "tests/test_requests.py::TestRequests::test_invalid_url[InvalidURL-http://.example.com]"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "tests/test_requests.py::TestRequests::test_entry_points",
                            "tests/test_requests.py::TestRequests::test_invalid_url[MissingSchema-hiwpefhipowhefopw]",
                            "tests/test_requests.py::TestRequests::test_invalid_url[InvalidSchema-localhost:3128]",
                            "tests/test_requests.py::TestRequests::test_invalid_url[InvalidSchema-localhost.localdomain:3128/]",
                            "tests/test_requests.py::TestRequests::test_invalid_url[InvalidSchema-10.122.1.1:3128/]",
                            "tests/test_requests.py::TestRequests::test_invalid_url[InvalidURL-http://]",
                            "tests/test_requests.py::TestRequests::test_invalid_url[InvalidURL-http://*example.com]",
                            "tests/test_requests.py::TestRequests::test_basic_building",
                            "tests/test_requests.py::TestRequests::test_path_is_not_double_encoded",
                            "tests/test_requests.py::TestRequests::test_params_are_added_before_fragment[http://example.com/path#fragment-http://example.com/path?a=b#fragment]",
                            "tests/test_requests.py::TestRequests::test_params_are_added_before_fragment[http://example.com/path?key=value#fragment-http://example.com/path?key=value&a=b#fragment]",
                            "tests/test_requests.py::TestRequests::test_params_original_order_is_preserved_by_default",
                            "tests/test_requests.py::TestRequests::test_params_bytes_are_encoded",
                            "tests/test_requests.py::TestRequests::test_binary_put",
                            "tests/test_requests.py::TestRequests::test_whitespaces_are_removed_from_url",
                            "tests/test_requests.py::TestRequests::test_basicauth_encodes_byte_strings",
                            "tests/test_requests.py::TestRequests::test_errors[http://doesnotexist.google.com-ConnectionError]",
                            "tests/test_requests.py::TestRequests::test_errors[http://localhost:1-ConnectionError]",
                            "tests/test_requests.py::TestRequests::test_errors[http://fe80::5054:ff:fe5a:fc0-InvalidURL]",
                            "tests/test_requests.py::TestRequests::test_proxy_error",
                            "tests/test_requests.py::TestRequests::test_non_prepared_request_error",
                            "tests/test_requests.py::TestRequests::test_prepare_request_with_bytestring_url",
                            "tests/test_requests.py::TestRequests::test_links",
                            "tests/test_requests.py::TestRequests::test_cookie_parameters",
                            "tests/test_requests.py::TestRequests::test_cookie_as_dict_keeps_len",
                            "tests/test_requests.py::TestRequests::test_cookie_as_dict_keeps_items",
                            "tests/test_requests.py::TestRequests::test_cookie_as_dict_keys",
                            "tests/test_requests.py::TestRequests::test_cookie_as_dict_values",
                            "tests/test_requests.py::TestRequests::test_cookie_as_dict_items",
                            "tests/test_requests.py::TestRequests::test_cookie_duplicate_names_different_domains",
                            "tests/test_requests.py::TestRequests::test_cookie_duplicate_names_raises_cookie_conflict_error",
                            "tests/test_requests.py::TestRequests::test_cookie_policy_copy",
                            "tests/test_requests.py::TestRequests::test_empty_response_has_content_none",
                            "tests/test_requests.py::TestRequests::test_response_is_iterable",
                            "tests/test_requests.py::TestRequests::test_response_decode_unicode",
                            "tests/test_requests.py::TestRequests::test_response_reason_unicode",
                            "tests/test_requests.py::TestRequests::test_response_reason_unicode_fallback",
                            "tests/test_requests.py::TestRequests::test_response_chunk_size_type",
                            "tests/test_requests.py::TestRequests::test_http_error",
                            "tests/test_requests.py::TestRequests::test_transport_adapter_ordering",
                            "tests/test_requests.py::TestRequests::test_session_get_adapter_prefix_matching",
                            "tests/test_requests.py::TestRequests::test_session_get_adapter_prefix_matching_mixed_case",
                            "tests/test_requests.py::TestRequests::test_session_get_adapter_prefix_matching_is_case_insensitive",
                            "tests/test_requests.py::TestRequests::test_long_authinfo_in_url",
                            "tests/test_requests.py::TestRequests::test_nonhttp_schemes_dont_check_URLs",
                            "tests/test_requests.py::TestRequests::test_should_strip_auth_host_change",
                            "tests/test_requests.py::TestRequests::test_should_strip_auth_http_downgrade",
                            "tests/test_requests.py::TestRequests::test_should_strip_auth_https_upgrade",
                            "tests/test_requests.py::TestRequests::test_should_strip_auth_port_change",
                            "tests/test_requests.py::TestRequests::test_should_strip_auth_default_port[https://example.com:443/foo-https://example.com/bar]",
                            "tests/test_requests.py::TestRequests::test_should_strip_auth_default_port[http://example.com:80/foo-http://example.com/bar]",
                            "tests/test_requests.py::TestRequests::test_should_strip_auth_default_port[https://example.com/foo-https://example.com:443/bar]",
                            "tests/test_requests.py::TestRequests::test_should_strip_auth_default_port[http://example.com/foo-http://example.com:80/bar]",
                            "tests/test_requests.py::TestRequests::test_prepare_body_position_non_stream",
                            "tests/test_requests.py::TestRequests::test_rewind_body",
                            "tests/test_requests.py::TestRequests::test_rewind_partially_read_body",
                            "tests/test_requests.py::TestRequests::test_rewind_body_no_seek",
                            "tests/test_requests.py::TestRequests::test_rewind_body_failed_seek",
                            "tests/test_requests.py::TestRequests::test_rewind_body_failed_tell",
                            "tests/test_requests.py::TestRequests::test_basic_auth_str_is_always_native[test-test-Basic",
                            "tests/test_requests.py::TestRequests::test_basic_auth_str_is_always_native[\\xd0\\xb8\\xd0\\xbc\\xd1\\x8f-\\xd0\\xbf\\xd0\\xb0\\xd1\\x80\\xd0\\xbe\\xd0\\xbb\\xd1\\x8c-Basic",
                            "tests/test_requests.py::TestRequests::test_proxy_auth",
                            "tests/test_requests.py::TestRequests::test_proxy_auth_empty_pass",
                            "tests/test_requests.py::TestRequests::test_response_without_release_conn",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_init[cid0]",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_init[cid1]",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_init[cid2]",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_docstring_example",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_len",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_getitem",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_fixes_649",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_delitem",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_contains",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_get",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_update",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_update_retains_unchanged",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_iter",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_equality",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_setdefault",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_lower_items",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_preserve_key_case",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_preserve_last_key_case",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_copy",
                            "tests/test_requests.py::TestMorselToCookieExpires::test_expires_valid_str",
                            "tests/test_requests.py::TestMorselToCookieExpires::test_expires_invalid_int[100-TypeError]",
                            "tests/test_requests.py::TestMorselToCookieExpires::test_expires_invalid_int[woops-ValueError]",
                            "tests/test_requests.py::TestMorselToCookieExpires::test_expires_none",
                            "tests/test_requests.py::TestMorselToCookieMaxAge::test_max_age_valid_int",
                            "tests/test_requests.py::TestMorselToCookieMaxAge::test_max_age_invalid_str",
                            "tests/test_requests.py::TestTimeout::test_connect_timeout[timeout0]",
                            "tests/test_requests.py::TestTimeout::test_connect_timeout[timeout1]",
                            "tests/test_requests.py::TestTimeout::test_total_timeout_connect[timeout0]",
                            "tests/test_requests.py::TestTimeout::test_total_timeout_connect[timeout1]",
                            "tests/test_requests.py::test_json_encodes_as_bytes",
                            "tests/test_requests.py::test_proxy_env_vars_override_default[http_proxy-http://example.com-socks5://proxy.com:9876]",
                            "tests/test_requests.py::test_proxy_env_vars_override_default[https_proxy-https://example.com-socks5://proxy.com:9876]",
                            "tests/test_requests.py::test_proxy_env_vars_override_default[all_proxy-http://example.com-socks5://proxy.com:9876]",
                            "tests/test_requests.py::test_proxy_env_vars_override_default[all_proxy-https://example.com-socks5://proxy.com:9876]",
                            "tests/test_requests.py::test_data_argument_accepts_tuples[data0]",
                            "tests/test_requests.py::test_data_argument_accepts_tuples[data1]",
                            "tests/test_requests.py::test_data_argument_accepts_tuples[data2]",
                            "tests/test_requests.py::test_prepared_copy[None]",
                            "tests/test_requests.py::test_prepared_copy[kwargs1]",
                            "tests/test_requests.py::test_prepared_copy[kwargs2]",
                            "tests/test_requests.py::test_prepared_copy[kwargs3]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://google.com-http://google.com/]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://\\u30b8\\u30a7\\u30fc\\u30d4\\u30fc\\u30cb\\u30c3\\u30af.jp-http://xn--hckqz9bzb1cyrb.jp/]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://xn--n3h.net/-http://xn--n3h.net/0]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://\\xe3\\x82\\xb8\\xe3\\x82\\xa7\\xe3\\x83\\xbc\\xe3\\x83\\x94\\xe3\\x83\\xbc\\xe3\\x83\\x8b\\xe3\\x83\\x83\\xe3\\x82\\xaf.jp-http://xn--hckqz9bzb1cyrb.jp/]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://stra\\xdfe.de/stra\\xdfe-http://xn--strae-oqa.de/stra%C3%9Fe]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://stra\\xc3\\x9fe.de/stra\\xc3\\x9fe-http://xn--strae-oqa.de/stra%C3%9Fe]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://K\\xf6nigsg\\xe4\\xdfchen.de/stra\\xdfe-http://xn--knigsgchen-b4a3dun.de/stra%C3%9Fe]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://K\\xc3\\xb6nigsg\\xc3\\xa4\\xc3\\x9fchen.de/stra\\xc3\\x9fe-http://xn--knigsgchen-b4a3dun.de/stra%C3%9Fe]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://xn--n3h.net/-http://xn--n3h.net/1]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://[1200:0000:ab00:1234:0000:2552:7777:1313]:12345/-http://[1200:0000:ab00:1234:0000:2552:7777:1313]:12345/0]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://[1200:0000:ab00:1234:0000:2552:7777:1313]:12345/-http://[1200:0000:ab00:1234:0000:2552:7777:1313]:12345/1]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_bad_url[http://*.google.com0]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_bad_url[http://*0]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_bad_url[http://*.google.com1]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_bad_url[http://*1]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_bad_url[http://\\u2603.net/]",
                            "tests/test_requests.py::TestPreparingURLs::test_url_mutation[http+unix://%2Fvar%2Frun%2Fsocket/path%7E-http+unix://%2Fvar%2Frun%2Fsocket/path~0]",
                            "tests/test_requests.py::TestPreparingURLs::test_url_mutation[http+unix://%2Fvar%2Frun%2Fsocket/path%7E-http+unix://%2Fvar%2Frun%2Fsocket/path~1]",
                            "tests/test_requests.py::TestPreparingURLs::test_url_mutation[mailto:user@example.org-mailto:user@example.org0]",
                            "tests/test_requests.py::TestPreparingURLs::test_url_mutation[mailto:user@example.org-mailto:user@example.org1]",
                            "tests/test_requests.py::TestPreparingURLs::test_url_mutation[data:SSDimaUgUHl0aG9uIQ==-data:SSDimaUgUHl0aG9uIQ==]",
                            "tests/test_requests.py::TestPreparingURLs::test_parameters_for_nonstandard_schemes[http+unix://%2Fvar%2Frun%2Fsocket/path-params0-http+unix://%2Fvar%2Frun%2Fsocket/path?key=value]",
                            "tests/test_requests.py::TestPreparingURLs::test_parameters_for_nonstandard_schemes[http+unix://%2Fvar%2Frun%2Fsocket/path-params1-http+unix://%2Fvar%2Frun%2Fsocket/path?key=value]",
                            "tests/test_requests.py::TestPreparingURLs::test_parameters_for_nonstandard_schemes[mailto:user@example.org-params2-mailto:user@example.org]",
                            "tests/test_requests.py::TestPreparingURLs::test_parameters_for_nonstandard_schemes[mailto:user@example.org-params3-mailto:user@example.org]"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "sphinx-doc__sphinx-8282.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "tests/test_ext_autodoc_configs.py::test_autodoc_typehints_none_for_overload"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "tests/test_ext_autodoc_configs.py::test_autoclass_content_class",
                            "tests/test_ext_autodoc_configs.py::test_autoclass_content_init",
                            "tests/test_ext_autodoc_configs.py::test_autoclass_content_both",
                            "tests/test_ext_autodoc_configs.py::test_autodoc_inherit_docstrings",
                            "tests/test_ext_autodoc_configs.py::test_autodoc_docstring_signature",
                            "tests/test_ext_autodoc_configs.py::test_autoclass_content_and_docstring_signature_class",
                            "tests/test_ext_autodoc_configs.py::test_autoclass_content_and_docstring_signature_init",
                            "tests/test_ext_autodoc_configs.py::test_autoclass_content_and_docstring_signature_both",
                            "tests/test_ext_autodoc_configs.py::test_mocked_module_imports",
                            "tests/test_ext_autodoc_configs.py::test_autodoc_typehints_signature",
                            "tests/test_ext_autodoc_configs.py::test_autodoc_typehints_none",
                            "tests/test_ext_autodoc_configs.py::test_autodoc_typehints_description",
                            "tests/test_ext_autodoc_configs.py::test_autodoc_typehints_description_for_invalid_node",
                            "tests/test_ext_autodoc_configs.py::test_autodoc_type_aliases",
                            "tests/test_ext_autodoc_configs.py::test_autodoc_default_options",
                            "tests/test_ext_autodoc_configs.py::test_autodoc_default_options_with_values"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "pylint-dev__pylint-5231.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_args_without_type_numpy"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_missing_func_params_in_sphinx_docstring",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_missing_func_params_in_google_docstring",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_missing_type_doc_google_docstring_exempt_kwonly_args",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_missing_func_params_with_annotations_in_google_docstring",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_default_arg_with_annotations_in_google_docstring",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_missing_func_params_with_partial_annotations_in_google_docstring",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_non_builtin_annotations_in_google_docstring",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_non_builtin_annotations_for_returntype_in_google_docstring",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_func_params_and_keyword_params_in_google_docstring",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_func_params_and_wrong_keyword_params_in_google_docstring",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_missing_func_params_in_numpy_docstring",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_tolerate_no_param_documentation_at_all",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_don_t_tolerate_no_param_documentation_at_all",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_see_tolerate_no_param_documentation_at_all",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_missing_method_params_in_sphinx_docstring",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_missing_method_params_in_google_docstring",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_missing_method_params_in_numpy_docstring",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_existing_func_params_in_sphinx_docstring",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_existing_func_params_in_google_docstring",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_existing_func_params_in_numpy_docstring",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_wrong_name_of_func_params_in_sphinx_docstring",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_wrong_name_of_func_params_in_google_docstring",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_wrong_name_of_func_params_in_numpy_docstring",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_see_sentence_for_func_params_in_sphinx_docstring",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_see_sentence_for_func_params_in_google_docstring",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_see_sentence_for_func_params_in_numpy_docstring",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_constr_params_in_class_sphinx",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_constr_params_in_class_google",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_constr_params_in_class_numpy",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_constr_params_and_attributes_in_class_numpy",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_constr_params_in_init_sphinx",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_constr_params_in_init_google",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_constr_params_in_init_numpy",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_see_sentence_for_constr_params_in_class",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_see_sentence_for_constr_params_in_init",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_constr_params_in_class_and_init_sphinx",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_constr_params_in_class_and_init_google",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_constr_params_in_class_and_init_numpy",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_kwonlyargs_are_taken_in_account",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_warns_missing_args_sphinx",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_warns_missing_kwargs_sphinx",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_warns_missing_args_google",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_warns_missing_kwargs_google",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_warns_missing_args_numpy",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_warns_missing_kwargs_numpy",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_args_without_type_sphinx",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_kwargs_without_type_sphinx",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_args_without_type_google",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_kwargs_without_type_google",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_args_with_xref_type_google",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_args_with_xref_type_numpy",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_kwargs_without_type_numpy",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_sphinx[dict(str,str)]",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_sphinx[dict[str,str]]",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_sphinx[tuple(int)]",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_sphinx[list[tokenize.TokenInfo]]",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_sphinx[dict(str,",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_sphinx[dict[str,",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_sphinx[int",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_sphinx[tuple(int",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_sphinx[tuple(int)",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_google[dict(str,str)]",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_google[dict[str,str]]",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_google[tuple(int)]",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_google[list[tokenize.TokenInfo]]",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_google[dict(str,",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_google[dict[str,",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_google[int",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_google[tuple(int",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_google[tuple(int)",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_numpy[dict(str,str)]",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_numpy[dict[str,str]]",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_numpy[tuple(int)]",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_numpy[list[tokenize.TokenInfo]]",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_numpy[dict(str,",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_numpy[dict[str,",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_numpy[int",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_numpy[tuple(int",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_numpy[tuple(int)",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_compact_container_types_sphinx[dict(str,str)]",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_compact_container_types_sphinx[dict[str,str]]",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_compact_container_types_sphinx[tuple(int)]",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_compact_container_types_sphinx[list[tokenize.TokenInfo]]",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_ignores_optional_specifier_google",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_ignores_optional_specifier_numpy",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_short_name_exception",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_missing_raises_from_setter_sphinx",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_missing_raises_from_setter_google",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_missing_raises_from_setter_numpy",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_missing_raises_in_setter_sphinx",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_missing_raises_from_setter_google_2",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_missing_raises_from_setter_numpy_2",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_property_return_type_sphinx",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_property_return_type_google",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_property_return_type_numpy",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_annotation_property_return_type_sphinx",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_missing_property_return_type_sphinx",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_annotation_property_return_type_google",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_missing_property_return_type_google",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_missing_property_return_type_numpy",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_ignores_non_property_return_type_sphinx",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_ignores_non_property_return_type_google",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_ignores_non_property_return_type_numpy",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_non_property_annotation_return_type_numpy",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_ignores_return_in_abstract_method_sphinx",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_ignores_return_in_abstract_method_google",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_ignores_return_in_abstract_method_numpy",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_ignores_raise_notimplementederror_sphinx",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_ignores_return_in_abstract_method_google_2",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_ignores_return_in_abstract_method_numpy_2",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_ignores_ignored_argument_names_sphinx",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_ignores_ignored_argument_names_google",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_ignores_ignored_argument_names_numpy",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_useless_docs_ignored_argument_names_sphinx",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_useless_docs_ignored_argument_names_google",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_useless_docs_ignored_argument_names_numpy",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_skip_no_docstring_rgx",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_all_docstring_rgx",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_fail_empty_docstring_rgx",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_fail_docparams_check_init",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_no_docstring_rgx",
                            "tests/extensions/test_check_docs.py::TestParamDocChecker::test_skip_docstring_min_length"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "sympy__sympy-12812.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "test_products",
                            "test_helpers_and_coordinate_dependent"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "test_point",
                            "test_commutator",
                            "test_differential",
                            "test_lie_derivative",
                            "test_correct_arguments"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "mwaskom__seaborn-3407.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "tests/test_axisgrid.py::TestPairGrid::test_pairplot_column_multiindex"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "tests/test_axisgrid.py::TestFacetGrid::test_self_data",
                            "tests/test_axisgrid.py::TestFacetGrid::test_self_figure",
                            "tests/test_axisgrid.py::TestFacetGrid::test_self_axes",
                            "tests/test_axisgrid.py::TestFacetGrid::test_axes_array_size",
                            "tests/test_axisgrid.py::TestFacetGrid::test_single_axes",
                            "tests/test_axisgrid.py::TestFacetGrid::test_col_wrap",
                            "tests/test_axisgrid.py::TestFacetGrid::test_normal_axes",
                            "tests/test_axisgrid.py::TestFacetGrid::test_wrapped_axes",
                            "tests/test_axisgrid.py::TestFacetGrid::test_axes_dict",
                            "tests/test_axisgrid.py::TestFacetGrid::test_figure_size",
                            "tests/test_axisgrid.py::TestFacetGrid::test_figure_size_with_legend",
                            "tests/test_axisgrid.py::TestFacetGrid::test_legend_data",
                            "tests/test_axisgrid.py::TestFacetGrid::test_legend_data_missing_level",
                            "tests/test_axisgrid.py::TestFacetGrid::test_get_boolean_legend_data",
                            "tests/test_axisgrid.py::TestFacetGrid::test_legend_tuples",
                            "tests/test_axisgrid.py::TestFacetGrid::test_legend_options",
                            "tests/test_axisgrid.py::TestFacetGrid::test_legendout_with_colwrap",
                            "tests/test_axisgrid.py::TestFacetGrid::test_legend_tight_layout",
                            "tests/test_axisgrid.py::TestFacetGrid::test_subplot_kws",
                            "tests/test_axisgrid.py::TestFacetGrid::test_gridspec_kws",
                            "tests/test_axisgrid.py::TestFacetGrid::test_gridspec_kws_col_wrap",
                            "tests/test_axisgrid.py::TestFacetGrid::test_data_generator",
                            "tests/test_axisgrid.py::TestFacetGrid::test_map",
                            "tests/test_axisgrid.py::TestFacetGrid::test_map_dataframe",
                            "tests/test_axisgrid.py::TestFacetGrid::test_set",
                            "tests/test_axisgrid.py::TestFacetGrid::test_set_titles",
                            "tests/test_axisgrid.py::TestFacetGrid::test_set_titles_margin_titles",
                            "tests/test_axisgrid.py::TestFacetGrid::test_set_ticklabels",
                            "tests/test_axisgrid.py::TestFacetGrid::test_set_axis_labels",
                            "tests/test_axisgrid.py::TestFacetGrid::test_axis_lims",
                            "tests/test_axisgrid.py::TestFacetGrid::test_data_orders",
                            "tests/test_axisgrid.py::TestFacetGrid::test_palette",
                            "tests/test_axisgrid.py::TestFacetGrid::test_hue_kws",
                            "tests/test_axisgrid.py::TestFacetGrid::test_dropna",
                            "tests/test_axisgrid.py::TestFacetGrid::test_categorical_column_missing_categories",
                            "tests/test_axisgrid.py::TestFacetGrid::test_categorical_warning",
                            "tests/test_axisgrid.py::TestFacetGrid::test_refline",
                            "tests/test_axisgrid.py::TestFacetGrid::test_apply",
                            "tests/test_axisgrid.py::TestFacetGrid::test_pipe",
                            "tests/test_axisgrid.py::TestFacetGrid::test_tick_params",
                            "tests/test_axisgrid.py::TestPairGrid::test_self_data",
                            "tests/test_axisgrid.py::TestPairGrid::test_ignore_datelike_data",
                            "tests/test_axisgrid.py::TestPairGrid::test_self_figure",
                            "tests/test_axisgrid.py::TestPairGrid::test_self_axes",
                            "tests/test_axisgrid.py::TestPairGrid::test_default_axes",
                            "tests/test_axisgrid.py::TestPairGrid::test_specific_square_axes[vars0]",
                            "tests/test_axisgrid.py::TestPairGrid::test_specific_square_axes[vars1]",
                            "tests/test_axisgrid.py::TestPairGrid::test_remove_hue_from_default",
                            "tests/test_axisgrid.py::TestPairGrid::test_specific_nonsquare_axes[x_vars0-y_vars0]",
                            "tests/test_axisgrid.py::TestPairGrid::test_specific_nonsquare_axes[x_vars1-z]",
                            "tests/test_axisgrid.py::TestPairGrid::test_specific_nonsquare_axes[x_vars2-y_vars2]",
                            "tests/test_axisgrid.py::TestPairGrid::test_corner",
                            "tests/test_axisgrid.py::TestPairGrid::test_size",
                            "tests/test_axisgrid.py::TestPairGrid::test_empty_grid",
                            "tests/test_axisgrid.py::TestPairGrid::test_map",
                            "tests/test_axisgrid.py::TestPairGrid::test_map_nonsquare",
                            "tests/test_axisgrid.py::TestPairGrid::test_map_lower",
                            "tests/test_axisgrid.py::TestPairGrid::test_map_upper",
                            "tests/test_axisgrid.py::TestPairGrid::test_map_mixed_funcsig",
                            "tests/test_axisgrid.py::TestPairGrid::test_map_diag",
                            "tests/test_axisgrid.py::TestPairGrid::test_map_diag_rectangular",
                            "tests/test_axisgrid.py::TestPairGrid::test_map_diag_color",
                            "tests/test_axisgrid.py::TestPairGrid::test_map_diag_palette",
                            "tests/test_axisgrid.py::TestPairGrid::test_map_diag_and_offdiag",
                            "tests/test_axisgrid.py::TestPairGrid::test_diag_sharey",
                            "tests/test_axisgrid.py::TestPairGrid::test_map_diag_matplotlib",
                            "tests/test_axisgrid.py::TestPairGrid::test_palette",
                            "tests/test_axisgrid.py::TestPairGrid::test_hue_kws",
                            "tests/test_axisgrid.py::TestPairGrid::test_hue_order",
                            "tests/test_axisgrid.py::TestPairGrid::test_hue_order_missing_level",
                            "tests/test_axisgrid.py::TestPairGrid::test_hue_in_map",
                            "tests/test_axisgrid.py::TestPairGrid::test_nondefault_index",
                            "tests/test_axisgrid.py::TestPairGrid::test_dropna[scatterplot]",
                            "tests/test_axisgrid.py::TestPairGrid::test_dropna[scatter]",
                            "tests/test_axisgrid.py::TestPairGrid::test_histplot_legend",
                            "tests/test_axisgrid.py::TestPairGrid::test_pairplot",
                            "tests/test_axisgrid.py::TestPairGrid::test_pairplot_reg",
                            "tests/test_axisgrid.py::TestPairGrid::test_pairplot_reg_hue",
                            "tests/test_axisgrid.py::TestPairGrid::test_pairplot_diag_kde",
                            "tests/test_axisgrid.py::TestPairGrid::test_pairplot_kde",
                            "tests/test_axisgrid.py::TestPairGrid::test_pairplot_hist",
                            "tests/test_axisgrid.py::TestPairGrid::test_pairplot_markers",
                            "tests/test_axisgrid.py::TestPairGrid::test_corner_despine",
                            "tests/test_axisgrid.py::TestPairGrid::test_corner_set",
                            "tests/test_axisgrid.py::TestPairGrid::test_legend",
                            "tests/test_axisgrid.py::TestPairGrid::test_tick_params",
                            "tests/test_axisgrid.py::TestJointGrid::test_margin_grid_from_lists",
                            "tests/test_axisgrid.py::TestJointGrid::test_margin_grid_from_arrays",
                            "tests/test_axisgrid.py::TestJointGrid::test_margin_grid_from_series",
                            "tests/test_axisgrid.py::TestJointGrid::test_margin_grid_from_dataframe",
                            "tests/test_axisgrid.py::TestJointGrid::test_margin_grid_from_dataframe_bad_variable",
                            "tests/test_axisgrid.py::TestJointGrid::test_margin_grid_axis_labels",
                            "tests/test_axisgrid.py::TestJointGrid::test_dropna",
                            "tests/test_axisgrid.py::TestJointGrid::test_axlims",
                            "tests/test_axisgrid.py::TestJointGrid::test_marginal_ticks",
                            "tests/test_axisgrid.py::TestJointGrid::test_bivariate_plot",
                            "tests/test_axisgrid.py::TestJointGrid::test_univariate_plot",
                            "tests/test_axisgrid.py::TestJointGrid::test_univariate_plot_distplot",
                            "tests/test_axisgrid.py::TestJointGrid::test_univariate_plot_matplotlib",
                            "tests/test_axisgrid.py::TestJointGrid::test_plot",
                            "tests/test_axisgrid.py::TestJointGrid::test_space",
                            "tests/test_axisgrid.py::TestJointGrid::test_hue[True]",
                            "tests/test_axisgrid.py::TestJointGrid::test_hue[False]",
                            "tests/test_axisgrid.py::TestJointGrid::test_refline",
                            "tests/test_axisgrid.py::TestJointPlot::test_scatter",
                            "tests/test_axisgrid.py::TestJointPlot::test_scatter_hue",
                            "tests/test_axisgrid.py::TestJointPlot::test_reg",
                            "tests/test_axisgrid.py::TestJointPlot::test_resid",
                            "tests/test_axisgrid.py::TestJointPlot::test_hist",
                            "tests/test_axisgrid.py::TestJointPlot::test_hex",
                            "tests/test_axisgrid.py::TestJointPlot::test_kde",
                            "tests/test_axisgrid.py::TestJointPlot::test_kde_hue",
                            "tests/test_axisgrid.py::TestJointPlot::test_color",
                            "tests/test_axisgrid.py::TestJointPlot::test_palette",
                            "tests/test_axisgrid.py::TestJointPlot::test_hex_customise",
                            "tests/test_axisgrid.py::TestJointPlot::test_bad_kind",
                            "tests/test_axisgrid.py::TestJointPlot::test_unsupported_hue_kind",
                            "tests/test_axisgrid.py::TestJointPlot::test_leaky_dict",
                            "tests/test_axisgrid.py::TestJointPlot::test_distplot_kwarg_warning",
                            "tests/test_axisgrid.py::TestJointPlot::test_ax_warning"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "pytest-dev__pytest-8124.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "testing/test_skipping.py::TestEvaluation::test_skipif_markeval_namespace",
                            "testing/test_skipping.py::TestEvaluation::test_skipif_markeval_namespace_multiple",
                            "testing/test_skipping.py::TestEvaluation::test_skipif_markeval_namespace_ValueError",
                            "testing/test_skipping.py::TestXFail::test_xfail_markeval_namespace"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "testing/test_skipping.py::test_importorskip",
                            "testing/test_skipping.py::TestEvaluation::test_no_marker",
                            "testing/test_skipping.py::TestEvaluation::test_marked_xfail_no_args",
                            "testing/test_skipping.py::TestEvaluation::test_marked_skipif_no_args",
                            "testing/test_skipping.py::TestEvaluation::test_marked_one_arg",
                            "testing/test_skipping.py::TestEvaluation::test_marked_one_arg_with_reason",
                            "testing/test_skipping.py::TestEvaluation::test_marked_one_arg_twice",
                            "testing/test_skipping.py::TestEvaluation::test_marked_one_arg_twice2",
                            "testing/test_skipping.py::TestEvaluation::test_marked_skipif_with_boolean_without_reason",
                            "testing/test_skipping.py::TestEvaluation::test_marked_skipif_with_invalid_boolean",
                            "testing/test_skipping.py::TestEvaluation::test_skipif_class",
                            "testing/test_skipping.py::TestXFail::test_xfail_simple[True]",
                            "testing/test_skipping.py::TestXFail::test_xfail_simple[False]",
                            "testing/test_skipping.py::TestXFail::test_xfail_xpassed",
                            "testing/test_skipping.py::TestXFail::test_xfail_using_platform",
                            "testing/test_skipping.py::TestXFail::test_xfail_xpassed_strict",
                            "testing/test_skipping.py::TestXFail::test_xfail_run_anyway",
                            "testing/test_skipping.py::TestXFail::test_xfail_run_with_skip_mark[test_input0-expected0]",
                            "testing/test_skipping.py::TestXFail::test_xfail_run_with_skip_mark[test_input1-expected1]",
                            "testing/test_skipping.py::TestXFail::test_xfail_evalfalse_but_fails",
                            "testing/test_skipping.py::TestXFail::test_xfail_not_report_default",
                            "testing/test_skipping.py::TestXFail::test_xfail_not_run_xfail_reporting",
                            "testing/test_skipping.py::TestXFail::test_xfail_not_run_no_setup_run",
                            "testing/test_skipping.py::TestXFail::test_xfail_xpass",
                            "testing/test_skipping.py::TestXFail::test_xfail_imperative",
                            "testing/test_skipping.py::TestXFail::test_xfail_imperative_in_setup_function",
                            "testing/test_skipping.py::TestXFail::test_dynamic_xfail_no_run",
                            "testing/test_skipping.py::TestXFail::test_dynamic_xfail_set_during_funcarg_setup",
                            "testing/test_skipping.py::TestXFail::test_dynamic_xfail_set_during_runtest_failed",
                            "testing/test_skipping.py::TestXFail::test_dynamic_xfail_set_during_runtest_passed_strict",
                            "testing/test_skipping.py::TestXFail::test_xfail_raises[TypeError-TypeError-*1",
                            "testing/test_skipping.py::TestXFail::test_xfail_raises[(AttributeError,",
                            "testing/test_skipping.py::TestXFail::test_xfail_raises[TypeError-IndexError-*1",
                            "testing/test_skipping.py::TestXFail::test_strict_sanity",
                            "testing/test_skipping.py::TestXFail::test_strict_xfail[True]",
                            "testing/test_skipping.py::TestXFail::test_strict_xfail[False]",
                            "testing/test_skipping.py::TestXFail::test_strict_xfail_condition[True]",
                            "testing/test_skipping.py::TestXFail::test_strict_xfail_condition[False]",
                            "testing/test_skipping.py::TestXFail::test_xfail_condition_keyword[True]",
                            "testing/test_skipping.py::TestXFail::test_xfail_condition_keyword[False]",
                            "testing/test_skipping.py::TestXFail::test_strict_xfail_default_from_file[true]",
                            "testing/test_skipping.py::TestXFail::test_strict_xfail_default_from_file[false]",
                            "testing/test_skipping.py::TestXFailwithSetupTeardown::test_failing_setup_issue9",
                            "testing/test_skipping.py::TestXFailwithSetupTeardown::test_failing_teardown_issue9",
                            "testing/test_skipping.py::TestSkip::test_skip_class",
                            "testing/test_skipping.py::TestSkip::test_skips_on_false_string",
                            "testing/test_skipping.py::TestSkip::test_arg_as_reason",
                            "testing/test_skipping.py::TestSkip::test_skip_no_reason",
                            "testing/test_skipping.py::TestSkip::test_skip_with_reason",
                            "testing/test_skipping.py::TestSkip::test_only_skips_marked_test",
                            "testing/test_skipping.py::TestSkip::test_strict_and_skip",
                            "testing/test_skipping.py::TestSkipif::test_skipif_conditional",
                            "testing/test_skipping.py::TestSkipif::test_skipif_reporting[\"hasattr(sys,",
                            "testing/test_skipping.py::TestSkipif::test_skipif_reporting[True,",
                            "testing/test_skipping.py::TestSkipif::test_skipif_using_platform",
                            "testing/test_skipping.py::TestSkipif::test_skipif_reporting_multiple[skipif-SKIP-skipped]",
                            "testing/test_skipping.py::TestSkipif::test_skipif_reporting_multiple[xfail-XPASS-xpassed]",
                            "testing/test_skipping.py::test_skip_not_report_default",
                            "testing/test_skipping.py::test_skipif_class",
                            "testing/test_skipping.py::test_skipped_reasons_functional",
                            "testing/test_skipping.py::test_skipped_folding",
                            "testing/test_skipping.py::test_reportchars",
                            "testing/test_skipping.py::test_reportchars_error",
                            "testing/test_skipping.py::test_reportchars_all",
                            "testing/test_skipping.py::test_reportchars_all_error",
                            "testing/test_skipping.py::test_errors_in_xfail_skip_expressions",
                            "testing/test_skipping.py::test_xfail_skipif_with_globals",
                            "testing/test_skipping.py::test_default_markers",
                            "testing/test_skipping.py::test_xfail_test_setup_exception",
                            "testing/test_skipping.py::test_imperativeskip_on_xfail_test",
                            "testing/test_skipping.py::TestBooleanCondition::test_skipif",
                            "testing/test_skipping.py::TestBooleanCondition::test_skipif_noreason",
                            "testing/test_skipping.py::TestBooleanCondition::test_xfail",
                            "testing/test_skipping.py::test_xfail_item",
                            "testing/test_skipping.py::test_module_level_skip_error",
                            "testing/test_skipping.py::test_module_level_skip_with_allow_module_level",
                            "testing/test_skipping.py::test_invalid_skip_keyword_parameter",
                            "testing/test_skipping.py::test_mark_xfail_item",
                            "testing/test_skipping.py::test_summary_list_after_errors",
                            "testing/test_skipping.py::test_relpath_rootdir"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "pylint-dev__pylint-8312.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "tests/lint/unittest_lint.py::test_globbing",
                            "tests/test_self.py::TestRunTC::test_recursive_globbing"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "tests/lint/unittest_lint.py::test_deprecated",
                            "tests/lint/unittest_lint.py::test_no_args",
                            "tests/lint/unittest_lint.py::test_one_arg[case0]",
                            "tests/lint/unittest_lint.py::test_one_arg[case1]",
                            "tests/lint/unittest_lint.py::test_one_arg[case2]",
                            "tests/lint/unittest_lint.py::test_one_arg[case3]",
                            "tests/lint/unittest_lint.py::test_one_arg[case4]",
                            "tests/lint/unittest_lint.py::test_two_similar_args[case0]",
                            "tests/lint/unittest_lint.py::test_two_similar_args[case1]",
                            "tests/lint/unittest_lint.py::test_two_similar_args[case2]",
                            "tests/lint/unittest_lint.py::test_two_similar_args[case3]",
                            "tests/lint/unittest_lint.py::test_more_args[case0]",
                            "tests/lint/unittest_lint.py::test_more_args[case1]",
                            "tests/lint/unittest_lint.py::test_more_args[case2]",
                            "tests/lint/unittest_lint.py::test_pylint_visit_method_taken_in_account",
                            "tests/lint/unittest_lint.py::test_enable_message",
                            "tests/lint/unittest_lint.py::test_enable_message_category",
                            "tests/lint/unittest_lint.py::test_message_state_scope",
                            "tests/lint/unittest_lint.py::test_enable_message_block",
                            "tests/lint/unittest_lint.py::test_enable_by_symbol",
                            "tests/lint/unittest_lint.py::test_enable_report",
                            "tests/lint/unittest_lint.py::test_report_output_format_aliased",
                            "tests/lint/unittest_lint.py::test_set_unsupported_reporter",
                            "tests/lint/unittest_lint.py::test_set_option_1",
                            "tests/lint/unittest_lint.py::test_set_option_2",
                            "tests/lint/unittest_lint.py::test_enable_checkers",
                            "tests/lint/unittest_lint.py::test_errors_only",
                            "tests/lint/unittest_lint.py::test_disable_similar",
                            "tests/lint/unittest_lint.py::test_disable_alot",
                            "tests/lint/unittest_lint.py::test_addmessage",
                            "tests/lint/unittest_lint.py::test_addmessage_invalid",
                            "tests/lint/unittest_lint.py::test_load_plugin_command_line",
                            "tests/lint/unittest_lint.py::test_load_plugin_path_manipulation_case_6",
                            "tests/lint/unittest_lint.py::test_load_plugin_path_manipulation_case_3",
                            "tests/lint/unittest_lint.py::test_load_plugin_pylintrc_order_independent",
                            "tests/lint/unittest_lint.py::test_load_plugin_command_line_before_init_hook",
                            "tests/lint/unittest_lint.py::test_load_plugin_command_line_with_init_hook_command_line",
                            "tests/lint/unittest_lint.py::test_load_plugin_config_file",
                            "tests/lint/unittest_lint.py::test_load_plugin_configuration",
                            "tests/lint/unittest_lint.py::test_init_hooks_called_before_load_plugins",
                            "tests/lint/unittest_lint.py::test_analyze_explicit_script",
                            "tests/lint/unittest_lint.py::test_full_documentation",
                            "tests/lint/unittest_lint.py::test_list_msgs_enabled",
                            "tests/lint/unittest_lint.py::test_pylint_home",
                            "tests/lint/unittest_lint.py::test_pylint_home_from_environ",
                            "tests/lint/unittest_lint.py::test_warn_about_old_home",
                            "tests/lint/unittest_lint.py::test_pylintrc",
                            "tests/lint/unittest_lint.py::test_pylintrc_parentdir",
                            "tests/lint/unittest_lint.py::test_pylintrc_parentdir_no_package",
                            "tests/lint/unittest_lint.py::test_custom_should_analyze_file",
                            "tests/lint/unittest_lint.py::test_multiprocessing[1]",
                            "tests/lint/unittest_lint.py::test_multiprocessing[2]",
                            "tests/lint/unittest_lint.py::test_filename_with__init__",
                            "tests/lint/unittest_lint.py::test_by_module_statement_value",
                            "tests/lint/unittest_lint.py::test_recursive_ignore[--ignore-failing.py]",
                            "tests/lint/unittest_lint.py::test_recursive_ignore[--ignore-ignored_subdirectory]",
                            "tests/lint/unittest_lint.py::test_recursive_ignore[--ignore-patterns-failing.*]",
                            "tests/lint/unittest_lint.py::test_recursive_ignore[--ignore-patterns-ignored_*]",
                            "tests/lint/unittest_lint.py::test_recursive_ignore[--ignore-paths-.*directory/ignored.*]",
                            "tests/lint/unittest_lint.py::test_recursive_ignore[--ignore-paths-.*ignored.*/failing.*]",
                            "tests/lint/unittest_lint.py::test_source_roots_globbing",
                            "tests/lint/unittest_lint.py::test_recursive_implicit_namespace",
                            "tests/lint/unittest_lint.py::test_lint_namespace_package_under_dir",
                            "tests/lint/unittest_lint.py::test_lint_namespace_package_under_dir_on_path",
                            "tests/test_self.py::TestRunTC::test_pkginfo",
                            "tests/test_self.py::TestRunTC::test_all",
                            "tests/test_self.py::TestRunTC::test_no_ext_file",
                            "tests/test_self.py::TestRunTC::test_w0704_ignored",
                            "tests/test_self.py::TestRunTC::test_exit_zero",
                            "tests/test_self.py::TestRunTC::test_nonexistent_config_file",
                            "tests/test_self.py::TestRunTC::test_error_missing_arguments",
                            "tests/test_self.py::TestRunTC::test_no_out_encoding",
                            "tests/test_self.py::TestRunTC::test_parallel_execution",
                            "tests/test_self.py::TestRunTC::test_parallel_execution_missing_arguments",
                            "tests/test_self.py::TestRunTC::test_enable_all_works",
                            "tests/test_self.py::TestRunTC::test_wrong_import_position_when_others_disabled",
                            "tests/test_self.py::TestRunTC::test_type_annotation_names",
                            "tests/test_self.py::TestRunTC::test_import_itself_not_accounted_for_relative_imports",
                            "tests/test_self.py::TestRunTC::test_reject_empty_indent_strings",
                            "tests/test_self.py::TestRunTC::test_json_report_when_file_has_syntax_error",
                            "tests/test_self.py::TestRunTC::test_json_report_when_file_is_missing",
                            "tests/test_self.py::TestRunTC::test_json_report_does_not_escape_quotes",
                            "tests/test_self.py::TestRunTC::test_information_category_disabled_by_default",
                            "tests/test_self.py::TestRunTC::test_error_mode_shows_no_score",
                            "tests/test_self.py::TestRunTC::test_evaluation_score_shown_by_default",
                            "tests/test_self.py::TestRunTC::test_confidence_levels",
                            "tests/test_self.py::TestRunTC::test_bom_marker",
                            "tests/test_self.py::TestRunTC::test_pylintrc_plugin_duplicate_options",
                            "tests/test_self.py::TestRunTC::test_pylintrc_comments_in_values",
                            "tests/test_self.py::TestRunTC::test_no_crash_with_formatting_regex_defaults",
                            "tests/test_self.py::TestRunTC::test_getdefaultencoding_crashes_with_lc_ctype_utf8",
                            "tests/test_self.py::TestRunTC::test_parseable_file_path",
                            "tests/test_self.py::TestRunTC::test_stdin[/mymodule.py]",
                            "tests/test_self.py::TestRunTC::test_stdin[mymodule.py-mymodule-mymodule.py]",
                            "tests/test_self.py::TestRunTC::test_stdin_missing_modulename",
                            "tests/test_self.py::TestRunTC::test_relative_imports[False]",
                            "tests/test_self.py::TestRunTC::test_relative_imports[True]",
                            "tests/test_self.py::TestRunTC::test_stdin_syntax_error",
                            "tests/test_self.py::TestRunTC::test_version",
                            "tests/test_self.py::TestRunTC::test_fail_under",
                            "tests/test_self.py::TestRunTC::test_fail_on[-10-missing-function-docstring-fail_under_plus7_5.py-16]",
                            "tests/test_self.py::TestRunTC::test_fail_on[6-missing-function-docstring-fail_under_plus7_5.py-16]",
                            "tests/test_self.py::TestRunTC::test_fail_on[7.5-missing-function-docstring-fail_under_plus7_5.py-16]",
                            "tests/test_self.py::TestRunTC::test_fail_on[7.6-missing-function-docstring-fail_under_plus7_5.py-16]",
                            "tests/test_self.py::TestRunTC::test_fail_on[-11-missing-function-docstring-fail_under_minus10.py-22]",
                            "tests/test_self.py::TestRunTC::test_fail_on[-10-missing-function-docstring-fail_under_minus10.py-22]",
                            "tests/test_self.py::TestRunTC::test_fail_on[-9-missing-function-docstring-fail_under_minus10.py-22]",
                            "tests/test_self.py::TestRunTC::test_fail_on[-5-missing-function-docstring-fail_under_minus10.py-22]",
                            "tests/test_self.py::TestRunTC::test_fail_on[-10-broad-exception-caught-fail_under_plus7_5.py-0]",
                            "tests/test_self.py::TestRunTC::test_fail_on[6-broad-exception-caught-fail_under_plus7_5.py-0]",
                            "tests/test_self.py::TestRunTC::test_fail_on[7.5-broad-exception-caught-fail_under_plus7_5.py-0]",
                            "tests/test_self.py::TestRunTC::test_fail_on[7.6-broad-exception-caught-fail_under_plus7_5.py-16]",
                            "tests/test_self.py::TestRunTC::test_fail_on[-11-broad-exception-caught-fail_under_minus10.py-0]",
                            "tests/test_self.py::TestRunTC::test_fail_on[-10-broad-exception-caught-fail_under_minus10.py-0]",
                            "tests/test_self.py::TestRunTC::test_fail_on[-9-broad-exception-caught-fail_under_minus10.py-22]",
                            "tests/test_self.py::TestRunTC::test_fail_on[-5-broad-exception-caught-fail_under_minus10.py-22]",
                            "tests/test_self.py::TestRunTC::test_fail_on[-10-C0116-fail_under_plus7_5.py-16]",
                            "tests/test_self.py::TestRunTC::test_fail_on[-10-C-fail_under_plus7_5.py-16]",
                            "tests/test_self.py::TestRunTC::test_fail_on[-10-fake1,C,fake2-fail_under_plus7_5.py-16]",
                            "tests/test_self.py::TestRunTC::test_fail_on[-10-C0115-fail_under_plus7_5.py-0]",
                            "tests/test_self.py::TestRunTC::test_fail_on_edge_case[opts0-0]",
                            "tests/test_self.py::TestRunTC::test_fail_on_edge_case[opts1-0]",
                            "tests/test_self.py::TestRunTC::test_fail_on_edge_case[opts2-16]",
                            "tests/test_self.py::TestRunTC::test_fail_on_edge_case[opts3-16]",
                            "tests/test_self.py::TestRunTC::test_modify_sys_path",
                            "tests/test_self.py::TestRunTC::test_plugin_that_imports_from_open",
                            "tests/test_self.py::TestRunTC::test_do_not_import_files_from_local_directory[args0]",
                            "tests/test_self.py::TestRunTC::test_do_not_import_files_from_local_directory[args1]",
                            "tests/test_self.py::TestRunTC::test_import_plugin_from_local_directory_if_pythonpath_cwd",
                            "tests/test_self.py::TestRunTC::test_allow_import_of_files_found_in_modules_during_parallel_check",
                            "tests/test_self.py::TestRunTC::test_can_list_directories_without_dunder_init",
                            "tests/test_self.py::TestRunTC::test_jobs_score",
                            "tests/test_self.py::TestRunTC::test_regression_parallel_mode_without_filepath",
                            "tests/test_self.py::TestRunTC::test_output_file_valid_path",
                            "tests/test_self.py::TestRunTC::test_output_file_invalid_path_exits_with_code_32",
                            "tests/test_self.py::TestRunTC::test_fail_on_exit_code[args0-0]",
                            "tests/test_self.py::TestRunTC::test_fail_on_exit_code[args1-0]",
                            "tests/test_self.py::TestRunTC::test_fail_on_exit_code[args2-0]",
                            "tests/test_self.py::TestRunTC::test_fail_on_exit_code[args3-6]",
                            "tests/test_self.py::TestRunTC::test_fail_on_exit_code[args4-6]",
                            "tests/test_self.py::TestRunTC::test_fail_on_exit_code[args5-22]",
                            "tests/test_self.py::TestRunTC::test_fail_on_exit_code[args6-22]",
                            "tests/test_self.py::TestRunTC::test_fail_on_exit_code[args7-6]",
                            "tests/test_self.py::TestRunTC::test_fail_on_exit_code[args8-22]",
                            "tests/test_self.py::TestRunTC::test_one_module_fatal_error",
                            "tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args0-0]",
                            "tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args1-0]",
                            "tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args2-0]",
                            "tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args3-0]",
                            "tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args4-0]",
                            "tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args5-0]",
                            "tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args6-0]",
                            "tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args7-1]",
                            "tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args8-1]",
                            "tests/test_self.py::TestRunTC::test_output_file_can_be_combined_with_output_format_option[text-{path}:4:4:",
                            "tests/test_self.py::TestRunTC::test_output_file_can_be_combined_with_output_format_option[parseable-{path}:4:",
                            "tests/test_self.py::TestRunTC::test_output_file_can_be_combined_with_output_format_option[msvs-{path}(4):",
                            "tests/test_self.py::TestRunTC::test_output_file_can_be_combined_with_output_format_option[colorized-{path}:4:4:",
                            "tests/test_self.py::TestRunTC::test_output_file_can_be_combined_with_output_format_option[json-\"message\":",
                            "tests/test_self.py::TestRunTC::test_output_file_can_be_combined_with_custom_reporter",
                            "tests/test_self.py::TestRunTC::test_output_file_specified_in_rcfile",
                            "tests/test_self.py::TestRunTC::test_load_text_repoter_if_not_provided",
                            "tests/test_self.py::TestRunTC::test_regex_paths_csv_validator",
                            "tests/test_self.py::TestRunTC::test_recursive",
                            "tests/test_self.py::TestRunTC::test_ignore_recursive[ignored_subdirectory]",
                            "tests/test_self.py::TestRunTC::test_ignore_recursive[failing.py]",
                            "tests/test_self.py::TestRunTC::test_ignore_pattern_recursive[ignored_.*]",
                            "tests/test_self.py::TestRunTC::test_ignore_pattern_recursive[failing.*]",
                            "tests/test_self.py::TestRunTC::test_ignore_pattern_from_stdin",
                            "tests/test_self.py::TestRunTC::test_ignore_path_recursive[.*ignored.*]",
                            "tests/test_self.py::TestRunTC::test_ignore_path_recursive[.*failing.*]",
                            "tests/test_self.py::TestRunTC::test_recursive_current_dir",
                            "tests/test_self.py::TestRunTC::test_ignore_path_recursive_current_dir",
                            "tests/test_self.py::TestRunTC::test_syntax_error_invalid_encoding",
                            "tests/test_self.py::TestRunTC::test_encoding[good.py-]",
                            "tests/test_self.py::TestRunTC::test_encoding[bad_wrong_num.py-(syntax-error)]",
                            "tests/test_self.py::TestRunTC::test_encoding[bad_missing_num.py-(bad-file-encoding)]",
                            "tests/test_self.py::TestRunTC::test_line_too_long_useless_suppression",
                            "tests/test_self.py::TestRunTC::test_output_no_header",
                            "tests/test_self.py::TestRunTC::test_no_name_in_module",
                            "tests/test_self.py::TestCallbackOptions::test_output_of_callback_options[command0-Emittable",
                            "tests/test_self.py::TestCallbackOptions::test_output_of_callback_options[command1-Enabled",
                            "tests/test_self.py::TestCallbackOptions::test_output_of_callback_options[command2-nonascii-checker]",
                            "tests/test_self.py::TestCallbackOptions::test_output_of_callback_options[command3-Confidence(name='HIGH',",
                            "tests/test_self.py::TestCallbackOptions::test_output_of_callback_options[command4-pylint.extensions.empty_comment]",
                            "tests/test_self.py::TestCallbackOptions::test_output_of_callback_options[command5-Pylint",
                            "tests/test_self.py::TestCallbackOptions::test_output_of_callback_options[command6-Environment",
                            "tests/test_self.py::TestCallbackOptions::test_help_msg[args0-:unreachable",
                            "tests/test_self.py::TestCallbackOptions::test_help_msg[args1-No",
                            "tests/test_self.py::TestCallbackOptions::test_help_msg[args2---help-msg:",
                            "tests/test_self.py::TestCallbackOptions::test_help_msg[args3-:invalid-name",
                            "tests/test_self.py::TestCallbackOptions::test_generate_rcfile",
                            "tests/test_self.py::TestCallbackOptions::test_generate_config_disable_symbolic_names",
                            "tests/test_self.py::TestCallbackOptions::test_errors_only",
                            "tests/test_self.py::TestCallbackOptions::test_errors_only_functions_as_disable",
                            "tests/test_self.py::TestCallbackOptions::test_verbose",
                            "tests/test_self.py::TestCallbackOptions::test_enable_all_extensions"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "scikit-learn__scikit-learn-26400.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "sklearn/preprocessing/tests/test_data.py::test_power_transformer_box_cox_raise_all_nans_col"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "sklearn/preprocessing/tests/test_data.py::test_raises_value_error_if_sample_weights_greater_than_1d",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_sample_weight[array-Xw0-X0-sample_weight0]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_sample_weight[array-Xw1-X1-sample_weight1]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_sample_weight[array-Xw2-X2-sample_weight2]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_sample_weight[sparse_csr-Xw0-X0-sample_weight0]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_sample_weight[sparse_csr-Xw1-X1-sample_weight1]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_sample_weight[sparse_csr-Xw2-X2-sample_weight2]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_sample_weight[sparse_csc-Xw0-X0-sample_weight0]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_sample_weight[sparse_csc-Xw1-X1-sample_weight1]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_sample_weight[sparse_csc-Xw2-X2-sample_weight2]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_1d",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_dtype[False-None]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_dtype[True-None]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[0-float32-False-asarray-scaler0]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[0-float32-False-asarray-scaler1]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[0-float32-False-csc_matrix-scaler0]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[0-float32-False-csc_matrix-scaler1]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[0-float32-False-csr_matrix-scaler0]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[0-float32-False-csr_matrix-scaler1]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[0-float32-True-asarray-scaler0]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[0-float32-True-csc_matrix-scaler0]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[0-float32-True-csr_matrix-scaler0]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[0-float64-False-asarray-scaler0]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[0-float64-False-asarray-scaler1]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[0-float64-False-csc_matrix-scaler0]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[0-float64-False-csc_matrix-scaler1]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[0-float64-False-csr_matrix-scaler0]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[0-float64-False-csr_matrix-scaler1]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[0-float64-True-asarray-scaler0]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[0-float64-True-csc_matrix-scaler0]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[0-float64-True-csr_matrix-scaler0]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[1.0-float32-False-asarray-scaler0]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[1.0-float32-False-asarray-scaler1]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[1.0-float32-False-csc_matrix-scaler0]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[1.0-float32-False-csc_matrix-scaler1]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[1.0-float32-False-csr_matrix-scaler0]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[1.0-float32-False-csr_matrix-scaler1]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[1.0-float32-True-asarray-scaler0]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[1.0-float32-True-csc_matrix-scaler0]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[1.0-float32-True-csr_matrix-scaler0]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[1.0-float64-False-asarray-scaler0]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[1.0-float64-False-asarray-scaler1]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[1.0-float64-False-csc_matrix-scaler0]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[1.0-float64-False-csc_matrix-scaler1]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[1.0-float64-False-csr_matrix-scaler0]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[1.0-float64-False-csr_matrix-scaler1]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[1.0-float64-True-asarray-scaler0]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[1.0-float64-True-csc_matrix-scaler0]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[1.0-float64-True-csr_matrix-scaler0]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[100.0-float32-False-asarray-scaler0]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[100.0-float32-False-asarray-scaler1]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[100.0-float32-False-csc_matrix-scaler0]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[100.0-float32-False-csc_matrix-scaler1]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[100.0-float32-False-csr_matrix-scaler0]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[100.0-float32-False-csr_matrix-scaler1]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[100.0-float32-True-asarray-scaler0]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[100.0-float32-True-csc_matrix-scaler0]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[100.0-float32-True-csr_matrix-scaler0]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[100.0-float64-False-asarray-scaler0]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[100.0-float64-False-asarray-scaler1]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[100.0-float64-False-csc_matrix-scaler0]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[100.0-float64-False-csc_matrix-scaler1]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[100.0-float64-False-csr_matrix-scaler0]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[100.0-float64-False-csr_matrix-scaler1]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[100.0-float64-True-asarray-scaler0]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[100.0-float64-True-csc_matrix-scaler0]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_constant_features[100.0-float64-True-csr_matrix-scaler0]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[asarray-float32-1e-10-10]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[asarray-float32-1e-10-100]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[asarray-float32-1e-10-10000]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[asarray-float32-1-10]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[asarray-float32-1-100]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[asarray-float32-1-10000]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[asarray-float32-10000000000.0-10]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[asarray-float32-10000000000.0-100]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[asarray-float32-10000000000.0-10000]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[asarray-float64-1e-10-10]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[asarray-float64-1e-10-100]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[asarray-float64-1e-10-10000]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[asarray-float64-1-10]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[asarray-float64-1-100]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[asarray-float64-1-10000]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[asarray-float64-10000000000.0-10]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[asarray-float64-10000000000.0-100]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[asarray-float64-10000000000.0-10000]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[csc_matrix-float32-1e-10-10]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[csc_matrix-float32-1e-10-100]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[csc_matrix-float32-1e-10-10000]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[csc_matrix-float32-1-10]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[csc_matrix-float32-1-100]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[csc_matrix-float32-1-10000]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[csc_matrix-float32-10000000000.0-10]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[csc_matrix-float32-10000000000.0-100]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[csc_matrix-float32-10000000000.0-10000]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[csc_matrix-float64-1e-10-10]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[csc_matrix-float64-1e-10-100]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[csc_matrix-float64-1e-10-10000]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[csc_matrix-float64-1-10]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[csc_matrix-float64-1-100]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[csc_matrix-float64-1-10000]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[csc_matrix-float64-10000000000.0-10]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[csc_matrix-float64-10000000000.0-100]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[csc_matrix-float64-10000000000.0-10000]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[csr_matrix-float32-1e-10-10]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[csr_matrix-float32-1e-10-100]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[csr_matrix-float32-1e-10-10000]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[csr_matrix-float32-1-10]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[csr_matrix-float32-1-100]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[csr_matrix-float32-1-10000]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[csr_matrix-float32-10000000000.0-10]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[csr_matrix-float32-10000000000.0-100]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[csr_matrix-float32-10000000000.0-10000]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[csr_matrix-float64-1e-10-10]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[csr_matrix-float64-1e-10-100]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[csr_matrix-float64-1e-10-10000]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[csr_matrix-float64-1-10]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[csr_matrix-float64-1-100]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[csr_matrix-float64-1-10000]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[csr_matrix-float64-10000000000.0-10]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[csr_matrix-float64-10000000000.0-100]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_near_constant_features[csr_matrix-float64-10000000000.0-10000]",
                            "sklearn/preprocessing/tests/test_data.py::test_scale_1d",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_numerical_stability",
                            "sklearn/preprocessing/tests/test_data.py::test_scaler_2d_arrays",
                            "sklearn/preprocessing/tests/test_data.py::test_scaler_float16_overflow",
                            "sklearn/preprocessing/tests/test_data.py::test_handle_zeros_in_scale",
                            "sklearn/preprocessing/tests/test_data.py::test_minmax_scaler_partial_fit",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_partial_fit",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_partial_fit_numerical_stability",
                            "sklearn/preprocessing/tests/test_data.py::test_partial_fit_sparse_input[True]",
                            "sklearn/preprocessing/tests/test_data.py::test_partial_fit_sparse_input[None]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_trasform_with_partial_fit[True]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_trasform_with_partial_fit[None]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_check_array_of_inverse_transform",
                            "sklearn/preprocessing/tests/test_data.py::test_min_max_scaler_iris",
                            "sklearn/preprocessing/tests/test_data.py::test_min_max_scaler_zero_variance_features",
                            "sklearn/preprocessing/tests/test_data.py::test_minmax_scale_axis1",
                            "sklearn/preprocessing/tests/test_data.py::test_min_max_scaler_1d",
                            "sklearn/preprocessing/tests/test_data.py::test_scaler_without_centering[True]",
                            "sklearn/preprocessing/tests/test_data.py::test_scaler_without_centering[None]",
                            "sklearn/preprocessing/tests/test_data.py::test_scaler_n_samples_seen_with_nan[asarray-True-True]",
                            "sklearn/preprocessing/tests/test_data.py::test_scaler_n_samples_seen_with_nan[asarray-True-False]",
                            "sklearn/preprocessing/tests/test_data.py::test_scaler_n_samples_seen_with_nan[asarray-False-True]",
                            "sklearn/preprocessing/tests/test_data.py::test_scaler_n_samples_seen_with_nan[asarray-False-False]",
                            "sklearn/preprocessing/tests/test_data.py::test_scaler_n_samples_seen_with_nan[csc_matrix-True-False]",
                            "sklearn/preprocessing/tests/test_data.py::test_scaler_n_samples_seen_with_nan[csc_matrix-False-False]",
                            "sklearn/preprocessing/tests/test_data.py::test_scaler_n_samples_seen_with_nan[csr_matrix-True-False]",
                            "sklearn/preprocessing/tests/test_data.py::test_scaler_n_samples_seen_with_nan[csr_matrix-False-False]",
                            "sklearn/preprocessing/tests/test_data.py::test_scaler_return_identity",
                            "sklearn/preprocessing/tests/test_data.py::test_scaler_int",
                            "sklearn/preprocessing/tests/test_data.py::test_scaler_without_copy",
                            "sklearn/preprocessing/tests/test_data.py::test_scale_sparse_with_mean_raise_exception",
                            "sklearn/preprocessing/tests/test_data.py::test_scale_input_finiteness_validation",
                            "sklearn/preprocessing/tests/test_data.py::test_robust_scaler_error_sparse",
                            "sklearn/preprocessing/tests/test_data.py::test_robust_scaler_attributes[X0-True-True]",
                            "sklearn/preprocessing/tests/test_data.py::test_robust_scaler_attributes[X0-True-False]",
                            "sklearn/preprocessing/tests/test_data.py::test_robust_scaler_attributes[X0-False-True]",
                            "sklearn/preprocessing/tests/test_data.py::test_robust_scaler_attributes[X0-False-False]",
                            "sklearn/preprocessing/tests/test_data.py::test_robust_scaler_attributes[X1-True-False]",
                            "sklearn/preprocessing/tests/test_data.py::test_robust_scaler_attributes[X1-False-False]",
                            "sklearn/preprocessing/tests/test_data.py::test_robust_scaler_col_zero_sparse",
                            "sklearn/preprocessing/tests/test_data.py::test_robust_scaler_2d_arrays",
                            "sklearn/preprocessing/tests/test_data.py::test_robust_scaler_equivalence_dense_sparse[positive-0]",
                            "sklearn/preprocessing/tests/test_data.py::test_robust_scaler_equivalence_dense_sparse[positive-0.05]",
                            "sklearn/preprocessing/tests/test_data.py::test_robust_scaler_equivalence_dense_sparse[positive-0.1]",
                            "sklearn/preprocessing/tests/test_data.py::test_robust_scaler_equivalence_dense_sparse[positive-0.5]",
                            "sklearn/preprocessing/tests/test_data.py::test_robust_scaler_equivalence_dense_sparse[positive-1]",
                            "sklearn/preprocessing/tests/test_data.py::test_robust_scaler_equivalence_dense_sparse[negative-0]",
                            "sklearn/preprocessing/tests/test_data.py::test_robust_scaler_equivalence_dense_sparse[negative-0.05]",
                            "sklearn/preprocessing/tests/test_data.py::test_robust_scaler_equivalence_dense_sparse[negative-0.1]",
                            "sklearn/preprocessing/tests/test_data.py::test_robust_scaler_equivalence_dense_sparse[negative-0.5]",
                            "sklearn/preprocessing/tests/test_data.py::test_robust_scaler_equivalence_dense_sparse[negative-1]",
                            "sklearn/preprocessing/tests/test_data.py::test_robust_scaler_equivalence_dense_sparse[zeros-0]",
                            "sklearn/preprocessing/tests/test_data.py::test_robust_scaler_equivalence_dense_sparse[zeros-0.05]",
                            "sklearn/preprocessing/tests/test_data.py::test_robust_scaler_equivalence_dense_sparse[zeros-0.1]",
                            "sklearn/preprocessing/tests/test_data.py::test_robust_scaler_equivalence_dense_sparse[zeros-0.5]",
                            "sklearn/preprocessing/tests/test_data.py::test_robust_scaler_equivalence_dense_sparse[zeros-1]",
                            "sklearn/preprocessing/tests/test_data.py::test_robust_scaler_equivalence_dense_sparse[None-0]",
                            "sklearn/preprocessing/tests/test_data.py::test_robust_scaler_equivalence_dense_sparse[None-0.05]",
                            "sklearn/preprocessing/tests/test_data.py::test_robust_scaler_equivalence_dense_sparse[None-0.1]",
                            "sklearn/preprocessing/tests/test_data.py::test_robust_scaler_equivalence_dense_sparse[None-0.5]",
                            "sklearn/preprocessing/tests/test_data.py::test_robust_scaler_equivalence_dense_sparse[None-1]",
                            "sklearn/preprocessing/tests/test_data.py::test_robust_scaler_transform_one_row_csr",
                            "sklearn/preprocessing/tests/test_data.py::test_robust_scaler_iris",
                            "sklearn/preprocessing/tests/test_data.py::test_robust_scaler_iris_quantiles",
                            "sklearn/preprocessing/tests/test_data.py::test_quantile_transform_iris",
                            "sklearn/preprocessing/tests/test_data.py::test_quantile_transform_check_error",
                            "sklearn/preprocessing/tests/test_data.py::test_quantile_transform_sparse_ignore_zeros",
                            "sklearn/preprocessing/tests/test_data.py::test_quantile_transform_dense_toy",
                            "sklearn/preprocessing/tests/test_data.py::test_quantile_transform_subsampling",
                            "sklearn/preprocessing/tests/test_data.py::test_quantile_transform_sparse_toy",
                            "sklearn/preprocessing/tests/test_data.py::test_quantile_transform_axis1",
                            "sklearn/preprocessing/tests/test_data.py::test_quantile_transform_bounds",
                            "sklearn/preprocessing/tests/test_data.py::test_quantile_transform_and_inverse",
                            "sklearn/preprocessing/tests/test_data.py::test_quantile_transform_nan",
                            "sklearn/preprocessing/tests/test_data.py::test_quantile_transformer_sorted_quantiles[array]",
                            "sklearn/preprocessing/tests/test_data.py::test_quantile_transformer_sorted_quantiles[sparse]",
                            "sklearn/preprocessing/tests/test_data.py::test_robust_scaler_invalid_range",
                            "sklearn/preprocessing/tests/test_data.py::test_scale_function_without_centering",
                            "sklearn/preprocessing/tests/test_data.py::test_robust_scale_axis1",
                            "sklearn/preprocessing/tests/test_data.py::test_robust_scale_1d_array",
                            "sklearn/preprocessing/tests/test_data.py::test_robust_scaler_zero_variance_features",
                            "sklearn/preprocessing/tests/test_data.py::test_robust_scaler_unit_variance",
                            "sklearn/preprocessing/tests/test_data.py::test_maxabs_scaler_zero_variance_features",
                            "sklearn/preprocessing/tests/test_data.py::test_maxabs_scaler_large_negative_value",
                            "sklearn/preprocessing/tests/test_data.py::test_maxabs_scaler_transform_one_row_csr",
                            "sklearn/preprocessing/tests/test_data.py::test_maxabs_scaler_1d",
                            "sklearn/preprocessing/tests/test_data.py::test_maxabs_scaler_partial_fit",
                            "sklearn/preprocessing/tests/test_data.py::test_normalizer_l1",
                            "sklearn/preprocessing/tests/test_data.py::test_normalizer_l2",
                            "sklearn/preprocessing/tests/test_data.py::test_normalizer_max",
                            "sklearn/preprocessing/tests/test_data.py::test_normalizer_max_sign",
                            "sklearn/preprocessing/tests/test_data.py::test_normalize",
                            "sklearn/preprocessing/tests/test_data.py::test_binarizer",
                            "sklearn/preprocessing/tests/test_data.py::test_center_kernel",
                            "sklearn/preprocessing/tests/test_data.py::test_kernelcenterer_non_linear_kernel",
                            "sklearn/preprocessing/tests/test_data.py::test_cv_pipeline_precomputed",
                            "sklearn/preprocessing/tests/test_data.py::test_fit_transform",
                            "sklearn/preprocessing/tests/test_data.py::test_add_dummy_feature",
                            "sklearn/preprocessing/tests/test_data.py::test_add_dummy_feature_coo",
                            "sklearn/preprocessing/tests/test_data.py::test_add_dummy_feature_csc",
                            "sklearn/preprocessing/tests/test_data.py::test_add_dummy_feature_csr",
                            "sklearn/preprocessing/tests/test_data.py::test_fit_cold_start",
                            "sklearn/preprocessing/tests/test_data.py::test_power_transformer_notfitted[box-cox]",
                            "sklearn/preprocessing/tests/test_data.py::test_power_transformer_notfitted[yeo-johnson]",
                            "sklearn/preprocessing/tests/test_data.py::test_power_transformer_inverse[X0-True-box-cox]",
                            "sklearn/preprocessing/tests/test_data.py::test_power_transformer_inverse[X0-True-yeo-johnson]",
                            "sklearn/preprocessing/tests/test_data.py::test_power_transformer_inverse[X0-False-box-cox]",
                            "sklearn/preprocessing/tests/test_data.py::test_power_transformer_inverse[X0-False-yeo-johnson]",
                            "sklearn/preprocessing/tests/test_data.py::test_power_transformer_inverse[X1-True-box-cox]",
                            "sklearn/preprocessing/tests/test_data.py::test_power_transformer_inverse[X1-True-yeo-johnson]",
                            "sklearn/preprocessing/tests/test_data.py::test_power_transformer_inverse[X1-False-box-cox]",
                            "sklearn/preprocessing/tests/test_data.py::test_power_transformer_inverse[X1-False-yeo-johnson]",
                            "sklearn/preprocessing/tests/test_data.py::test_power_transformer_1d",
                            "sklearn/preprocessing/tests/test_data.py::test_power_transformer_2d",
                            "sklearn/preprocessing/tests/test_data.py::test_power_transformer_boxcox_strictly_positive_exception",
                            "sklearn/preprocessing/tests/test_data.py::test_power_transformer_yeojohnson_any_input[X0]",
                            "sklearn/preprocessing/tests/test_data.py::test_power_transformer_yeojohnson_any_input[X1]",
                            "sklearn/preprocessing/tests/test_data.py::test_power_transformer_yeojohnson_any_input[X2]",
                            "sklearn/preprocessing/tests/test_data.py::test_power_transformer_shape_exception[box-cox]",
                            "sklearn/preprocessing/tests/test_data.py::test_power_transformer_shape_exception[yeo-johnson]",
                            "sklearn/preprocessing/tests/test_data.py::test_power_transformer_lambda_zero",
                            "sklearn/preprocessing/tests/test_data.py::test_power_transformer_lambda_one",
                            "sklearn/preprocessing/tests/test_data.py::test_optimization_power_transformer[box-cox-0.1]",
                            "sklearn/preprocessing/tests/test_data.py::test_optimization_power_transformer[box-cox-0.5]",
                            "sklearn/preprocessing/tests/test_data.py::test_optimization_power_transformer[yeo-johnson-0.1]",
                            "sklearn/preprocessing/tests/test_data.py::test_optimization_power_transformer[yeo-johnson-0.5]",
                            "sklearn/preprocessing/tests/test_data.py::test_optimization_power_transformer[yeo-johnson-1.0]",
                            "sklearn/preprocessing/tests/test_data.py::test_yeo_johnson_darwin_example",
                            "sklearn/preprocessing/tests/test_data.py::test_power_transformer_nans[box-cox]",
                            "sklearn/preprocessing/tests/test_data.py::test_power_transformer_nans[yeo-johnson]",
                            "sklearn/preprocessing/tests/test_data.py::test_power_transformer_fit_transform[True-box-cox]",
                            "sklearn/preprocessing/tests/test_data.py::test_power_transformer_fit_transform[True-yeo-johnson]",
                            "sklearn/preprocessing/tests/test_data.py::test_power_transformer_fit_transform[False-box-cox]",
                            "sklearn/preprocessing/tests/test_data.py::test_power_transformer_fit_transform[False-yeo-johnson]",
                            "sklearn/preprocessing/tests/test_data.py::test_power_transformer_copy_True[True-box-cox]",
                            "sklearn/preprocessing/tests/test_data.py::test_power_transformer_copy_True[True-yeo-johnson]",
                            "sklearn/preprocessing/tests/test_data.py::test_power_transformer_copy_True[False-box-cox]",
                            "sklearn/preprocessing/tests/test_data.py::test_power_transformer_copy_True[False-yeo-johnson]",
                            "sklearn/preprocessing/tests/test_data.py::test_power_transformer_copy_False[True-box-cox]",
                            "sklearn/preprocessing/tests/test_data.py::test_power_transformer_copy_False[True-yeo-johnson]",
                            "sklearn/preprocessing/tests/test_data.py::test_power_transformer_copy_False[False-box-cox]",
                            "sklearn/preprocessing/tests/test_data.py::test_power_transformer_copy_False[False-yeo-johnson]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_sparse_partial_fit_finite_variance[X_20]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_sparse_partial_fit_finite_variance[X_21]",
                            "sklearn/preprocessing/tests/test_data.py::test_minmax_scaler_clip[feature_range0]",
                            "sklearn/preprocessing/tests/test_data.py::test_minmax_scaler_clip[feature_range1]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_raise_error_for_1d_input",
                            "sklearn/preprocessing/tests/test_data.py::test_power_transformer_significantly_non_gaussian",
                            "sklearn/preprocessing/tests/test_data.py::test_one_to_one_features[MinMaxScaler]",
                            "sklearn/preprocessing/tests/test_data.py::test_one_to_one_features[MaxAbsScaler]",
                            "sklearn/preprocessing/tests/test_data.py::test_one_to_one_features[RobustScaler]",
                            "sklearn/preprocessing/tests/test_data.py::test_one_to_one_features[StandardScaler]",
                            "sklearn/preprocessing/tests/test_data.py::test_one_to_one_features[QuantileTransformer]",
                            "sklearn/preprocessing/tests/test_data.py::test_one_to_one_features[PowerTransformer]",
                            "sklearn/preprocessing/tests/test_data.py::test_one_to_one_features_pandas[MinMaxScaler]",
                            "sklearn/preprocessing/tests/test_data.py::test_one_to_one_features_pandas[MaxAbsScaler]",
                            "sklearn/preprocessing/tests/test_data.py::test_one_to_one_features_pandas[RobustScaler]",
                            "sklearn/preprocessing/tests/test_data.py::test_one_to_one_features_pandas[StandardScaler]",
                            "sklearn/preprocessing/tests/test_data.py::test_one_to_one_features_pandas[QuantileTransformer]",
                            "sklearn/preprocessing/tests/test_data.py::test_one_to_one_features_pandas[PowerTransformer]",
                            "sklearn/preprocessing/tests/test_data.py::test_one_to_one_features_pandas[Normalizer]",
                            "sklearn/preprocessing/tests/test_data.py::test_one_to_one_features_pandas[Binarizer]",
                            "sklearn/preprocessing/tests/test_data.py::test_kernel_centerer_feature_names_out"
                        ],
                        "failure": [
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_dtype[False-csc_matrix]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_dtype[False-csr_matrix]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_dtype[True-csc_matrix]",
                            "sklearn/preprocessing/tests/test_data.py::test_standard_scaler_dtype[True-csr_matrix]"
                        ]
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "psf__requests-2317.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "test_requests.py::RequestsTestCase::test_HTTP_302_ALLOW_REDIRECT_GET",
                            "test_requests.py::RequestsTestCase::test_POSTBIN_GET_POST_FILES",
                            "test_requests.py::RequestsTestCase::test_POSTBIN_GET_POST_FILES_WITH_DATA",
                            "test_requests.py::RequestsTestCase::test_basicauth_with_netrc",
                            "test_requests.py::RequestsTestCase::test_json_param_post_content_type_works",
                            "test_requests.py::RequestsTestCase::test_manual_redirect_with_partial_body_read",
                            "test_requests.py::RequestsTestCase::test_requests_history_is_saved",
                            "test_requests.py::TestTimeout::test_encoded_methods"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "test_requests.py::RequestsTestCase::test_BASICAUTH_TUPLE_HTTP_200_OK_GET",
                            "test_requests.py::RequestsTestCase::test_DIGESTAUTH_QUOTES_QOP_VALUE",
                            "test_requests.py::RequestsTestCase::test_DIGESTAUTH_WRONG_HTTP_401_GET",
                            "test_requests.py::RequestsTestCase::test_DIGEST_AUTH_RETURNS_COOKIE",
                            "test_requests.py::RequestsTestCase::test_DIGEST_AUTH_SETS_SESSION_COOKIES",
                            "test_requests.py::RequestsTestCase::test_DIGEST_HTTP_200_OK_GET",
                            "test_requests.py::RequestsTestCase::test_DIGEST_STREAM",
                            "test_requests.py::RequestsTestCase::test_HTTP_200_OK_GET_ALTERNATIVE",
                            "test_requests.py::RequestsTestCase::test_HTTP_200_OK_GET_WITH_MIXED_PARAMS",
                            "test_requests.py::RequestsTestCase::test_HTTP_200_OK_GET_WITH_PARAMS",
                            "test_requests.py::RequestsTestCase::test_HTTP_200_OK_HEAD",
                            "test_requests.py::RequestsTestCase::test_HTTP_200_OK_PUT",
                            "test_requests.py::RequestsTestCase::test_auth_is_retained_for_redirect_on_host",
                            "test_requests.py::RequestsTestCase::test_auth_is_stripped_on_redirect_off_host",
                            "test_requests.py::RequestsTestCase::test_autoset_header_values_are_native",
                            "test_requests.py::RequestsTestCase::test_basic_auth_str_is_always_native",
                            "test_requests.py::RequestsTestCase::test_basic_building",
                            "test_requests.py::RequestsTestCase::test_can_send_nonstring_objects_with_files",
                            "test_requests.py::RequestsTestCase::test_cannot_send_unprepared_requests",
                            "test_requests.py::RequestsTestCase::test_connection_error",
                            "test_requests.py::RequestsTestCase::test_cookie_as_dict_items",
                            "test_requests.py::RequestsTestCase::test_cookie_as_dict_keeps_items",
                            "test_requests.py::RequestsTestCase::test_cookie_as_dict_keeps_len",
                            "test_requests.py::RequestsTestCase::test_cookie_as_dict_keys",
                            "test_requests.py::RequestsTestCase::test_cookie_as_dict_values",
                            "test_requests.py::RequestsTestCase::test_cookie_parameters",
                            "test_requests.py::RequestsTestCase::test_cookie_persists_via_api",
                            "test_requests.py::RequestsTestCase::test_cookie_quote_wrapped",
                            "test_requests.py::RequestsTestCase::test_cookie_removed_on_expire",
                            "test_requests.py::RequestsTestCase::test_cookie_sent_on_redirect",
                            "test_requests.py::RequestsTestCase::test_custom_content_type",
                            "test_requests.py::RequestsTestCase::test_decompress_gzip",
                            "test_requests.py::RequestsTestCase::test_different_encodings_dont_break_post",
                            "test_requests.py::RequestsTestCase::test_entry_points",
                            "test_requests.py::RequestsTestCase::test_fixes_1329",
                            "test_requests.py::RequestsTestCase::test_generic_cookiejar_works",
                            "test_requests.py::RequestsTestCase::test_get_auth_from_url",
                            "test_requests.py::RequestsTestCase::test_get_auth_from_url_encoded_hashes",
                            "test_requests.py::RequestsTestCase::test_get_auth_from_url_encoded_spaces",
                            "test_requests.py::RequestsTestCase::test_get_auth_from_url_not_encoded_spaces",
                            "test_requests.py::RequestsTestCase::test_get_auth_from_url_percent_chars",
                            "test_requests.py::RequestsTestCase::test_header_keys_are_native",
                            "test_requests.py::RequestsTestCase::test_header_remove_is_case_insensitive",
                            "test_requests.py::RequestsTestCase::test_headers_on_session_with_None_are_not_sent",
                            "test_requests.py::RequestsTestCase::test_history_is_always_a_list",
                            "test_requests.py::RequestsTestCase::test_hook_receives_request_arguments",
                            "test_requests.py::RequestsTestCase::test_http_error",
                            "test_requests.py::RequestsTestCase::test_invalid_url",
                            "test_requests.py::RequestsTestCase::test_links",
                            "test_requests.py::RequestsTestCase::test_long_authinfo_in_url",
                            "test_requests.py::RequestsTestCase::test_mixed_case_scheme_acceptable",
                            "test_requests.py::RequestsTestCase::test_no_content_length",
                            "test_requests.py::RequestsTestCase::test_nonhttp_schemes_dont_check_URLs",
                            "test_requests.py::RequestsTestCase::test_param_cookiejar_works",
                            "test_requests.py::RequestsTestCase::test_params_are_added_before_fragment",
                            "test_requests.py::RequestsTestCase::test_params_are_merged_case_sensitive",
                            "test_requests.py::RequestsTestCase::test_path_is_not_double_encoded",
                            "test_requests.py::RequestsTestCase::test_prepare_request_with_bytestring_url",
                            "test_requests.py::RequestsTestCase::test_prepared_from_session",
                            "test_requests.py::RequestsTestCase::test_prepared_request_hook",
                            "test_requests.py::RequestsTestCase::test_pyopenssl_redirect",
                            "test_requests.py::RequestsTestCase::test_redirect_with_wrong_gzipped_header",
                            "test_requests.py::RequestsTestCase::test_request_and_response_are_pickleable",
                            "test_requests.py::RequestsTestCase::test_request_cookie_overrides_session_cookie",
                            "test_requests.py::RequestsTestCase::test_request_cookies_not_persisted",
                            "test_requests.py::RequestsTestCase::test_request_ok_set",
                            "test_requests.py::RequestsTestCase::test_requests_in_history_are_not_overridden",
                            "test_requests.py::RequestsTestCase::test_response_decode_unicode",
                            "test_requests.py::RequestsTestCase::test_response_is_iterable",
                            "test_requests.py::RequestsTestCase::test_session_hooks_are_overriden_by_request_hooks",
                            "test_requests.py::RequestsTestCase::test_session_hooks_are_used_with_no_request_hooks",
                            "test_requests.py::RequestsTestCase::test_session_pickling",
                            "test_requests.py::RequestsTestCase::test_set_cookie_on_301",
                            "test_requests.py::RequestsTestCase::test_status_raising",
                            "test_requests.py::RequestsTestCase::test_time_elapsed_blank",
                            "test_requests.py::RequestsTestCase::test_transport_adapter_ordering",
                            "test_requests.py::RequestsTestCase::test_unicode_get",
                            "test_requests.py::RequestsTestCase::test_unicode_header_name",
                            "test_requests.py::RequestsTestCase::test_unicode_method_name",
                            "test_requests.py::RequestsTestCase::test_unicode_multipart_post_fieldnames",
                            "test_requests.py::RequestsTestCase::test_uppercase_scheme_redirect",
                            "test_requests.py::RequestsTestCase::test_urlencoded_get_query_multivalued_param",
                            "test_requests.py::RequestsTestCase::test_user_agent_transfers",
                            "test_requests.py::TestContentEncodingDetection::test_html4_pragma",
                            "test_requests.py::TestContentEncodingDetection::test_html_charset",
                            "test_requests.py::TestContentEncodingDetection::test_none",
                            "test_requests.py::TestContentEncodingDetection::test_precedence",
                            "test_requests.py::TestContentEncodingDetection::test_xhtml_pragma",
                            "test_requests.py::TestContentEncodingDetection::test_xml",
                            "test_requests.py::TestCaseInsensitiveDict::test_contains",
                            "test_requests.py::TestCaseInsensitiveDict::test_delitem",
                            "test_requests.py::TestCaseInsensitiveDict::test_docstring_example",
                            "test_requests.py::TestCaseInsensitiveDict::test_equality",
                            "test_requests.py::TestCaseInsensitiveDict::test_fixes_649",
                            "test_requests.py::TestCaseInsensitiveDict::test_get",
                            "test_requests.py::TestCaseInsensitiveDict::test_getitem",
                            "test_requests.py::TestCaseInsensitiveDict::test_iter",
                            "test_requests.py::TestCaseInsensitiveDict::test_iterable_init",
                            "test_requests.py::TestCaseInsensitiveDict::test_kwargs_init",
                            "test_requests.py::TestCaseInsensitiveDict::test_len",
                            "test_requests.py::TestCaseInsensitiveDict::test_lower_items",
                            "test_requests.py::TestCaseInsensitiveDict::test_mapping_init",
                            "test_requests.py::TestCaseInsensitiveDict::test_preserve_key_case",
                            "test_requests.py::TestCaseInsensitiveDict::test_preserve_last_key_case",
                            "test_requests.py::TestCaseInsensitiveDict::test_setdefault",
                            "test_requests.py::TestCaseInsensitiveDict::test_update",
                            "test_requests.py::TestCaseInsensitiveDict::test_update_retains_unchanged",
                            "test_requests.py::UtilsTestCase::test_address_in_network",
                            "test_requests.py::UtilsTestCase::test_dotted_netmask",
                            "test_requests.py::UtilsTestCase::test_get_auth_from_url",
                            "test_requests.py::UtilsTestCase::test_get_environ_proxies",
                            "test_requests.py::UtilsTestCase::test_get_environ_proxies_ip_ranges",
                            "test_requests.py::UtilsTestCase::test_is_ipv4_address",
                            "test_requests.py::UtilsTestCase::test_is_valid_cidr",
                            "test_requests.py::UtilsTestCase::test_super_len_io_streams",
                            "test_requests.py::TestMorselToCookieExpires::test_expires_invalid_int",
                            "test_requests.py::TestMorselToCookieExpires::test_expires_invalid_str",
                            "test_requests.py::TestMorselToCookieExpires::test_expires_none",
                            "test_requests.py::TestMorselToCookieExpires::test_expires_valid_str",
                            "test_requests.py::TestMorselToCookieMaxAge::test_max_age_invalid_str",
                            "test_requests.py::TestMorselToCookieMaxAge::test_max_age_valid_int",
                            "test_requests.py::TestTimeout::test_stream_timeout",
                            "test_requests.py::TestTimeout::test_invalid_timeout",
                            "test_requests.py::TestTimeout::test_none_timeout",
                            "test_requests.py::TestTimeout::test_read_timeout",
                            "test_requests.py::TestTimeout::test_connect_timeout",
                            "test_requests.py::TestTimeout::test_total_timeout_connect",
                            "test_requests.py::TestRedirects::test_requests_are_updated_each_time",
                            "test_requests.py::test_data_argument_accepts_tuples",
                            "test_requests.py::test_prepared_request_empty_copy",
                            "test_requests.py::test_prepared_request_no_cookies_copy",
                            "test_requests.py::test_prepared_request_complete_copy",
                            "test_requests.py::test_prepare_unicode_url"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "pytest-dev__pytest-9709.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "testing/python/approx.py::TestApprox::test_generic_ordered_sequence",
                            "testing/python/approx.py::TestApprox::test_allow_ordered_sequences_only"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "testing/python/approx.py::TestApprox::test_repr_string",
                            "testing/python/approx.py::TestApprox::test_repr_complex_numbers",
                            "testing/python/approx.py::TestApprox::test_bool",
                            "testing/python/approx.py::TestApprox::test_operator_overloading",
                            "testing/python/approx.py::TestApprox::test_exactly_equal",
                            "testing/python/approx.py::TestApprox::test_opposite_sign",
                            "testing/python/approx.py::TestApprox::test_zero_tolerance",
                            "testing/python/approx.py::TestApprox::test_negative_tolerance[-1e+100-None]",
                            "testing/python/approx.py::TestApprox::test_negative_tolerance[None--1e+100]",
                            "testing/python/approx.py::TestApprox::test_negative_tolerance[1e+100--1e+100]",
                            "testing/python/approx.py::TestApprox::test_negative_tolerance[-1e+100-1e+100]",
                            "testing/python/approx.py::TestApprox::test_negative_tolerance[-1e+100--1e+100]",
                            "testing/python/approx.py::TestApprox::test_negative_tolerance_message",
                            "testing/python/approx.py::TestApprox::test_inf_tolerance",
                            "testing/python/approx.py::TestApprox::test_inf_tolerance_expecting_zero",
                            "testing/python/approx.py::TestApprox::test_nan_tolerance",
                            "testing/python/approx.py::TestApprox::test_reasonable_defaults",
                            "testing/python/approx.py::TestApprox::test_default_tolerances",
                            "testing/python/approx.py::TestApprox::test_custom_tolerances",
                            "testing/python/approx.py::TestApprox::test_relative_tolerance",
                            "testing/python/approx.py::TestApprox::test_absolute_tolerance",
                            "testing/python/approx.py::TestApprox::test_expecting_zero",
                            "testing/python/approx.py::TestApprox::test_expecting_inf",
                            "testing/python/approx.py::TestApprox::test_expecting_nan",
                            "testing/python/approx.py::TestApprox::test_int",
                            "testing/python/approx.py::TestApprox::test_decimal",
                            "testing/python/approx.py::TestApprox::test_fraction",
                            "testing/python/approx.py::TestApprox::test_complex",
                            "testing/python/approx.py::TestApprox::test_list",
                            "testing/python/approx.py::TestApprox::test_list_decimal",
                            "testing/python/approx.py::TestApprox::test_list_wrong_len",
                            "testing/python/approx.py::TestApprox::test_tuple",
                            "testing/python/approx.py::TestApprox::test_tuple_wrong_len",
                            "testing/python/approx.py::TestApprox::test_tuple_vs_other",
                            "testing/python/approx.py::TestApprox::test_dict",
                            "testing/python/approx.py::TestApprox::test_dict_decimal",
                            "testing/python/approx.py::TestApprox::test_dict_wrong_len",
                            "testing/python/approx.py::TestApprox::test_dict_nonnumeric",
                            "testing/python/approx.py::TestApprox::test_dict_vs_other",
                            "testing/python/approx.py::TestApprox::test_doctests",
                            "testing/python/approx.py::TestApprox::test_expected_value_type_error[nested-list]",
                            "testing/python/approx.py::TestApprox::test_expected_value_type_error[nested-dict]",
                            "testing/python/approx.py::TestApprox::test_nonnumeric_okay_if_equal[None]",
                            "testing/python/approx.py::TestApprox::test_nonnumeric_okay_if_equal[string]",
                            "testing/python/approx.py::TestApprox::test_nonnumeric_okay_if_equal[nested-str]",
                            "testing/python/approx.py::TestApprox::test_nonnumeric_okay_if_equal[dict-with-string]",
                            "testing/python/approx.py::TestApprox::test_nonnumeric_false_if_unequal[string]",
                            "testing/python/approx.py::TestApprox::test_nonnumeric_false_if_unequal[nested-str]",
                            "testing/python/approx.py::TestApprox::test_nonnumeric_false_if_unequal[dict-with-string]",
                            "testing/python/approx.py::TestApprox::test_nonnumeric_dict_repr",
                            "testing/python/approx.py::TestApprox::test_nonnumeric_list_repr",
                            "testing/python/approx.py::TestApprox::test_comparison_operator_type_error[<=]",
                            "testing/python/approx.py::TestApprox::test_comparison_operator_type_error[<]",
                            "testing/python/approx.py::TestApprox::test_comparison_operator_type_error[>=]",
                            "testing/python/approx.py::TestApprox::test_comparison_operator_type_error[>]",
                            "testing/python/approx.py::TestApprox::test_unicode_plus_minus"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "pytest-dev__pytest-9359.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "testing/code/test_source.py::test_decorator"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "testing/code/test_source.py::test_source_str_function",
                            "testing/code/test_source.py::test_source_from_function",
                            "testing/code/test_source.py::test_source_from_method",
                            "testing/code/test_source.py::test_source_from_lines",
                            "testing/code/test_source.py::test_source_from_inner_function",
                            "testing/code/test_source.py::test_source_strips",
                            "testing/code/test_source.py::test_source_strip_multiline",
                            "testing/code/test_source.py::TestAccesses::test_getrange",
                            "testing/code/test_source.py::TestAccesses::test_getrange_step_not_supported",
                            "testing/code/test_source.py::TestAccesses::test_getline",
                            "testing/code/test_source.py::TestAccesses::test_len",
                            "testing/code/test_source.py::TestAccesses::test_iter",
                            "testing/code/test_source.py::TestSourceParsing::test_getstatement",
                            "testing/code/test_source.py::TestSourceParsing::test_getstatementrange_triple_quoted",
                            "testing/code/test_source.py::TestSourceParsing::test_getstatementrange_within_constructs",
                            "testing/code/test_source.py::TestSourceParsing::test_getstatementrange_bug",
                            "testing/code/test_source.py::TestSourceParsing::test_getstatementrange_bug2",
                            "testing/code/test_source.py::TestSourceParsing::test_getstatementrange_ast_issue58",
                            "testing/code/test_source.py::TestSourceParsing::test_getstatementrange_out_of_bounds_py3",
                            "testing/code/test_source.py::TestSourceParsing::test_getstatementrange_with_syntaxerror_issue7",
                            "testing/code/test_source.py::test_getstartingblock_singleline",
                            "testing/code/test_source.py::test_getline_finally",
                            "testing/code/test_source.py::test_getfuncsource_dynamic",
                            "testing/code/test_source.py::test_getfuncsource_with_multine_string",
                            "testing/code/test_source.py::test_deindent",
                            "testing/code/test_source.py::test_source_of_class_at_eof_without_newline",
                            "testing/code/test_source.py::test_source_fallback",
                            "testing/code/test_source.py::test_findsource_fallback",
                            "testing/code/test_source.py::test_findsource",
                            "testing/code/test_source.py::test_getfslineno",
                            "testing/code/test_source.py::test_code_of_object_instance_with_call",
                            "testing/code/test_source.py::test_oneline",
                            "testing/code/test_source.py::test_comment_and_no_newline_at_end",
                            "testing/code/test_source.py::test_oneline_and_comment",
                            "testing/code/test_source.py::test_comments",
                            "testing/code/test_source.py::test_comment_in_statement",
                            "testing/code/test_source.py::test_source_with_decorator",
                            "testing/code/test_source.py::test_single_line_else",
                            "testing/code/test_source.py::test_single_line_finally",
                            "testing/code/test_source.py::test_issue55",
                            "testing/code/test_source.py::test_multiline",
                            "testing/code/test_source.py::TestTry::test_body",
                            "testing/code/test_source.py::TestTry::test_except_line",
                            "testing/code/test_source.py::TestTry::test_except_body",
                            "testing/code/test_source.py::TestTry::test_else",
                            "testing/code/test_source.py::TestTryFinally::test_body",
                            "testing/code/test_source.py::TestTryFinally::test_finally",
                            "testing/code/test_source.py::TestIf::test_body",
                            "testing/code/test_source.py::TestIf::test_elif_clause",
                            "testing/code/test_source.py::TestIf::test_elif",
                            "testing/code/test_source.py::TestIf::test_else",
                            "testing/code/test_source.py::test_semicolon",
                            "testing/code/test_source.py::test_def_online",
                            "testing/code/test_source.py::test_getstartingblock_multiline"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "sphinx-doc__sphinx-10097.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "tests/test_domain_std.py::test_cmd_option_with_optional_value",
                            "tests/test_domain_std.py::test_multiple_cmdoptions"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "tests/test_domain_std.py::test_process_doc_handle_figure_caption",
                            "tests/test_domain_std.py::test_process_doc_handle_table_title",
                            "tests/test_domain_std.py::test_get_full_qualified_name",
                            "tests/test_domain_std.py::test_cmd_option_starting_with_bracket",
                            "tests/test_domain_std.py::test_glossary",
                            "tests/test_domain_std.py::test_glossary_warning",
                            "tests/test_domain_std.py::test_glossary_comment",
                            "tests/test_domain_std.py::test_glossary_comment2",
                            "tests/test_domain_std.py::test_glossary_sorted",
                            "tests/test_domain_std.py::test_glossary_alphanumeric",
                            "tests/test_domain_std.py::test_glossary_conflicted_labels",
                            "tests/test_domain_std.py::test_cmdoption",
                            "tests/test_domain_std.py::test_cmdoption_for_None",
                            "tests/test_domain_std.py::test_productionlist",
                            "tests/test_domain_std.py::test_productionlist2",
                            "tests/test_domain_std.py::test_disabled_docref",
                            "tests/test_domain_std.py::test_labeled_rubric",
                            "tests/test_domain_std.py::test_inline_target"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "pytest-dev__pytest-7749.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "testing/test_collection.py::test_does_not_crash_on_error_from_decorated_function"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "testing/test_collection.py::TestCollector::test_collect_versus_item",
                            "testing/test_collection.py::test_fscollector_from_parent",
                            "testing/test_collection.py::TestCollector::test_check_equality",
                            "testing/test_collection.py::TestCollector::test_getparent",
                            "testing/test_collection.py::TestCollector::test_getcustomfile_roundtrip",
                            "testing/test_collection.py::TestCollector::test_can_skip_class_with_test_attr",
                            "testing/test_collection.py::TestCollectFS::test_ignored_certain_directories",
                            "testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs[activate]",
                            "testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs[activate.csh]",
                            "testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs[activate.fish]",
                            "testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs[Activate]",
                            "testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs[Activate.bat]",
                            "testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs[Activate.ps1]",
                            "testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs_norecursedirs_precedence[activate]",
                            "testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs_norecursedirs_precedence[activate.csh]",
                            "testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs_norecursedirs_precedence[activate.fish]",
                            "testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs_norecursedirs_precedence[Activate]",
                            "testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs_norecursedirs_precedence[Activate.bat]",
                            "testing/test_collection.py::TestCollectFS::test_ignored_virtualenvs_norecursedirs_precedence[Activate.ps1]",
                            "testing/test_collection.py::TestCollectFS::test__in_venv[activate]",
                            "testing/test_collection.py::TestCollectFS::test__in_venv[activate.csh]",
                            "testing/test_collection.py::TestCollectFS::test__in_venv[activate.fish]",
                            "testing/test_collection.py::TestCollectFS::test__in_venv[Activate]",
                            "testing/test_collection.py::TestCollectFS::test__in_venv[Activate.bat]",
                            "testing/test_collection.py::TestCollectFS::test__in_venv[Activate.ps1]",
                            "testing/test_collection.py::TestCollectFS::test_custom_norecursedirs",
                            "testing/test_collection.py::TestCollectFS::test_testpaths_ini",
                            "testing/test_collection.py::TestCollectPluginHookRelay::test_pytest_collect_file",
                            "testing/test_collection.py::TestPrunetraceback::test_custom_repr_failure",
                            "testing/test_collection.py::TestCustomConftests::test_ignore_collect_path",
                            "testing/test_collection.py::TestCustomConftests::test_ignore_collect_not_called_on_argument",
                            "testing/test_collection.py::TestCustomConftests::test_collectignore_exclude_on_option",
                            "testing/test_collection.py::TestCustomConftests::test_collectignoreglob_exclude_on_option",
                            "testing/test_collection.py::TestCustomConftests::test_pytest_fs_collect_hooks_are_seen",
                            "testing/test_collection.py::TestCustomConftests::test_pytest_collect_file_from_sister_dir",
                            "testing/test_collection.py::TestSession::test_collect_topdir",
                            "testing/test_collection.py::TestSession::test_collect_protocol_single_function",
                            "testing/test_collection.py::TestSession::test_collect_protocol_method",
                            "testing/test_collection.py::TestSession::test_collect_custom_nodes_multi_id",
                            "testing/test_collection.py::TestSession::test_collect_subdir_event_ordering",
                            "testing/test_collection.py::TestSession::test_collect_two_commandline_args",
                            "testing/test_collection.py::TestSession::test_serialization_byid",
                            "testing/test_collection.py::TestSession::test_find_byid_without_instance_parents",
                            "testing/test_collection.py::Test_getinitialnodes::test_global_file",
                            "testing/test_collection.py::Test_getinitialnodes::test_pkgfile",
                            "testing/test_collection.py::Test_genitems::test_check_collect_hashes",
                            "testing/test_collection.py::Test_genitems::test_example_items1",
                            "testing/test_collection.py::Test_genitems::test_class_and_functions_discovery_using_glob",
                            "testing/test_collection.py::test_matchnodes_two_collections_same_file",
                            "testing/test_collection.py::TestNodekeywords::test_no_under",
                            "testing/test_collection.py::TestNodekeywords::test_issue345",
                            "testing/test_collection.py::TestNodekeywords::test_keyword_matching_is_case_insensitive_by_default",
                            "testing/test_collection.py::test_exit_on_collection_error",
                            "testing/test_collection.py::test_exit_on_collection_with_maxfail_smaller_than_n_errors",
                            "testing/test_collection.py::test_exit_on_collection_with_maxfail_bigger_than_n_errors",
                            "testing/test_collection.py::test_continue_on_collection_errors",
                            "testing/test_collection.py::test_continue_on_collection_errors_maxfail",
                            "testing/test_collection.py::test_fixture_scope_sibling_conftests",
                            "testing/test_collection.py::test_collect_init_tests",
                            "testing/test_collection.py::test_collect_invalid_signature_message",
                            "testing/test_collection.py::test_collect_handles_raising_on_dunder_class",
                            "testing/test_collection.py::test_collect_with_chdir_during_import",
                            "testing/test_collection.py::test_collect_symlink_file_arg",
                            "testing/test_collection.py::test_collect_symlink_out_of_tree",
                            "testing/test_collection.py::test_collectignore_via_conftest",
                            "testing/test_collection.py::test_collect_pkg_init_and_file_in_args",
                            "testing/test_collection.py::test_collect_pkg_init_only",
                            "testing/test_collection.py::test_collect_sub_with_symlinks[True]",
                            "testing/test_collection.py::test_collect_sub_with_symlinks[False]",
                            "testing/test_collection.py::test_collector_respects_tbstyle",
                            "testing/test_collection.py::test_does_not_eagerly_collect_packages",
                            "testing/test_collection.py::test_does_not_put_src_on_path",
                            "testing/test_collection.py::TestImportModeImportlib::test_collect_duplicate_names",
                            "testing/test_collection.py::TestImportModeImportlib::test_conftest",
                            "testing/test_collection.py::TestImportModeImportlib::test_modules_importable_as_side_effect",
                            "testing/test_collection.py::TestImportModeImportlib::test_modules_not_importable_as_side_effect",
                            "testing/test_collection.py::test_collect_pyargs_with_testpaths"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "sphinx-doc__sphinx-9829.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "tests/test_ext_math.py::test_mathjax_options"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "tests/test_ext_math.py::test_mathjax_align",
                            "tests/test_ext_math.py::test_math_number_all_mathjax",
                            "tests/test_ext_math.py::test_math_number_all_latex",
                            "tests/test_ext_math.py::test_math_eqref_format_html",
                            "tests/test_ext_math.py::test_math_eqref_format_latex",
                            "tests/test_ext_math.py::test_mathjax_numfig_html",
                            "tests/test_ext_math.py::test_math_compat",
                            "tests/test_ext_math.py::test_mathjax3_config",
                            "tests/test_ext_math.py::test_mathjax2_config",
                            "tests/test_ext_math.py::test_mathjax_is_installed_only_if_document_having_math",
                            "tests/test_ext_math.py::test_mathjax_is_not_installed_if_no_equations",
                            "tests/test_ext_math.py::test_mathjax_is_installed_if_no_equations_when_forced"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "sphinx-doc__sphinx-9602.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "tests/test_domain_py.py::test_parse_annotation_Literal"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "tests/test_domain_py.py::test_function_signatures",
                            "tests/test_domain_py.py::test_domain_py_xrefs",
                            "tests/test_domain_py.py::test_domain_py_xrefs_abbreviations",
                            "tests/test_domain_py.py::test_domain_py_objects",
                            "tests/test_domain_py.py::test_resolve_xref_for_properties",
                            "tests/test_domain_py.py::test_domain_py_find_obj",
                            "tests/test_domain_py.py::test_domain_py_canonical",
                            "tests/test_domain_py.py::test_get_full_qualified_name",
                            "tests/test_domain_py.py::test_parse_annotation",
                            "tests/test_domain_py.py::test_pyfunction_signature",
                            "tests/test_domain_py.py::test_pyfunction_signature_full",
                            "tests/test_domain_py.py::test_pyfunction_signature_full_py38",
                            "tests/test_domain_py.py::test_pyfunction_with_number_literals",
                            "tests/test_domain_py.py::test_pyfunction_with_union_type_operator",
                            "tests/test_domain_py.py::test_optional_pyfunction_signature",
                            "tests/test_domain_py.py::test_pyexception_signature",
                            "tests/test_domain_py.py::test_pydata_signature",
                            "tests/test_domain_py.py::test_pydata_signature_old",
                            "tests/test_domain_py.py::test_pydata_with_union_type_operator",
                            "tests/test_domain_py.py::test_pyobject_prefix",
                            "tests/test_domain_py.py::test_pydata",
                            "tests/test_domain_py.py::test_pyfunction",
                            "tests/test_domain_py.py::test_pyclass_options",
                            "tests/test_domain_py.py::test_pymethod_options",
                            "tests/test_domain_py.py::test_pyclassmethod",
                            "tests/test_domain_py.py::test_pystaticmethod",
                            "tests/test_domain_py.py::test_pyattribute",
                            "tests/test_domain_py.py::test_pyproperty",
                            "tests/test_domain_py.py::test_pydecorator_signature",
                            "tests/test_domain_py.py::test_pydecoratormethod_signature",
                            "tests/test_domain_py.py::test_canonical",
                            "tests/test_domain_py.py::test_canonical_definition_overrides",
                            "tests/test_domain_py.py::test_canonical_definition_skip",
                            "tests/test_domain_py.py::test_canonical_duplicated",
                            "tests/test_domain_py.py::test_info_field_list",
                            "tests/test_domain_py.py::test_info_field_list_piped_type",
                            "tests/test_domain_py.py::test_info_field_list_var",
                            "tests/test_domain_py.py::test_module_index",
                            "tests/test_domain_py.py::test_module_index_submodule",
                            "tests/test_domain_py.py::test_module_index_not_collapsed",
                            "tests/test_domain_py.py::test_modindex_common_prefix",
                            "tests/test_domain_py.py::test_noindexentry",
                            "tests/test_domain_py.py::test_python_python_use_unqualified_type_names",
                            "tests/test_domain_py.py::test_python_python_use_unqualified_type_names_disabled",
                            "tests/test_domain_py.py::test_warn_missing_reference"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "pytest-dev__pytest-7314.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "testing/test_terminal.py::TestTerminalFunctional::test_summary_f_alias",
                            "testing/test_terminal.py::TestTerminalFunctional::test_summary_s_alias"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "test_pass_extra_reporting.py::test_this",
                            "test_pass_output_reporting.py::test_pass_has_output",
                            "test_pass_output_reporting.py::test_pass_no_output",
                            "testing/test_terminal.py::test_plugin_nameversion[normal]",
                            "testing/test_terminal.py::test_plugin_nameversion[prefix-strip]",
                            "testing/test_terminal.py::test_plugin_nameversion[deduplicate]",
                            "testing/test_terminal.py::test_getreportopt",
                            "testing/test_terminal.py::test_summary_stats[red-1",
                            "testing/test_terminal.py::test_summary_stats[yellow-1",
                            "testing/test_terminal.py::test_summary_stats[green-5",
                            "testing/test_terminal.py::test_summary_stats[green-1",
                            "testing/test_terminal.py::test_summary_stats[yellow-no",
                            "testing/test_terminal.py::test_skip_counting_towards_summary",
                            "testing/test_terminal.py::test_skip_reasons_folding",
                            "testing/test_terminal.py::test_line_with_reprcrash",
                            "testing/test_terminal.py::TestTerminal::test_pass_skip_fail[default]",
                            "testing/test_terminal.py::TestTerminal::test_pass_skip_fail[verbose]",
                            "testing/test_terminal.py::TestTerminal::test_pass_skip_fail[quiet]",
                            "testing/test_terminal.py::TestTerminal::test_pass_skip_fail[fulltrace]",
                            "testing/test_terminal.py::TestTerminal::test_internalerror",
                            "testing/test_terminal.py::TestTerminal::test_writeline",
                            "testing/test_terminal.py::TestTerminal::test_show_runtest_logstart",
                            "testing/test_terminal.py::TestTerminal::test_itemreport_subclasses_show_subclassed_file",
                            "testing/test_terminal.py::TestTerminal::test_itemreport_directclasses_not_shown_as_subclasses",
                            "testing/test_terminal.py::TestTerminal::test_keyboard_interrupt[default]",
                            "testing/test_terminal.py::TestTerminal::test_keyboard_interrupt[verbose]",
                            "testing/test_terminal.py::TestTerminal::test_keyboard_interrupt[quiet]",
                            "testing/test_terminal.py::TestTerminal::test_keyboard_interrupt[fulltrace]",
                            "testing/test_terminal.py::TestTerminal::test_keyboard_in_sessionstart",
                            "testing/test_terminal.py::TestTerminal::test_collect_single_item",
                            "testing/test_terminal.py::TestTerminal::test_rewrite",
                            "testing/test_terminal.py::TestCollectonly::test_collectonly_basic",
                            "testing/test_terminal.py::TestCollectonly::test_collectonly_skipped_module",
                            "testing/test_terminal.py::TestCollectonly::test_collectonly_display_test_description",
                            "testing/test_terminal.py::TestCollectonly::test_collectonly_failed_module",
                            "testing/test_terminal.py::TestCollectonly::test_collectonly_fatal",
                            "testing/test_terminal.py::TestCollectonly::test_collectonly_simple",
                            "testing/test_terminal.py::TestCollectonly::test_collectonly_error",
                            "testing/test_terminal.py::TestCollectonly::test_collectonly_missing_path",
                            "testing/test_terminal.py::TestCollectonly::test_collectonly_quiet",
                            "testing/test_terminal.py::TestCollectonly::test_collectonly_more_quiet",
                            "testing/test_terminal.py::TestFixtureReporting::test_setup_fixture_error",
                            "testing/test_terminal.py::TestFixtureReporting::test_teardown_fixture_error",
                            "testing/test_terminal.py::TestFixtureReporting::test_teardown_fixture_error_and_test_failure",
                            "testing/test_terminal.py::TestFixtureReporting::test_setup_teardown_output_and_test_failure",
                            "testing/test_terminal.py::TestTerminalFunctional::test_deselected",
                            "testing/test_terminal.py::TestTerminalFunctional::test_deselected_with_hookwrapper",
                            "testing/test_terminal.py::TestTerminalFunctional::test_show_deselected_items_using_markexpr_before_test_execution",
                            "testing/test_terminal.py::TestTerminalFunctional::test_no_skip_summary_if_failure",
                            "testing/test_terminal.py::TestTerminalFunctional::test_passes",
                            "testing/test_terminal.py::TestTerminalFunctional::test_header_trailer_info",
                            "testing/test_terminal.py::TestTerminalFunctional::test_header",
                            "testing/test_terminal.py::TestTerminalFunctional::test_showlocals",
                            "testing/test_terminal.py::TestTerminalFunctional::test_verbose_reporting",
                            "testing/test_terminal.py::TestTerminalFunctional::test_quiet_reporting",
                            "testing/test_terminal.py::TestTerminalFunctional::test_more_quiet_reporting",
                            "testing/test_terminal.py::TestTerminalFunctional::test_report_collectionfinish_hook[no-params]",
                            "testing/test_terminal.py::TestTerminalFunctional::test_report_collectionfinish_hook[collect-only]",
                            "testing/test_terminal.py::test_fail_extra_reporting",
                            "testing/test_terminal.py::test_fail_reporting_on_pass",
                            "testing/test_terminal.py::test_pass_extra_reporting",
                            "testing/test_terminal.py::test_pass_reporting_on_fail",
                            "testing/test_terminal.py::test_pass_output_reporting",
                            "testing/test_terminal.py::test_color_yes",
                            "testing/test_terminal.py::test_color_no",
                            "testing/test_terminal.py::test_color_yes_collection_on_non_atty[True]",
                            "testing/test_terminal.py::test_color_yes_collection_on_non_atty[False]",
                            "testing/test_terminal.py::test_terminalreporter_reportopt_addopts",
                            "testing/test_terminal.py::test_tbstyle_short",
                            "testing/test_terminal.py::test_traceconfig",
                            "testing/test_terminal.py::TestGenericReporting::test_collect_fail[default]",
                            "testing/test_terminal.py::TestGenericReporting::test_collect_fail[verbose]",
                            "testing/test_terminal.py::TestGenericReporting::test_collect_fail[quiet]",
                            "testing/test_terminal.py::TestGenericReporting::test_collect_fail[fulltrace]",
                            "testing/test_terminal.py::TestGenericReporting::test_maxfailures[default]",
                            "testing/test_terminal.py::TestGenericReporting::test_maxfailures[verbose]",
                            "testing/test_terminal.py::TestGenericReporting::test_maxfailures[quiet]",
                            "testing/test_terminal.py::TestGenericReporting::test_maxfailures[fulltrace]",
                            "testing/test_terminal.py::TestGenericReporting::test_tb_option[default]",
                            "testing/test_terminal.py::TestGenericReporting::test_tb_option[verbose]",
                            "testing/test_terminal.py::TestGenericReporting::test_tb_option[quiet]",
                            "testing/test_terminal.py::TestGenericReporting::test_tb_option[fulltrace]",
                            "testing/test_terminal.py::TestGenericReporting::test_tb_crashline[default]",
                            "testing/test_terminal.py::TestGenericReporting::test_tb_crashline[verbose]",
                            "testing/test_terminal.py::TestGenericReporting::test_tb_crashline[quiet]",
                            "testing/test_terminal.py::TestGenericReporting::test_tb_crashline[fulltrace]",
                            "testing/test_terminal.py::TestGenericReporting::test_pytest_report_header[default]",
                            "testing/test_terminal.py::TestGenericReporting::test_pytest_report_header[verbose]",
                            "testing/test_terminal.py::TestGenericReporting::test_pytest_report_header[quiet]",
                            "testing/test_terminal.py::TestGenericReporting::test_pytest_report_header[fulltrace]",
                            "testing/test_terminal.py::TestGenericReporting::test_show_capture",
                            "testing/test_terminal.py::TestGenericReporting::test_show_capture_with_teardown_logs",
                            "testing/test_terminal.py::test_fdopen_kept_alive_issue124",
                            "testing/test_terminal.py::test_tbstyle_native_setup_error",
                            "testing/test_terminal.py::test_terminal_summary",
                            "testing/test_terminal.py::test_terminal_summary_warnings_are_displayed",
                            "testing/test_terminal.py::test_terminal_summary_warnings_header_once",
                            "testing/test_terminal.py::TestClassicOutputStyle::test_normal_verbosity",
                            "testing/test_terminal.py::TestClassicOutputStyle::test_verbose",
                            "testing/test_terminal.py::TestClassicOutputStyle::test_quiet",
                            "testing/test_terminal.py::TestProgressOutputStyle::test_zero_tests_collected",
                            "testing/test_terminal.py::TestProgressOutputStyle::test_normal",
                            "testing/test_terminal.py::TestProgressOutputStyle::test_count",
                            "testing/test_terminal.py::TestProgressOutputStyle::test_verbose",
                            "testing/test_terminal.py::TestProgressOutputStyle::test_verbose_count",
                            "testing/test_terminal.py::TestProgressOutputStyle::test_capture_no",
                            "testing/test_terminal.py::TestProgressWithTeardown::test_teardown_simple",
                            "testing/test_terminal.py::TestProgressWithTeardown::test_teardown_with_test_also_failing",
                            "testing/test_terminal.py::TestProgressWithTeardown::test_teardown_many",
                            "testing/test_terminal.py::TestProgressWithTeardown::test_teardown_many_verbose"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "pydata__xarray-7105.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "xarray/tests/test_dataset.py::TestDataset::test_repr",
                            "xarray/tests/test_dataset.py::TestDataset::test_repr_multiindex",
                            "xarray/tests/test_dataset.py::TestDataset::test_repr_period_index",
                            "xarray/tests/test_dataset.py::TestDataset::test_unicode_data",
                            "xarray/tests/test_dataset.py::TestDataset::test_repr_nep18",
                            "xarray/tests/test_dataset.py::TestDataset::test_info",
                            "xarray/tests/test_dataset.py::TestDataset::test_constructor",
                            "xarray/tests/test_dataset.py::TestDataset::test_constructor_invalid_dims",
                            "xarray/tests/test_dataset.py::TestDataset::test_constructor_1d",
                            "xarray/tests/test_dataset.py::TestDataset::test_constructor_0d",
                            "xarray/tests/test_dataset.py::TestDataset::test_constructor_auto_align",
                            "xarray/tests/test_dataset.py::TestDataset::test_constructor_pandas_sequence",
                            "xarray/tests/test_dataset.py::TestDataset::test_constructor_pandas_single",
                            "xarray/tests/test_dataset.py::TestDataset::test_constructor_compat",
                            "xarray/tests/test_dataset.py::TestDataset::test_constructor_with_coords",
                            "xarray/tests/test_dataset.py::TestDataset::test_properties",
                            "xarray/tests/test_dataset.py::TestDataset::test_asarray",
                            "xarray/tests/test_dataset.py::TestDataset::test_get_index",
                            "xarray/tests/test_dataset.py::TestDataset::test_attr_access",
                            "xarray/tests/test_dataset.py::TestDataset::test_variable",
                            "xarray/tests/test_dataset.py::TestDataset::test_modify_inplace",
                            "xarray/tests/test_dataset.py::TestDataset::test_coords_properties",
                            "xarray/tests/test_dataset.py::TestDataset::test_coords_modify",
                            "xarray/tests/test_dataset.py::TestDataset::test_update_index",
                            "xarray/tests/test_dataset.py::TestDataset::test_coords_setitem_with_new_dimension",
                            "xarray/tests/test_dataset.py::TestDataset::test_coords_setitem_multiindex",
                            "xarray/tests/test_dataset.py::TestDataset::test_coords_set",
                            "xarray/tests/test_dataset.py::TestDataset::test_coords_to_dataset",
                            "xarray/tests/test_dataset.py::TestDataset::test_coords_merge",
                            "xarray/tests/test_dataset.py::TestDataset::test_coords_merge_mismatched_shape",
                            "xarray/tests/test_dataset.py::TestDataset::test_data_vars_properties",
                            "xarray/tests/test_dataset.py::TestDataset::test_equals_and_identical",
                            "xarray/tests/test_dataset.py::TestDataset::test_equals_failures",
                            "xarray/tests/test_dataset.py::TestDataset::test_broadcast_equals",
                            "xarray/tests/test_dataset.py::TestDataset::test_attrs",
                            "xarray/tests/test_dataset.py::TestDataset::test_chunks_does_not_load_data",
                            "xarray/tests/test_dataset.py::TestDataset::test_isel",
                            "xarray/tests/test_dataset.py::TestDataset::test_isel_fancy",
                            "xarray/tests/test_dataset.py::TestDataset::test_isel_dataarray",
                            "xarray/tests/test_dataset.py::TestDataset::test_isel_fancy_convert_index_variable",
                            "xarray/tests/test_dataset.py::TestDataset::test_sel",
                            "xarray/tests/test_dataset.py::TestDataset::test_sel_dataarray",
                            "xarray/tests/test_dataset.py::TestDataset::test_sel_dataarray_mindex",
                            "xarray/tests/test_dataset.py::TestDataset::test_sel_categorical",
                            "xarray/tests/test_dataset.py::TestDataset::test_sel_categorical_error",
                            "xarray/tests/test_dataset.py::TestDataset::test_categorical_index",
                            "xarray/tests/test_dataset.py::TestDataset::test_categorical_reindex",
                            "xarray/tests/test_dataset.py::TestDataset::test_categorical_multiindex",
                            "xarray/tests/test_dataset.py::TestDataset::test_sel_drop",
                            "xarray/tests/test_dataset.py::TestDataset::test_sel_drop_mindex",
                            "xarray/tests/test_dataset.py::TestDataset::test_isel_drop",
                            "xarray/tests/test_dataset.py::TestDataset::test_head",
                            "xarray/tests/test_dataset.py::TestDataset::test_tail",
                            "xarray/tests/test_dataset.py::TestDataset::test_thin",
                            "xarray/tests/test_dataset.py::TestDataset::test_sel_fancy",
                            "xarray/tests/test_dataset.py::TestDataset::test_sel_method",
                            "xarray/tests/test_dataset.py::TestDataset::test_loc",
                            "xarray/tests/test_dataset.py::TestDataset::test_selection_multiindex",
                            "xarray/tests/test_dataset.py::TestDataset::test_broadcast_like",
                            "xarray/tests/test_dataset.py::TestDataset::test_to_pandas",
                            "xarray/tests/test_dataset.py::TestDataset::test_reindex_like",
                            "xarray/tests/test_dataset.py::TestDataset::test_reindex",
                            "xarray/tests/test_dataset.py::TestDataset::test_reindex_attrs_encoding",
                            "xarray/tests/test_dataset.py::TestDataset::test_reindex_warning",
                            "xarray/tests/test_dataset.py::TestDataset::test_reindex_variables_copied",
                            "xarray/tests/test_dataset.py::TestDataset::test_reindex_method",
                            "xarray/tests/test_dataset.py::TestDataset::test_reindex_fill_value[fill_value0]",
                            "xarray/tests/test_dataset.py::TestDataset::test_reindex_fill_value[2]",
                            "xarray/tests/test_dataset.py::TestDataset::test_reindex_fill_value[2.0]",
                            "xarray/tests/test_dataset.py::TestDataset::test_reindex_fill_value[fill_value3]",
                            "xarray/tests/test_dataset.py::TestDataset::test_reindex_like_fill_value[fill_value0]",
                            "xarray/tests/test_dataset.py::TestDataset::test_reindex_like_fill_value[2]",
                            "xarray/tests/test_dataset.py::TestDataset::test_reindex_like_fill_value[2.0]",
                            "xarray/tests/test_dataset.py::TestDataset::test_reindex_like_fill_value[fill_value3]",
                            "xarray/tests/test_dataset.py::TestDataset::test_reindex_str_dtype[str]",
                            "xarray/tests/test_dataset.py::TestDataset::test_reindex_str_dtype[bytes]",
                            "xarray/tests/test_dataset.py::TestDataset::test_align_fill_value[fill_value0]",
                            "xarray/tests/test_dataset.py::TestDataset::test_align_fill_value[2]",
                            "xarray/tests/test_dataset.py::TestDataset::test_align_fill_value[2.0]",
                            "xarray/tests/test_dataset.py::TestDataset::test_align_fill_value[fill_value3]",
                            "xarray/tests/test_dataset.py::TestDataset::test_align",
                            "xarray/tests/test_dataset.py::TestDataset::test_align_exact",
                            "xarray/tests/test_dataset.py::TestDataset::test_align_override",
                            "xarray/tests/test_dataset.py::TestDataset::test_align_exclude",
                            "xarray/tests/test_dataset.py::TestDataset::test_align_nocopy",
                            "xarray/tests/test_dataset.py::TestDataset::test_align_indexes",
                            "xarray/tests/test_dataset.py::TestDataset::test_align_non_unique",
                            "xarray/tests/test_dataset.py::TestDataset::test_align_str_dtype",
                            "xarray/tests/test_dataset.py::TestDataset::test_align_index_var_attrs[left]",
                            "xarray/tests/test_dataset.py::TestDataset::test_align_index_var_attrs[override]",
                            "xarray/tests/test_dataset.py::TestDataset::test_broadcast",
                            "xarray/tests/test_dataset.py::TestDataset::test_broadcast_nocopy",
                            "xarray/tests/test_dataset.py::TestDataset::test_broadcast_exclude",
                            "xarray/tests/test_dataset.py::TestDataset::test_broadcast_misaligned",
                            "xarray/tests/test_dataset.py::TestDataset::test_broadcast_multi_index",
                            "xarray/tests/test_dataset.py::TestDataset::test_variable_indexing",
                            "xarray/tests/test_dataset.py::TestDataset::test_drop_variables",
                            "xarray/tests/test_dataset.py::TestDataset::test_drop_multiindex_level",
                            "xarray/tests/test_dataset.py::TestDataset::test_drop_labels_by_keyword",
                            "xarray/tests/test_dataset.py::TestDataset::test_drop_labels_by_position",
                            "xarray/tests/test_dataset.py::TestDataset::test_drop_indexes",
                            "xarray/tests/test_dataset.py::TestDataset::test_drop_dims",
                            "xarray/tests/test_dataset.py::TestDataset::test_copy",
                            "xarray/tests/test_dataset.py::TestDataset::test_copy_with_data",
                            "xarray/tests/test_dataset.py::TestDataset::test_copy_with_data_errors",
                            "xarray/tests/test_dataset.py::TestDataset::test_rename",
                            "xarray/tests/test_dataset.py::TestDataset::test_rename_old_name",
                            "xarray/tests/test_dataset.py::TestDataset::test_rename_same_name",
                            "xarray/tests/test_dataset.py::TestDataset::test_rename_dims",
                            "xarray/tests/test_dataset.py::TestDataset::test_rename_vars",
                            "xarray/tests/test_dataset.py::TestDataset::test_rename_dimension_coord",
                            "xarray/tests/test_dataset.py::TestDataset::test_rename_dimension_coord_warnings",
                            "xarray/tests/test_dataset.py::TestDataset::test_rename_perserve_attrs_encoding",
                            "xarray/tests/test_dataset.py::TestDataset::test_rename_does_not_change_DatetimeIndex_type",
                            "xarray/tests/test_dataset.py::TestDataset::test_swap_dims",
                            "xarray/tests/test_dataset.py::TestDataset::test_expand_dims_error",
                            "xarray/tests/test_dataset.py::TestDataset::test_expand_dims_int",
                            "xarray/tests/test_dataset.py::TestDataset::test_expand_dims_coords",
                            "xarray/tests/test_dataset.py::TestDataset::test_expand_dims_existing_scalar_coord",
                            "xarray/tests/test_dataset.py::TestDataset::test_isel_expand_dims_roundtrip",
                            "xarray/tests/test_dataset.py::TestDataset::test_expand_dims_mixed_int_and_coords",
                            "xarray/tests/test_dataset.py::TestDataset::test_expand_dims_kwargs_python36plus",
                            "xarray/tests/test_dataset.py::TestDataset::test_set_index",
                            "xarray/tests/test_dataset.py::TestDataset::test_set_index_deindexed_coords",
                            "xarray/tests/test_dataset.py::TestDataset::test_reset_index",
                            "xarray/tests/test_dataset.py::TestDataset::test_reset_index_keep_attrs",
                            "xarray/tests/test_dataset.py::TestDataset::test_reset_index_drop_dims",
                            "xarray/tests/test_dataset.py::TestDataset::test_reset_index_drop_convert[foo-False-dropped0-converted0-renamed0]",
                            "xarray/tests/test_dataset.py::TestDataset::test_reset_index_drop_convert[foo-True-dropped1-converted1-renamed1]",
                            "xarray/tests/test_dataset.py::TestDataset::test_reset_index_drop_convert[x-False-dropped2-converted2-renamed2]",
                            "xarray/tests/test_dataset.py::TestDataset::test_reset_index_drop_convert[x-True-dropped3-converted3-renamed3]",
                            "xarray/tests/test_dataset.py::TestDataset::test_reset_index_drop_convert[arg4-False-dropped4-converted4-renamed4]",
                            "xarray/tests/test_dataset.py::TestDataset::test_reset_index_drop_convert[arg5-True-dropped5-converted5-renamed5]",
                            "xarray/tests/test_dataset.py::TestDataset::test_reset_index_drop_convert[arg6-False-dropped6-converted6-renamed6]",
                            "xarray/tests/test_dataset.py::TestDataset::test_reset_index_drop_convert[arg7-True-dropped7-converted7-renamed7]",
                            "xarray/tests/test_dataset.py::TestDataset::test_reorder_levels",
                            "xarray/tests/test_dataset.py::TestDataset::test_set_xindex",
                            "xarray/tests/test_dataset.py::TestDataset::test_set_xindex_options",
                            "xarray/tests/test_dataset.py::TestDataset::test_stack",
                            "xarray/tests/test_dataset.py::TestDataset::test_stack_create_index[True-expected_keys0]",
                            "xarray/tests/test_dataset.py::TestDataset::test_stack_create_index[False-expected_keys1]",
                            "xarray/tests/test_dataset.py::TestDataset::test_stack_create_index[None-expected_keys2]",
                            "xarray/tests/test_dataset.py::TestDataset::test_stack_multi_index",
                            "xarray/tests/test_dataset.py::TestDataset::test_stack_non_dim_coords",
                            "xarray/tests/test_dataset.py::TestDataset::test_unstack",
                            "xarray/tests/test_dataset.py::TestDataset::test_unstack_errors",
                            "xarray/tests/test_dataset.py::TestDataset::test_unstack_fill_value",
                            "xarray/tests/test_dataset.py::TestDataset::test_stack_unstack_fast",
                            "xarray/tests/test_dataset.py::TestDataset::test_stack_unstack_slow",
                            "xarray/tests/test_dataset.py::TestDataset::test_to_stacked_array_invalid_sample_dims",
                            "xarray/tests/test_dataset.py::TestDataset::test_to_stacked_array_name",
                            "xarray/tests/test_dataset.py::TestDataset::test_to_stacked_array_dtype_dims",
                            "xarray/tests/test_dataset.py::TestDataset::test_to_stacked_array_to_unstacked_dataset",
                            "xarray/tests/test_dataset.py::TestDataset::test_to_stacked_array_to_unstacked_dataset_different_dimension",
                            "xarray/tests/test_dataset.py::TestDataset::test_update",
                            "xarray/tests/test_dataset.py::TestDataset::test_update_overwrite_coords",
                            "xarray/tests/test_dataset.py::TestDataset::test_update_multiindex_level",
                            "xarray/tests/test_dataset.py::TestDataset::test_update_auto_align",
                            "xarray/tests/test_dataset.py::TestDataset::test_getitem",
                            "xarray/tests/test_dataset.py::TestDataset::test_getitem_hashable",
                            "xarray/tests/test_dataset.py::TestDataset::test_getitem_multiple_dtype",
                            "xarray/tests/test_dataset.py::TestDataset::test_virtual_variables_default_coords",
                            "xarray/tests/test_dataset.py::TestDataset::test_virtual_variables_time",
                            "xarray/tests/test_dataset.py::TestDataset::test_virtual_variable_same_name",
                            "xarray/tests/test_dataset.py::TestDataset::test_time_season",
                            "xarray/tests/test_dataset.py::TestDataset::test_slice_virtual_variable",
                            "xarray/tests/test_dataset.py::TestDataset::test_setitem",
                            "xarray/tests/test_dataset.py::TestDataset::test_setitem_pandas",
                            "xarray/tests/test_dataset.py::TestDataset::test_setitem_auto_align",
                            "xarray/tests/test_dataset.py::TestDataset::test_setitem_dimension_override",
                            "xarray/tests/test_dataset.py::TestDataset::test_setitem_with_coords",
                            "xarray/tests/test_dataset.py::TestDataset::test_setitem_align_new_indexes",
                            "xarray/tests/test_dataset.py::TestDataset::test_setitem_str_dtype[str]",
                            "xarray/tests/test_dataset.py::TestDataset::test_setitem_str_dtype[bytes]",
                            "xarray/tests/test_dataset.py::TestDataset::test_setitem_using_list",
                            "xarray/tests/test_dataset.py::TestDataset::test_setitem_using_list_errors[var_list0-data0-Different",
                            "xarray/tests/test_dataset.py::TestDataset::test_setitem_using_list_errors[var_list1-data1-Empty",
                            "xarray/tests/test_dataset.py::TestDataset::test_setitem_using_list_errors[var_list2-data2-assign",
                            "xarray/tests/test_dataset.py::TestDataset::test_assign",
                            "xarray/tests/test_dataset.py::TestDataset::test_assign_coords",
                            "xarray/tests/test_dataset.py::TestDataset::test_assign_attrs",
                            "xarray/tests/test_dataset.py::TestDataset::test_assign_multiindex_level",
                            "xarray/tests/test_dataset.py::TestDataset::test_assign_coords_existing_multiindex",
                            "xarray/tests/test_dataset.py::TestDataset::test_assign_all_multiindex_coords",
                            "xarray/tests/test_dataset.py::TestDataset::test_merge_multiindex_level",
                            "xarray/tests/test_dataset.py::TestDataset::test_setitem_original_non_unique_index",
                            "xarray/tests/test_dataset.py::TestDataset::test_setitem_both_non_unique_index",
                            "xarray/tests/test_dataset.py::TestDataset::test_setitem_multiindex_level",
                            "xarray/tests/test_dataset.py::TestDataset::test_delitem",
                            "xarray/tests/test_dataset.py::TestDataset::test_delitem_multiindex_level",
                            "xarray/tests/test_dataset.py::TestDataset::test_squeeze",
                            "xarray/tests/test_dataset.py::TestDataset::test_squeeze_drop",
                            "xarray/tests/test_dataset.py::TestDataset::test_to_array",
                            "xarray/tests/test_dataset.py::TestDataset::test_to_and_from_dataframe",
                            "xarray/tests/test_dataset.py::TestDataset::test_from_dataframe_categorical",
                            "xarray/tests/test_dataset.py::TestDataset::test_to_and_from_empty_dataframe",
                            "xarray/tests/test_dataset.py::TestDataset::test_from_dataframe_multiindex",
                            "xarray/tests/test_dataset.py::TestDataset::test_from_dataframe_unsorted_levels",
                            "xarray/tests/test_dataset.py::TestDataset::test_from_dataframe_non_unique_columns",
                            "xarray/tests/test_dataset.py::TestDataset::test_convert_dataframe_with_many_types_and_multiindex",
                            "xarray/tests/test_dataset.py::TestDataset::test_to_and_from_dict",
                            "xarray/tests/test_dataset.py::TestDataset::test_to_and_from_dict_with_time_dim",
                            "xarray/tests/test_dataset.py::TestDataset::test_to_and_from_dict_with_nan_nat",
                            "xarray/tests/test_dataset.py::TestDataset::test_to_dict_with_numpy_attrs",
                            "xarray/tests/test_dataset.py::TestDataset::test_pickle",
                            "xarray/tests/test_dataset.py::TestDataset::test_lazy_load",
                            "xarray/tests/test_dataset.py::TestDataset::test_dropna",
                            "xarray/tests/test_dataset.py::TestDataset::test_fillna",
                            "xarray/tests/test_dataset.py::TestDataset::test_propagate_attrs[<lambda>0]",
                            "xarray/tests/test_dataset.py::TestDataset::test_propagate_attrs[<lambda>1]",
                            "xarray/tests/test_dataset.py::TestDataset::test_propagate_attrs[absolute]",
                            "xarray/tests/test_dataset.py::TestDataset::test_propagate_attrs[abs]",
                            "xarray/tests/test_dataset.py::TestDataset::test_where",
                            "xarray/tests/test_dataset.py::TestDataset::test_where_other",
                            "xarray/tests/test_dataset.py::TestDataset::test_where_drop",
                            "xarray/tests/test_dataset.py::TestDataset::test_where_drop_empty",
                            "xarray/tests/test_dataset.py::TestDataset::test_where_drop_no_indexes",
                            "xarray/tests/test_dataset.py::TestDataset::test_reduce",
                            "xarray/tests/test_dataset.py::TestDataset::test_reduce_coords",
                            "xarray/tests/test_dataset.py::TestDataset::test_mean_uint_dtype",
                            "xarray/tests/test_dataset.py::TestDataset::test_reduce_bad_dim",
                            "xarray/tests/test_dataset.py::TestDataset::test_reduce_cumsum",
                            "xarray/tests/test_dataset.py::TestDataset::test_reduce_cumsum_test_dims[cumsum-dim1-expected0]",
                            "xarray/tests/test_dataset.py::TestDataset::test_reduce_cumsum_test_dims[cumsum-dim2-expected1]",
                            "xarray/tests/test_dataset.py::TestDataset::test_reduce_cumsum_test_dims[cumsum-dim3-expected2]",
                            "xarray/tests/test_dataset.py::TestDataset::test_reduce_cumsum_test_dims[cumsum-time-expected3]",
                            "xarray/tests/test_dataset.py::TestDataset::test_reduce_cumsum_test_dims[cumprod-dim1-expected0]",
                            "xarray/tests/test_dataset.py::TestDataset::test_reduce_cumsum_test_dims[cumprod-dim2-expected1]",
                            "xarray/tests/test_dataset.py::TestDataset::test_reduce_cumsum_test_dims[cumprod-dim3-expected2]",
                            "xarray/tests/test_dataset.py::TestDataset::test_reduce_cumsum_test_dims[cumprod-time-expected3]",
                            "xarray/tests/test_dataset.py::TestDataset::test_reduce_non_numeric",
                            "xarray/tests/test_dataset.py::TestDataset::test_reduce_strings",
                            "xarray/tests/test_dataset.py::TestDataset::test_reduce_dtypes",
                            "xarray/tests/test_dataset.py::TestDataset::test_reduce_keep_attrs",
                            "xarray/tests/test_dataset.py::TestDataset::test_reduce_argmin",
                            "xarray/tests/test_dataset.py::TestDataset::test_reduce_scalars",
                            "xarray/tests/test_dataset.py::TestDataset::test_reduce_only_one_axis",
                            "xarray/tests/test_dataset.py::TestDataset::test_reduce_no_axis",
                            "xarray/tests/test_dataset.py::TestDataset::test_reduce_keepdims",
                            "xarray/tests/test_dataset.py::TestDataset::test_quantile[0.25-True]",
                            "xarray/tests/test_dataset.py::TestDataset::test_quantile[0.25-False]",
                            "xarray/tests/test_dataset.py::TestDataset::test_quantile[0.25-None]",
                            "xarray/tests/test_dataset.py::TestDataset::test_quantile[q1-True]",
                            "xarray/tests/test_dataset.py::TestDataset::test_quantile[q1-False]",
                            "xarray/tests/test_dataset.py::TestDataset::test_quantile[q1-None]",
                            "xarray/tests/test_dataset.py::TestDataset::test_quantile[q2-True]",
                            "xarray/tests/test_dataset.py::TestDataset::test_quantile[q2-False]",
                            "xarray/tests/test_dataset.py::TestDataset::test_quantile[q2-None]",
                            "xarray/tests/test_dataset.py::TestDataset::test_quantile_skipna[True]",
                            "xarray/tests/test_dataset.py::TestDataset::test_quantile_skipna[False]",
                            "xarray/tests/test_dataset.py::TestDataset::test_quantile_method[midpoint]",
                            "xarray/tests/test_dataset.py::TestDataset::test_quantile_method[lower]",
                            "xarray/tests/test_dataset.py::TestDataset::test_quantile_interpolation_deprecated[midpoint]",
                            "xarray/tests/test_dataset.py::TestDataset::test_quantile_interpolation_deprecated[lower]",
                            "xarray/tests/test_dataset.py::TestDataset::test_rank_use_bottleneck",
                            "xarray/tests/test_dataset.py::TestDataset::test_count",
                            "xarray/tests/test_dataset.py::TestDataset::test_map",
                            "xarray/tests/test_dataset.py::TestDataset::test_apply_pending_deprecated_map",
                            "xarray/tests/test_dataset.py::TestDataset::test_dataset_number_math",
                            "xarray/tests/test_dataset.py::TestDataset::test_unary_ops",
                            "xarray/tests/test_dataset.py::TestDataset::test_dataset_array_math",
                            "xarray/tests/test_dataset.py::TestDataset::test_dataset_dataset_math",
                            "xarray/tests/test_dataset.py::TestDataset::test_dataset_math_auto_align",
                            "xarray/tests/test_dataset.py::TestDataset::test_dataset_math_errors",
                            "xarray/tests/test_dataset.py::TestDataset::test_dataset_transpose",
                            "xarray/tests/test_dataset.py::TestDataset::test_dataset_ellipsis_transpose_different_ordered_vars",
                            "xarray/tests/test_dataset.py::TestDataset::test_dataset_retains_period_index_on_transpose",
                            "xarray/tests/test_dataset.py::TestDataset::test_dataset_diff_n1_simple",
                            "xarray/tests/test_dataset.py::TestDataset::test_dataset_diff_n1_label",
                            "xarray/tests/test_dataset.py::TestDataset::test_dataset_diff_n1",
                            "xarray/tests/test_dataset.py::TestDataset::test_dataset_diff_n2",
                            "xarray/tests/test_dataset.py::TestDataset::test_dataset_diff_exception_n_neg",
                            "xarray/tests/test_dataset.py::TestDataset::test_dataset_diff_exception_label_str",
                            "xarray/tests/test_dataset.py::TestDataset::test_shift[fill_value0]",
                            "xarray/tests/test_dataset.py::TestDataset::test_shift[2]",
                            "xarray/tests/test_dataset.py::TestDataset::test_shift[2.0]",
                            "xarray/tests/test_dataset.py::TestDataset::test_shift[fill_value3]",
                            "xarray/tests/test_dataset.py::TestDataset::test_roll_coords",
                            "xarray/tests/test_dataset.py::TestDataset::test_roll_no_coords",
                            "xarray/tests/test_dataset.py::TestDataset::test_roll_multidim",
                            "xarray/tests/test_dataset.py::TestDataset::test_real_and_imag",
                            "xarray/tests/test_dataset.py::TestDataset::test_setattr_raises",
                            "xarray/tests/test_dataset.py::TestDataset::test_filter_by_attrs",
                            "xarray/tests/test_dataset.py::TestDataset::test_binary_op_propagate_indexes",
                            "xarray/tests/test_dataset.py::TestDataset::test_binary_op_join_setting",
                            "xarray/tests/test_dataset.py::TestDataset::test_full_like",
                            "xarray/tests/test_dataset.py::TestDataset::test_combine_first",
                            "xarray/tests/test_dataset.py::TestDataset::test_sortby",
                            "xarray/tests/test_dataset.py::TestDataset::test_attribute_access",
                            "xarray/tests/test_dataset.py::TestDataset::test_ipython_key_completion",
                            "xarray/tests/test_dataset.py::TestDataset::test_polyfit_output",
                            "xarray/tests/test_dataset.py::TestDataset::test_polyfit_warnings",
                            "xarray/tests/test_dataset.py::TestDataset::test_pad",
                            "xarray/tests/test_dataset.py::TestDataset::test_astype_attrs",
                            "xarray/tests/test_dataset.py::TestDataset::test_query[numpy-python-pandas]",
                            "xarray/tests/test_dataset.py::TestDataset::test_query[numpy-python-python]",
                            "xarray/tests/test_dataset.py::TestDataset::test_query[numpy-None-pandas]",
                            "xarray/tests/test_dataset.py::TestDataset::test_query[numpy-None-python]",
                            "xarray/tests/test_dataset.py::test_isin[numpy-test_elements0]",
                            "xarray/tests/test_dataset.py::test_isin[numpy-test_elements1]",
                            "xarray/tests/test_dataset.py::test_isin[numpy-test_elements2]",
                            "xarray/tests/test_dataset.py::test_isin_dataset",
                            "xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords0]",
                            "xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords1]",
                            "xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords2]",
                            "xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords3]",
                            "xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords4]",
                            "xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords5]",
                            "xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords6]",
                            "xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords7]",
                            "xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords8]",
                            "xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords9]",
                            "xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords0]",
                            "xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords1]",
                            "xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords2]",
                            "xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords3]",
                            "xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords4]",
                            "xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords5]",
                            "xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords6]",
                            "xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords7]",
                            "xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords8]",
                            "xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords9]",
                            "xarray/tests/test_dataset.py::test_error_message_on_set_supplied",
                            "xarray/tests/test_dataset.py::test_constructor_raises_with_invalid_coords[unaligned_coords0]",
                            "xarray/tests/test_dataset.py::test_dir_expected_attrs[numpy-3]",
                            "xarray/tests/test_dataset.py::test_dir_non_string[1-numpy]",
                            "xarray/tests/test_dataset.py::test_dir_unicode[1-numpy]",
                            "xarray/tests/test_dataset.py::test_raise_no_warning_for_nan_in_binary_ops",
                            "xarray/tests/test_dataset.py::test_raise_no_warning_assert_close[numpy-2]",
                            "xarray/tests/test_dataset.py::test_differentiate[1-True]",
                            "xarray/tests/test_dataset.py::test_differentiate[1-False]",
                            "xarray/tests/test_dataset.py::test_differentiate[2-True]",
                            "xarray/tests/test_dataset.py::test_differentiate[2-False]",
                            "xarray/tests/test_dataset.py::test_differentiate_datetime[True]",
                            "xarray/tests/test_dataset.py::test_differentiate_datetime[False]",
                            "xarray/tests/test_dataset.py::test_integrate[True]",
                            "xarray/tests/test_dataset.py::test_integrate[False]",
                            "xarray/tests/test_dataset.py::test_trapz_datetime[np-True]",
                            "xarray/tests/test_dataset.py::test_trapz_datetime[np-False]",
                            "xarray/tests/test_dataset.py::test_no_dict",
                            "xarray/tests/test_dataset.py::test_subclass_slots",
                            "xarray/tests/test_dataset.py::test_weakref",
                            "xarray/tests/test_dataset.py::test_deepcopy_obj_array",
                            "xarray/tests/test_dataset.py::test_deepcopy_recursive",
                            "xarray/tests/test_dataset.py::test_clip[1-numpy]",
                            "xarray/tests/test_dataset.py::TestDropDuplicates::test_drop_duplicates_1d[first]",
                            "xarray/tests/test_dataset.py::TestDropDuplicates::test_drop_duplicates_1d[last]",
                            "xarray/tests/test_dataset.py::TestDropDuplicates::test_drop_duplicates_1d[False]",
                            "xarray/tests/test_dataset.py::TestNumpyCoercion::test_from_numpy",
                            "xarray/tests/test_dataset.py::test_string_keys_typing",
                            "xarray/tests/test_dataset.py::test_transpose_error",
                            "xarray/tests/test_indexes.py::test_asarray_tuplesafe",
                            "xarray/tests/test_indexes.py::TestIndex::test_from_variables",
                            "xarray/tests/test_indexes.py::TestIndex::test_concat",
                            "xarray/tests/test_indexes.py::TestIndex::test_stack",
                            "xarray/tests/test_indexes.py::TestIndex::test_unstack",
                            "xarray/tests/test_indexes.py::TestIndex::test_create_variables",
                            "xarray/tests/test_indexes.py::TestIndex::test_to_pandas_index",
                            "xarray/tests/test_indexes.py::TestIndex::test_isel",
                            "xarray/tests/test_indexes.py::TestIndex::test_sel",
                            "xarray/tests/test_indexes.py::TestIndex::test_join",
                            "xarray/tests/test_indexes.py::TestIndex::test_reindex_like",
                            "xarray/tests/test_indexes.py::TestIndex::test_equals",
                            "xarray/tests/test_indexes.py::TestIndex::test_roll",
                            "xarray/tests/test_indexes.py::TestIndex::test_rename",
                            "xarray/tests/test_indexes.py::TestIndex::test_copy[True]",
                            "xarray/tests/test_indexes.py::TestIndex::test_copy[False]",
                            "xarray/tests/test_indexes.py::TestIndex::test_getitem",
                            "xarray/tests/test_indexes.py::TestPandasIndex::test_constructor",
                            "xarray/tests/test_indexes.py::TestPandasIndex::test_from_variables",
                            "xarray/tests/test_indexes.py::TestPandasIndex::test_from_variables_index_adapter",
                            "xarray/tests/test_indexes.py::TestPandasIndex::test_concat_periods",
                            "xarray/tests/test_indexes.py::TestPandasIndex::test_concat_str_dtype[str]",
                            "xarray/tests/test_indexes.py::TestPandasIndex::test_concat_str_dtype[bytes]",
                            "xarray/tests/test_indexes.py::TestPandasIndex::test_concat_empty",
                            "xarray/tests/test_indexes.py::TestPandasIndex::test_concat_dim_error",
                            "xarray/tests/test_indexes.py::TestPandasIndex::test_create_variables",
                            "xarray/tests/test_indexes.py::TestPandasIndex::test_to_pandas_index",
                            "xarray/tests/test_indexes.py::TestPandasIndex::test_sel",
                            "xarray/tests/test_indexes.py::TestPandasIndex::test_sel_boolean",
                            "xarray/tests/test_indexes.py::TestPandasIndex::test_sel_datetime",
                            "xarray/tests/test_indexes.py::TestPandasIndex::test_sel_unsorted_datetime_index_raises",
                            "xarray/tests/test_indexes.py::TestPandasIndex::test_equals",
                            "xarray/tests/test_indexes.py::TestPandasIndex::test_join",
                            "xarray/tests/test_indexes.py::TestPandasIndex::test_reindex_like",
                            "xarray/tests/test_indexes.py::TestPandasIndex::test_rename",
                            "xarray/tests/test_indexes.py::TestPandasIndex::test_copy",
                            "xarray/tests/test_indexes.py::TestPandasIndex::test_getitem",
                            "xarray/tests/test_indexes.py::TestPandasMultiIndex::test_constructor",
                            "xarray/tests/test_indexes.py::TestPandasMultiIndex::test_from_variables",
                            "xarray/tests/test_indexes.py::TestPandasMultiIndex::test_concat",
                            "xarray/tests/test_indexes.py::TestPandasMultiIndex::test_stack",
                            "xarray/tests/test_indexes.py::TestPandasMultiIndex::test_stack_non_unique",
                            "xarray/tests/test_indexes.py::TestPandasMultiIndex::test_unstack",
                            "xarray/tests/test_indexes.py::TestPandasMultiIndex::test_create_variables",
                            "xarray/tests/test_indexes.py::TestPandasMultiIndex::test_sel",
                            "xarray/tests/test_indexes.py::TestPandasMultiIndex::test_join",
                            "xarray/tests/test_indexes.py::TestPandasMultiIndex::test_rename",
                            "xarray/tests/test_indexes.py::TestPandasMultiIndex::test_copy",
                            "xarray/tests/test_indexes.py::TestIndexes::test_interface[pd_index]",
                            "xarray/tests/test_indexes.py::TestIndexes::test_interface[xr_index]",
                            "xarray/tests/test_indexes.py::TestIndexes::test_variables[pd_index]",
                            "xarray/tests/test_indexes.py::TestIndexes::test_variables[xr_index]",
                            "xarray/tests/test_indexes.py::TestIndexes::test_dims[pd_index]",
                            "xarray/tests/test_indexes.py::TestIndexes::test_dims[xr_index]",
                            "xarray/tests/test_indexes.py::TestIndexes::test_get_unique[pd_index]",
                            "xarray/tests/test_indexes.py::TestIndexes::test_get_unique[xr_index]",
                            "xarray/tests/test_indexes.py::TestIndexes::test_is_multi[pd_index]",
                            "xarray/tests/test_indexes.py::TestIndexes::test_is_multi[xr_index]",
                            "xarray/tests/test_indexes.py::TestIndexes::test_get_all_coords[pd_index]",
                            "xarray/tests/test_indexes.py::TestIndexes::test_get_all_coords[xr_index]",
                            "xarray/tests/test_indexes.py::TestIndexes::test_get_all_dims[pd_index]",
                            "xarray/tests/test_indexes.py::TestIndexes::test_get_all_dims[xr_index]",
                            "xarray/tests/test_indexes.py::TestIndexes::test_group_by_index[pd_index]",
                            "xarray/tests/test_indexes.py::TestIndexes::test_group_by_index[xr_index]",
                            "xarray/tests/test_indexes.py::TestIndexes::test_to_pandas_indexes[pd_index]",
                            "xarray/tests/test_indexes.py::TestIndexes::test_to_pandas_indexes[xr_index]",
                            "xarray/tests/test_indexes.py::TestIndexes::test_copy_indexes[pd_index]",
                            "xarray/tests/test_indexes.py::TestIndexes::test_copy_indexes[xr_index]",
                            "xarray/tests/test_indexes.py::test_safe_cast_to_index",
                            "xarray/tests/test_utils.py::TestAlias::test",
                            "xarray/tests/test_utils.py::test_maybe_coerce_to_str[a-b-expected0]",
                            "xarray/tests/test_utils.py::test_maybe_coerce_to_str[1-2-expected1]",
                            "xarray/tests/test_utils.py::test_maybe_coerce_to_str_minimal_str_dtype",
                            "xarray/tests/test_utils.py::TestArrayEquiv::test_0d",
                            "xarray/tests/test_utils.py::TestDictionaries::test_equivalent",
                            "xarray/tests/test_utils.py::TestDictionaries::test_safe",
                            "xarray/tests/test_utils.py::TestDictionaries::test_unsafe",
                            "xarray/tests/test_utils.py::TestDictionaries::test_compat_dict_intersection",
                            "xarray/tests/test_utils.py::TestDictionaries::test_compat_dict_union",
                            "xarray/tests/test_utils.py::TestDictionaries::test_dict_equiv",
                            "xarray/tests/test_utils.py::TestDictionaries::test_frozen",
                            "xarray/tests/test_utils.py::test_repr_object",
                            "xarray/tests/test_utils.py::test_repr_object_magic_methods",
                            "xarray/tests/test_utils.py::test_is_remote_uri",
                            "xarray/tests/test_utils.py::Test_is_uniform_and_sorted::test_sorted_uniform",
                            "xarray/tests/test_utils.py::Test_is_uniform_and_sorted::test_sorted_not_uniform",
                            "xarray/tests/test_utils.py::Test_is_uniform_and_sorted::test_not_sorted_uniform",
                            "xarray/tests/test_utils.py::Test_is_uniform_and_sorted::test_not_sorted_not_uniform",
                            "xarray/tests/test_utils.py::Test_is_uniform_and_sorted::test_two_numbers",
                            "xarray/tests/test_utils.py::Test_is_uniform_and_sorted::test_relative_tolerance",
                            "xarray/tests/test_utils.py::Test_hashable::test_hashable",
                            "xarray/tests/test_utils.py::test_hidden_key_dict",
                            "xarray/tests/test_utils.py::test_either_dict_or_kwargs",
                            "xarray/tests/test_utils.py::test_infix_dims[supplied0-all_0-expected0]",
                            "xarray/tests/test_utils.py::test_infix_dims[supplied1-all_1-expected1]",
                            "xarray/tests/test_utils.py::test_infix_dims[supplied2-all_2-expected2]",
                            "xarray/tests/test_utils.py::test_infix_dims[supplied3-all_3-expected3]",
                            "xarray/tests/test_utils.py::test_infix_dims[supplied4-all_4-expected4]",
                            "xarray/tests/test_utils.py::test_infix_dims[supplied5-all_5-expected5]",
                            "xarray/tests/test_utils.py::test_infix_dims_errors[supplied0-all_0]",
                            "xarray/tests/test_utils.py::test_infix_dims_errors[supplied1-all_1]",
                            "xarray/tests/test_utils.py::test_iterate_nested[nested_list0-expected0]",
                            "xarray/tests/test_utils.py::test_iterate_nested[nested_list1-expected1]",
                            "xarray/tests/test_utils.py::test_iterate_nested[nested_list2-expected2]",
                            "xarray/tests/test_utils.py::test_iterate_nested[nested_list3-expected3]",
                            "xarray/tests/test_utils.py::test_iterate_nested[nested_list4-expected4]",
                            "xarray/tests/test_utils.py::test_iterate_nested[nested_list5-expected5]",
                            "xarray/tests/test_variable.py::TestVariable::test_properties",
                            "xarray/tests/test_variable.py::TestVariable::test_attrs",
                            "xarray/tests/test_variable.py::TestVariable::test_getitem_dict",
                            "xarray/tests/test_variable.py::TestVariable::test_getitem_1d",
                            "xarray/tests/test_variable.py::TestVariable::test_getitem_1d_fancy",
                            "xarray/tests/test_variable.py::TestVariable::test_getitem_with_mask",
                            "xarray/tests/test_variable.py::TestVariable::test_getitem_with_mask_size_zero",
                            "xarray/tests/test_variable.py::TestVariable::test_getitem_with_mask_nd_indexer",
                            "xarray/tests/test_variable.py::TestVariable::test_index_0d_int",
                            "xarray/tests/test_variable.py::TestVariable::test_index_0d_float",
                            "xarray/tests/test_variable.py::TestVariable::test_index_0d_string",
                            "xarray/tests/test_variable.py::TestVariable::test_index_0d_not_a_time",
                            "xarray/tests/test_variable.py::TestVariable::test_index_0d_object",
                            "xarray/tests/test_variable.py::TestVariable::test_0d_object_array_with_list",
                            "xarray/tests/test_variable.py::TestVariable::test_index_and_concat_datetime",
                            "xarray/tests/test_variable.py::TestVariable::test_0d_time_data",
                            "xarray/tests/test_variable.py::TestVariable::test_object_conversion",
                            "xarray/tests/test_variable.py::TestVariable::test_pandas_data",
                            "xarray/tests/test_variable.py::TestVariable::test_pandas_period_index",
                            "xarray/tests/test_variable.py::TestVariable::test_1d_math",
                            "xarray/tests/test_variable.py::TestVariable::test_1d_reduce",
                            "xarray/tests/test_variable.py::TestVariable::test_array_interface",
                            "xarray/tests/test_variable.py::TestVariable::test___array__",
                            "xarray/tests/test_variable.py::TestVariable::test_equals_all_dtypes",
                            "xarray/tests/test_variable.py::TestVariable::test_eq_all_dtypes",
                            "xarray/tests/test_variable.py::TestVariable::test_encoding_preserved",
                            "xarray/tests/test_variable.py::TestVariable::test_concat",
                            "xarray/tests/test_variable.py::TestVariable::test_concat_attrs",
                            "xarray/tests/test_variable.py::TestVariable::test_concat_fixed_len_str",
                            "xarray/tests/test_variable.py::TestVariable::test_concat_number_strings",
                            "xarray/tests/test_variable.py::TestVariable::test_concat_mixed_dtypes",
                            "xarray/tests/test_variable.py::TestVariable::test_copy[float-True]",
                            "xarray/tests/test_variable.py::TestVariable::test_copy[float-False]",
                            "xarray/tests/test_variable.py::TestVariable::test_copy[int-True]",
                            "xarray/tests/test_variable.py::TestVariable::test_copy[int-False]",
                            "xarray/tests/test_variable.py::TestVariable::test_copy[str-True]",
                            "xarray/tests/test_variable.py::TestVariable::test_copy[str-False]",
                            "xarray/tests/test_variable.py::TestVariable::test_copy_deep_recursive",
                            "xarray/tests/test_variable.py::TestVariable::test_copy_index",
                            "xarray/tests/test_variable.py::TestVariable::test_copy_with_data",
                            "xarray/tests/test_variable.py::TestVariable::test_copy_with_data_errors",
                            "xarray/tests/test_variable.py::TestVariable::test_copy_index_with_data",
                            "xarray/tests/test_variable.py::TestVariable::test_copy_index_with_data_errors",
                            "xarray/tests/test_variable.py::TestVariable::test_replace",
                            "xarray/tests/test_variable.py::TestVariable::test_real_and_imag",
                            "xarray/tests/test_variable.py::TestVariable::test_aggregate_complex",
                            "xarray/tests/test_variable.py::TestVariable::test_pandas_cateogrical_dtype",
                            "xarray/tests/test_variable.py::TestVariable::test_pandas_datetime64_with_tz",
                            "xarray/tests/test_variable.py::TestVariable::test_multiindex",
                            "xarray/tests/test_variable.py::TestVariable::test_load",
                            "xarray/tests/test_variable.py::TestVariable::test_getitem_advanced",
                            "xarray/tests/test_variable.py::TestVariable::test_getitem_uint_1d",
                            "xarray/tests/test_variable.py::TestVariable::test_getitem_uint",
                            "xarray/tests/test_variable.py::TestVariable::test_getitem_0d_array",
                            "xarray/tests/test_variable.py::TestVariable::test_getitem_fancy",
                            "xarray/tests/test_variable.py::TestVariable::test_getitem_error",
                            "xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg0-np_arg0-mean]",
                            "xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg0-np_arg0-edge]",
                            "xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg0-np_arg0-maximum]",
                            "xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg0-np_arg0-minimum]",
                            "xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg0-np_arg0-symmetric]",
                            "xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg0-np_arg0-wrap]",
                            "xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg1-np_arg1-mean]",
                            "xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg1-np_arg1-edge]",
                            "xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg1-np_arg1-maximum]",
                            "xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg1-np_arg1-minimum]",
                            "xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg1-np_arg1-symmetric]",
                            "xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg1-np_arg1-wrap]",
                            "xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg2-np_arg2-mean]",
                            "xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg2-np_arg2-edge]",
                            "xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg2-np_arg2-maximum]",
                            "xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg2-np_arg2-minimum]",
                            "xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg2-np_arg2-symmetric]",
                            "xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg2-np_arg2-wrap]",
                            "xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg3-np_arg3-mean]",
                            "xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg3-np_arg3-edge]",
                            "xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg3-np_arg3-maximum]",
                            "xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg3-np_arg3-minimum]",
                            "xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg3-np_arg3-symmetric]",
                            "xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg3-np_arg3-wrap]",
                            "xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg4-np_arg4-mean]",
                            "xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg4-np_arg4-edge]",
                            "xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg4-np_arg4-maximum]",
                            "xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg4-np_arg4-minimum]",
                            "xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg4-np_arg4-symmetric]",
                            "xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg4-np_arg4-wrap]",
                            "xarray/tests/test_variable.py::TestVariable::test_pad_constant_values[xr_arg0-np_arg0]",
                            "xarray/tests/test_variable.py::TestVariable::test_pad_constant_values[xr_arg1-np_arg1]",
                            "xarray/tests/test_variable.py::TestVariable::test_pad_constant_values[xr_arg2-np_arg2]",
                            "xarray/tests/test_variable.py::TestVariable::test_pad_constant_values[xr_arg3-np_arg3]",
                            "xarray/tests/test_variable.py::TestVariable::test_pad_constant_values[xr_arg4-np_arg4]",
                            "xarray/tests/test_variable.py::TestVariable::test_rolling_window[x-3]",
                            "xarray/tests/test_variable.py::TestVariable::test_rolling_window[y-5]",
                            "xarray/tests/test_variable.py::TestVariable::test_rolling_1d",
                            "xarray/tests/test_variable.py::TestVariable::test_nd_rolling[dims0-center0]",
                            "xarray/tests/test_variable.py::TestVariable::test_nd_rolling[dims0-center1]",
                            "xarray/tests/test_variable.py::TestVariable::test_nd_rolling[dims1-center0]",
                            "xarray/tests/test_variable.py::TestVariable::test_nd_rolling[dims1-center1]",
                            "xarray/tests/test_variable.py::TestVariable::test_nd_rolling[dims2-center0]",
                            "xarray/tests/test_variable.py::TestVariable::test_nd_rolling[dims2-center1]",
                            "xarray/tests/test_variable.py::TestVariable::test_rolling_window_errors[x-window0-x_w-True]",
                            "xarray/tests/test_variable.py::TestVariable::test_rolling_window_errors[x-3-window_dim1-True]",
                            "xarray/tests/test_variable.py::TestVariable::test_rolling_window_errors[x-3-x_w-center2]",
                            "xarray/tests/test_variable.py::TestVariable::test_data_and_values",
                            "xarray/tests/test_variable.py::TestVariable::test_numpy_same_methods",
                            "xarray/tests/test_variable.py::TestVariable::test_0d_str",
                            "xarray/tests/test_variable.py::TestVariable::test_0d_datetime",
                            "xarray/tests/test_variable.py::TestVariable::test_equals_and_identical",
                            "xarray/tests/test_variable.py::TestVariable::test_broadcast_equals",
                            "xarray/tests/test_variable.py::TestVariable::test_no_conflicts",
                            "xarray/tests/test_variable.py::TestVariable::test_as_variable",
                            "xarray/tests/test_variable.py::TestVariable::test_repr",
                            "xarray/tests/test_variable.py::TestVariable::test_repr_lazy_data",
                            "xarray/tests/test_variable.py::TestVariable::test_detect_indexer_type",
                            "xarray/tests/test_variable.py::TestVariable::test_indexer_type",
                            "xarray/tests/test_variable.py::TestVariable::test_items",
                            "xarray/tests/test_variable.py::TestVariable::test_getitem_basic",
                            "xarray/tests/test_variable.py::TestVariable::test_getitem_with_mask_2d_input",
                            "xarray/tests/test_variable.py::TestVariable::test_isel",
                            "xarray/tests/test_variable.py::TestVariable::test_index_0d_numpy_string",
                            "xarray/tests/test_variable.py::TestVariable::test_indexing_0d_unicode",
                            "xarray/tests/test_variable.py::TestVariable::test_shift[fill_value0]",
                            "xarray/tests/test_variable.py::TestVariable::test_shift[2]",
                            "xarray/tests/test_variable.py::TestVariable::test_shift[2.0]",
                            "xarray/tests/test_variable.py::TestVariable::test_shift2d",
                            "xarray/tests/test_variable.py::TestVariable::test_roll",
                            "xarray/tests/test_variable.py::TestVariable::test_roll_consistency",
                            "xarray/tests/test_variable.py::TestVariable::test_transpose",
                            "xarray/tests/test_variable.py::TestVariable::test_transpose_0d",
                            "xarray/tests/test_variable.py::TestVariable::test_squeeze",
                            "xarray/tests/test_variable.py::TestVariable::test_get_axis_num",
                            "xarray/tests/test_variable.py::TestVariable::test_set_dims",
                            "xarray/tests/test_variable.py::TestVariable::test_set_dims_object_dtype",
                            "xarray/tests/test_variable.py::TestVariable::test_stack",
                            "xarray/tests/test_variable.py::TestVariable::test_stack_errors",
                            "xarray/tests/test_variable.py::TestVariable::test_unstack",
                            "xarray/tests/test_variable.py::TestVariable::test_unstack_errors",
                            "xarray/tests/test_variable.py::TestVariable::test_unstack_2d",
                            "xarray/tests/test_variable.py::TestVariable::test_stack_unstack_consistency",
                            "xarray/tests/test_variable.py::TestVariable::test_broadcasting_math",
                            "xarray/tests/test_variable.py::TestVariable::test_broadcasting_failures",
                            "xarray/tests/test_variable.py::TestVariable::test_inplace_math",
                            "xarray/tests/test_variable.py::TestVariable::test_inplace_math_error",
                            "xarray/tests/test_variable.py::TestVariable::test_reduce",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile[None-None-0.25-True]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile[None-None-0.25-False]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile[None-None-0.25-None]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile[None-None-q1-True]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile[None-None-q1-False]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile[None-None-q1-None]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile[None-None-q2-True]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile[None-None-q2-False]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile[None-None-q2-None]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile[0-x-0.25-True]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile[0-x-0.25-False]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile[0-x-0.25-None]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile[0-x-q1-True]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile[0-x-q1-False]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile[0-x-q1-None]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile[0-x-q2-True]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile[0-x-q2-False]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile[0-x-q2-None]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile[axis2-dim2-0.25-True]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile[axis2-dim2-0.25-False]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile[axis2-dim2-0.25-None]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile[axis2-dim2-q1-True]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile[axis2-dim2-q1-False]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile[axis2-dim2-q1-None]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile[axis2-dim2-q2-True]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile[axis2-dim2-q2-False]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile[axis2-dim2-q2-None]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile[axis3-dim3-0.25-True]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile[axis3-dim3-0.25-False]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile[axis3-dim3-0.25-None]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile[axis3-dim3-q1-True]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile[axis3-dim3-q1-False]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile[axis3-dim3-q1-None]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile[axis3-dim3-q2-True]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile[axis3-dim3-q2-False]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile[axis3-dim3-q2-None]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile_method[False-midpoint]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile_method[False-lower]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile_interpolation_deprecation[midpoint]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile_interpolation_deprecation[lower]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile_out_of_bounds[-0.1]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile_out_of_bounds[1.1]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile_out_of_bounds[q2]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile_out_of_bounds[q3]",
                            "xarray/tests/test_variable.py::TestVariable::test_rank_use_bottleneck",
                            "xarray/tests/test_variable.py::TestVariable::test_big_endian_reduce",
                            "xarray/tests/test_variable.py::TestVariable::test_reduce_funcs",
                            "xarray/tests/test_variable.py::TestVariable::test_reduce_keepdims",
                            "xarray/tests/test_variable.py::TestVariable::test_reduce_keep_attrs",
                            "xarray/tests/test_variable.py::TestVariable::test_binary_ops_keep_attrs",
                            "xarray/tests/test_variable.py::TestVariable::test_count",
                            "xarray/tests/test_variable.py::TestVariable::test_setitem",
                            "xarray/tests/test_variable.py::TestVariable::test_setitem_fancy",
                            "xarray/tests/test_variable.py::TestVariable::test_coarsen",
                            "xarray/tests/test_variable.py::TestVariable::test_coarsen_2d",
                            "xarray/tests/test_variable.py::TestVariable::test_coarsen_keep_attrs",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_properties",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_attrs",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_getitem_dict",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_getitem_1d",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_getitem_1d_fancy",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_getitem_with_mask",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_getitem_with_mask_size_zero",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_getitem_with_mask_nd_indexer",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_index_0d_int",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_index_0d_float",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_index_0d_string",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_index_0d_not_a_time",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_index_0d_object",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_0d_object_array_with_list",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_index_and_concat_datetime",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_0d_time_data",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_object_conversion",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_pandas_data",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_pandas_period_index",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_1d_math",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_1d_reduce",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_array_interface",
                            "xarray/tests/test_variable.py::TestIndexVariable::test___array__",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_equals_all_dtypes",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_eq_all_dtypes",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_encoding_preserved",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_concat",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_concat_attrs",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_concat_fixed_len_str",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_concat_number_strings",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_concat_mixed_dtypes",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_copy[float-True]",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_copy[float-False]",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_copy[int-True]",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_copy[int-False]",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_copy[str-True]",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_copy[str-False]",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_copy_deep_recursive",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_copy_index",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_copy_with_data",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_copy_with_data_errors",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_copy_index_with_data",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_copy_index_with_data_errors",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_replace",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_real_and_imag",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_aggregate_complex",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_pandas_cateogrical_dtype",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_pandas_datetime64_with_tz",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_multiindex",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_load",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_getitem_uint_1d",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_getitem_0d_array",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_init",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_to_index",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_to_index_multiindex_level",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_multiindex_default_level_names",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_data",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_name",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_level_names",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_get_level_variable",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_concat_periods",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_concat_multiindex",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_concat_str_dtype[str]",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_concat_str_dtype[bytes]",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_coordinate_alias",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_datetime64",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_to_index_variable_copy",
                            "xarray/tests/test_variable.py::TestAsCompatibleData::test_unchanged_types",
                            "xarray/tests/test_variable.py::TestAsCompatibleData::test_converted_types",
                            "xarray/tests/test_variable.py::TestAsCompatibleData::test_masked_array",
                            "xarray/tests/test_variable.py::TestAsCompatibleData::test_full_like",
                            "xarray/tests/test_variable.py::TestAsCompatibleData::test_zeros_like",
                            "xarray/tests/test_variable.py::TestAsCompatibleData::test_ones_like",
                            "xarray/tests/test_variable.py::TestAsCompatibleData::test_unsupported_type",
                            "xarray/tests/test_variable.py::test_raise_no_warning_for_nan_in_binary_ops",
                            "xarray/tests/test_variable.py::TestBackendIndexing::test_NumpyIndexingAdapter",
                            "xarray/tests/test_variable.py::TestBackendIndexing::test_LazilyIndexedArray",
                            "xarray/tests/test_variable.py::TestBackendIndexing::test_CopyOnWriteArray",
                            "xarray/tests/test_variable.py::TestBackendIndexing::test_MemoryCachedArray",
                            "xarray/tests/test_variable.py::test_clip",
                            "xarray/tests/test_variable.py::TestNumpyCoercion::test_from_numpy[Variable]",
                            "xarray/tests/test_variable.py::TestNumpyCoercion::test_from_numpy[IndexVariable]"
                        ],
                        "failure": [
                            "xarray/tests/test_dataset.py::TestDataset::test_drop_index_labels",
                            "xarray/tests/test_dataset.py::TestDataset::test_rename_multiindex"
                        ]
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "xarray/tests/test_dataset.py::TestDataset::test_chunk",
                            "xarray/tests/test_dataset.py::TestDataset::test_dask_is_lazy",
                            "xarray/tests/test_dataset.py::TestDataset::test_rename_does_not_change_CFTimeIndex_type",
                            "xarray/tests/test_dataset.py::TestDataset::test_unstack_sparse",
                            "xarray/tests/test_dataset.py::TestDataset::test_from_dataframe_sparse",
                            "xarray/tests/test_dataset.py::TestDataset::test_rank",
                            "xarray/tests/test_dataset.py::TestDataset::test_query[numpy-numexpr-pandas]",
                            "xarray/tests/test_dataset.py::TestDataset::test_query[numpy-numexpr-python]",
                            "xarray/tests/test_dataset.py::TestDataset::test_query[dask-python-pandas]",
                            "xarray/tests/test_dataset.py::TestDataset::test_query[dask-python-python]",
                            "xarray/tests/test_dataset.py::TestDataset::test_query[dask-None-pandas]",
                            "xarray/tests/test_dataset.py::TestDataset::test_query[dask-None-python]",
                            "xarray/tests/test_dataset.py::TestDataset::test_query[dask-numexpr-pandas]",
                            "xarray/tests/test_dataset.py::TestDataset::test_query[dask-numexpr-python]",
                            "xarray/tests/test_dataset.py::test_isin[dask-test_elements0]",
                            "xarray/tests/test_dataset.py::test_isin[dask-test_elements1]",
                            "xarray/tests/test_dataset.py::test_isin[dask-test_elements2]",
                            "xarray/tests/test_dataset.py::test_dir_expected_attrs[dask-3]",
                            "xarray/tests/test_dataset.py::test_dir_non_string[1-dask]",
                            "xarray/tests/test_dataset.py::test_dir_unicode[1-dask]",
                            "xarray/tests/test_dataset.py::test_raise_no_warning_assert_close[dask-2]",
                            "xarray/tests/test_dataset.py::test_differentiate_cftime[True]",
                            "xarray/tests/test_dataset.py::test_differentiate_cftime[False]",
                            "xarray/tests/test_dataset.py::test_cumulative_integrate[True]",
                            "xarray/tests/test_dataset.py::test_cumulative_integrate[False]",
                            "xarray/tests/test_dataset.py::test_trapz_datetime[cftime-True]",
                            "xarray/tests/test_dataset.py::test_trapz_datetime[cftime-False]",
                            "xarray/tests/test_dataset.py::test_clip[1-dask]",
                            "xarray/tests/test_dataset.py::TestNumpyCoercion::test_from_dask",
                            "xarray/tests/test_dataset.py::TestNumpyCoercion::test_from_pint",
                            "xarray/tests/test_dataset.py::TestNumpyCoercion::test_from_sparse",
                            "xarray/tests/test_dataset.py::TestNumpyCoercion::test_from_pint_wrapping_dask",
                            "xarray/tests/test_indexes.py::test_safe_cast_to_index_cftimeindex",
                            "xarray/tests/test_indexes.py::test_safe_cast_to_index_datetime_datetime",
                            "xarray/tests/test_utils.py::test_dask_array_is_scalar",
                            "xarray/tests/test_variable.py::TestVariable::test_index_0d_datetime",
                            "xarray/tests/test_variable.py::TestVariable::test_index_0d_timedelta64",
                            "xarray/tests/test_variable.py::TestVariable::test_datetime64_conversion",
                            "xarray/tests/test_variable.py::TestVariable::test_timedelta64_conversion",
                            "xarray/tests/test_variable.py::TestVariable::test_datetime64_valid_range",
                            "xarray/tests/test_variable.py::TestVariable::test_datetime64_conversion_scalar",
                            "xarray/tests/test_variable.py::TestVariable::test_timedelta64_conversion_scalar",
                            "xarray/tests/test_variable.py::TestVariable::test_0d_timedelta",
                            "xarray/tests/test_variable.py::TestVariable::test_reduce_use_bottleneck",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile_dask[1-y-0.25]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile_dask[1-y-q1]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile_dask[1-y-q2]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile_dask[axis1-dim1-0.25]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile_dask[axis1-dim1-q1]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile_dask[axis1-dim1-q2]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile_method[True-midpoint]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile_method[True-lower]",
                            "xarray/tests/test_variable.py::TestVariable::test_quantile_chunked_dim_error",
                            "xarray/tests/test_variable.py::TestVariable::test_rank_dask_raises",
                            "xarray/tests/test_variable.py::TestVariable::test_rank",
                            "xarray/tests/test_variable.py::TestVariable::test_reduce_keepdims_dask",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_properties",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_attrs",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_getitem_dict",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_getitem_1d",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_getitem_with_mask",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_getitem_with_mask_size_zero",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_index_0d_int",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_index_0d_float",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_index_0d_string",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_index_0d_datetime",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_index_0d_timedelta64",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_index_0d_not_a_time",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_index_0d_object",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_index_and_concat_datetime",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_0d_time_data",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_datetime64_conversion",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_timedelta64_conversion",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_object_conversion",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_datetime64_valid_range",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_pandas_data",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_pandas_period_index",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_1d_math",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_1d_reduce",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test___array__",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_equals_all_dtypes",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_encoding_preserved",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_concat",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_concat_attrs",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_concat_fixed_len_str",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_concat_number_strings",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_concat_mixed_dtypes",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_copy[float-True]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_copy[float-False]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_copy[int-True]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_copy[int-False]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_copy[str-True]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_copy[str-False]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_copy_deep_recursive",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_copy_with_data",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_copy_with_data_errors",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_copy_index_with_data",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_copy_index_with_data_errors",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_replace",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_real_and_imag",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_aggregate_complex",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_pandas_cateogrical_dtype",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_pandas_datetime64_with_tz",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_load",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_getitem_advanced",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_getitem_uint_1d",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_getitem_uint",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_getitem_0d_array",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_getitem_error",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg0-np_arg0-mean]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg0-np_arg0-edge]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg0-np_arg0-maximum]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg0-np_arg0-minimum]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg0-np_arg0-symmetric]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg0-np_arg0-wrap]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg1-np_arg1-mean]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg1-np_arg1-edge]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg1-np_arg1-maximum]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg1-np_arg1-minimum]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg1-np_arg1-symmetric]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg1-np_arg1-wrap]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg2-np_arg2-mean]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg2-np_arg2-edge]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg2-np_arg2-maximum]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg2-np_arg2-minimum]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg2-np_arg2-symmetric]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg2-np_arg2-wrap]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg3-np_arg3-mean]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg3-np_arg3-edge]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg3-np_arg3-maximum]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg3-np_arg3-minimum]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg3-np_arg3-symmetric]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg3-np_arg3-wrap]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg4-np_arg4-mean]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg4-np_arg4-edge]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg4-np_arg4-maximum]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg4-np_arg4-minimum]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg4-np_arg4-symmetric]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg4-np_arg4-wrap]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_pad_constant_values[xr_arg0-np_arg0]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_pad_constant_values[xr_arg1-np_arg1]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_pad_constant_values[xr_arg2-np_arg2]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_pad_constant_values[xr_arg3-np_arg3]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_pad_constant_values[xr_arg4-np_arg4]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_rolling_window[x-3]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_rolling_window[y-5]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_rolling_1d",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_nd_rolling[dims0-center0]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_nd_rolling[dims0-center1]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_nd_rolling[dims1-center0]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_nd_rolling[dims1-center1]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_nd_rolling[dims2-center0]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_nd_rolling[dims2-center1]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_rolling_window_errors[x-window0-x_w-True]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_rolling_window_errors[x-3-window_dim1-True]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_rolling_window_errors[x-3-x_w-center2]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_chunk",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_getitem_fancy",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_getitem_1d_fancy",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_getitem_with_mask_nd_indexer",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_dask_rolling[True-3-x]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_dask_rolling[True-3-y]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_dask_rolling[True-8-x]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_dask_rolling[True-8-y]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_dask_rolling[True-11-x]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_dask_rolling[True-11-y]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_dask_rolling[False-3-x]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_dask_rolling[False-3-y]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_dask_rolling[False-8-x]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_dask_rolling[False-8-y]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_dask_rolling[False-11-x]",
                            "xarray/tests/test_variable.py::TestVariableWithDask::test_dask_rolling[False-11-y]",
                            "xarray/tests/test_variable.py::TestVariableWithSparse::test_as_sparse",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_index_0d_datetime",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_index_0d_timedelta64",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_datetime64_conversion",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_timedelta64_conversion",
                            "xarray/tests/test_variable.py::TestIndexVariable::test_datetime64_valid_range",
                            "xarray/tests/test_variable.py::TestAsCompatibleData::test_datetime",
                            "xarray/tests/test_variable.py::TestAsCompatibleData::test_full_like_dask",
                            "xarray/tests/test_variable.py::TestBackendIndexing::test_DaskIndexingAdapter",
                            "xarray/tests/test_variable.py::TestNumpyCoercion::test_from_dask[Variable]",
                            "xarray/tests/test_variable.py::TestNumpyCoercion::test_from_dask[IndexVariable]",
                            "xarray/tests/test_variable.py::TestNumpyCoercion::test_from_pint[Variable]",
                            "xarray/tests/test_variable.py::TestNumpyCoercion::test_from_pint[IndexVariable]",
                            "xarray/tests/test_variable.py::TestNumpyCoercion::test_from_sparse[Variable]",
                            "xarray/tests/test_variable.py::TestNumpyCoercion::test_from_pint_wrapping_dask[Variable]",
                            "xarray/tests/test_variable.py::TestNumpyCoercion::test_from_pint_wrapping_dask[IndexVariable]"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "psf__requests-3738.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "tests/test_requests.py::TestPreparingURLs::test_url_mutation[http+unix://%2Fvar%2Frun%2Fsocket/path-http+unix://%2fvar%2frun%2fsocket/path0]",
                            "tests/test_requests.py::TestPreparingURLs::test_url_mutation[http+unix://%2Fvar%2Frun%2Fsocket/path-http+unix://%2fvar%2frun%2fsocket/path1]",
                            "tests/test_requests.py::TestPreparingURLs::test_parameters_for_nonstandard_schemes[http+unix://%2Fvar%2Frun%2Fsocket/path-params0-http+unix://%2fvar%2frun%2fsocket/path?key=value]",
                            "tests/test_requests.py::TestPreparingURLs::test_parameters_for_nonstandard_schemes[http+unix://%2Fvar%2Frun%2Fsocket/path-params1-http+unix://%2fvar%2frun%2fsocket/path?key=value]"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "tests/test_requests.py::TestRequests::test_entry_points",
                            "tests/test_requests.py::TestRequests::test_invalid_url[MissingSchema-hiwpefhipowhefopw]",
                            "tests/test_requests.py::TestRequests::test_invalid_url[InvalidSchema-localhost:3128]",
                            "tests/test_requests.py::TestRequests::test_invalid_url[InvalidSchema-localhost.localdomain:3128/]",
                            "tests/test_requests.py::TestRequests::test_invalid_url[InvalidSchema-10.122.1.1:3128/]",
                            "tests/test_requests.py::TestRequests::test_invalid_url[InvalidURL-http://]",
                            "tests/test_requests.py::TestRequests::test_basic_building",
                            "tests/test_requests.py::TestRequests::test_path_is_not_double_encoded",
                            "tests/test_requests.py::TestRequests::test_params_are_added_before_fragment[http://example.com/path#fragment-http://example.com/path?a=b#fragment]",
                            "tests/test_requests.py::TestRequests::test_params_are_added_before_fragment[http://example.com/path?key=value#fragment-http://example.com/path?key=value&a=b#fragment]",
                            "tests/test_requests.py::TestRequests::test_params_original_order_is_preserved_by_default",
                            "tests/test_requests.py::TestRequests::test_params_bytes_are_encoded",
                            "tests/test_requests.py::TestRequests::test_binary_put",
                            "tests/test_requests.py::TestRequests::test_whitespaces_are_removed_from_url",
                            "tests/test_requests.py::TestRequests::test_errors[http://doesnotexist.google.com-ConnectionError]",
                            "tests/test_requests.py::TestRequests::test_errors[http://localhost:1-ConnectionError]",
                            "tests/test_requests.py::TestRequests::test_errors[http://fe80::5054:ff:fe5a:fc0-InvalidURL]",
                            "tests/test_requests.py::TestRequests::test_proxy_error",
                            "tests/test_requests.py::TestRequests::test_non_prepared_request_error",
                            "tests/test_requests.py::TestRequests::test_prepare_request_with_bytestring_url",
                            "tests/test_requests.py::TestRequests::test_links",
                            "tests/test_requests.py::TestRequests::test_cookie_parameters",
                            "tests/test_requests.py::TestRequests::test_cookie_as_dict_keeps_len",
                            "tests/test_requests.py::TestRequests::test_cookie_as_dict_keeps_items",
                            "tests/test_requests.py::TestRequests::test_cookie_as_dict_keys",
                            "tests/test_requests.py::TestRequests::test_cookie_as_dict_values",
                            "tests/test_requests.py::TestRequests::test_cookie_as_dict_items",
                            "tests/test_requests.py::TestRequests::test_cookie_duplicate_names_different_domains",
                            "tests/test_requests.py::TestRequests::test_cookie_duplicate_names_raises_cookie_conflict_error",
                            "tests/test_requests.py::TestRequests::test_empty_response_has_content_none",
                            "tests/test_requests.py::TestRequests::test_response_is_iterable",
                            "tests/test_requests.py::TestRequests::test_response_decode_unicode",
                            "tests/test_requests.py::TestRequests::test_response_reason_unicode",
                            "tests/test_requests.py::TestRequests::test_response_reason_unicode_fallback",
                            "tests/test_requests.py::TestRequests::test_response_chunk_size_type",
                            "tests/test_requests.py::TestRequests::test_http_error",
                            "tests/test_requests.py::TestRequests::test_transport_adapter_ordering",
                            "tests/test_requests.py::TestRequests::test_long_authinfo_in_url",
                            "tests/test_requests.py::TestRequests::test_nonhttp_schemes_dont_check_URLs",
                            "tests/test_requests.py::TestRequests::test_prepare_body_position_non_stream",
                            "tests/test_requests.py::TestRequests::test_rewind_body",
                            "tests/test_requests.py::TestRequests::test_rewind_partially_read_body",
                            "tests/test_requests.py::TestRequests::test_rewind_body_no_seek",
                            "tests/test_requests.py::TestRequests::test_rewind_body_failed_seek",
                            "tests/test_requests.py::TestRequests::test_rewind_body_failed_tell",
                            "tests/test_requests.py::TestRequests::test_basic_auth_str_is_always_native[test-test-Basic",
                            "tests/test_requests.py::TestRequests::test_basic_auth_str_is_always_native[\\xd0\\xb8\\xd0\\xbc\\xd1\\x8f-\\xd0\\xbf\\xd0\\xb0\\xd1\\x80\\xd0\\xbe\\xd0\\xbb\\xd1\\x8c-Basic",
                            "tests/test_requests.py::TestRequests::test_response_without_release_conn",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_init[cid0]",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_init[cid1]",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_init[cid2]",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_docstring_example",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_len",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_getitem",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_fixes_649",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_delitem",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_contains",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_get",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_update",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_update_retains_unchanged",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_iter",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_equality",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_setdefault",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_lower_items",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_preserve_key_case",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_preserve_last_key_case",
                            "tests/test_requests.py::TestCaseInsensitiveDict::test_copy",
                            "tests/test_requests.py::TestMorselToCookieExpires::test_expires_valid_str",
                            "tests/test_requests.py::TestMorselToCookieExpires::test_expires_invalid_int[100-TypeError]",
                            "tests/test_requests.py::TestMorselToCookieExpires::test_expires_invalid_int[woops-ValueError]",
                            "tests/test_requests.py::TestMorselToCookieExpires::test_expires_none",
                            "tests/test_requests.py::TestMorselToCookieMaxAge::test_max_age_valid_int",
                            "tests/test_requests.py::TestMorselToCookieMaxAge::test_max_age_invalid_str",
                            "tests/test_requests.py::TestTimeout::test_connect_timeout",
                            "tests/test_requests.py::TestTimeout::test_total_timeout_connect",
                            "tests/test_requests.py::test_json_encodes_as_bytes",
                            "tests/test_requests.py::test_proxy_env_vars_override_default[http_proxy-http://example.com-socks5://proxy.com:9876]",
                            "tests/test_requests.py::test_proxy_env_vars_override_default[https_proxy-https://example.com-socks5://proxy.com:9876]",
                            "tests/test_requests.py::test_proxy_env_vars_override_default[all_proxy-http://example.com-socks5://proxy.com:9876]",
                            "tests/test_requests.py::test_proxy_env_vars_override_default[all_proxy-https://example.com-socks5://proxy.com:9876]",
                            "tests/test_requests.py::test_data_argument_accepts_tuples[data0]",
                            "tests/test_requests.py::test_data_argument_accepts_tuples[data1]",
                            "tests/test_requests.py::test_data_argument_accepts_tuples[data2]",
                            "tests/test_requests.py::test_prepared_copy[None]",
                            "tests/test_requests.py::test_prepared_copy[kwargs1]",
                            "tests/test_requests.py::test_prepared_copy[kwargs2]",
                            "tests/test_requests.py::test_prepared_copy[kwargs3]",
                            "tests/test_requests.py::test_vendor_aliases",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://google.com-http://google.com/]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://\\u30b8\\u30a7\\u30fc\\u30d4\\u30fc\\u30cb\\u30c3\\u30af.jp-http://xn--hckqz9bzb1cyrb.jp/]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://xn--n3h.net/-http://xn--n3h.net/0]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://\\xe3\\x82\\xb8\\xe3\\x82\\xa7\\xe3\\x83\\xbc\\xe3\\x83\\x94\\xe3\\x83\\xbc\\xe3\\x83\\x8b\\xe3\\x83\\x83\\xe3\\x82\\xaf.jp-http://xn--hckqz9bzb1cyrb.jp/]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://stra\\xdfe.de/stra\\xdfe-http://xn--strae-oqa.de/stra%C3%9Fe]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://stra\\xc3\\x9fe.de/stra\\xc3\\x9fe-http://xn--strae-oqa.de/stra%C3%9Fe]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://K\\xf6nigsg\\xe4\\xdfchen.de/stra\\xdfe-http://xn--knigsgchen-b4a3dun.de/stra%C3%9Fe]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://K\\xc3\\xb6nigsg\\xc3\\xa4\\xc3\\x9fchen.de/stra\\xc3\\x9fe-http://xn--knigsgchen-b4a3dun.de/stra%C3%9Fe]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://xn--n3h.net/-http://xn--n3h.net/1]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://[1200:0000:ab00:1234:0000:2552:7777:1313]:12345/-http://[1200:0000:ab00:1234:0000:2552:7777:1313]:12345/0]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_url[http://[1200:0000:ab00:1234:0000:2552:7777:1313]:12345/-http://[1200:0000:ab00:1234:0000:2552:7777:1313]:12345/1]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_bad_url[http://*.google.com0]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_bad_url[http://*0]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_bad_url[http://*.google.com1]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_bad_url[http://*1]",
                            "tests/test_requests.py::TestPreparingURLs::test_preparing_bad_url[http://\\u2603.net/]",
                            "tests/test_requests.py::TestPreparingURLs::test_url_mutation[mailto:user@example.org-mailto:user@example.org0]",
                            "tests/test_requests.py::TestPreparingURLs::test_url_mutation[mailto:user@example.org-mailto:user@example.org1]",
                            "tests/test_requests.py::TestPreparingURLs::test_url_mutation[data:SSDimaUgUHl0aG9uIQ==-data:SSDimaUgUHl0aG9uIQ==]",
                            "tests/test_requests.py::TestPreparingURLs::test_parameters_for_nonstandard_schemes[mailto:user@example.org-params2-mailto:user@example.org]",
                            "tests/test_requests.py::TestPreparingURLs::test_parameters_for_nonstandard_schemes[mailto:user@example.org-params3-mailto:user@example.org]"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "pydata__xarray-5580.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "xarray/tests/test_formatting.py::test__mapping_repr[35-40-30]",
                            "xarray/tests/test_formatting.py::test__mapping_repr[11-40-30]",
                            "xarray/tests/test_formatting.py::test__mapping_repr[1-40-30]"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "xarray/tests/test_formatting.py::TestFormatting::test_get_indexer_at_least_n_items",
                            "xarray/tests/test_formatting.py::TestFormatting::test_first_n_items",
                            "xarray/tests/test_formatting.py::TestFormatting::test_last_n_items",
                            "xarray/tests/test_formatting.py::TestFormatting::test_last_item",
                            "xarray/tests/test_formatting.py::TestFormatting::test_format_item",
                            "xarray/tests/test_formatting.py::TestFormatting::test_format_items",
                            "xarray/tests/test_formatting.py::TestFormatting::test_format_array_flat",
                            "xarray/tests/test_formatting.py::TestFormatting::test_pretty_print",
                            "xarray/tests/test_formatting.py::TestFormatting::test_maybe_truncate",
                            "xarray/tests/test_formatting.py::TestFormatting::test_format_timestamp_out_of_bounds",
                            "xarray/tests/test_formatting.py::TestFormatting::test_attribute_repr",
                            "xarray/tests/test_formatting.py::TestFormatting::test_diff_array_repr",
                            "xarray/tests/test_formatting.py::TestFormatting::test_diff_dataset_repr",
                            "xarray/tests/test_formatting.py::TestFormatting::test_array_repr",
                            "xarray/tests/test_formatting.py::TestFormatting::test_array_repr_variable",
                            "xarray/tests/test_formatting.py::test_inline_variable_array_repr_custom_repr",
                            "xarray/tests/test_formatting.py::test_set_numpy_options",
                            "xarray/tests/test_formatting.py::test_short_numpy_repr",
                            "xarray/tests/test_formatting.py::test_large_array_repr_length",
                            "xarray/tests/test_formatting.py::test_repr_file_collapsed",
                            "xarray/tests/test_formatting.py::test__mapping_repr[50-40-30]"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "sphinx-doc__sphinx-8611.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "tests/test_ext_autodoc_events.py::test_process_docstring_for_nondatadescriptor"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "tests/test_ext_autodoc_events.py::test_process_docstring",
                            "tests/test_ext_autodoc_events.py::test_cut_lines",
                            "tests/test_ext_autodoc_events.py::test_between",
                            "tests/test_ext_autodoc_events.py::test_between_exclude",
                            "tests/test_ext_autodoc_events.py::test_skip_module_member"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                },
                "astropy__astropy-14995.gold.eval.log": {
                    "FAIL_TO_PASS": {
                        "success": [
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_nddata_bitmask_arithmetic"
                        ],
                        "failure": []
                    },
                    "PASS_TO_PASS": {
                        "success": [
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_data[data10-data20]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_data[data11-data21]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_data[data12-data22]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_data[data13-data23]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_data[data14-data24]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_data[data15-data25]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_data[data16-data26]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_data_invalid",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_data_unit_identical[data10-data20]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_data_unit_identical[data11-data21]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_data_unit_identical[data12-data22]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_data_unit_identical[data13-data23]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_data_unit_identical[data14-data24]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_data_unit_identical[data15-data25]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_data_unit_identical[data16-data26]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_data_unit_identical[data17-data27]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_data_unit_not_identical[data10-data20]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_data_unit_not_identical[data11-data21]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_data_unit_not_identical[data12-data22]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_data_unit_not_identical[data13-data23]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_data_wcs[None-None]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_data_wcs[None-wcs21]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_data_wcs[wcs12-None]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_data_wcs[wcs13-wcs23]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_data_wcs[wcs14-wcs24]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_data_masks[None-None]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_data_masks[None-False]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_data_masks[True-None]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_data_masks[False-False]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_data_masks[True-False]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_data_masks[False-True]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_data_masks[True-True]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_data_masks[mask17-mask27]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_data_masks[mask18-mask28]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_data_masks[mask19-mask29]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_data_masks[mask110-mask210]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_data_masks[mask111-mask211]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_data_masks[mask112-mask212]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_data_masks_invalid",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_stddevuncertainty_basic",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_stddevuncertainty_basic_with_correlation[-1-uncert10-data20]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_stddevuncertainty_basic_with_correlation[-0.5-uncert11-data21]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_stddevuncertainty_basic_with_correlation[-0.25-uncert12-data22]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_stddevuncertainty_basic_with_correlation[0-uncert13-data23]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_stddevuncertainty_basic_with_correlation[0.25-uncert14-data24]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_stddevuncertainty_basic_with_correlation[0.5-uncert15-data25]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_stddevuncertainty_basic_with_correlation[1-uncert16-data26]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_stddevuncertainty_basic_with_correlation[-1-uncert17-data27]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_stddevuncertainty_basic_with_correlation[-0.5-uncert18-data28]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_stddevuncertainty_basic_with_correlation[-0.25-uncert19-data29]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_stddevuncertainty_basic_with_correlation[0-uncert110-data210]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_stddevuncertainty_basic_with_correlation[0.25-uncert111-data211]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_stddevuncertainty_basic_with_correlation[0.5-uncert112-data212]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_stddevuncertainty_basic_with_correlation[1-uncert113-data213]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_stddevuncertainty_basic_with_correlation[-1-uncert114-data214]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_stddevuncertainty_basic_with_correlation[-0.5-uncert115-data215]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_stddevuncertainty_basic_with_correlation[-0.25-uncert116-data216]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_stddevuncertainty_basic_with_correlation[0-uncert117-data217]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_stddevuncertainty_basic_with_correlation[0.25-uncert118-data218]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_stddevuncertainty_basic_with_correlation[0.5-uncert119-data219]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_stddevuncertainty_basic_with_correlation[1-uncert120-data220]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_stddevuncertainty_basic_with_correlation[-1-uncert121-data221]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_stddevuncertainty_basic_with_correlation[-0.5-uncert122-data222]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_stddevuncertainty_basic_with_correlation[-0.25-uncert123-data223]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_stddevuncertainty_basic_with_correlation[0-uncert124-data224]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_stddevuncertainty_basic_with_correlation[0.25-uncert125-data225]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_stddevuncertainty_basic_with_correlation[0.5-uncert126-data226]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_stddevuncertainty_basic_with_correlation[1-uncert127-data227]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_varianceuncertainty_basic_with_correlation[-1-uncert10-data20]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_varianceuncertainty_basic_with_correlation[-0.5-uncert11-data21]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_varianceuncertainty_basic_with_correlation[-0.25-uncert12-data22]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_varianceuncertainty_basic_with_correlation[0-uncert13-data23]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_varianceuncertainty_basic_with_correlation[0.25-uncert14-data24]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_varianceuncertainty_basic_with_correlation[0.5-uncert15-data25]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_varianceuncertainty_basic_with_correlation[1-uncert16-data26]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_varianceuncertainty_basic_with_correlation[-1-uncert17-data27]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_varianceuncertainty_basic_with_correlation[-0.5-uncert18-data28]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_varianceuncertainty_basic_with_correlation[-0.25-uncert19-data29]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_varianceuncertainty_basic_with_correlation[0-uncert110-data210]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_varianceuncertainty_basic_with_correlation[0.25-uncert111-data211]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_varianceuncertainty_basic_with_correlation[0.5-uncert112-data212]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_varianceuncertainty_basic_with_correlation[1-uncert113-data213]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_varianceuncertainty_basic_with_correlation[-1-uncert114-data214]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_varianceuncertainty_basic_with_correlation[-0.5-uncert115-data215]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_varianceuncertainty_basic_with_correlation[-0.25-uncert116-data216]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_varianceuncertainty_basic_with_correlation[0-uncert117-data217]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_varianceuncertainty_basic_with_correlation[0.25-uncert118-data218]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_varianceuncertainty_basic_with_correlation[0.5-uncert119-data219]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_varianceuncertainty_basic_with_correlation[1-uncert120-data220]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_varianceuncertainty_basic_with_correlation[-1-uncert121-data221]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_varianceuncertainty_basic_with_correlation[-0.5-uncert122-data222]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_varianceuncertainty_basic_with_correlation[-0.25-uncert123-data223]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_varianceuncertainty_basic_with_correlation[0-uncert124-data224]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_varianceuncertainty_basic_with_correlation[0.25-uncert125-data225]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_varianceuncertainty_basic_with_correlation[0.5-uncert126-data226]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_varianceuncertainty_basic_with_correlation[1-uncert127-data227]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_inversevarianceuncertainty_basic_with_correlation[-1-uncert10-data20]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_inversevarianceuncertainty_basic_with_correlation[-0.5-uncert11-data21]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_inversevarianceuncertainty_basic_with_correlation[-0.25-uncert12-data22]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_inversevarianceuncertainty_basic_with_correlation[0-uncert13-data23]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_inversevarianceuncertainty_basic_with_correlation[0.25-uncert14-data24]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_inversevarianceuncertainty_basic_with_correlation[0.5-uncert15-data25]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_inversevarianceuncertainty_basic_with_correlation[1-uncert16-data26]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_inversevarianceuncertainty_basic_with_correlation[-1-uncert17-data27]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_inversevarianceuncertainty_basic_with_correlation[-0.5-uncert18-data28]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_inversevarianceuncertainty_basic_with_correlation[-0.25-uncert19-data29]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_inversevarianceuncertainty_basic_with_correlation[0-uncert110-data210]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_inversevarianceuncertainty_basic_with_correlation[0.25-uncert111-data211]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_inversevarianceuncertainty_basic_with_correlation[0.5-uncert112-data212]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_inversevarianceuncertainty_basic_with_correlation[1-uncert113-data213]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_inversevarianceuncertainty_basic_with_correlation[-1-uncert114-data214]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_inversevarianceuncertainty_basic_with_correlation[-0.5-uncert115-data215]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_inversevarianceuncertainty_basic_with_correlation[-0.25-uncert116-data216]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_inversevarianceuncertainty_basic_with_correlation[0-uncert117-data217]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_inversevarianceuncertainty_basic_with_correlation[0.25-uncert118-data218]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_inversevarianceuncertainty_basic_with_correlation[0.5-uncert119-data219]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_inversevarianceuncertainty_basic_with_correlation[1-uncert120-data220]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_inversevarianceuncertainty_basic_with_correlation[-1-uncert121-data221]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_inversevarianceuncertainty_basic_with_correlation[-0.5-uncert122-data222]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_inversevarianceuncertainty_basic_with_correlation[-0.25-uncert123-data223]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_inversevarianceuncertainty_basic_with_correlation[0-uncert124-data224]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_inversevarianceuncertainty_basic_with_correlation[0.25-uncert125-data225]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_inversevarianceuncertainty_basic_with_correlation[0.5-uncert126-data226]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_inversevarianceuncertainty_basic_with_correlation[1-uncert127-data227]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_stddevuncertainty_basic_with_correlation_array",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_with_correlation_unsupported",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_stddevuncertainty_one_missing",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_stddevuncertainty_with_units[uncert10-None]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_stddevuncertainty_with_units[uncert11-None]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_stddevuncertainty_with_units[None-uncert22]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_stddevuncertainty_with_units[None-uncert23]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_stddevuncertainty_with_units[uncert14-uncert24]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_stddevuncertainty_with_units[uncert15-uncert25]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_stddevuncertainty_with_units[uncert16-uncert26]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_stddevuncertainty_with_units[uncert17-uncert27]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_stddevuncertainty_with_units[uncert18-uncert28]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_stddevuncertainty_with_units[uncert19-uncert29]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_stddevuncertainty_with_units[uncert110-uncert210]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_stddevuncertainty_with_units[uncert111-uncert211]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_varianceuncertainty_with_units[uncert10-None]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_varianceuncertainty_with_units[uncert11-None]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_varianceuncertainty_with_units[None-uncert22]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_varianceuncertainty_with_units[None-uncert23]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_varianceuncertainty_with_units[uncert14-uncert24]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_varianceuncertainty_with_units[uncert15-uncert25]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_varianceuncertainty_with_units[uncert16-uncert26]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_varianceuncertainty_with_units[uncert17-uncert27]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_varianceuncertainty_with_units[uncert18-uncert28]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_varianceuncertainty_with_units[uncert19-uncert29]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_varianceuncertainty_with_units[uncert110-uncert210]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_varianceuncertainty_with_units[uncert111-uncert211]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_inversevarianceuncertainty_with_units[uncert10-None]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_inversevarianceuncertainty_with_units[uncert11-None]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_inversevarianceuncertainty_with_units[None-uncert22]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_inversevarianceuncertainty_with_units[None-uncert23]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_inversevarianceuncertainty_with_units[uncert14-uncert24]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_inversevarianceuncertainty_with_units[uncert15-uncert25]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_inversevarianceuncertainty_with_units[uncert16-uncert26]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_inversevarianceuncertainty_with_units[uncert17-uncert27]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_inversevarianceuncertainty_with_units[uncert18-uncert28]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_inversevarianceuncertainty_with_units[uncert19-uncert29]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_inversevarianceuncertainty_with_units[uncert110-uncert210]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_inversevarianceuncertainty_with_units[uncert111-uncert211]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_handle_switches[ff]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_handle_switches[first_found]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_meta_func",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_wcs_func",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_mask_func",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_two_argument_useage[add]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_two_argument_useage[subtract]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_two_argument_useage[divide]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_two_argument_useage[multiply]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_two_argument_useage_non_nddata_first_arg[add]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_two_argument_useage_non_nddata_first_arg[subtract]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_two_argument_useage_non_nddata_first_arg[divide]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_two_argument_useage_non_nddata_first_arg[multiply]",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_arithmetics_unknown_uncertainties",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_psf_warning",
                            "astropy/nddata/mixins/tests/test_ndarithmetic.py::test_raise_method_not_supported"
                        ],
                        "failure": []
                    },
                    "FAIL_TO_FAIL": {
                        "success": [],
                        "failure": []
                    },
                    "PASS_TO_FAIL": {
                        "success": [],
                        "failure": []
                    }
                }
            },
            {}
        ],
        "case_resolution_counts": {
            "RESOLVED_FULL": 116,
            "RESOLVED_NO": 9,
            "RESOLVED_PARTIAL": 1
        },
        "case_resolution_rates": {
            "RESOLVED_FULL": 92.06,
            "RESOLVED_NO": 7.14,
            "RESOLVED_PARTIAL": 0.79
        }
    }
}